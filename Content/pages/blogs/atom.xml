<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><subtitle type="text">Real World Functional Programming</subtitle><link href="http://ocaml.io/blogs/atom.xml" rel="self"/><author><name>OCaml Labs</name></author><id>http://ocaml.io/blogs/atom.xml</id><title type="text">OCaml Labs Blogs</title><updated>2015-07-01T14:01:30+00:00</updated><entry><link href="https://mirage.io/blog/bitcoin-pinata-results" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;TL;DR: Nobody took our BTC.  Random people from the Internet even donated
into our BTC wallet.
We showed the feasibility of a
transparent self-service bounty.  In the style of Dijkstra: security
bounties can be a very effective way to show the presence of
vulnerabilities, but they are hopelessly inadequate for showing their
absence.&lt;/p&gt;
&lt;h4&gt;What are you talking about?&lt;/h4&gt;

&lt;p&gt;Earlier this year, we &lt;a href=&quot;https://mirage.io/blog/announcing-bitcoin-pinata&quot;&gt;released a Bitcoin Pi&amp;ntilde;ata&lt;/a&gt;.
The &lt;a href=&quot;http://ownme.ipredator.se&quot;&gt;Pi&amp;ntilde;ata&lt;/a&gt; was a security bounty
containing 10 BTC and it's been online since 10th February 2015.
Upon successful
mutual authentication, where the Pi&amp;ntilde;ata has only a single trust anchor, it sends the
private key to the Bitcoin address.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mirleft/btc-pinata&quot;&gt;It is open source&lt;/a&gt;,
and exposes both the client and server side of
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;ocaml-tls&lt;/a&gt;, running as an 8.2MB
&lt;a href=&quot;http://openmirage.org&quot;&gt;MirageOS&lt;/a&gt; unikernel.  You can see the &lt;a href=&quot;https://github.com/mirleft/btc-pinata/blob/master/opam-full.txt&quot;&gt;code manifest&lt;/a&gt; to find out which libraries are involved.  We put this online and invited people to attack it.&lt;/p&gt;
&lt;p&gt;Any approach was permitted in attacking the Pi&amp;ntilde;ata:
the host system, the MirageOS &lt;a href=&quot;https://github.com/mirage/mirage-tcpip&quot;&gt;TCP/IP
stack&lt;/a&gt;, our TLS,
X.509 and ASN.1 implementations, as well as the Pi&amp;ntilde;ata code.
A successful attacker could do whatever they want with the BTC, no
questions asked (though we would &lt;a href=&quot;https://blockchain.info/address/183XuXTTgnfYfKcHbJ4sZeF46a49Fnihdh&quot;&gt;notice the transaction&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The exposed server could even be short-circuited to the exposed
client: you could proxy a TLS connection in which the (encrypted!)
secret was transmitted via your machine.&lt;/p&gt;
&lt;p&gt;This post summarises what we've seen so far and what we've learned about attempts people have made to take the BTC.&lt;/p&gt;
&lt;h4&gt;Accesses&lt;/h4&gt;

&lt;p&gt;There were 50,000 unique IP addresses who accessed the website.
1000 unique IP addresses initiated more than 20,000 TLS
connections to the Pi&amp;ntilde;ata, trying to break it.  Cumulative numbers of
the HTTP and TLS accesses are shown in the diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://openmirage.org/graphics/pinata_access.png&quot; alt=&quot;Cumulative Pi&amp;ntilde;ata accesses&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There were more than 9000 failing and 12000 successful TLS sessions,
comprised of short-circuits described earlier, and our own tests.&lt;/p&gt;
&lt;p&gt;No X.509 certificate was presented in 1200 of the failed TLS
connections.  Another 1000 failed due to invalid input as the first
bytes.  This includes attempts using telnet &amp;mdash; I'm looking at you,
xx.xxx.74.126 &lt;code&gt;please give key&lt;/code&gt; (on 10th February at 16:00) and
xx.xxx.166.143 &lt;code&gt;hi give me teh btcs&lt;/code&gt; (on 11th February at 05:57)!&lt;/p&gt;
&lt;h4&gt;We are not talking to everybody&lt;/h4&gt;

&lt;p&gt;Our implementation first parses the record version of a client hello,
and if it fails, an unknown record version is reported.  This happened
in 10% of all TLS connections (including the 1000 with invalid input in the
last section).&lt;/p&gt;
&lt;p&gt;Another big class, 6%, were attempted Heartbeat packets (popular due
to &lt;a href=&quot;https://en.wikipedia.org/wiki/Heartbleed&quot;&gt;Heartbleed&lt;/a&gt;), which we
do not implement.&lt;/p&gt;
&lt;p&gt;Recently, issues in the state machines of TLS implementations were
published in &lt;a href=&quot;http://smacktls.com&quot;&gt;smacktls&lt;/a&gt; (and &lt;a href=&quot;http://ccsinjection.lepidum.co.jp/&quot;&gt;CCS
injection&lt;/a&gt;).  3% of the Pi&amp;ntilde;ata connections
received an unexpected handshake record at some point, which the Pi&amp;ntilde;ata handled
correctly by shutting down the connection.&lt;/p&gt;
&lt;p&gt;In 2009, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security#Renegotiation_attack&quot;&gt;renegotiation
attack&lt;/a&gt;
on the TLS protocol was published, which allowed a person in the
middle to inject prefix bytes, because a renegotiated handshake was
not authenticated with data from the previous handshake.  OCaml-TLS
closes a connection if the &lt;a href=&quot;https://tools.ietf.org/html/rfc5746&quot;&gt;renegotiation
extension&lt;/a&gt; is not present, which
happened in 2% of the connections.
Another 2% did not propose a ciphersuite supported by OCaml-TLS; yet
another 2% tried to talk SSL version 3 with us, which we do not
implement (for &lt;a href=&quot;https://tools.ietf.org/html/rfc7568&quot;&gt;good reasons&lt;/a&gt;, such as
&lt;a href=&quot;https://www.us-cert.gov/ncas/alerts/TA14-290A&quot;&gt;POODLE&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In various other (old versions of) TLS implementations, these
connections would have been successful and insecure!&lt;/p&gt;
&lt;h4&gt;Attempts worth noting&lt;/h4&gt;

&lt;p&gt;Interesting failures were: 31 connections which sent too many or too
few bytes, leading to parse errors.&lt;/p&gt;
&lt;p&gt;TLS requires each communication partner who authenticates themselves to
present a certificate.  To prove ownership of the private key of the
certificate, a hash of the concatenated handshake records needs to be
signed and transmitted over the wire.  22 of our TLS traces had
invalid signatures.  Not verifying such signatures was the problem of Apple's famous &lt;a href=&quot;https://www.imperialviolet.org/2014/02/22/applebug.html&quot;&gt;goto
fail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another 100 failure traces tested our X.509 validation:
The majority of these failures (58) sent us certificates which were not signed by our trust
anchor, such as &lt;code&gt;CN=hacker/emailAddress=hacker@hacker&lt;/code&gt; and &lt;code&gt;CN=Google
Internal SNAX Authority&lt;/code&gt; and various Apple and Google IDs -- we're still trying to figure out what SNAX is, Systems Network Architecture maybe?&lt;/p&gt;
&lt;p&gt;Several certificates contained invalid X.509 extensions: we require
that a server certificate does not contain the &lt;code&gt;BasicConstraints =
true&lt;/code&gt; extension, which marks this certificate as certificate
authority, allowing to sign other certificates.  While not explicitly
forbidden, best practices (e.g. from
&lt;a href=&quot;https://wiki.mozilla.org/SecurityEngineering/mozpkix-testing#Behavior_Changes&quot;&gt;Mozilla&lt;/a&gt;)
reject them.  Any sensible systems administrator would not accept a CA
as a server certificate.&lt;/p&gt;
&lt;p&gt;Several other certificates were self-signed or contained an invalid
signature: one certificate was our client certificate, but with a
different RSA public key, thus the signature on the certificate was
invalid; another one had a different RSA public key, and the signature
was zeroed out.&lt;/p&gt;
&lt;p&gt;Some certificates were not of X.509 version 3, or were expired.
Several certificate chains were not pairwise signed, a &lt;a href=&quot;https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html&quot;&gt;common attack
vector&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two traces contained certificate structures which our ASN.1 parser
rejected.&lt;/p&gt;
&lt;p&gt;Another two connections (both initiated by ourselves) threw an
exception which lead to &lt;a href=&quot;https://github.com/mirleft/btc-pinata/blob/master/logger.ml#L116&quot;&gt;shutdown of the connection&lt;/a&gt;: there
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls/commit/80117871679d57dde8c8e3b73392024ef4b42c38&quot;&gt;was&lt;/a&gt;
an out-of-bounds access while parsing handshake records.  This did not
lead to arbitrary code execution.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;The BTC Pi&amp;ntilde;ata was the first transparent self-service bounty, and it
was a success: people showed interest in the topic; some even donated
BTC; we enjoyed setting it up and running it; we fixed a non-critical
out of bounds access in our implementation; a large fraction of our
stack has been covered by the recorded traces.&lt;/p&gt;
&lt;p&gt;There are several points to improve a future Pi&amp;ntilde;ata: attestation that the code
running is the open sourced code, attestation that the service owns
the private key (maybe by doing transactions or signatures with input
from any user).&lt;/p&gt;
&lt;p&gt;There are several applications using OCaml-TLS, using MirageOS as well
as Unix:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-seal&quot;&gt;mirage-seal&lt;/a&gt; compiles to
a unikernel container which serves a given directory over https;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/hannesm/tlstunnel&quot;&gt;tlstunnel&lt;/a&gt; is a
(&lt;a href=&quot;https://github.com/bumptech/stud&quot;&gt;stud&lt;/a&gt; like) TLS proxy, forwarding
to a backend server;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/hannesm/jackline&quot;&gt;jackline&lt;/a&gt; is a
(alpha version) terminal-based XMPP client;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/ocaml-conduit&quot;&gt;conduit&lt;/a&gt; is an abstraction
over network connections -- to make it use OCaml-TLS, set
&lt;code&gt;CONDUIT_TLS=native&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Again, a big thank you to &lt;a href=&quot;https://ipredator.se&quot;&gt;IPredator&lt;/a&gt; for
hosting our BTC Pi&amp;ntilde;ata and lending us the BTC!&lt;/p&gt;

   </content><id>https://mirage.io/blog/bitcoin-pinata-results</id><title type="text">Reviewing the Bitcoin Pinata</title><updated>2015-06-29T16:00:00+00:00</updated><author><email></email><name>Hannes Mehnert</name></author></entry><entry><link href="https://mirage.io/blog/announcing-mirage-25-release" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;Today we're announcing the new release of MirageOS v2.5, which includes
first-class support for SSL/TLS in the MirageOS configuration language. We
introduced the pure OCaml implementation of
&lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;transport layer security (TLS)&lt;/a&gt; last summer and have been working since
then to improve the integration and create a robust framework.  The recent
releases allow developers to easily build and deploy secure unikernel services
and we've also incorporated numerous bug-fixes and major stability
improvements (especially in the network stack).  The full list of changes is
available on the &lt;a href=&quot;http://openmirage.org/releases&quot;&gt;releases&lt;/a&gt; page and the &lt;a href=&quot;http://openmirage.org/wiki/breaking-changes&quot;&gt;breaking API changes&lt;/a&gt;
now have their own page.&lt;/p&gt;
&lt;p&gt;Over the coming week, we'll share more about the TLS stack by diving into the
results of the &lt;a href=&quot;http://openmirage.org/blog/announcing-bitcoin-pinata&quot;&gt;Bitcoin Pi&amp;ntilde;ata&lt;/a&gt;, describing a new workflow for
building secure static sites, and discussing insights on entropy in
virtualised environments.&lt;/p&gt;
&lt;p&gt;In the rest of this post, we'll cover why OCaml-TLS matters (and link to some
tools), mention our new domain name, and mention our security advisory
process.&lt;/p&gt;
&lt;h3&gt;Why OCaml-TLS matters&lt;/h3&gt;

&lt;p&gt;The last year has seen a slew of security flaws, which are even reaching the
mainstream news.  This history of flaws are often the result of implementation
errors and stem from the underlying challenges of interpreting ambiguous
specifications, the complexities of large APIs and code bases, and the use of
unsafe programming practices.  Re-engineering security-critical software
allows the opportunity to use modern approaches to prevent these recurring
issues. In a &lt;a href=&quot;http://openmirage.org/blog/why-ocaml-tls&quot;&gt;separate post&lt;/a&gt;, we cover some of the benefits of
re-engineering TLS in OCaml.&lt;/p&gt;
&lt;h4&gt;TLS Unix Tools&lt;/h4&gt;

&lt;p&gt;To make it even easier to start benefiting from OCaml-TLS, we've also made a
collection of &lt;a href=&quot;http://openmirage.org/wiki/tls-unix&quot;&gt;TLS unix tools&lt;/a&gt;.  These are designed to make it
really easy to use a good portion of the stack without having to use Xen. For
example, Unix &lt;code&gt;tlstunnel&lt;/code&gt; is being used on &lt;a href=&quot;https://realworldocaml.org&quot;&gt;https://realworldocaml.org&lt;/a&gt;. If
you have &lt;code&gt;stunnel&lt;/code&gt; or &lt;code&gt;stud&lt;/code&gt; in use somewhere, then replacing it with the 
&lt;code&gt;tlstunnel&lt;/code&gt; binary is an easy way to try things out.  Please do give this a go
and send us feedback!&lt;/p&gt;
&lt;h3&gt;openmirage.org -&amp;gt; mirage.io&lt;/h3&gt;

&lt;p&gt;We've also switched our domain over to &lt;strong&gt;&lt;a href=&quot;https://mirage.io&quot;&gt;https://mirage.io&lt;/a&gt;&lt;/strong&gt;, which is a
unikernel running the full stack. We've been discussing this transition for a
while on our &lt;a href=&quot;http://openmirage.org/wiki/#Weeklycallsandreleasenotes&quot;&gt;fortnightly calls&lt;/a&gt; and have actually been running this
unikernel in parallel for a while. Setting things up this way has allowed us
to stress test things in the wild and we've made big improvements to the
networking stack as a result.&lt;/p&gt;
&lt;p&gt;We now have end-to-end deployments for our secure-site unikernels, which is
largely automated -- going from &lt;code&gt;git push&lt;/code&gt; all the way to live site. You can
get an idea of the workflows we have set up by looking over the following
links:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://amirchaudhry.com/heroku-for-unikernels-pt1/&quot;&gt;Automated unikernel deployment&lt;/a&gt; -- Description of the end-to-end flow for one of our sites.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-www-deployment&quot;&gt;mirage-www-deployment repo&lt;/a&gt; -- The repo from which we pull the site you're currently reading! You might find the scripts useful.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Security disclosure process&lt;/h3&gt;

&lt;p&gt;Since we're incorporating more security features, it's important to consider
the process of disclosing issues to us.  Many bugs can be reported as usual on
our &lt;a href=&quot;https://github.com/mirage/mirage/issues&quot;&gt;issue tracker&lt;/a&gt; but if you think you've discovered a
&lt;strong&gt;security vulnerability&lt;/strong&gt;, the best way to inform us is described on a new
page at &lt;strong&gt;&lt;a href=&quot;https://mirage.io/security&quot;&gt;https://mirage.io/security&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Get started!&lt;/h3&gt;

&lt;p&gt;As usual, MirageOS v2.5 and the its ever-growing collection of
libraries is packaged with the &lt;a href=&quot;https://opam.ocaml.org&quot;&gt;OPAM&lt;/a&gt; package
manager, so look over the &lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;installation instructions&lt;/a&gt;
and run &lt;code&gt;opam install mirage&lt;/code&gt; to get the command-line
tool. To update from a previously installed version of MirageOS,
simply use the normal workflow to upgrade your packages by using &lt;code&gt;opam
update -u&lt;/code&gt; (you should do this regularly to benefit from ongoing fixes).
If you're looking for inspiration, you can check out the examples on
&lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton&lt;/a&gt; or ask on the &lt;a href=&quot;http://openmirage.org/community&quot;&gt;mailing list&lt;/a&gt;. Please do be aware
that existing &lt;code&gt;config.ml&lt;/code&gt; files using
the &lt;code&gt;conduit&lt;/code&gt; and &lt;code&gt;http&lt;/code&gt; constructors might need to be updated -- we've made a
page of &lt;a href=&quot;http://openmirage.org/wiki/breaking-changes&quot;&gt;backward incompatible changes&lt;/a&gt; to explain what you need to
do.&lt;/p&gt;
&lt;p&gt;We would love to hear your feedback on this release, either on our
&lt;a href=&quot;https://github.com/mirage/mirage/issues&quot;&gt;issue tracker&lt;/a&gt; or &lt;a href=&quot;http://openmirage.org/community&quot;&gt;our mailing lists&lt;/a&gt;!&lt;/p&gt;

   </content><id>https://mirage.io/blog/announcing-mirage-25-release</id><title type="text">MirageOS v2.5 with full TLS support</title><updated>2015-06-26T16:00:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="https://mirage.io/blog/why-ocaml-tls" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;TLS implementations have a history of security flaws, which are often the
result of implementation errors.  These security flaws stem from the
underlying challenges of interpreting ambiguous specifications, the
complexities of large APIs and code bases, and the use of unsafe programming
practices.&lt;/p&gt;
&lt;p&gt;Re-engineering security-critical software allows the opportunity to use modern
approaches to prevent these recurring issues. Creating &lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;the TLS stack in OCaml&lt;/a&gt;
offers a range of benefits, including:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Robust memory safety&lt;/strong&gt;: Lack of memory safety was the largest single source
of vulnerabilities in various TLS stacks throughout 2014, including
&lt;a href=&quot;http://heartbleed.com&quot;&gt;Heartbleed (CVE-2014-0160)&lt;/a&gt;. OCaml-TLS avoids this
class of issues entirely due to OCaml's automatic memory management, safety
guarantees and the use of a pure-functional programming style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Improved certificate validation&lt;/strong&gt;: Implementation errors in other stacks
allowed validation to be skipped under certain conditions, leaving users
exposed (e.g.
&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0092&quot;&gt;CVE-2014-0092&lt;/a&gt;).
In our TLS stack, we return errors explicitly as values and handle all
possible variants. The OCaml toolchain and compile-time checks ensure that
this has taken place.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation of state machine errors&lt;/strong&gt;: Errors such as
&lt;a href=&quot;https://gotofail.com&quot;&gt;Apple's GoTo Fail (CVE-2014-1266)&lt;/a&gt; involved code being
skipped and a default 'success' value being returned, even though signatures
were never verified. Our approach encodes the state machine explicitly, while
state transitions default to failure. The code structure also makes clear the
need to consider preconditions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elimination of downgrade attacks&lt;/strong&gt;: Legacy requirements forced other TLS
stacks to incorporate weaker 'EXPORT' encryption ciphers. Despite the
environment changing, this code still exists and leads to attacks such as
&lt;a href=&quot;https://freakattack.com&quot;&gt;FREAK (CVE-2015-0204)&lt;/a&gt; and
&lt;a href=&quot;https://weakdh.org&quot;&gt;Logjam (CVE-2015-4000)&lt;/a&gt;. Our TLS server does not support
weaker EXPORT cipher suites so was never vulnerable to such attacks.
In addition our stack never supported SSLv3, which was known to be the cause of many vulnerabilities and is only now in the process of being deprecated (&lt;a href=&quot;https://tools.ietf.org/html/rfc7568&quot;&gt;RFC: 7568&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Greatly reduced TCB&lt;/strong&gt;: The size of the trusted computing base (TCB) of a
system, measured in lines of code, is a widely accepted approximation of the
size of its attack surface.  Our secure Bitcoin Pi&amp;ntilde;ata, a unikernel built
using our TLS stack, is less than 4% the size of an equivalent, traditional
stack (102 kloc as opposed to 2560 kloc).&lt;/p&gt;
&lt;p&gt;These are just some of the benefits of re-engineering critical software using
modern techniques.&lt;/p&gt;

   </content><id>https://mirage.io/blog/why-ocaml-tls</id><title type="text">Why OCaml-TLS?</title><updated>2015-06-26T14:00:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2015/06/22/cuekeeper-internals-irmin/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;In &lt;a href=&quot;http://roscidus.com/blog/blog/2015/04/28/cuekeeper-gitting-things-done-in-the-browser/&quot;&gt;CueKeeper: Gitting Things Done in the browser&lt;/a&gt;, I wrote about CueKeeper, a &lt;a href=&quot;http://en.wikipedia.org/wiki/Getting_Things_Done&quot;&gt;Getting Things Done&lt;/a&gt; application that runs client-side in your browser.
It stores your actions in a Git-like data-store provided by &lt;a href=&quot;https://github.com/mirage/irmin/&quot;&gt;Irmin&lt;/a&gt;, allowing you to browse the history, revert changes, and sync (between tabs and, once the server backend is available, between devices).
Several people asked about the technologies used to build it, so that&amp;rsquo;s what this blog will cover.&lt;/p&gt;



&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/cuekeeper/&quot;&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/cuekeeper-0.1.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;CueKeeper screenshot. Click for interactive version.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;CueKeeper screenshot. Click for interactive version.&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#compiling-to-javascript&quot;&gt;Compiling to Javascript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#using-javascript-apis&quot;&gt;Using Javascript APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#data-structures&quot;&gt;Data structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#backwards-compatibility&quot;&gt;Backwards compatibility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#irmin&quot;&gt;Irmin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#indexeddb-backend&quot;&gt;IndexedDB backend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#revisions-and-merging&quot;&gt;Revisions and merging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#react&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#tyxml&quot;&gt;TyXML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#reactive-tyxml&quot;&gt;Reactive TyXML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#problems-with-react&quot;&gt;Problems with React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#debugging&quot;&gt;Debugging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#next-steps&quot;&gt;Next steps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;( this post also appeared on &lt;a href=&quot;http://www.reddit.com/r/ocaml/comments/3apdw7/cuekeeper_internals_experiences_with_irmin_react/&quot;&gt;Reddit&lt;/a&gt; )&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;CueKeeper is written in &lt;a href=&quot;http://ocaml.org/&quot;&gt;OCaml&lt;/a&gt; and compiled to Javascript using &lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;js_of_ocaml&lt;/a&gt;.
The HTML is produced using &lt;a href=&quot;http://ocsigen.org/tyxml/&quot;&gt;TyXML&lt;/a&gt;, and kept up-to-date with &lt;a href=&quot;http://erratique.ch/software/react&quot;&gt;React&lt;/a&gt; (note: that&amp;rsquo;s OCaml React, not Facebook React).
Records are serialised using &lt;a href=&quot;https://github.com/janestreet/sexplib&quot;&gt;Sexplib&lt;/a&gt; and stored by &lt;a href=&quot;https://github.com/mirage/irmin/&quot;&gt;Irmin&lt;/a&gt; in a local &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt; database in your browser.
Action descriptions are written in &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt;, which is parsed using &lt;a href=&quot;https://github.com/ocaml/omd&quot;&gt;Omd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a diagram of the main modules that make up CueKeeper:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/modules.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;disk_node&lt;/code&gt; defines the on-disk data types representing stored items such as actions and projects.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;rev&lt;/code&gt; loads all the items in a single Git commit (revision), which together represent the state of the system at some point.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;update&lt;/code&gt; keeps track of the current branch head, loading the new version when it updates. It is also responsible for writing changes to storage.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;merge&lt;/code&gt; can merge any two branches using a 3-way merge.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;model&lt;/code&gt; queries the state to extract the information to be displayed (e.g. list of current actions).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;template&lt;/code&gt; renders the results to HTML. It also uses e.g. the Pikaday date-picker widget.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;client&lt;/code&gt; is the main entry point for the Javascript (client-side) part of CueKeeper (the server is currently under development).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git_storage&lt;/code&gt; provides a Git-like interface to Irmin, which uses the &lt;code&gt;irmin_IDB&lt;/code&gt; backend to store the data in the browser using IndexedDB (plus a little HTML storage for cross-tab notifications).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full code is available at &lt;a href=&quot;https://github.com/talex5/cuekeeper&quot;&gt;https://github.com/talex5/cuekeeper&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Compiling to Javascript&lt;/h2&gt;

&lt;p&gt;To generate Javascript code from OCaml, first compile to OCaml bytecode and then run &lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;js_of_ocaml&lt;/a&gt; on the result, like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;test.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello from OCaml!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;$ ocamlc test.ml -o test.byte
$ js_of_ocaml test.byte -o test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test it, create an HTML file to load the new &lt;code&gt;test.js&lt;/code&gt; code and open the HTML file in a web browser:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;test.html &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Open the browser's Javascript console to see the output.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;OCaml bytecode statically includes any OCaml libraries it uses, so this method also works for complex real-world programs.
Many OCaml libraries can be used directly.
For example, I used &lt;a href=&quot;https://github.com/mirage/ocaml-tar&quot;&gt;ocaml-tar&lt;/a&gt; to create &lt;code&gt;.tar&lt;/code&gt; archives in the browser for the export feature, and
the &lt;a href=&quot;https://github.com/ocaml/omd&quot;&gt;omd&lt;/a&gt; Markdown parser for the descriptions.&lt;/p&gt;

&lt;p&gt;If the OCaml code uses external C functions (that aren&amp;rsquo;t already provided) then you need to implement them in Javascript.
In the case of CueKeeper, I had to implement a few trivial functions for blitting blocks of memory between OCaml strings, bigarrays and &lt;code&gt;bin_prot&lt;/code&gt; buffers.
I put these in a &lt;a href=&quot;https://github.com/talex5/cuekeeper/blob/master/js/helpers.js&quot;&gt;helpers.js&lt;/a&gt; file and added it to the &lt;code&gt;js_of_ocaml&lt;/code&gt; arguments.&lt;/p&gt;

&lt;h2&gt;Using Javascript APIs&lt;/h2&gt;

&lt;p&gt;My first attempt at writing code for the browser was my &lt;a href=&quot;http://roscidus.com/blog/blog/2014/10/27/visualising-an-asynchronous-monad/&quot;&gt;Lwt trace visualiser&lt;/a&gt;.
I initially wrote that for the desktop but it turned out that running it in the browser was just a matter of replacing calls to GTK&amp;rsquo;s Cairo canvas with calls to the very similar HTML canvas.
Writing CueKeeper required learning a bit more about the mysterious world of the Javascript DOM.&lt;/p&gt;

&lt;p&gt;I also needed to integrate with the &lt;a href=&quot;https://github.com/dbushell/Pikaday&quot;&gt;Pikaday&lt;/a&gt; date picker widget.
To do this, you first declare an OCaml class type for each Javascript class (you only have to define the methods you want to use), like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;pikaday.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pikaday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meth&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Dom_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSelect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pikaday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meth_callback&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Optdef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setDefaultDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This says that a &lt;code&gt;pikaday&lt;/code&gt; object has a &lt;code&gt;getDate&lt;/code&gt; method which returns an optional Javascript date object, and that
a &lt;code&gt;config&lt;/code&gt; object provides properties such as &lt;code&gt;onSelect&lt;/code&gt;, which is a callback of a &lt;code&gt;pikaday&lt;/code&gt; object which takes a date and returns nothing.&lt;/p&gt;

&lt;p&gt;The constructors are built using &lt;code&gt;Js.Unsafe&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_config&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pikaday_constr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pikaday&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Unsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;##_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pikaday&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;They&amp;rsquo;re &amp;ldquo;unsafe&amp;rdquo; because this isn&amp;rsquo;t type checked; there&amp;rsquo;s no way to know whether Pikaday really implements the interface we defined above.
However, from this point on everything we do with Pikaday is statically checked against our definitions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js_of_ocaml&lt;/code&gt; provides a syntax extension for OCaml to make using native Javascript objects easier.
&lt;code&gt;object##property&lt;/code&gt; reads a property, &lt;code&gt;object##property &amp;lt;- value&lt;/code&gt; sets a property, and &lt;code&gt;object##method(args)&lt;/code&gt; calls a method.
Note that parentheses around the arguments are required, unlike with regular OCaml method calls.
Note also that &lt;code&gt;js_of_ocaml&lt;/code&gt; ignores underscores in various places to avoid differences between Javascript and OCaml naming conventions (properties can&amp;rsquo;t start with an uppercase character, for example).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s interesting the way OCaml&amp;rsquo;s type inference is used here: &lt;code&gt;Js.Unsafe.global&lt;/code&gt; can take any type, and OCaml infers that its type is &amp;ldquo;object with a &lt;code&gt;Pikaday&lt;/code&gt; property, which is a &lt;code&gt;pikaday&lt;/code&gt; constructor taking a &lt;code&gt;config&lt;/code&gt; argument&amp;rdquo; because that&amp;rsquo;s how we use it.&lt;/p&gt;

&lt;p&gt;Finally, here&amp;rsquo;s the code that creates a new Pikaday object:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;pikaday.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ck_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_select&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Html5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Tyxml_js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;To_dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_div&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_config&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onSelect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap_callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;on_select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_user_date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsnew&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date_day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Optdef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;##&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setDefaultDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsnew&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pikaday_constr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, we create a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element and use it as the &lt;code&gt;container&lt;/code&gt; field of the Pikaday config object.
&lt;code&gt;on_select&lt;/code&gt; is an OCaml function to handle the result, which we wrap with &lt;code&gt;Js.wrap_callback&lt;/code&gt; and set as the Javascript callback.
If an initial date is given, we construct a Javascript &lt;code&gt;Date&lt;/code&gt; object and set that as the default.
Finally, we create the &lt;code&gt;Pikaday&lt;/code&gt; object and return it, along with the containing &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All this means that binding to Javascript APIs is very easy and, thanks to the extra type-checking, feels more pleasant even than using Javascript libraries directly from Javascript.&lt;/p&gt;

&lt;h2&gt;Data structures&lt;/h2&gt;

&lt;p&gt;In CueKeeper, areas, projects and actions all share a common set of fields, which I defined using an OCaml record:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;ck_disk_node.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ck_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp_option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ctime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ck_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp_option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;conflicts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/area.png&quot; class=&quot;center small&quot;/&gt;&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Ck_id.t&lt;/code&gt; is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;UUID&lt;/a&gt; (unique string).
I refer to other nodes using UUIDs so that renaming a node doesn&amp;rsquo;t require updating everything that points to it.
This simplifies merging.
Each record is stored as a single file, and the name of the file is the item&amp;rsquo;s UUID.
The &lt;code&gt;conflicts&lt;/code&gt; field is used to store messages about any conflicts that had to be resolved during merging.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;with sexp&lt;/code&gt; annotation makes use of &lt;a href=&quot;https://github.com/janestreet/sexplib&quot;&gt;Sexplib&lt;/a&gt; to auto-generate code for serialising and deserialising these structures.
I use &lt;code&gt;sexp_option&lt;/code&gt; and &lt;code&gt;sexp_list&lt;/code&gt; rather than &lt;code&gt;option&lt;/code&gt; and &lt;code&gt;list&lt;/code&gt; to provide slightly nicer output: these fields will be omitted if empty.&lt;/p&gt;

&lt;p&gt;I also (rather lazily) reuse this structure for contacts and contexts, but always keep &lt;code&gt;parent&lt;/code&gt; and &lt;code&gt;contact&lt;/code&gt; as &lt;code&gt;None&lt;/code&gt; for them.&lt;/p&gt;

&lt;p&gt;For actions and projects, we also need to record some extra data:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;pstarred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;pstate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SomedayMaybe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;astate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Next&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Waiting&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Waiting_for_contact&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Waiting_until&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ck_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_date&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;astarred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;astate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;astate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ck_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp_option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ck_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp_option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s what a project looks like when printed with &lt;code&gt;Sexplib.Sexp.to_string_hum&lt;/code&gt;
(the &lt;code&gt;hum&lt;/code&gt; suffix turns on pretty-printing; the real code uses plain &lt;code&gt;to_string&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/project.png&quot; class=&quot;center small&quot;/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(Project
 (((pstarred false) (pstate Active))
  ((parent 3eba7466-dafd-4b96-9fad-c9859ef825f2)
  (name &amp;quot;Make a Mirage unikernel&amp;quot;) (description &amp;quot;&amp;quot;) (ctime 1429555212.546))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the child nodes don&amp;rsquo;t appear at all here.
Instead, we find them through their parent field.&lt;/p&gt;

&lt;p&gt;Finally, I wrapped everything up in some polymorphic variants:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_details&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_details&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_details&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_details&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_details&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Area&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Contact&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This is very useful, because other parts of the code often want to deal with subsets of the types.
The interface lists which types can be used in each operation:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;ck_disk_node.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ck_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action_repeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ck_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This says that only areas, projects and actions have parents; only projects and actions can be starred; and only actions can repeat.&lt;/p&gt;

&lt;p&gt;Using variants makes it easy for other modules to match on the different types.
For example, here&amp;rsquo;s the code for generating the &lt;code&gt;Process&lt;/code&gt; tab&amp;rsquo;s tree:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/process.png&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;ck_model.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_process_tree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project_state&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_nodes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_of_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Child_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roots&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Actions and inactive projects don&amp;rsquo;t appear (they return the accumulator unmodified),
while for areas and active projects we add a node, including a recursive call to get the children.&lt;/p&gt;

&lt;p&gt;One problem I had with this scheme was the return types for modifications:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;ck_disk_node.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_conflict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;([&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;with_conflict msg node&lt;/code&gt; returns a copy of &lt;code&gt;node&lt;/code&gt; with its conflict messages field extended with the given message.
The type says that it works with any subset of the node types, and that the result will be the same subset.
For example, when adding a conflict about repeats to an action, the result will be an action.
When adding a message to something that could be an area, project or action, the result will be another area, project or action.&lt;/p&gt;

&lt;p&gt;However, I couldn&amp;rsquo;t work out how to implement this signature without using &lt;code&gt;Obj.magic&lt;/code&gt; (unsafe cast).
I asked on StackOverflow (&lt;a href=&quot;http://stackoverflow.com/questions/29589479/map-a-subset-of-a-polymorphic-variant&quot;&gt;Map a subset of a polymorphic variant&lt;/a&gt;) and it seems there&amp;rsquo;s no easy answer.&lt;/p&gt;

&lt;p&gt;I also experimented with a couple of other approaches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using GADTs didn&amp;rsquo;t work because they don&amp;rsquo;t support arbitrary subsets. A function either handles a specific node type, or all node types, but not e.g. just projects and actions.&lt;/li&gt;
  &lt;li&gt;Using objects avoided the need for the unsafe cast, but required more code elsewhere. Objects work well when you have a fixed set of operations and you want to make it easy to add new kinds of thing, but in GTD the set of types is fixed, while the operations (report generation, rendering on different devices, merging) are more open-ended.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Backwards compatibility&lt;/h2&gt;

&lt;p&gt;Although this is the 0.1-alpha release, I made various changes to the format during development and it&amp;rsquo;s never too early to check that smooth upgrades are possible.
Besides, I&amp;rsquo;ve been recklessly using it as my action tracker during development and I don&amp;rsquo;t like typing things in twice.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice some fields above have a &lt;code&gt;with_default&lt;/code&gt; annotation.
This provides a default value when loading from earlier versions.
For more complex cases, it&amp;rsquo;s possible to write custom code.
For example, I changed the date representation at one point from Unix timestamps to calendar dates (this provides more intuitive behaviour when moving between time-zones I think).
There is code in &lt;code&gt;Ck_time&lt;/code&gt; to handle this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;ck_time.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp_of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_date_of_sexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sexplib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Atom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_sexp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of_unix_time&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* Old format *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_sexp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;In the implementation (&lt;code&gt;ck_time.ml&lt;/code&gt;) I use &lt;code&gt;with sexp_of&lt;/code&gt; so that only the serialisation code is created automatically, while it uses my custom code for deserialising.
In the interface (&lt;code&gt;ck_time.mli&lt;/code&gt;), I just declare it as &lt;code&gt;with sexp&lt;/code&gt; and code outside doesn&amp;rsquo;t see anything special.&lt;/p&gt;

&lt;h2&gt;Irmin&lt;/h2&gt;

&lt;p&gt;The next step was to write the data to the Irmin repository.
Irmin itself provides a fairly traditional key/value store API with some extra features for version control.
That might be useful for existing applications, but I wanted a more Git-like API.
For example, Irmin allows you to read files directly from the branch head, but in the browser another tab might update the branch between the two reads, leading to inconsistent results.
I wanted something that would force me to use atomic operations.
Also, the Irmin API is still being finalised, so I wanted to provide an example of my &amp;ldquo;ideal&amp;rdquo; API.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the API wrapper I used (it doesn&amp;rsquo;t provide access to all Irmin&amp;rsquo;s features, just the ones I needed):&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Staging.t&lt;/code&gt; corresponds to the Git staging area / working directory. It is mutable, and not shared with other tabs:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;git_storage_s.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Staging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_exn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code&gt;Commit.t&lt;/code&gt; represents a single (immutable) Git commit.
You can check out a commit to get a staging area, modify that, and then commit it to create a new &lt;code&gt;Commit.t&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Staging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Staging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Log_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Log_entry_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;export_tar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;A branch is a mutable pointer to a commit.
The head is represented as a reactive signal (more on React later), making it easy to follow updates.
The only thing you can do with a branch is fast-forward it to a new commit.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast_forward_to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Not_fast_forward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Finally, a &lt;code&gt;Repository.t&lt;/code&gt; represents a repository as a whole.
You can look up a branch by name or a commit by hash:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** Get the named branch.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;   * If the branch does not exist yet, [if_new] is called to get the initial commit. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Irmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** Look up a commit by its hash. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Staging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** Create an empty checkout with no parent. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Thomas Gazagnaire provided many useful updates to Irmin to let me implement this API: atomic operations (needed for a reliable &lt;code&gt;fast_forward_to&lt;/code&gt;), support for creating commits with arbitrary parents (needed for custom merging, described below), and performance improvements (very important for running in a browser!).&lt;/p&gt;

&lt;h2&gt;IndexedDB backend&lt;/h2&gt;

&lt;p&gt;Irmin provides a Git backend that supports normal Git repositories, as well as a simpler filesystem backend, a remote HTTP backend, and an in-memory-only backend.
To run Irmin in the browser, I initially added a backend for HTML 5 storage.&lt;/p&gt;

&lt;p&gt;However, HTML 5 storage is limited to 5 MB of data and since my backend lacked compression, it eventually ran out, so I then replaced it with support for &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js_of_ocaml&lt;/code&gt; supports most (standardised) HTML features, but IndexedDB had only just come out, so I had to write my own bindings (as for Pikaday, above).&lt;/p&gt;

&lt;p&gt;IndexedDB is rather complicated compared to local storage, so I split it across several modules.
I first defined the Javascript API (&lt;a href=&quot;https://github.com/talex5/cuekeeper/blob/master/js/indexedDB.mli&quot;&gt;indexedDB.mli&lt;/a&gt;), then wrapped it in a nicer OCaml API, providing asynchronous operations with Lwt threading rather than callbacks (&lt;a href=&quot;https://github.com/talex5/cuekeeper/blob/master/js/indexedDB_lwt.mli&quot;&gt;indexedDB_lwt.mli&lt;/a&gt;).
I then made an Irmin backend that uses it (&lt;a href=&quot;https://github.com/talex5/cuekeeper/blob/master/js/irmin_IDB.ml&quot;&gt;irmin_IDB.ml&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The Irmin API for backends can be a little confusing at first.
An Irmin &amp;ldquo;branch consistent&amp;rdquo; (Git-like) repository internally consists of two simpler stores: an &lt;a href=&quot;https://github.com/mirage/irmin/blob/master/lib/ir_ao.mli&quot;&gt;append-only&lt;/a&gt; store that stores immutable blobs (files, directories and commits), indexed by their SHA1 hash, and a &lt;a href=&quot;https://github.com/mirage/irmin/blob/master/lib/ir_rw.mli&quot;&gt;read-write&lt;/a&gt; store that is used to record which commit each branch currently points to.
If you can provide implementations of these two APIs, Irmin can automatically provide the full &lt;a href=&quot;https://github.com/mirage/irmin/blob/master/lib/ir_bc.mli&quot;&gt;branch-consistent database&lt;/a&gt; API itself.&lt;/p&gt;

&lt;p&gt;One problem with moving to IndexedDB is that it doesn&amp;rsquo;t support notifications.
To get around this, when CueKeeper updates the &lt;code&gt;master&lt;/code&gt; branch to point at a new commit, it also writes the SHA1 hash to local storage.
Other open windows or tabs get notified of this and then read the new data from IndexedDB.&lt;/p&gt;

&lt;p&gt;I also found a couple of browser bugs while testing this.
Firefox seems to &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1147942&quot;&gt;not clean up IndexedDB transactions&lt;/a&gt;, though this doesn&amp;rsquo;t cause any obvious problems in practice.&lt;/p&gt;

&lt;p&gt;Safari, however, has a more serious problem: if two threads (tabs) try to read from the database at the same time, one of the transactions will fail!
I was able to reproduce the error with a few lines of JavaScript (see &lt;a href=&quot;http://test.roscidus.com/static/idb_reads.html&quot;&gt;idb_reads.html&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The page will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open a test database, creating a single key=value pair if it doesn&amp;rsquo;t exist.&lt;/li&gt;
  &lt;li&gt;Attempt to read the value of the key ten times, once per second.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you open this in two windows in Safari at once, one of them will likely fail with AbortError.
I reported it to Apple, but their feedback form says they don&amp;rsquo;t respond to feedback, and they were as good as their word.
In the end, I added some code to sleep for a random period and retry on aborted reads.&lt;/p&gt;

&lt;h2&gt;Revisions and merging&lt;/h2&gt;

&lt;p&gt;Each object (project, action, contact, etc) in CueKeeper is a file in Irmin and each change creates a new commit.
This model tends to avoid race conditions.
For example, when you edit the title of an action and press Return, CueKeeper will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new commit with the updates, whose parent is the commit you started editing.&lt;/li&gt;
  &lt;li&gt;Merge this commit with the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Usually nothing else has changed since you started editing and the merge is a trivial &amp;ldquo;fast-forward&amp;rdquo; merge.
However, if you had edited something else about that action at the same time then instead of overwriting the changes, CueKeeper will merge them.&lt;/p&gt;

&lt;p&gt;If you change the same field in two tabs at once, CueKeeper will pick one value and add a merge conflict note telling you the change it discarded.
You can try it here (click the image for an interactive page running two copies of CueKeeper split-screen):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/cuekeeper/sync.html&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/sync.png&quot; class=&quot;center&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The merge code takes three commits (the tips of the two branches being merged and an optional-but-usually-present &amp;ldquo;least common ancestor&amp;rdquo;), and produces a resulting commit (which may include merge conflict notes for the user to check):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;ck_merge.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Git_storage_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ck_rev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theirs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Nothing_to_do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* [merge ?base ~theirs ours] merges changes from [base] to [ours] into [theirs] and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;   * returns the resulting merge commit. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Git_storage_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Log_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Nothing_to_do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** [revert ~master log_entry] returns a new commit on [master] which reverts the changes in [log_entry]. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code&gt;revert&lt;/code&gt; operation is essentially the same as a merge, except that the base commit is the commit being undone, its (single) parent is one branch and the current state is the other.
It&amp;rsquo;s a separate operation in the API because the commit it generates has a different format (it has only one parent and gives the commit being reverted in the log message).&lt;/p&gt;

&lt;p&gt;I wanted to make sure that the merge code would always produce a valid result (e.g. the &lt;code&gt;parent&lt;/code&gt; field of a node should point to a node that exists in the merged version).
I wrote a unit-test that performs many merges at random and checks the result loads without error.&lt;/p&gt;

&lt;p&gt;My first thought was to perform edits at random to get a base commit, then make two branches from that and perform more random edits on each one.
After a while, I realised that you can edit any valid state into pretty-much any other valid state, so a simpler approach is to generate three commits &lt;a href=&quot;https://github.com/talex5/cuekeeper/blob/90a12e71834ae10416e0ec86ce15408ec25d33e6/test.ml#L177&quot;&gt;at random&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have to be a little bit careful here, however.
If the three commits are completely random then they won&amp;rsquo;t have any UUIDs in common and the merges will be trivial.
Therefore, the UUIDs (and all field values) are chosen from a small set of candidates to ensure they&amp;rsquo;re often the same.&lt;/p&gt;

&lt;p&gt;I wrote the tests before the merge code, and as I wrote the merge code I deliberately failed to implement the required features first to check the tests caught each possible failure.
The tests found these problems automatically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Commit refers to a contact or context that doesn&amp;rsquo;t exist.&lt;/li&gt;
  &lt;li&gt;Project has area as child.&lt;/li&gt;
  &lt;li&gt;Repeating action marked as done.&lt;/li&gt;
  &lt;li&gt;Action, project or area has a missing parent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was easy enough to check which cases I&amp;rsquo;d missed because each possible failure corresponds to a call to &lt;code&gt;bug&lt;/code&gt; in &lt;a href=&quot;https://github.com/talex5/cuekeeper/blob/master/lib/ck_rev.ml&quot;&gt;ck_rev.ml&lt;/a&gt;.
These problems weren&amp;rsquo;t detected initially by the tests:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Cycles in the parent relation&lt;/dt&gt;
  &lt;dd&gt;Initially, my random state generator created nodes with random IDs, but at the time there was a bug in Irmin (since fixed) where it didn&amp;rsquo;t sort the entries before writing them, which confused the Git tools I was using to examine the test results.
To work around this, I changed the test code to create the nodes with monotonically increasing IDs.
However, it would only set the parent to a previously-created node, so this meant that e.g. node 1 could never have a parent of node 2, which meant it could never generate two commits with the parent relation the other way around.
Easily fixed.&lt;/dd&gt;
  &lt;dt&gt;A &lt;code&gt;Waiting_for_contact&lt;/code&gt; action has no contact&lt;/dt&gt;
  &lt;dd&gt;I was running 1000 iterations of the tests with a fixed seed while writing them.
This particular case only triggered after 1500 iterations, but it would have been found eventually when I removed the fixed seed.
To help things along, I added a &lt;code&gt;slow_test&lt;/code&gt; make target that compiles the tests to native code and runs 10,000 iterations, and set this to run on the Travis build (it still only takes 14 seconds, but that&amp;rsquo;s too long to do on every build, and long enough that the extra couple of seconds compiling to native code is worth it).&lt;/dd&gt;
  &lt;dt&gt;An action is a parent of another node&lt;/dt&gt;
  &lt;dd&gt;This one was a bit surprising.
To trigger it, you start with a base containing an action and a project.
On one branch, make the action a child of the project (only the action changes).
On the other, convert the project to an action (only the project changes).
If the bug is present, you end up with one action being a child of the other.
This wasn&amp;rsquo;t picked up because it only happens if the project doesn&amp;rsquo;t change at all in the first branch.
If it does change, the code for merging nodes gets called, and that copes with trying to merge a project with an action by converting the action to a project, which avoids the bug.
Because the nodes were being generated at random, the chance that every field in the base and the first branch would be identical was very low.
To fix it, I now generate a random number at the start of each test iteration and use it to bias the creation of the three states so that many of the fields will be shared.
This is enough to trigger detection of the bug.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;React&lt;/h2&gt;

&lt;p&gt;The OCaml &lt;a href=&quot;http://erratique.ch/software/react&quot;&gt;React&lt;/a&gt; library provides support for &lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_reactive_programming&quot;&gt;Functional reactive programming&lt;/a&gt;.
The idea here is to represent a (mutable) variable as a &amp;ldquo;signal&amp;rdquo;.
Instead of operating on the current value of the variable, you operate on the signal as a whole.&lt;/p&gt;

&lt;p&gt;Say you want to show a live display of the number of actions.
A traditional approach might be:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;There are %d actions&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Then you have to remember to call &lt;code&gt;update&lt;/code&gt; whenever you change &lt;code&gt;actions&lt;/code&gt;.
Instead, in FRP you work on the signal as a whole:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;There are %d actions&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;actions&lt;/code&gt; is a signal, the &lt;code&gt;S.map&lt;/code&gt; creates a new (string valued) signal from the old (int valued) one, and &lt;code&gt;show&lt;/code&gt; ensures that the current value of the signal is displayed on the screen.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a bit like using a spreadsheet: you just enter the formulae, and the system ensures everything stays up-to-date.
CueKeeper uses signals all over the place: the Git commit at the tip of a branch, the description of an action, the currently selected tab, etc.&lt;/p&gt;

&lt;h2&gt;TyXML&lt;/h2&gt;

&lt;p&gt;I initially tried to generate the HTML using &lt;a href=&quot;https://github.com/mirage/ocaml-cow&quot;&gt;Caml on the Web (COW)&lt;/a&gt;.
This provides a syntax extension for embedding HTML in your code.
For example, I wrote some code to render a tree to HTML, something like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;It wasn&amp;rsquo;t really suitable for what I wanted, though, because there was no obvious way to make it update (except by regenerating the whole thing and setting the &lt;code&gt;innerHTML&lt;/code&gt; DOM attribute).
Also, while embedding another language with its own syntax is usually a nice feature, in the case of HTML I&amp;rsquo;m happy to make an exception.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d come across &lt;a href=&quot;http://ocsigen.org/tyxml/&quot;&gt;TyXML&lt;/a&gt; before, but had given up after being baffled by the documentation.
However, spurred on by the promise of React integration, I started reading the source code and it turned out to be fairly simple.&lt;/p&gt;

&lt;p&gt;For every HTML element, TyXML provides a function with the same name.
The function takes a list of child nodes as its argument and, optionally, a list of attributes.
Written this way, the above code looks something like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Tyxml_js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Html5&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;render_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;It didn&amp;rsquo;t compile, though, with a typically complicated error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: This expression has type
     ([&amp;gt; Html5_types.ul ] as 'a) Tyxml_js.Html5.elt
   but an expression was expected of type
     Html5_types.li Tyxml_js.Html5.elt
   Type 'a = [&amp;gt; `Ul ] is not compatible with type
     Html5_types.li = [ `Li of Html5_types.li_attrib ] 
   The second variant type does not allow tag(s) `Ul
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Eventually, I realised what it was saying.
My COW code above was wrong: it output each item as &lt;code&gt;&amp;lt;li&amp;gt;name&amp;lt;/li&amp;gt;&amp;lt;ul&amp;gt;...&amp;lt;/ul&amp;gt;&lt;/code&gt;.
The browser accepted this, but it&amp;rsquo;s not valid HTML - the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; needs to go inside the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.
In fact, all we need is:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Shorter and more correct - a win for TyXML!
It also type-checks attributes.
For example, if you provide an &lt;code&gt;onclick&lt;/code&gt; attribute then you can&amp;rsquo;t provide a handler function with the wrong type (or get the name of the attribute wrong, or use a non-standard attribute, at least without explicit use of &amp;ldquo;unsafe&amp;rdquo; features).&lt;/p&gt;

&lt;h2&gt;Reactive TyXML&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Tyxml_js.Html5&lt;/code&gt; module provides static elements, while &lt;code&gt;Tyxml_js.R.Html5&lt;/code&gt; provides reactive ones.
These take signals for attribute values and child lists and update the display automatically as the signal changes.
You can mix them freely (e.g. a static element with a reactive attribute).&lt;/p&gt;

&lt;p&gt;For example, here&amp;rsquo;s a (slightly simplified) version of the code that displays the tabs along to the top:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tyxml_js&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Tyxml_js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Html5&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;React&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Work&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&amp;gt;|~=)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clicked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;|~=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Html5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_onclick&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode_switcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ck-mode-selector&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Process&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Work&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Work&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Contact&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Schedule&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Review&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Review&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The tabs are an HTML &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element with one &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; for each tab.
&lt;code&gt;current_mode&lt;/code&gt; is a reactive signal for the currently selected mode, which is initially &lt;code&gt;Work&lt;/code&gt;.
Each &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; has a reactive &lt;code&gt;class&lt;/code&gt; attribute which is &lt;code&gt;&amp;quot;active&amp;quot;&lt;/code&gt; when the tab&amp;rsquo;s mode is equal to the current mode.
Clicking the tab sets the mode.&lt;/p&gt;

&lt;div&gt;&lt;/div&gt;


&lt;h2&gt;Problems with React&lt;/h2&gt;

&lt;p&gt;My experience with using react is that it&amp;rsquo;s very easy to write code that is short, clear, and subtly wrong.
Consider this (slightly contrived) example, which shows up-to-date information about how many of our actions have been completed:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complete_actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&amp;gt;&amp;gt;~=)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&amp;gt;|~=)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;complete_actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(nothing complete)&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;total_actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;|~=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nn&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%d/%d (%d%%)&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;|~=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Update: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%!&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;set_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;set_complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;We have two signals, representing the total number of actions and the number of them that are complete.
We connect the &lt;code&gt;complete_actions&lt;/code&gt; signal to a function that outputs one of two signals: either a constant &amp;ldquo;(nothing complete)&amp;rdquo; signal if there are no complete actions, or a signal that shows the number and percentage complete.
This string signal is then connected up to an output function which, in this case, just prints it to the console with &lt;code&gt;Update: &lt;/code&gt; prepended.&lt;/p&gt;

&lt;p&gt;The loop at the end sets the total to a random number and the number complete to a random number less than or equal to that.
We use a &amp;ldquo;step&amp;rdquo; to ensure that the two signals are updated atomically.
Looks reasonable, right?
Running it, it works for a bit, but gets slower and slower as it runs, before eventually failing in one of two ways:&lt;/p&gt;

&lt;p&gt;First, if the &lt;code&gt;total_actions&lt;/code&gt; signal ever becomes zero again after being non-zero, it will crash with &lt;code&gt;Division_by_zero&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Update: (nothing complete)
Update: 25/44 (56%)
Update: 27/82 (32%)
Update: 20/39 (51%)
Update: (nothing complete)
Update: 8/21 (38%)
Update: 11/17 (64%)
Update: 28/49 (57%)
Update: 12/15 (80%)
Update: (nothing complete)
Update: 24/28 (85%)
Update: 43/89 (48%)
Update: 3/14 (21%)
Update: 8/23 (34%)
Update: 87/96 (90%)
Fatal error: exception Division_by_zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason is that callbacks are not removed immediately.
When &lt;code&gt;complete_actions&lt;/code&gt; is non-zero, we attach a callback to track &lt;code&gt;complete&lt;/code&gt; and show the percentage.
When &lt;code&gt;complete_actions&lt;/code&gt; becomes zero again, this callback continues to run, even though its output is no longer used.&lt;/p&gt;

&lt;p&gt;If it doesn&amp;rsquo;t crash, the garbage collector will eventually  be run and the old callbacks will be removed.
Unfortunately, this will also garbage collect the callback that prints the status updates, and the program will simply stop producing any new output at this point.&lt;/p&gt;

&lt;p&gt;At least, that&amp;rsquo;s what happens with native code.
Javascript doesn&amp;rsquo;t have weak references, so old callbacks are never removed there.&lt;/p&gt;

&lt;p&gt;Early versions of CueKeeper uses React extensively, but I had to scale back my use of it due to these kinds of problems with callback lifetimes.
My general work-around is to break the reactive signal chains into disconnected sub-graphs, which can be garbage-collected individually.
For example, each panel in the display (e.g. showing the details of an action) contains a number of signals (name, parent, children, etc) which are used to keep the display up-to-date, but these signals are updated using imperative code, not by connecting them to the signal of the Irmin branch head.
When you close the panel, the functions for updating these signals become unreachable, allowing them to be GC&amp;rsquo;d, and they immediately stop being called.
Thus, we make leek a few callbacks while the panel is open, but closing it returns us to a clean state.&lt;/p&gt;

&lt;p&gt;In a similar way, the tree view in the left column is a collection of signals that are updated manually.
Switching to a different tab will allow them to be freed.
It&amp;rsquo;s not ideal, but it works.&lt;/p&gt;

&lt;p&gt;I think that to complete its goal of having well-defined semantics, React needs to stop relying on weak references.
I imagine it would be possible to define a &amp;ldquo;global sink&amp;rdquo; object of some sort, such that a signal is live if and only if it is connected to that sink, or is a dependency of something else that is.
Then the &lt;code&gt;let _ =&lt;/code&gt; above could be replaced with a connection to the global sink and the rest of the program would behave as expected.
I haven&amp;rsquo;t thought too much about exactly how this would work, though.&lt;/p&gt;

&lt;h2&gt;Debugging&lt;/h2&gt;

&lt;p&gt;There was another problem, which I hit twice.
OCaml always optimises tail calls, but Javascript doesn&amp;rsquo;t (I&amp;rsquo;m not sure about ES6).
In most cases where it matters, &lt;code&gt;js_of_ocaml&lt;/code&gt; turns the code into a loop, but it doesn&amp;rsquo;t handle continuation-passing style.
Both Sexplib and Omd failed to parse larger documents, and did so unpredictably.
I suspect that Firefox&amp;rsquo;s JIT may be affecting things, because my &lt;a href=&quot;https://github.com/janestreet/sexplib/pull/14&quot;&gt;test case&lt;/a&gt; didn&amp;rsquo;t always trigger at the same point.
In both cases, I was able to modify the code to avoid the problem.&lt;/p&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;For CueKeeper, I used &lt;code&gt;js_of_ocaml&lt;/code&gt; to let me write reliable type-checked OCaml code and compile it to Javascript.
&lt;code&gt;js_of_ocaml&lt;/code&gt; is surprisingly easy to use, provides most of the standard DOM APIs and is easy to extend to other APIs such as Pikaday or IndexedDB.
TyXML provides a pleasant way to generate HTML output, checking at compile time that it will produce valid (not just well-formed) HTML.&lt;/p&gt;

&lt;p&gt;Functional reactive programming makes it easy to define user interfaces that always show up-to-date information.
However, I had problems with signals leaking or running after they were no longer needed due to the React library&amp;rsquo;s reliance on weak references and the garbage collector to clean up old signals.
If this problem could be fixed, this would be an ideal way to write interactive applications.
As it is, it is still useful but must be used with care.&lt;/p&gt;

&lt;p&gt;Data structures are defined in OCaml and (de)serialised automatically using the Sexplib library.
Sexplib is easy to extend with custom behaviour, for example to support changes in the format, but required a minor patch to work reliably in the browser.&lt;/p&gt;

&lt;p&gt;Most applications store data using filesystems or relational databases.
CueKeeper uses Irmin to store data in a Git-like repository.
Writing the merge code can be somewhat tricky, but you have to do this anyway if you want your application to support off-line use or multiple users, and once done you get race-free operation, multi-tab support, history and revert for free.&lt;/p&gt;

&lt;p&gt;Irmin can be extended with new backends and I created one that uses IndexedDB to store the data client-side in the browser.
The standard is rather new and there are still browser bugs to watch out for, but it seems to be working reliably now.&lt;/p&gt;

&lt;p&gt;The full code is available at &lt;a href=&quot;https://github.com/talex5/cuekeeper&quot;&gt;https://github.com/talex5/cuekeeper&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Next steps&lt;/h2&gt;

&lt;p&gt;I hope to get back to working on sync between devices.
I made a start on the &lt;code&gt;server&lt;/code&gt; branch, which runs a sync service as a Mirage unikernel, but there&amp;rsquo;s no access control yet, so don&amp;rsquo;t use it unless you want to share your TODO list with the whole world!&lt;/p&gt;

&lt;p&gt;However, I got distracted by an interesting TCP bug, where a connection would sometimes hang, and wondering what caused that made me think there should be a way to ask the system why a thread didn&amp;rsquo;t resolve, which resulted in some &lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2015-06/msg00079.html&quot;&gt;interesting improvements to the tracing and visualisation system&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;h2&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Some of the research leading to these results has received funding from the European Union&amp;rsquo;s Seventh Framework Programme FP7/2007-2013 under the UCN project, grant agreement no 611001.&lt;/p&gt;

</content><id>http://roscidus.com/blog/blog/2015/06/22/cuekeeper-internals-irmin/</id><title type="text">CueKeeper internals: Experiences with Irmin, React, TyXML and IndexedDB</title><updated>2015-06-22T11:25:23+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://kcsrk.info/ocaml/multicore/effects/2015/05/27/more-effects/" rel="alternate"/><contributor><uri>http://kcsrk.info/atom-ocaml.xml</uri><name>KC Sivaramakrishnan</name></contributor><content type="html">&lt;p&gt;In the &lt;a href=&quot;http://kcsrk.info/ocaml/multicore/2015/05/20/effects-multicore/&quot;&gt;previous
post&lt;/a&gt;, I
presented a simple cooperative multithreaded scheduler written using algebraic
effects and their handlers. Algebraic effects are of course useful for
expressing other forms of effectful computations. In this post, I will present
a series of simple examples to illustrate the utility of algebraic effects and
handlers in OCaml. Some of the examples presented here were borrowed from the
excellent paper on Eff programming language&lt;sup&gt;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. All of the examples
presented below are available
&lt;a href=&quot;https://github.com/kayceesrk/ocaml-eff-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;State&lt;/h2&gt;

&lt;p&gt;We can use algebraic effects to model &lt;a href=&quot;https://github.com/kayceesrk/ocaml-eff-example/blob/master/state.ml&quot;&gt;stateful
computation&lt;/a&gt;,
with the ability to retrieve (&lt;code&gt;get&lt;/code&gt;) and update (&lt;code&gt;put&lt;/code&gt;) the current state:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;run&lt;/code&gt; runs a stateful computation with the given initial state.
Here is the implementation of the module &lt;code&gt;State&lt;/code&gt; which provides the desired
behaviour:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Put&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Get&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key idea here is that the handler converts the stateful computation to
functions that accept the state. For example, observe that if the function &lt;code&gt;f&lt;/code&gt;
returns a &lt;code&gt;unit&lt;/code&gt; value (line 13), we return a function which accepts a state
&lt;code&gt;s&lt;/code&gt; and returns &lt;code&gt;unit&lt;/code&gt;. The handler for effect &lt;code&gt;Get&lt;/code&gt; (line 15) passes the current state &lt;code&gt;s&lt;/code&gt;
to the continuation &lt;code&gt;k&lt;/code&gt;. The expression &lt;code&gt;continue k s&lt;/code&gt; returns a function that
accepts the current state and returns &lt;code&gt;unit&lt;/code&gt;. Since fetching the current state
does not modify it, we apply this function to &lt;code&gt;s&lt;/code&gt;, the original state. Since
&lt;code&gt;Put&lt;/code&gt; modifies the state (line 14), the function returned by &lt;code&gt;continue k ()&lt;/code&gt; is applied
to the new state &lt;code&gt;s'&lt;/code&gt;. We evaluate the computation by applying it to the initial
state &lt;code&gt;init&lt;/code&gt; (line 16).&lt;/p&gt;

&lt;p&gt;Observe that the implementation of the handler for the stateful computation is
similar to the implementation of &lt;a href=&quot;https://wiki.haskell.org/State_Monad#Implementation&quot;&gt;State
monad&lt;/a&gt; in Haskell. Except
that in Haskell, you would have the stateful computation &lt;code&gt;f&lt;/code&gt; have the type
&lt;code&gt;State t ()&lt;/code&gt;, which says that &lt;code&gt;f&lt;/code&gt; is a stateful computation where &lt;code&gt;t&lt;/code&gt; is the
type of state and  &lt;code&gt;()&lt;/code&gt; the type of return value. Since multicore OCaml does
not have a effect system, &lt;code&gt;f&lt;/code&gt; simply has type &lt;code&gt;unit -&amp;gt; unit&lt;/code&gt; as opposed to
being explicitly tagged with the effects being performed. While the OCaml type
of &lt;code&gt;f&lt;/code&gt; under specifies the behaviour of &lt;code&gt;f&lt;/code&gt;, it does allow you to combine various
kinds of effects directly, without the need for monad transformer
gymnastics&lt;sup&gt;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. For example, the following code snippet combines an int
and string typed state computations, each with its own handler:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;SS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;SS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;SS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;SS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which prints:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;0
42
21
hello
world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;We can expand upon our state example, to model &lt;a href=&quot;https://github.com/kayceesrk/ocaml-eff-example/blob/master/ref.ml&quot;&gt;ML style
references&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(:=)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Univ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Univ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(:=)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Univ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;embed&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ref.run: Impossible -&amp;gt; ref not found&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The idea is to represent the state as a list of universal typed values,
references as a record with inject and project functions to and from universal
type values, assign as appending a new value to the head of the state list, and
dereference as linear search through the list for a matching assignment. The
&lt;a href=&quot;https://blogs.janestreet.com/a-universal-type/#comment-163&quot;&gt;universal type
implementation&lt;/a&gt; is
due to Alan Frisch.&lt;/p&gt;

&lt;h2&gt;Transactions&lt;/h2&gt;

&lt;p&gt;We may handle lookup and update to implement
&lt;a href=&quot;https://github.com/kayceesrk/ocaml-eff-example/blob/master/transaction.ml&quot;&gt;transactions&lt;/a&gt;
that discards the updates to references in case an exception occurs:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomically&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Updating a reference builds up a rollback function that negates the effect of
the update. In case of an exception, the rollback function is evaluated before
re-raising the exception. For example, in the following code snippet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Res&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* T0 *)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;T0: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomically&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* T1 *)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;T1: Before abort %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;T1: After abort %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Res&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;T0: T1 aborted with %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;T0: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;the updates to reference &lt;code&gt;r&lt;/code&gt; by transaction &lt;code&gt;T1&lt;/code&gt; are discarded on exception and
the program prints the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;T0: 10
T1: Before abort 21
T0: T1 aborted with 21
T0: 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;From Iterators to Generators&lt;/h2&gt;

&lt;p&gt;An iterator is a fold-function of type &lt;code&gt;('a -&amp;gt; unit) -&amp;gt; unit&lt;/code&gt;, that iterates a
client function over all the elements of a data structure. A generator is a
function of type &lt;code&gt;unit -&amp;gt; 'a option&lt;/code&gt; that returns &lt;code&gt;Some v&lt;/code&gt; each time the
function is invoked, where &lt;code&gt;v&lt;/code&gt; is the &lt;em&gt;next-element&lt;/em&gt; in the data structure. The
function returns &lt;code&gt;None&lt;/code&gt; if the traversal is complete. Unlike an iterator, the
generator hands over control of the traversal to the client of the library.&lt;/p&gt;

&lt;p&gt;Gabriel Scherer's insightful article on &lt;a href=&quot;http://gallium.inria.fr/blog/generators-iterators-control-and-continuations/&quot;&gt;generators, iterators, control and
continuations&lt;/a&gt;
nicely distinguish, motivate and provide implementation of different kinds of
iterators and generators for binary trees. While the iterator implementation is
obvious and straight-forward, the generator implementation requires translating
the code to CPS style and manually performing simplifications for efficient
traversal. Since algebraic effects handlers give us a handle to the
continuation, we can essentially &lt;a href=&quot;https://github.com/kayceesrk/ocaml-eff-example/blob/master/generator.ml&quot;&gt;&lt;em&gt;derive&lt;/em&gt; the generator implementation from
the
iterator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let us consider a binary tree with the following type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can define an iterator that traverses the tree from left to right as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From this iterator, we derive the generator as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_step&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;       &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;       &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At each step of the iteration, we perform the effect &lt;code&gt;Next : a -&amp;gt; unit&lt;/code&gt; (line
7), which is handled by saving the continuation to a local reference and
returning the value (line 9 - 11). Since the effect handlers are provided with
the continuation, we are able to invert the control from the library to the
client of the library. This avoids the need to perform manual CPS translation.&lt;/p&gt;

&lt;h2&gt;Direct-style asynchronous IO&lt;/h2&gt;

&lt;p&gt;Since the effect handler has access to the continuation, we can implement
minimal &lt;a href=&quot;https://github.com/kayceesrk/ocaml-eff-example/blob/master/aio.ml&quot;&gt;asynchronous IO in
direct-style&lt;/a&gt;
as opposed to the monadic style of asynchronous IO libraries such as Lwt and
Async. Our asynchronous IO library has the following interface:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AIO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_descr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_descr&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_flag&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_descr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_descr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_descr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_flag&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_descr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_flag&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Observe that the return type of the non-blocking function calls &lt;code&gt;accept&lt;/code&gt;,
&lt;code&gt;recv&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;sleep&lt;/code&gt; are the same as their blocking counterparts from
&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html&quot;&gt;Unix&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;The asynchronous IO implementation works as follows. For each blocking action,
if the action can be performed immediately, then it is. Otherwise, the thread
performing the blocking task is suspended and add to a pool of threads waiting
to perform IO:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Block until data is available to read on the socket. *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blk_read&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_descr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* Block until socket is writable. *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blk_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_descr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* Sleep for given number of seconds. *)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sleep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Blk_read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poll_rd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Blk_write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poll_wr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sleep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep_ht&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gettimeofday&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Blk_read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Blk_read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Blk_write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The scheduler works by running all of the available threads until there are no
more threads to run. At this point, if there are threads that are waiting to
complete an IO operation, the scheduler invokes &lt;code&gt;select()&lt;/code&gt; call and blocks
until one of the IO actions becomes available. The scheduler then resumes those
threads whose IO actions are now available:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* When there are no threads to run, perform blocking io. *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform_io&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_fds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_ht&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_fds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_ht&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdy_rd_fds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdy_wr_fds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd_fds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wr_fds&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Hashtbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdy_rd_fds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdy_wr_fds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gettimeofday&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The
&lt;a href=&quot;https://github.com/kayceesrk/ocaml-eff-example/blob/master/aio.ml&quot;&gt;program&lt;/a&gt;
implements a simple echo server. The server listens on localhost port 9301. It
accepts multiple clients and echoes back to the client any data sent to the
server. This server is a direct-style reimplementation of the echo server found
&lt;a href=&quot;http://www.mega-nerd.com/erikd/Blog/CodeHacking/Ocaml/ocaml_select.html&quot;&gt;here&lt;/a&gt;,
which implements the echo server in CPS style:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Repeat what the client says until the client goes away. *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo_server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;echo_server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_of_sockaddr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo_server : client (%s) disconnected.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%!&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The echo server can be tested with a telnet client by starting the server and
on the same machine running &lt;code&gt;telnet localhost 9301&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The aim of the post is to illustrate the variety of alternative programming
paradigms that arise due to algebraic effects and handlers, and hopefully
kindle interest in reasoning and programming with effects and handlers in
OCaml. Algebraic effects and handlers support in OCaml is in active development
within the context of &lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore&quot;&gt;multicore
OCaml&lt;/a&gt;. When you find those
inevitable bugs, please report them to the &lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore/issues&quot;&gt;issue
tracker&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://arxiv.org/pdf/1203.1539v1.pdf&quot;&gt;Programming with Algebraic Effects and Handlers (pdf)&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://eb.host.cs.st-andrews.ac.uk/drafts/effects.pdf&quot;&gt;Programming and Reasoning with Algebraic Effects and Dependent Types (pdf)&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content><id>http://kcsrk.info/ocaml/multicore/effects/2015/05/27/more-effects/</id><title type="text">Pearls of Algebraic Effects and Handlers</title><updated>2015-05-27T14:06:00+00:00</updated><author><email></email><name>KC Sivaramakrishnan</name></author></entry><entry><link href="http://kcsrk.info/ocaml/multicore/2015/05/20/effects-multicore/" rel="alternate"/><contributor><uri>http://kcsrk.info/atom-ocaml.xml</uri><name>KC Sivaramakrishnan</name></contributor><content type="html">&lt;p&gt;Algebraic effects and handlers provide a modular abstraction for expressing
effectful computation, allowing the programmer to separate the expression of an
effectful computation from its implementation. In this post, I will present an
extension to OCaml for programming with linear algebraic effects, and
demonstrate its use in expressing concurrency primitives for &lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore&quot;&gt;multicore
OCaml&lt;/a&gt;. The design and
implementation of algebraic effects for multicore OCaml is due to &lt;a href=&quot;http://www.lpw25.net/&quot;&gt;Leo
White&lt;/a&gt;, &lt;a href=&quot;https://github.com/stedolan&quot;&gt;Stephen Dolan&lt;/a&gt; and
the multicore team at &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/&quot;&gt;OCaml
Labs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Multicore-capable functional programming language implementations such as
&lt;a href=&quot;https://www.haskell.org/ghc/&quot;&gt;Glasgow Haskell Compiler&lt;/a&gt;,
&lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt;, &lt;a href=&quot;http://manticore.cs.uchicago.edu/&quot;&gt;Manticore&lt;/a&gt; and
&lt;a href=&quot;https://github.com/kayceesrk/multiMLton&quot;&gt;MultiMLton&lt;/a&gt; expose one or more
libraries for expressing concurrent programs. The concurrent threads of
execution instantiated through the library are in turn multiplexed over the
available cores for speed up. A common theme among such runtimes is that the
primitives for concurrency along with the concurrent thread scheduler is baked
into the runtime system. Over time, the runtime system itself tends to become a
complex, monolithic piece of software, with extensive use of locks, condition
variables, timers, thread pools, and other arcana. As a result, it becomes
difficult to maintain existing concurrency libraries, let alone add new ones.
Such lack of malleability is particularly unfortunate as it prevents developers
from experimenting with custom concurrency libraries and scheduling strategies,
preventing innovation in the ecosystem. Our goal with this work is to provide a
minimal set of tools with which programmers can implement new concurrency
primitives and schedulers as OCaml libraries.&lt;/p&gt;

&lt;h2&gt;A Taste of Effects&lt;/h2&gt;

&lt;h3&gt;A Simple Scheduler&lt;/h3&gt;

&lt;p&gt;Let us illustrate the algebraic effect extension in multicore OCaml by
constructing a concurrent round-robin scheduler with the following interface:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Control operations on threads *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* Runs the scheduler. *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The basic tenet of programming with algebraic effects is that performing an
effectful computation is separate from its interpretation&lt;sup&gt;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.
In particular, the interpretation is dynamically chosen based on the context in
which an effect is performed. In our example, spawning a new thread and
yielding control to another are effectful actions, for which we declare the
following effects:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fork&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eff&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The type &lt;code&gt;'a eff&lt;/code&gt; is the predefined extensible variant type for effects,
where &lt;code&gt;'a&lt;/code&gt; represents the return type of performing the effect. For
convenience, we introduce new syntax using which the same declarations are
expressed as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fork&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Effects are performed using the primitive &lt;code&gt;perform&lt;/code&gt; of type &lt;code&gt;'a eff -&amp;gt; 'a&lt;/code&gt;. We
define the functions &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Fork&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Yield&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What is left is to provide an interpretation of what it means to perform
&lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt;. This interpretation is provided with the help of
&lt;em&gt;handlers&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_q&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_q&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;print_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Fork&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;spawn f&lt;/code&gt; (line 8) evaluates &lt;code&gt;f&lt;/code&gt; in a new thread of control. &lt;code&gt;f&lt;/code&gt;
may return normally with value &lt;code&gt;()&lt;/code&gt; or exceptionally with an exception &lt;code&gt;e&lt;/code&gt; or
effectfully with the effect performed along with the delimited
continuation&lt;sup&gt;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;k&lt;/code&gt;. In the pattern &lt;code&gt;effect e k&lt;/code&gt;, if the
effect &lt;code&gt;e&lt;/code&gt; has type &lt;code&gt;'a eff&lt;/code&gt;, then the delimited continuation &lt;code&gt;k&lt;/code&gt; has type
&lt;code&gt;('a,'b) continuation&lt;/code&gt;, i.e., the return type of the effect &lt;code&gt;'a&lt;/code&gt; matches the
argument type of the continuation, and the return type of the delimited
continuation is &lt;code&gt;'b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Observe that we represent the scheduler queue with a queue of delimited
continuations, with functions to manipulate the queue (lines 2--6). In the case
of normal or exceptional return, we pop the scheduler queue and resume the
resultant continuation using the &lt;code&gt;continue&lt;/code&gt; primitive (line 6). &lt;code&gt;continue k v&lt;/code&gt;
resumes the continuation &lt;code&gt;k : ('a,'b) continuation&lt;/code&gt; with value &lt;code&gt;v : 'a&lt;/code&gt; and
returns a value of type &lt;code&gt;'b&lt;/code&gt;. In the case of effectful return with &lt;code&gt;Fork f&lt;/code&gt;
effect (lines 16--17), we enqueue the current continuation to the scheduler
queue and spawn a new thread of control for evaluating &lt;code&gt;f&lt;/code&gt;. In the case of
&lt;code&gt;Yield&lt;/code&gt; effect (lines 14--15), we enqueue the current continuation, and resume
some other saved continuation from the scheduler queue.&lt;/p&gt;

&lt;h3&gt;Testing the scheduler&lt;/h3&gt;

&lt;p&gt;Lets write a simple concurrent program that utilises this scheduler, to create
a binary tree of tasks. The sources for this test are available
&lt;a href=&quot;https://github.com/kayceesrk/ocaml-eff-example&quot;&gt;here&lt;/a&gt;. The program
&lt;code&gt;concurrent.ml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Starting number %i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%!&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Forking number %i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%!&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Forking number %i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%!&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Yielding in number %i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%!&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Resumed number %i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%!&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Finishing number %i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%!&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;generates a binary tree of depth 2, where the tasks are numbered as shown
below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kcsrk.info/assets/tree.png&quot; alt=&quot;Binary tree&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The program forks new tasks in a depth-first fashion and yields when it reaches
maximum depth, logging the actions along the way. To run the program, first
install multicore OCaml compiler, available from the &lt;a href=&quot;https://github.com/ocamllabs/opam-repo-dev&quot;&gt;OCaml Labs dev
repo&lt;/a&gt;. Once the compiler is
installed, the above test program can be compiled and run as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/kayceesrk/ocaml-eff-example
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ocaml-eff-example
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./concurrent
Starting number 0
Forking number 1
Starting number 1
Forking number 3
Starting number 3
Yielding in number 3
Forking number 2
Starting number 2
Forking number 5
Starting number 5
Yielding in number 5
Forking number 4
Starting number 4
Yielding in number 4
Resumed number 3
Finishing number 3
Finishing number 0
Forking number 6
Starting number 6
Yielding in number 6
Resumed number 5
Finishing number 5
Finishing number 1
Resumed number 4
Finishing number 4
Finishing number 2
Resumed number 6
Finishing number 6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output illustrates how the tasks are forked and scheduled.&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;h3&gt;Fibers for Concurrency&lt;/h3&gt;

&lt;p&gt;The main challenge in the implementation of algebraic effects is the efficient
management of delimited continuations. In multicore OCaml&lt;sup&gt;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fn3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, the delimited
continuations are implemented using &lt;em&gt;fibers&lt;/em&gt;, which are small heap-allocated,
dynamically resized stacks. Fibers represent the unit of concurrency in the
runtime system.&lt;/p&gt;

&lt;p&gt;Our continuations are linear (one-shot)&lt;sup&gt;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fn4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, in that once captured,
they may be resumed at most once. Capturing a one-shot continuation is fast,
since it involves only obtaining a pointer to the underlying fiber, and
requires no allocation. OCaml uses a calling convention without callee-save
registers, so capturing a one-shot continuation requires saving no more context
than that necessary for a normal function call.&lt;/p&gt;

&lt;p&gt;Since OCaml does not have linear types, we enforce the one-shot property at
runtime by raising an exception the second time a continuation is invoked. For
applications requiring true multi-shot continuations (such as probabilistic
programming&lt;sup&gt;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fn5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;), we envision providing an explicit operation to copy
a continuation.&lt;/p&gt;

&lt;p&gt;While continuation based concurrent functional programming runtimes such as
Manticore and MultiMLton use undelimited continuations, our continuations are
delimited. We believe delimited continuations enable complex nested and
hierarchical schedulers to be expressed more naturally due to the fact that
they introduce parent-child relationship between fibers similar to a function
invocation.&lt;/p&gt;

&lt;h3&gt;Running on Multiple Cores&lt;/h3&gt;

&lt;p&gt;Multicore OCaml provides support for shared-memory parallel execution. The unit
of parallelism is a &lt;em&gt;domain&lt;/em&gt;, each running a separate system thread, with a
relatively small local heap and a single shared heap shared among all of the
domains. In order to distributed the fibers amongst the available domains, work
sharing/stealing schedulers are initiated on each of the domains. The multicore
runtime exposes to the programmer a small set of locking and signalling
primitives for achieving mutual exclusion and inter-domain communication.&lt;/p&gt;

&lt;p&gt;The multicore runtime has the invariant that there are no pointers between the
domain local heaps. However, the programmer utilising the effect library to
write schedulers need not be aware of this restriction as fibers are
transparently promoted from local to shared heap on demand. We will have to
save multicore-capable schedulers for another post.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.eff-lang.org/&quot;&gt;Eff&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.diku.dk/hjemmesider/ansatte/andrzej/papers/RM-abstract.html&quot;&gt;Representing Monads&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://ocaml.org/meetings/ocaml/2014/ocaml2014_1.pdf&quot;&gt;Multicore OCaml (pdf)&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fnref3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cs.indiana.edu/~dyb/pubs/call1cc-abstract.html&quot;&gt;Representing Control in the presence of One-shot Continuations&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fnref4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://okmij.org/ftp/kakuritu/&quot;&gt;Embedded domain-specific language HANSEI for probabilistic models and (nested) inference&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;http://kcsrk.info/atom-ocaml.xml#fnref5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content><id>http://kcsrk.info/ocaml/multicore/2015/05/20/effects-multicore/</id><title type="text">Effective Concurrency with Algebraic Effects</title><updated>2015-05-20T14:04:00+00:00</updated><author><email></email><name>KC Sivaramakrishnan</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2015/04/28/cuekeeper-gitting-things-done-in-the-browser/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;Git repositories store data with history, supporting replication, merging and revocation.
The Irmin library lets applications use Git-style storage for their data.
To try it out, I&amp;rsquo;ve written a GTD-based action tracker that runs entirely client-side in the browser.&lt;/p&gt;

&lt;p&gt;CueKeeper uses Irmin to handle history and merges, with state saved in the browser using the new IndexedDB standard (requires a recent browser; Firefox 37, Chromium 41 and IE 11.0.9600 all work, but Safari apparently has problems if you open the page in multiple tabs).&lt;/p&gt;

&lt;div style=&quot;text-align: center; margin-bottom: 1em;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://roscidus.com/blog/cuekeeper/&quot;&gt;Open interactive version full screen&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;



&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/cuekeeper/&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/cuekeeper-0.1.png&quot; class=&quot;center&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the future, I plan to have the browser sync to a master Git repository and use the browser storage only for off-line use, but for now note that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All data is stored only in your browser.&lt;/li&gt;
  &lt;li&gt;There is no server communication.&lt;/li&gt;
  &lt;li&gt;Any changes you make will persist for you, but will not affect other users.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Basic_Concepts_Behind_IndexedDB&quot;&gt;Mozilla&amp;rsquo;s IndexedDB docs&lt;/a&gt; say that &amp;ldquo;the general philosophy of the browser vendors is to make the best effort to keep the data when possible&amp;rdquo;, but vaguely notes that your data may be deleted if you run out of space! If someone can clarify things, that would be great. I&amp;rsquo;ve been using it for 5 weeks on Firefox, and haven&amp;rsquo;t lost anything, but it would be nice to know the exact conditions for safety.&lt;/li&gt;
  &lt;li&gt;Take backups! On my Linux/Firefox system, the data is stored here: &lt;code&gt;$HOME/.mozilla/firefox/SALT.default/storage/default/http+++roscidus.com/idb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This is version 0.1 alpha ;-)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post contains a brief introduction to using GTD and CueKeeper, followed by a look at some nice features that result from using Irmin.
The code is available at &lt;a href=&quot;https://github.com/talex5/cuekeeper&quot;&gt;https://github.com/talex5/cuekeeper&lt;/a&gt;.
Alpha testers welcome!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#background&quot;&gt;Background&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#getting-things-done-gtd&quot;&gt;Getting Things Done (GTD)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#irmin&quot;&gt;Irmin&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#mgsd&quot;&gt;mGSD&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#nymote-mirageos-and-ucn&quot;&gt;Nymote, MirageOS and UCN&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#using-cuekeeper&quot;&gt;Using CueKeeper&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#core-concepts&quot;&gt;Core concepts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#editing-items&quot;&gt;Editing items&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#processing&quot;&gt;Processing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#work&quot;&gt;Work&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#schedule&quot;&gt;Schedule&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-weekly-review&quot;&gt;The weekly review&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-top-right-controls&quot;&gt;The top-right controls&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#interesting-irmin-features&quot;&gt;Interesting Irmin features&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#sync&quot;&gt;Sync&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#history&quot;&gt;History&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#revert&quot;&gt;Revert&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#check-before-merge&quot;&gt;Check-before-merge&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#out-of-date-ui-actions&quot;&gt;Out-of-date UI actions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#next-steps&quot;&gt;Next steps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://news.ycombinator.com/item?id=9451595&quot;&gt;Hacker News&lt;/a&gt; and
  &lt;a href=&quot;http://www.reddit.com/r/programming/comments/3457y4/cuekeeper_gitting_things_done_in_the_browser/&quot;&gt;Reddit&lt;/a&gt; )&lt;/p&gt;

&lt;h2&gt;Background&lt;/h2&gt;

&lt;h3&gt;Getting Things Done (GTD)&lt;/h3&gt;

&lt;p&gt;The core idea behind David Allen&amp;rsquo;s &lt;a href=&quot;http://en.wikipedia.org/wiki/Getting_Things_Done&quot;&gt;GTD&lt;/a&gt; is: the human brain is terrible at remembering things at the right time:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You go into work in the morning thinking about a phone call you need to make this evening.&lt;/li&gt;
  &lt;li&gt;As you read through your emails, you keep reminding yourself to remember the call.&lt;/li&gt;
  &lt;li&gt;You&amp;rsquo;re in a meeting and someone is speaking. You&amp;rsquo;re thinking you shouldn&amp;rsquo;t forget the call.&lt;/li&gt;
  &lt;li&gt;etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Maybe you end up remembering and maybe you don&amp;rsquo;t, but either way you&amp;rsquo;ve distracted yourself all day from the other things you wanted to work on.&lt;/p&gt;

&lt;p&gt;The goal of using GTD is to have a system where:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the system reminds you of things &lt;em&gt;when you need to be reminded about them&lt;/em&gt;, and &lt;/li&gt;
  &lt;li&gt;you trust it enough that your brain can &lt;em&gt;stop thinking about them&lt;/em&gt; until then.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;&lt;p&gt;There is no reason ever to have the same thought twice, unless you like having that thought.&lt;/p&gt;&lt;footer&gt;&lt;strong&gt;David Allen&lt;/strong&gt; &lt;cite&gt;Getting Things Done&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;h3&gt;Irmin&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mirage/irmin/&quot;&gt;Irmin&lt;/a&gt; is &amp;ldquo;a library for persistent stores with built-in snapshot, branching and reverting mechanisms&amp;rdquo;. It has multiple backends (including one that uses a regular Git repository, allowing you to view and modify your application&amp;rsquo;s data using the real &lt;code&gt;git&lt;/code&gt; commands).&lt;/p&gt;

&lt;p&gt;Git&amp;rsquo;s storage model is useful for many applications because it gives you race-free updates (each worker writes to its own branch and then merges), disconnected operation, history, remote sync and incremental backups.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;js_of_ocaml&lt;/a&gt; I was able to compile Irmin to JavaScript and run it in the browser, adding a &lt;a href=&quot;https://github.com/talex5/cuekeeper/blob/6e3c2bf3f5e9a117a997fa452cc22f8a4c10fe1d/js/irmin_IDB.ml&quot;&gt;new IndexedDB backend&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;mGSD&lt;/h3&gt;

&lt;p&gt;Simon Baird&amp;rsquo;s &lt;a href=&quot;http://mgsd.tiddlyspot.com/&quot;&gt;mGSD&lt;/a&gt; is an excellent GTD system, which I&amp;rsquo;ve been using for the last few years.
It&amp;rsquo;s a set of extensions built on the &lt;a href=&quot;http://tiddlywiki.com/&quot;&gt;TiddlyWiki&lt;/a&gt; &amp;ldquo;personal wiki&amp;rdquo; system.
Like CueKeeper, mGSD runs entirely in your browser and doesn&amp;rsquo;t require a server.
It&amp;rsquo;s implemented as a piece of self-modifying HTML that writes itself back to your local disk when you save.
That&amp;rsquo;s pretty scary, but I&amp;rsquo;ve found it surprisingly robust.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mgsd.tiddlyspot.com/demo3.html&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/mGSD.png&quot; class=&quot;center&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, it&amp;rsquo;s largely unmaintained and there were various areas I wanted to improve:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Browser security&lt;/dt&gt;
  &lt;dd&gt;Over the years, browsers have become more locked down, and no longer allow web-pages to write to the disk,
requiring a browser plugin to override the check.
CueKeeper uses the IndexedDB support that modern browsers provide to store data (mGSD pre-dates IndexedDB).&lt;/dd&gt;
  &lt;dt&gt;History&lt;/dt&gt;
  &lt;dd&gt;Sometimes you click on a button by mistake and have no idea what changed.
Thanks to Irmin, CueKeeper logs all changes and provides the ability to view earlier states.
Also, CueKeeper uses brief animations to make it easier to see what changed.&lt;/dd&gt;
  &lt;dt&gt;Navigation&lt;/dt&gt;
  &lt;dd&gt;Navigation in mGSD can be awkward because overview panels and details are all mixed in together as wiki pages.
With CueKeeper, I&amp;rsquo;m experimenting with a two-column layout to separate overview pages from the details.&lt;/dd&gt;
  &lt;dt&gt;Safe multi-tab use&lt;/dt&gt;
  &lt;dd&gt;If you accidentally open mGSD in two tabs, changes in one tab will overwrite changes made in the other. CueKeeper uses Irmin to keep multiple tabs in sync, merging changes between them automatically.&lt;/dd&gt;
  &lt;dt&gt;Sync between devices&lt;/dt&gt;
  &lt;dd&gt;There&amp;rsquo;s no easy way to &lt;a href=&quot;http://stackoverflow.com/questions/85994/how-do-you-keep-a-personal-wiki-tiddlywiki-current-and-in-sync-in-multiple-loc&quot;&gt;Sync multiple mGSD instances&lt;/a&gt;. CueKeeper doesn&amp;rsquo;t implement sync yet either, but it should be easy to add (it can sync between tabs already, so the core logic is there).&lt;/dd&gt;
  &lt;dt&gt;Escaping bugs&lt;/dt&gt;
  &lt;dd&gt;mGSD has various bugs related to escaping (e.g. things will go wrong if you use square brackets in a title). CueKeeper uses type-safe &lt;a href=&quot;http://ocsigen.org/tyxml/&quot;&gt;TyXML&lt;/a&gt; to avoid such problems.&lt;/dd&gt;
  &lt;dt&gt;Stale-display bugs&lt;/dt&gt;
  &lt;dd&gt;mGSD mostly does a good job of keeping all elements of the display up-to-date, but there are some flaws.
For example, if you add a new contact in one panel, then open the contacts menu from another, the new contact doesn&amp;rsquo;t show up.
CueKeeper uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_reactive_programming&quot;&gt;Functional reactive programming&lt;/a&gt; with the &lt;a href=&quot;http://erratique.ch/software/react&quot;&gt;React&lt;/a&gt; library to make sure everything is current.&lt;/dd&gt;
  &lt;dt&gt;Clean separation of code and data&lt;/dt&gt;
  &lt;dd&gt;As a self-modifying &lt;code&gt;.html&lt;/code&gt; file, updating mGSD is terrifying! CueKeeper can be recompiled and reloaded like any other program.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3&gt;Nymote, MirageOS and UCN&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://nymote.org/&quot;&gt;The Nymote project&lt;/a&gt; describes itself as &amp;ldquo;Lifelong control of your networked personal data&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;By adopting large centralised services we&amp;rsquo;ve answered the call of the siren servers and made an implicit trade. That we will share our habits and data with them in exchange for something useful. In doing so we&amp;rsquo;ve empowered internet behemoths while simultaneously reducing our ability to influence them. We risk becoming slaves to the current system unless we can create alternatives that compete. It&amp;rsquo;s time to work on those alternatives.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The idea here is to provide services that people can run in their own homes (e.g. on a PC, a low-powered ARM board, or the house router).
The three key pieces of infrastructure it needs are Mirage, Irmin and Signpost.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve talked about &lt;a href=&quot;http://openmirage.org/&quot;&gt;MirageOS&lt;/a&gt; before (see &lt;a href=&quot;http://roscidus.com/blog/blog/2014/07/28/my-first-unikernel/&quot;&gt;My first unikernel&lt;/a&gt;): it allows you to run extremely small, highly secure services as Xen guests (a few MB in size, written in type-safe OCaml, rather than 100s of MB you would have with a Linux guest).
I haven&amp;rsquo;t looked at Signpost yet.
Irmin is the subject of this blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://usercentricnetworking.eu/&quot;&gt;UCN&lt;/a&gt; (User Centric Networking) is an EC-funded project that is building a &amp;ldquo;Personal Information Hub&amp;rdquo; (PIH), responsible for storing users&amp;rsquo; personal data in their home, and then using that data for content recommendation.
If you use Google to manage your ToDo-list then when you add &amp;ldquo;Book holiday&amp;rdquo; to it, Google can show you relevant ads.
But what if you want good recommendations without sharing personal data with third parties?
Tools such as CueKeeper could be configured to sync with a local PIH to provide input for its recommendations without the data leaving your home.&lt;/p&gt;

&lt;h2&gt;Using CueKeeper&lt;/h2&gt;

&lt;p&gt;You can either use the &lt;a href=&quot;http://roscidus.com/blog/cuekeeper/&quot;&gt;example on roscidus.com&lt;/a&gt;, or download the standalone release &lt;a href=&quot;https://github.com/talex5/cuekeeper/releases/download/v0.1/cuekeeper-bin-0.1.zip&quot;&gt;cuekeeper-bin-0.1.zip&lt;/a&gt;.
To use the release, unzip the directory and open &lt;code&gt;index.html&lt;/code&gt; in a browser (no need for a web-server).
If you do this, note that the database is tied to the path of the file, so if you move or rename the directory, it will show a different database (which might make it look like your items have disappeared).&lt;/p&gt;

&lt;h3&gt;Core concepts&lt;/h3&gt;

&lt;p&gt;There are five kinds of &amp;ldquo;thing&amp;rdquo; in CueKeeper:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Action&lt;/dt&gt;
  &lt;dd&gt;Something you will do (e.g. &amp;ldquo;Follow Mirage tutorial&amp;rdquo;).

    &lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/action.png&quot; class=&quot;center small&quot;/&gt;
Beside each action you will see some toggles showing its state:
The tick means done,
&amp;ldquo;n&amp;rdquo; is a next action (something you could start now),
&amp;ldquo;w&amp;rdquo; means waiting-for (something you can&amp;rsquo;t start now),
&amp;ldquo;f&amp;rdquo; means future (something you don&amp;rsquo;t want to think about yet).
The star is for whatever you want.
Repeating actions can&amp;rsquo;t be completed, so for those the tick box will be blank.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Project&lt;/dt&gt;
  &lt;dd&gt;Something you want to achieve (e.g. &amp;ldquo;Make a Mirage unikernel&amp;rdquo;).

    &lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/project.png&quot; class=&quot;center small&quot;/&gt;
A project may require several actions to be taken.
The possible states are done (the tick),
&amp;ldquo;a&amp;rdquo; for active projects,
and &amp;ldquo;sm&amp;rdquo; for &amp;ldquo;Someday/Maybe&amp;rdquo; (a project you don&amp;rsquo;t plan to work on yet).&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Area&lt;/dt&gt;
  &lt;dd&gt;An &amp;ldquo;Area of responsibility&amp;rdquo; is a way of grouping things (e.g. &amp;ldquo;Personal/Hobbies&amp;rdquo; or &amp;ldquo;Job/Accounts&amp;rdquo;).

    &lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/area.png&quot; class=&quot;center small&quot;/&gt;
Unlike projects, areas generally cannot be completed.
One thing that confused me when I started with GTD was that what my organisation called &amp;ldquo;projects&amp;rdquo; were actually areas.
If your boss says &amp;ldquo;You&amp;rsquo;re working on project X until further notice&amp;rdquo; then &amp;ldquo;X&amp;rdquo; is probably an &amp;ldquo;area&amp;rdquo; in GTD terms.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Contact&lt;/dt&gt;
  &lt;dd&gt;Someone you work with.

    &lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/contact.png&quot; class=&quot;center small&quot;/&gt;
You can associate any area, project or action with a contact, which provides a quick way to find all the things you need to discuss with someone when you meet them.
If an action is being performed by someone else, you can also mark it as waiting for them.
It will then appear on the &lt;code&gt;Review/Waiting&lt;/code&gt; list.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Context&lt;/dt&gt;
  &lt;dd&gt;Another way of grouping actions, by what kind of activity it is, or where it will occur.

    &lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/context.png&quot; class=&quot;center small&quot;/&gt;
Assigning a context to an action is an important check that the action isn&amp;rsquo;t too vague.
Your eye will tend to glide over vague actions like &amp;ldquo;Sort out car&amp;rdquo;; choosing a context &amp;ldquo;Phone&amp;rdquo; (garage) or &amp;ldquo;Shopping&amp;rdquo; (buy tools) forces you to clarify things.&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GTD also has the concept of a &amp;ldquo;tickler&amp;rdquo;. In CueKeeper this is just an action waiting until some time.&lt;/li&gt;
  &lt;li&gt;GTD also has &amp;ldquo;reference material&amp;rdquo;, but I never used this in mGSD, so I didn&amp;rsquo;t implement it.
Regular files on your computer seem to work fine for this.&lt;/li&gt;
  &lt;li&gt;mGSD has the concept of &amp;ldquo;realms&amp;rdquo; to group areas. CueKeeper uses sub-areas for this instead (e.g. CueKeeper&amp;rsquo;s &amp;ldquo;Personal/Health&amp;rdquo; sub-area corresponds to an mGSD &amp;ldquo;Health&amp;rdquo; area within a &amp;ldquo;Personal&amp;rdquo; realm).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Editing items&lt;/h3&gt;

&lt;p&gt;Clicking on an item or creating a new one opens a panel showing its details in the right column.
There are various things you can edit here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The toggles here work just as elsewhere (see above).&lt;/li&gt;
  &lt;li&gt;Click the title to rename.&lt;/li&gt;
  &lt;li&gt;Click &lt;code&gt;(edit)&lt;/code&gt; to edit the notes.
These can be whatever you like.
They&amp;rsquo;re in &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt; format, so you can add structure, links, etc.&lt;/li&gt;
  &lt;li&gt;Click &lt;code&gt;(add log entry)&lt;/code&gt; to start editing with today&amp;rsquo;s date added at the end.
This is convenient to add date-stamped notes quickly.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;(delete)&lt;/code&gt; button at the bottom will remove it (without confirmation; use &lt;code&gt;Show history&lt;/code&gt; to revert accidental deletions, as explained later).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For areas, projects and actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can convert between these types by clicking on the type (e.g. &amp;ldquo;An &lt;strong&gt;action&lt;/strong&gt; in &amp;hellip;&amp;rdquo;).
This is useful if e.g. you realise that an action is really a project with multiple steps.&lt;/li&gt;
  &lt;li&gt;Click on the parent to move it to a different parent.&lt;/li&gt;
  &lt;li&gt;You can set the contact field for any of these types too.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For actions, you can also set the context, which is useful for grouping actions on the Work page, and helps to make sure the action is well-defined.&lt;/p&gt;

&lt;p&gt;You can also make an action repeat.
Setting the repeat for an action will move it to the waiting state until the given date.
There are only two differences between repeating actions and regular (one-shot) scheduled actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can&amp;rsquo;t mark a repeating action as done (clear the repeat first if you want to).&lt;/li&gt;
  &lt;li&gt;When you click on the &amp;ldquo;w&amp;rdquo; on a repeating action, the next repeat date after it was last scheduled is highlighted by default. If that date has already arrived, it keeps moving it forward by the specified interval until it&amp;rsquo;s in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Processing&lt;/h3&gt;

&lt;p&gt;There are several stages to applying GTD, corresponding to the tabs along the top.
The first is processing, which is about going through your various inboxes (email, paper, voicemail, etc) and determining what actions each item requires.
After processing, your inbox should be empty and everything you need to do either done (for quick items) or recorded in CueKeeper.
Also, see if you can think of any projects or actions that are only in your head and add those too.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;code&gt;+&lt;/code&gt; next to an area and enter a name for the new project.&lt;br/&gt;
(the Work tab will go red at this point, indicating an alert: &amp;ldquo;Active project with no next action&amp;rdquo;)&lt;/li&gt;
  &lt;li&gt;Click &lt;code&gt;(edit)&lt;/code&gt; in the new project panel to add some details, if desired.&lt;/li&gt;
  &lt;li&gt;Click &lt;code&gt;+action&lt;/code&gt; to add the next action to perform towards this project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that it is not necessary to add all the actions needed to complete the project.
Just add the next thing that you can do now.
When you later mark the action as done, CueKeeper will then prompt you to think about a new next action.&lt;/p&gt;

&lt;p&gt;If a project will only require a single action (e.g. &amp;ldquo;Buy milk&amp;rdquo;), then instead of adding a project and an action, you can just convert the new project to an action and not bother about having a project at all.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t plan to work on the project soon, click &amp;ldquo;sm&amp;rdquo; to convert it to a &amp;ldquo;Someday/Maybe&amp;rdquo; project.&lt;/p&gt;

&lt;h3&gt;Work&lt;/h3&gt;

&lt;p&gt;This is the default view, showing all the things you could be working on now.&lt;/p&gt;

&lt;p&gt;The filters just below the tab allow you to hide top-level areas (e.g. if you don&amp;rsquo;t want to see any personal actions while you&amp;rsquo;re at work).&lt;/p&gt;

&lt;p&gt;When an item is done, click on the tick mark.&lt;/p&gt;

&lt;p&gt;If it&amp;rsquo;s not possible to start it now, click on the &amp;ldquo;w&amp;rdquo; to mark it as waiting:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If an action is waiting for someone else, first add them as the contact, then click the &lt;code&gt;w&lt;/code&gt; and select &amp;ldquo;Waiting for &lt;em&gt;name&lt;/em&gt;&amp;rdquo; from the menu.&lt;/li&gt;
  &lt;li&gt;If an action can&amp;rsquo;t be started until some date, click the &amp;ldquo;w&amp;rdquo; and choose the date from the popup calendar.&lt;/li&gt;
  &lt;li&gt;Otherwise, you can mark it as &amp;ldquo;Waiting (reason unspecified)&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;re not going to do it this week, click on the &amp;ldquo;f&amp;rdquo; (future) to defer it until the next review.&lt;/p&gt;

&lt;h3&gt;Contact&lt;/h3&gt;

&lt;p&gt;This view lists your contacts and any actions you&amp;rsquo;re waiting for them to do.
It&amp;rsquo;s useful if someone phones and you want to see everything you need to discuss with them, for example.
The list only shows actions you&amp;rsquo;re actually waiting for, but if you open up a particular contact then you&amp;rsquo;ll also see things they&amp;rsquo;re merely associated with.&lt;/p&gt;

&lt;h3&gt;Schedule&lt;/h3&gt;

&lt;p&gt;Lists actions than can&amp;rsquo;t be done until some date.&lt;/p&gt;

&lt;p&gt;When due, scheduled actions will appear highlighted on the &lt;code&gt;Work&lt;/code&gt; tab (even if their area is filtered out).
If you pin the browser tab showing the CueKeeper page, the tab icon will also go red to indicate attention is needed.
If you want to test the effect, schedule an action for a date in the past.
Click &lt;code&gt;n&lt;/code&gt; to acknowledge a due action and convert it to a next action.&lt;/p&gt;

&lt;h3&gt;The weekly review&lt;/h3&gt;

&lt;p&gt;GTD only works if you trust yourself to look at the system regularly.
There are various reports available under the &lt;em&gt;Review&lt;/em&gt; tab to help with this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/review.png&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The available reports are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Done&lt;/strong&gt; shows completed actions and projects and provides a button to delete them all.
If you&amp;rsquo;re the sort of person who likes to write weekly summaries, this might be useful input to that.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Waiting&lt;/strong&gt; shows actions that are waiting for someone or something (but not scheduled actions).
You might want to check up on the status of these, or do something to unblock them.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Future&lt;/strong&gt; shows all actions you marked as &amp;ldquo;Future&amp;rdquo; and all projects you marked as &amp;ldquo;Someday/Maybe&amp;rdquo;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Areas&lt;/strong&gt; lists all your areas of responsibility.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Everything&lt;/strong&gt; shows every item in the system in one place (you don&amp;rsquo;t need to review this; it&amp;rsquo;s just handy sometimes to see everything).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mGSD has more reports, but these are the ones I use.
The default configuration has a repeating action scheduled for next Sunday to review things.
This is what I do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Process&lt;/strong&gt; tab&lt;br/&gt;
 Empty inboxes, adding any actions to CueKeeper:
    &lt;ul&gt;
      &lt;li&gt;email inbox&lt;/li&gt;
      &lt;li&gt;paper inbox&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Review/Done&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Admire done list, then delete all.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Review/Waiting&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Any reminders needed?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Review/Future&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Make any of these current?&lt;/li&gt;
      &lt;li&gt;Delete any that will never get done.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Review/Areas&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Any areas that need new projects?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Make sure each action is obvious (not vague).&lt;/li&gt;
      &lt;li&gt;Could it be started now? Set to &lt;strong&gt;Waiting&lt;/strong&gt; if not.&lt;/li&gt;
      &lt;li&gt;List too long? Mark some actions as &lt;strong&gt;Future&lt;/strong&gt;, or their projects as &lt;strong&gt;Someday/Maybe&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s important to look at all these items during the review.
Knowing you&amp;rsquo;re going to look at each waiting or future item soon is what allows you to forget about them during the rest of the week!&lt;/p&gt;

&lt;h3&gt;The top-right controls&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/top-actions.png&quot; class=&quot;border center small&quot;/&gt;&lt;/p&gt;

&lt;p&gt;To search, enter some text (or a regular expression) into the box and select from the drop-down menu that appears.
Pressing Return opens the first result.&lt;/p&gt;

&lt;p&gt;To create a new items, enter a label for it and select one of the &amp;ldquo;Add&amp;rdquo; items from the menu.
Pressing Return when there are no search results will create a new action.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Export&lt;/code&gt; allows you to save the current state (without history) as a tar file.
There&amp;rsquo;s no import feature currently, though.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Show history&lt;/code&gt; shows some recent entries from the Irmin log (see below).&lt;/p&gt;

&lt;h2&gt;Interesting Irmin features&lt;/h2&gt;

&lt;p&gt;So, what benefits do we get from using Irmin?&lt;/p&gt;

&lt;h3&gt;Sync&lt;/h3&gt;

&lt;p&gt;The first benefit, of course, is that we can synchronise between multiple instances.
You may have already tried opening CueKeeper in two windows (of the same browser) and observed that changes made in one propagate to the other.
Here&amp;rsquo;s an easier way to experiment with sync (click the screenshot for the interactive version):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/cuekeeper/sync.html&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/sync.png&quot; class=&quot;center&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This page has two instances of CueKeeper running, representing two separate devices such as a laptop and mobile phone.
You can edit them separately and then click the buttons in the middle to see how the changes are merged.&lt;/p&gt;

&lt;p&gt;Clicking &lt;code&gt;Upper to lower&lt;/code&gt; pushes all changes from the upper pane to the lower (the lower instance will merge them with its current state). Clicking &lt;code&gt;Lower to upper&lt;/code&gt; does the reverse. A full sync would do these two in sequence, but of course it could be interrupted part way through.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;Criss-cross&amp;rdquo; button can be used to test the unusual-but-interesting case of merging in both directions simultaneously (i.e. each instance merges with the &lt;em&gt;previous&lt;/em&gt; state of the other instance, generating two new merges). CueKeeper tries to merge deterministically, so that both instances should end up in the same state, avoiding unnecessary conflicts on future merges.&lt;/p&gt;

&lt;p&gt;Where you make conflicting edits, CueKeeper will pick a suitable resolution and add a conflict note to say what it did.
For example, if you edit the title of the &amp;ldquo;Try OCaml tutorials&amp;rdquo; action to different strings in each instance and then sync, you&amp;rsquo;ll see something like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/conflict.png&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;CueKeeper uses a &lt;a href=&quot;http://en.wikipedia.org/wiki/Merge_(revision_control)#Three-way_merge&quot;&gt;three-way merge&lt;/a&gt; - the merge algorithm takes the states of the two branches to be merged and their most recent common ancestor, and generates a new commit from these.
The common ancestor is used to determine which branch changed which things (anything that is the same as in the common ancestor wasn&amp;rsquo;t changed on that branch).
If there are multiple possible ancestors (which can happen after a criss-cross merge) we just pick one of them.&lt;/p&gt;

&lt;p&gt;CueKeeper has a unit test for merging that repeatedly generates three commits at random and ensures the merge code produces a valid (loadable) result.
This should ensure that we can merge any pair of states, but it can&amp;rsquo;t check that the result will necessarily seem sensible to a human, so let me know if you spot anything odd!&lt;/p&gt;

&lt;h3&gt;History&lt;/h3&gt;

&lt;p&gt;We have the full history, which you can view with the &lt;strong&gt;Show history&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/cuekeeper/history.png&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The history view is useful if you clicked on something by accident and you&amp;rsquo;re not sure what you did.
Click on an entry to see the state of the system just after that change.
A box appears at the top of the page to indicate that you&amp;rsquo;re in &amp;ldquo;time travel&amp;rdquo; mode - close the box to return to the present.&lt;/p&gt;

&lt;p&gt;If you edit anything while viewing a historical version, CueKeeper will commit against that version and then merge the changes to master and return to the present.&lt;/p&gt;

&lt;p&gt;You might like to open each instance&amp;rsquo;s history panel while trying the sync demo above.&lt;/p&gt;

&lt;h3&gt;Revert&lt;/h3&gt;

&lt;p&gt;When in time-travel mode, you can click on the &lt;strong&gt;Revert this change&lt;/strong&gt; button there to undo the change.&lt;/p&gt;

&lt;p&gt;Reverting was easy to add, as it reuses the existing three-way merge code.
The only difference is that the &amp;ldquo;common ancestor&amp;rdquo; is the commit being reverted and the parent of that commit is used as the &amp;ldquo;branch&amp;rdquo; to be merged.&lt;/p&gt;

&lt;p&gt;Because CueKeeper can merge any three commits, it can also revert any commit (with a single parent), although you&amp;rsquo;ll get the most sensible results if you revert the most recent changes first.&lt;/p&gt;

&lt;p&gt;For example, if you create an action and then modify it, and then revert the creation then CueKeeper will see that as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One branch that modified the action (the main branch).&lt;/li&gt;
  &lt;li&gt;One branch that deleted the action (the revert of the creation).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When something is modified and deleted, CueKeeper will opt to keep it, so the effect of the &amp;ldquo;revert&amp;rdquo; will simply be to add a note that it decided to keep it.
Of course, the sensible way to delete something is to use the regular &lt;code&gt;(delete)&lt;/code&gt; button.&lt;/p&gt;

&lt;h3&gt;Check-before-merge&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s important to make sure that the system doesn&amp;rsquo;t get into an inconsistent state, and Irmin can help here.
Whenever CueKeeper updates the database, it first generates the new commit, then it loads the new commit to check it works, then it updates the master branch to point at the new commit.&lt;/p&gt;

&lt;p&gt;This means that CueKeeper will never put the master branch into a state that it can&amp;rsquo;t itself load.&lt;/p&gt;

&lt;h3&gt;Out-of-date UI actions&lt;/h3&gt;

&lt;p&gt;Perhaps the most interesting effect of using Irmin is that it eliminates various edge cases related to out-of-date UI elements.
Consider this example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You open a menu in one tab to set the contact for an action.&lt;/li&gt;
  &lt;li&gt;You delete one of the contacts in another tab.&lt;/li&gt;
  &lt;li&gt;You choose the deleted contact from the menu in the first tab.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With a regular database, this would probably result in some kind of error that you&amp;rsquo;d need to handle.
These edge cases don&amp;rsquo;t occur often and are hard to test.&lt;/p&gt;

&lt;p&gt;With CueKeeper though, we record which revision each UI element came from and commit against that revision.
We then merge the new commit with the master branch, using the existing merge logic to deal with any problems (normally, there is nothing to merge and we do a trivial &amp;ldquo;fast-forward&amp;rdquo; merge here).
This means we never have to worry about concurrent updates.&lt;/p&gt;

&lt;p&gt;A similar system is used with editable fields.
When you click on a panel&amp;rsquo;s title to edit it, make some changes and press Return, we commit against the version you started editing, not the current one.
This means that CueKeeper won&amp;rsquo;t silently overwrite changes, even if you edit something in two tabs at the same time (you&amp;rsquo;ll get a merge conflict note containing the version it discarded instead).&lt;/p&gt;

&lt;h2&gt;Next steps&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;d like to help out, there&amp;rsquo;s still plenty more to do, both coding and testing.
For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Editing doesn&amp;rsquo;t work well on mobile phones. Menus and input boxes should fill the screen in this case.&lt;/li&gt;
  &lt;li&gt;I&amp;rsquo;ve had reports that merging between tabs is unreliable on Safari for some reason (&lt;code&gt;AbortError&lt;/code&gt; from IndexedDB).&lt;/li&gt;
  &lt;li&gt;It would be good to use pack files for compression. Needs a JavaScript compression library.&lt;/li&gt;
  &lt;li&gt;It should be possible for an action to be marked as waiting for some other action or project to be completed.&lt;/li&gt;
  &lt;li&gt;Remote sync needs to be implemented.&lt;/li&gt;
  &lt;li&gt;The UI needs some work. In particular, could someone find a tasteful way to style the fields in the panels so they look like drop-downs? I keep clicking on the item&amp;rsquo;s name instead of the &lt;code&gt;(show)&lt;/code&gt; button by mistake (although this might be because I used to have it the other way around, with a &lt;code&gt;(change)&lt;/code&gt; button, but that was worse).&lt;/li&gt;
  &lt;li&gt;CueKeeper&amp;rsquo;s IndexedDB Irmin backend should be split off so other people can use it easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;d like to help out, the code is available at &lt;a href=&quot;https://github.com/talex5/cuekeeper&quot;&gt;https://github.com/talex5/cuekeeper&lt;/a&gt; and discussion happens on the &lt;a href=&quot;http://lists.xenproject.org/cgi-bin/mailman/listinfo/mirageos-devel&quot;&gt;MirageOS-devel&lt;/a&gt; mailing list.
If there&amp;rsquo;s interest, I may write a follow-up post documenting my experiences implementing CueKeeper (using &lt;a href=&quot;https://github.com/mirage/irmin/&quot;&gt;Irmin&lt;/a&gt;, &lt;a href=&quot;http://erratique.ch/software/react&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;js_of_ocaml&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Some of the research leading to these results has received funding from the European Union&amp;rsquo;s Seventh Framework Programme FP7/2007-2013 under the UCN project, grant agreement no 611001.&lt;/p&gt;

</content><id>http://roscidus.com/blog/blog/2015/04/28/cuekeeper-gitting-things-done-in-the-browser/</id><title type="text">CueKeeper: Gitting Things Done in the browser</title><updated>2015-04-28T12:18:23+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://www.somerandomidiot.com/blog/2015/04/06/lets-play-network-address-translation/" rel="alternate"/><contributor><uri>http://www.somerandomidiot.com/blog/categories/ocaml/atom.xml</uri><name>Mindy Preston</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://www.somerandomidiot.com/blog/2015/04/05/things-routers-do-network-address-translation/&quot;&gt;When last we spoke&lt;/a&gt;, I left you with a teaser about writing your own NAT implementation. &lt;code&gt;iptables&lt;/code&gt; (and friends &lt;code&gt;nftables&lt;/code&gt; and &lt;code&gt;pf&lt;/code&gt;, to be a little less partisan and outdated) provide the interfaces to the kernel modules that implement NAT in many widely-used routers. If we wanted to implement our own in a traditional OS, we&amp;rsquo;d have to either &lt;a href=&quot;http://kernelnewbies.org/FAQ&quot;&gt;take a big dive into kernel programming&lt;/a&gt; or &lt;a href=&quot;https://github.com/pkelsey/libuinet&quot;&gt;find a way to manipulate packets at the Ethernet layer in userspace&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;But if all we need to do is NAT traffic, why not just build something that only knows how to NAT traffic? I&amp;rsquo;ve looked at building networked applications on top of (and with) the full network stack provided by the &lt;a href=&quot;http://openmirage.org&quot;&gt;MirageOS&lt;/a&gt; library OS a lot, but we can also build lower-level applications with fundamentally the same programming tactics and tools we use to write, for example, &lt;a href=&quot;http://hh360.user.srcf.net/blog/2015/03/part-3-running-your-own-dns-resolver-with-mirageos/&quot;&gt;DNS resolvers&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;Building A Typical Stack From Scratch&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s have a look at the &lt;code&gt;ethif-v4&lt;/code&gt; example in the &lt;a href=&quot;http://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton example repository&lt;/a&gt;. This example unikernel shows how to build a network stack &amp;ldquo;by hand&amp;rdquo; from a bunch of different functors, starting from a physical device (provided by &lt;code&gt;config.ml&lt;/code&gt; at build time, representing either a Xen backend if you configure with &lt;code&gt;mirage configure --xen&lt;/code&gt; or a Unix tuntap backend if you build with &lt;code&gt;mirage configure --unix&lt;/code&gt;). I&amp;rsquo;ve reproduced the network setup bits from &lt;a href=&quot;https://github.com/mirage/mirage-skeleton/blob/694162bfa37b055786a1f4a0bb4c9ca7f08c9ef0/ethifv4/unikernel.ml&quot;&gt;the most recent version as of now&lt;/a&gt; and annotated them a bit:&lt;/p&gt;&lt;p&gt;```ocaml module Main (C: CONSOLE) (N: NETWORK) (Clock : V1.CLOCK) = struct&lt;/p&gt;&lt;p&gt; (* N, a module of type NETWORK (defined in module V1_LWT&lt;/p&gt;&lt;pre&gt;&lt;code&gt; from mirage-types), is the building point for the
 rest of our stack.  Modules E, I, U, and T provide
 functions like [write], which take a record of the type
 matching the module (e.g., E.write needs an E.t argument)
 along with some information to write and generate a
 reasonable set of headers of the appropriate layer before
 calling a lower-level [write] function.
 *)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; module E = Ethif.Make(N) module I = Ipv4.Make(E) module U = Udp.Make(I) (* Ethernet, Ipv4, and UDP don&amp;rsquo;t need outside timers or randomness,&lt;/p&gt;&lt;pre&gt;&lt;code&gt; just an underlying implementation to listen from and write to,
 but TCP does *)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; module T = Tcp.Flow.Make(I)(OS.Time)(Clock)(Random) &lt;br/&gt; (&lt;em&gt; DHCP also needs timers and randomness &lt;/em&gt;) module D = Dhcp_clientv4.Make&amp;copy;(OS.Time)(Random)(U)&lt;/p&gt;&lt;p&gt; let or_error c name fn t =&lt;/p&gt;&lt;pre&gt;&lt;code&gt;fn t
&amp;gt;&amp;gt;= function
| `Error e -&amp;gt; fail (Failure (&amp;quot;Error starting &amp;quot; ^ name))
| `Ok t -&amp;gt; return t
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; let start c net _ = (&lt;em&gt; net is of type N.t &lt;/em&gt;)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;or_error c &amp;quot;Ethif&amp;quot; E.connect net
&amp;gt;&amp;gt;= fun e -&amp;gt;
(* e is of type Ethif.t, on which we can call
ethernet-level listen and write *)

or_error c &amp;quot;Ipv4&amp;quot; I.connect e
&amp;gt;&amp;gt;= fun i -&amp;gt;
(* we can manually set IP options here for interface i,
   in addition to overwriting them (potentially) with
   DHCP below *)
I.set_ip i (Ipaddr.V4.of_string_exn &amp;quot;10.0.0.2&amp;quot;)
&amp;gt;&amp;gt;= fun () -&amp;gt;
I.set_ip_netmask i (Ipaddr.V4.of_string_exn &amp;quot;255.255.255.0&amp;quot;)
&amp;gt;&amp;gt;= fun () -&amp;gt;
I.set_ip_gateways i [Ipaddr.V4.of_string_exn &amp;quot;10.0.0.1&amp;quot;]
&amp;gt;&amp;gt;= fun () -&amp;gt;
or_error c &amp;quot;UDPv4&amp;quot; U.connect i
&amp;gt;&amp;gt;= fun udp -&amp;gt;
let dhcp, offers = D.create c (N.mac net) udp in
or_error c &amp;quot;TCPv4&amp;quot; T.connect i
&amp;gt;&amp;gt;= fun tcp -&amp;gt;
(* main body of code continues... *)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;```&lt;/p&gt;&lt;p&gt;The code doesn&amp;rsquo;t do much once it&amp;rsquo;s built the stack &amp;mdash; just prints lines to the console when various types of traffic are received &amp;mdash; so I&amp;rsquo;ve elided that portion from the reproduction here. If we wanted to work with an &lt;code&gt;Ethif.t&lt;/code&gt; (a type representing the Ethernet layer communications on that interface), an &lt;code&gt;I.t&lt;/code&gt; (the IP layer), or even the raw physical device passed to the &lt;code&gt;start&lt;/code&gt; function with the name of &lt;code&gt;net&lt;/code&gt;, we can do that just as we can work with &lt;code&gt;tcp&lt;/code&gt; or &lt;code&gt;udp&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;Working with Multiple Network Interfaces&lt;/h2&gt;&lt;p&gt;Working with two interfaces rather than one is fairly similar. A nice minimal example, working right down on the netif layer, is the &lt;code&gt;netif-forward&lt;/code&gt; example unikernel, also in &lt;code&gt;mirage-skeleton&lt;/code&gt;. The &lt;code&gt;config.ml&lt;/code&gt; for this unikernel defines two interfaces, and &lt;code&gt;unikernel.ml&lt;/code&gt; provides a module Main functorized over two modules of type &lt;code&gt;NETWORK&lt;/code&gt; &amp;ndash; there&amp;rsquo;s no expectation that these are necessarily the &lt;em&gt;same&lt;/em&gt; type of physical interface, just that they both know how to satisfy the basic operations required of a network device.&lt;/p&gt;&lt;p&gt;Instead of building something on top of the provided netifs, &lt;code&gt;netif-forward&lt;/code&gt; (as of &lt;a href=&quot;https://github.com/mirage/mirage-skeleton/blob/8c4b391314e2c4e605e2221bbef85433e44a365a/netif-forward/unikernel.ml&quot;&gt;the latest revision&lt;/a&gt;) works with them directly &amp;mdash; it takes packets from the first interface (&lt;code&gt;n1&lt;/code&gt;, of type &lt;code&gt;N1.t&lt;/code&gt;), queues them, and then sends them out the second interface (&lt;code&gt;n2&lt;/code&gt;, of type &lt;code&gt;N2.t&lt;/code&gt;) as quickly as it can.&lt;/p&gt;&lt;p&gt;```ocaml module Main (C: CONSOLE)(N1: NETWORK)(N2: NETWORK) = struct&lt;/p&gt;&lt;p&gt; let (in_queue, in_push) = Lwt_stream.create () &lt;br/&gt; let (out_queue, out_push) = Lwt_stream.create ()&lt;/p&gt;&lt;p&gt; let listen nf =&lt;/p&gt;&lt;pre&gt;&lt;code&gt;let hw_addr =  Macaddr.to_string (N1.mac nf) in
let _ = printf &amp;quot;listening on the interface with mac address '%s' \n%!&amp;quot; hw_addr in
N1.listen nf (fun frame -&amp;gt; return (in_push (Some frame)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; let update_packet_count () =&lt;/p&gt;&lt;pre&gt;&lt;code&gt;let _ = packets_in := Int32.succ !packets_in in
let _ = packets_waiting := Int32.succ !packets_waiting in
if (Int32.logand !packets_in 0xfl) = 0l then
    let _ = printf &amp;quot;packets (in = %ld) (not forwarded = %ld)&amp;quot; !packets_in !packets_waiting in
    print_endline &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; let start console n1 n2 =&lt;/p&gt;&lt;pre&gt;&lt;code&gt;let forward_thread nf =
  while_lwt true do
    lwt _ = Lwt_stream.next in_queue &amp;gt;&amp;gt;= fun frame -&amp;gt; return (out_push (Some frame)) in
    return (update_packet_count ())
  done
  &amp;lt;?&amp;gt; (
  while_lwt true do
    lwt frame = Lwt_stream.next out_queue in
      let _ = packets_waiting := Int32.pred !packets_waiting in
      N2.write nf frame
  done
  )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; in &lt;br/&gt; (listen n1) &amp;lt;?&amp;gt; (forward_thread n2)&lt;/p&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;return (print_endline &amp;ldquo;terminated.&amp;rdquo;)&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p&gt;end &lt;br/&gt; ```&lt;/p&gt;&lt;h2&gt;Building a NAT Library and Unikernel&lt;/h2&gt;&lt;p&gt;For our NAT implementation, we need to be able to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;make reference to the publicly-routable IP address on the Internet-facing interface&lt;/li&gt;&lt;li&gt;generate new and unique port numbers to use to disambiguate traffic from different hosts on the private network side&lt;/li&gt;&lt;li&gt;keep a table mapping private-network connections to their public-network analogs&lt;/li&gt;&lt;li&gt;add new entries to the table based on new connection attempts&lt;/li&gt;&lt;li&gt;alter Ethernet, IP, TCP, and UDP headers of incoming and outgoing packets:&lt;ul&gt;&lt;li&gt;replace ip addresses and ports according to table entries&lt;/li&gt;&lt;li&gt;recalculate checksums on IP and transport layers after making other mutations&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Since there&amp;rsquo;s nothing privileged about any of the data structures we&amp;rsquo;re using, or the memory we&amp;rsquo;re accessing, it&amp;rsquo;s relatively straightforward to pull the packet-transformation and inspection code out into &lt;a href=&quot;https://github.com/yomimono/mirage-nat&quot;&gt;a simple library&lt;/a&gt; that does the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;decomposes incoming packets into either a tuple of the relevant layers or None&lt;/li&gt;&lt;li&gt;pulls relevant information for NAT decision-making (Ethernet layer ethertype, IP-layer source and destination address and protocol, transport-layer port numbers) out of packet layers&lt;/li&gt;&lt;li&gt;given an existing NAT table and an incoming packet, either rewrites the packet according to the rules in the table or returns None&lt;/li&gt;&lt;li&gt;given an existing NAT table and an incoming packet, along with an IP address and port number, creates a new NAT table rule for the packet using the IP address and port number provided&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Along with a library that provides basic &lt;a href=&quot;https://duckduckgo.com/?q=automate%20crud&amp;amp;t=canonical&quot;&gt;CRUD&lt;/a&gt; operations on the table itself, this is enough to get Internet browsing working through a NATting unikernel with &lt;a href=&quot;https://github.com/yomimono/simple-nat&quot;&gt;not much code at all&lt;/a&gt;. If you&amp;rsquo;d like to try it out, here are some instructions on &lt;a href=&quot;https://github.com/yomimono/simple-nat/blob/master/cubietruck.md&quot;&gt;setting up a Xen machine to NAT via mirage-nat&lt;/a&gt;. The instructions given are for a CubieBoard2 or CubieTruck, but any machine running Xen with multiple network interfaces (or even virtual bridges, if you wish to NAT nonphysical devices) can run the NATting unikernel.&lt;/p&gt;&lt;h2&gt;Some Comments on Limitations of the Implementation&lt;/h2&gt;&lt;p&gt;This is not enough to have a stable or even reasonably secure Internet browsing through a NATting unikernel, largely because there&amp;rsquo;s no nice facility for table entries to be &lt;em&gt;removed&lt;/em&gt;. This has two important consequences:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the NAT table will grow until it consumes all available memory and the NAT device crashes. This mimics the behavior of many commercial implementations (memory exhaustion due to NAT table size is a common reason you need to restart your home router), but in this case that isn&amp;rsquo;t a feature.&lt;/li&gt;&lt;li&gt;the NAT table will allow servers which previously replied to requests, to send new traffic to the host which made the original request. In other words, if a client made an unencrypted HTTP request to &lt;code&gt;the-toast.net&lt;/code&gt;, downloaded a webpage, and then closed the connection three days ago, the NAT device has no way of knowing that &lt;code&gt;the-toast.net&lt;/code&gt; shouldn&amp;rsquo;t be sending responses now. This is particularly bad in the case of UDP, which has fewer protocol-level safeguards against state-violating traffic.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There&amp;rsquo;s nothing about the MirageOS architecture that imposes these limitations &amp;mdash; code which times out and maintains state is &lt;a href=&quot;https://github.com/mirage/mirage-tcpip/blob/master/lib/arpv4.ml&quot;&gt;already implemented in MirageOS&lt;/a&gt;. Ideally, we&amp;rsquo;d want to make use of (&lt;a href=&quot;https://github.com/mirage/mirage-tcpip/blob/master/tcp/state.ml&quot;&gt;the state machine logic for TCP connections&lt;/a&gt;) already included in the &lt;code&gt;mirage-tcpip&lt;/code&gt; library, so we could continue to use the power of our library OS architecture to avoid duplicating this code. We&amp;rsquo;d be stuck writing our own UDP &amp;ldquo;connection&amp;rdquo; expiry logic no matter what, since UDP is a connectionless protocol, although we could provide those as a library as well &amp;mdash; perhaps a firewalling unikernel might be able to use this code in the future?&lt;/p&gt;&lt;h1&gt;Acknowledgements&lt;/h1&gt;&lt;p&gt;Some of the research leading to these results has received funding from the European Union&amp;rsquo;s Seventh Framework Programme FP7/2007-2013 under the UCN project, grant agreement no 611001.&lt;/p&gt; </content><id>http://www.somerandomidiot.com/blog/2015/04/06/lets-play-network-address-translation/</id><title type="text">Let's Play Network Address Translation: The Home Game</title><updated>2015-04-06T15:53:00+00:00</updated><author><email></email><name>Mindy Preston</name></author></entry><entry><link href="http://amirchaudhry.com/heroku-for-unikernels-pt2" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;In the &lt;a href=&quot;http://amirchaudhry.com/heroku-for-unikernels-pt1/&quot;&gt;previous post&lt;/a&gt; I described the continuous end-to-end system
that we&amp;rsquo;ve set up for some of the MirageOS projects &amp;mdash; automatically going from
a &lt;code&gt;git push&lt;/code&gt; all the way to live deployment, with everything under
version-control.&lt;/p&gt;

&lt;p&gt;Everything I described previously already exists and you can set up the
workflow for yourself, the same way many others have done with the Travis CI
scripts for testing/build.  However, there are a range of exciting
possibilities to consider if we&amp;rsquo;re willing to extrapolate &lt;em&gt;just a little&lt;/em&gt; from
the tools we have right now.  The rest of this post explores these ideas and
considers how we might extend our system.  &lt;/p&gt;

&lt;p&gt;Previously, we had finished the backbone of the workflow and I discussed a few
ideas about how we should flesh it out &amp;mdash; namely more testing and some form of
logging/reporting.  There&amp;rsquo;s substantially more we could do when we consider
how lean and nimble unikernels are, especially if we speculate about the
systems we could create as our &lt;a href=&quot;http://amirchaudhry.com/brewing-miso-to-serve-nymote/&quot;&gt;toolstack&lt;/a&gt; matures.  A couple of
things immediately come to mind.  &lt;/p&gt;

&lt;p&gt;The first is the ability to boot a unikernel only when it is required, which
opens up the possibility of highly-elastic infrastructure.  The second is the
ease with which we can push, pull or otherwise distribute unikernels
throughout a system, allowing new forms of deployment to both cloud and
embedded systems. We&amp;rsquo;ll consider these in turn and see where they take us,
comparing with the current &amp;lsquo;mirage-decks&amp;rsquo; deployment I described in
&lt;a href=&quot;http://amirchaudhry.com/heroku-for-unikernels-pt1/&quot;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Demand-driven clouds&lt;/h2&gt;

&lt;p&gt;The way cloud services are currently provisioned means that you may have
services operating and consuming resources (CPU, memory, etc), even when there
is no demand for them. It would be significantly more efficient if we could
just &lt;em&gt;activate&lt;/em&gt; a service when required and then shut it down again when the
demand has passed.  In our case, this would mean that when a unikernel is
&amp;lsquo;deployed to production&amp;rsquo;, it doesn&amp;rsquo;t actually have to be &lt;em&gt;live&lt;/em&gt; &amp;mdash; it merely
needs to be ready to boot when demand arises.  With tools like
&lt;a href=&quot;https://github.com/MagnusS/jitsu&quot;&gt;Jitsu&lt;/a&gt; (Just-In-Time Summoning of Unikernels), we can work
towards this kind of architecture. &lt;/p&gt;

&lt;h3&gt;Summon when required&lt;/h3&gt;

&lt;p&gt;Jitsu allows us to have unikernels sitting in storage then &amp;lsquo;summon&amp;rsquo; them into
existence.  This can occur in response to an incoming request and with &lt;em&gt;no
discernible latency&lt;/em&gt; for the requester. While unikernels are inactive, they
consume only the actual physical storage required and thus do not take up any
CPU cycles, nor RAM, etc. This means that more can be achieved with fewer
resources and it would significantly improve things like utilization rates of
hardware and power efficiency.&lt;/p&gt;

&lt;p&gt;In the case of the &lt;a href=&quot;http://decks.openmirage.org&quot;&gt;decks.openmirage.org&lt;/a&gt; unikernel that I
discussed last time, it would mean that the site would only come online if
someone had requested it and would shut down again afterwards.  &lt;/p&gt;

&lt;p&gt;In fact, we&amp;rsquo;ve already been working on this kind of system and
&lt;a href=&quot;https://www.usenix.org/conference/nsdi15/technical-sessions/presentation/madhavapeddy&quot;&gt;Jitsu will be presented at NSDI&lt;/a&gt; in Oakland, California this May.
In the spirit of looking ahead, there&amp;rsquo;s more we could do.
&lt;/p&gt;

&lt;h3&gt;Hyper-elastic scaling&lt;/h3&gt;

&lt;p&gt;At the moment, Jitsu lets you set up a system where unikernels will boot in
response to incoming requests.  This is already pretty cool but we could take
this a step further.  If we can boot unikernels on demand, then we could use
that to build a system which can automate the &lt;em&gt;scale-out&lt;/em&gt; of those services to
match demand.  We could even have that system work across multiple machines,
not just one host.  So how would all this look in practice for &amp;lsquo;mirage-decks&amp;rsquo;?&lt;/p&gt;

&lt;h4&gt;Auto-scaling and dispersing our slide decks&lt;/h4&gt;

&lt;p&gt;Our previous toolchain automatically boots the new unikernel as soon as it is
pulled from the git repo.  Using Jitsu, our deployment machine would pull the
unikernel but leave it in the repo &amp;mdash; it would only be activated when someone
requests access to it.  Most of the time, it may receive no traffic and
therefore would remain &amp;lsquo;turned off&amp;rsquo; (let&amp;rsquo;s ignore webcrawlers for now). When
someone requests to see a slide deck, the unikernel would be booted and
respond to the request.  In time it can be turned off again, thus freeing
resources.  So far, so good.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s say that a certain slide deck becomes &lt;em&gt;really&lt;/em&gt; popular (e.g. posted
to HackerNews or Reddit).  Suddenly, there are &lt;em&gt;many&lt;/em&gt; incoming requests and we
want to be able to serve them all.  We can use the one unikernel, on one
machine, until it is unable to handle the load efficiently.  At this point,
the system can create new copies of that unikernel and automatically balance
across them. These unikernels don&amp;rsquo;t need to be on the same host and we should
be able to spin them up on different machines.&lt;/p&gt;

&lt;p&gt;To stretch this further, we can imagine coordinating the creation of those new
unikernels nearer the &lt;em&gt;source&lt;/em&gt; of that demand, for example starting off on a
European cloud, then spinning up on the East coast US and finally over to the
West coast of the US.  All this could happen seamlessly and the process can
continue until the demand passes or we reach a predefined limit &amp;mdash; after all,
given that we pay for the machines, we don&amp;rsquo;t really want to turn a Denial of
&lt;em&gt;Service&lt;/em&gt; into a Denial of &lt;em&gt;Credit&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;After the peak, the system can automatically scale back down to being largely
dormant &amp;mdash; ready to react when the next wave of interest occurs.&lt;/p&gt;

&lt;h4&gt;Can we actually do this?&lt;/h4&gt;

&lt;p&gt;If you think this is somewhat fanciful, that&amp;rsquo;s perfectly understandable &amp;mdash; as I
mentioned previously, this post is very much about &lt;em&gt;extrapolating&lt;/em&gt; from where
the tools are right now.  However, unikernels actually make it very easy to
run quick experiments which indicate that we could iterate towards what I&amp;rsquo;ve
described.  &lt;/p&gt;

&lt;p&gt;A recent and somewhat extreme experiment ran a
&lt;a href=&quot;http://www.skjegstad.com/blog/2015/03/25/mirageos-vm-per-url-experiment/&quot;&gt;unikernel VM for &lt;em&gt;each URL&lt;/em&gt;&lt;/a&gt;.  Every URL on a small static
site was served from its own, self-contained unikernel, complete with it&amp;rsquo;s own
web server (even the &amp;lsquo;rss.png&amp;rsquo; icon was served separately).  You can read the
post to see how this was done and it also led to an interesting
&lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2015-03/msg00110.html&quot;&gt;discussion&lt;/a&gt; on the mailing list (e.g. if you&amp;rsquo;re only serving a
single item, why use a web server at all?).  Of course, this was just an
&lt;em&gt;experiment&lt;/em&gt; but it demonstrates what is possible now and how we can iterate,
uncover new problems, and move forward.  One such question is how to
automatically handle networking during a scale-out, and this is an area were
tools like &lt;a href=&quot;http://amirchaudhry.com/brewing-miso-to-serve-nymote/#signpost&quot;&gt;Signpost&lt;/a&gt; can be of use.&lt;/p&gt;

&lt;p&gt;Overall, the model I&amp;rsquo;ve described is quite different to the way we currently
use the cloud, where the overhead of a classic OS is constantly consuming
resources.  Although it&amp;rsquo;s tempting to stick with the same frame of reference
we have today we should recognise that the current model is inextricably
intertwined with the traditional software stacks themselves.  Unikernels allow
completely new ways of creating, distributing and managing software and it
takes some thought in order to fully exploit their benefits. &lt;/p&gt;

&lt;p&gt;For example, having a demand-driven system means we can deliver more services
from just the one set of physical hardware &amp;mdash; because not all those services
would be consuming resources at the same time.  There would also be a dramatic
impact on the economics, as billing cycles are currently measured in hours,
whereas unikernels may only be active for seconds at a time.  In addition to
these benefits, there are interesting possibilities in how such scale-outs can
be coordinated across &lt;em&gt;different&lt;/em&gt; devices.&lt;/p&gt;

&lt;h2&gt;Hybrid deployments&lt;/h2&gt;

&lt;p&gt;As we move to a world with more connected devices, the software and services
we create will have to operate across both the cloud and embedded systems.
There have been many names for this kind of distributed system, ranging from
ubiquitous computing to dust clouds and the &amp;lsquo;Internet of Things&amp;rsquo; but they all
share the same idea of running software at the edges of the network (rather
than just cloud deployments).&lt;/p&gt;

&lt;p&gt;When we consider the toolchain we already have, it&amp;rsquo;s not much of a stretch to
imagine that we could also build and store a unikernel for ARM-based
deployments.  Those unikernels can be deployed onto embedded devices and
currently we target the &lt;a href=&quot;http://openmirage.org/wiki/xen-on-cubieboard2&quot;&gt;Cubieboard2&lt;/a&gt;.  &lt;/p&gt;





&lt;p&gt;We could make such a system smarter. Instead of having the edge devices
constantly polling for updates, our deployment process could directly &lt;em&gt;push&lt;/em&gt;
the new unikernels out to them. Since these devices are likely to be behind
NATs and firewalls, tools like &lt;a href=&quot;http://amirchaudhry.com/brewing-miso-to-serve-nymote/#signpost&quot;&gt;Signpost&lt;/a&gt; could deal with the issue
of secure connectivity. In this way, the centralized deployment process
remains as a coordination point, whereas most of the workload is dealt with by
the devices the unikernels are running on.  If a central machine happens to be
unavailable for any reason, the edge-devices would continue to function as
normal.  This kind of arrangement would be ideal for Internet-of-Things style
deployments, where it could reduce the burden on centralised infrastructure
while still enabling continuous deployment.&lt;/p&gt;

&lt;p&gt;In this scenario, we could serve the traffic for &amp;lsquo;mirage-decks&amp;rsquo; from a
unikernel on a Cubieboard2, which could further minimise the cost of running
such infrastructure.  It could be configured such that if demand begins to
peak, then an automated scale-out can occur from the Cubieboard2 directly out
onto the public cloud and/or &lt;em&gt;other Cubieboards&lt;/em&gt;. Thus, we can still make use
of third-party resources but only when needed and of the kind we desire.  Of
course, running a highly distributed system leads to other needs.&lt;/p&gt;

&lt;h2&gt;Remember all the things&lt;/h2&gt;

&lt;p&gt;When running services at scale it becomes important to track the activity and
understand what is taking place in the system. In practice, this means logging
the activity of the unikernels, such as when and where they were created and
how they perform.  This becomes even more complex for a distributed system.&lt;/p&gt;

&lt;p&gt;If we also consider the logging needs of a highly-elastic system, then another
problem emerges.  Although scaling up a system is straightforward to
conceptualise, scaling it back &lt;em&gt;down&lt;/em&gt; again presents new challenges.  Consider
all the additional logs and data that have been created during a scale-out &amp;mdash; 
all of that history needs to be merged back together as the system contracts.
To do that properly, we need tools designed to manage distributed data
structures, with a consistent notion of merges.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://amirchaudhry.com/brewing-miso-to-serve-nymote/#irmin&quot;&gt;Irmin&lt;/a&gt; addresses these kinds of needs and it enables a style of
programming very similar to the Git workflow, where distributed nodes fork,
fetch, merge and push data between each other.  Building an end-to-end logging
system with Irmin would enable data to be managed and merged across different
nodes and keep track of activity, especially in the case of a scale down. The
ability to capture such information also means the opportunity to provide
analytics to the creators of those unikernels around performance and usage
characteristics. &lt;/p&gt;

&lt;p&gt;The use of Irmin wouldn&amp;rsquo;t be limited to logging as the unikernels themselves
could use it for managing data in lieu of other file systems.  I&amp;rsquo;ll refrain
from extrapolating too far about this particular tool as it&amp;rsquo;s still under
rapid development and we&amp;rsquo;ll write more as it matures.&lt;/p&gt;



&lt;h2&gt;On immutable infrastructure&lt;/h2&gt;

&lt;p&gt;You may have noticed that one of the benefits of the unikernel approach arises
because the artefacts themselves are not altered once they&amp;rsquo;re created. 
This is in line with the recent resurgence of ideas around &amp;lsquo;immutable
infrastructure&amp;rsquo;.  Although there isn&amp;rsquo;t a precise definition of this, the
approach is that machines are treated as replaceable and can be regularly re
provisioned with a known state.  Various tools help the existing systems to
achieve this but in the case of unikernels, everything is already under
version control, which makes managing a deployment much easier.&lt;/p&gt;

&lt;p&gt;As our approach is already compatible with such ideas, we can take it a step
further.  Immutable infrastructure essentially means the artefact produced
&lt;em&gt;doesn&amp;rsquo;t matter&lt;/em&gt;. It&amp;rsquo;s disposable because we have the means to easily recreate
it.  In our current example, we still ship the unikernel around.  In order to
make this &amp;lsquo;fully immutable&amp;rsquo;, we&amp;rsquo;d have to know the state of all the packages
and code used when &lt;em&gt;building&lt;/em&gt; the unikernel. That would give us a complete
manifest of which package versions were pulled in and from which sources. 
Complete information like this would allow us to recreate any given unikernel
in a highly systematic way.  If we can achieve this, then it&amp;rsquo;s the manifest
which generates everything else that follows.&lt;/p&gt;

&lt;p&gt;In this world-view, the unikernel itself becomes something akin to caching.
You use it because you don&amp;rsquo;t want to rebuild it from source &amp;mdash;&amp;nbsp;even though
unikernels are quicker to build than a whole OS/App stack.  For more security
critical applications, you may want to be assured of the code that is pulled
in, so you examine the manifest file before rebuilding for yourself. This also
allows you to pin to specific versions of libraries so that you can explicitly
adjust the dependencies as you wish.  So how do we encode the manifest?  This
is another area where Irmin can help as it can keep track of the state of
package history and can recreate the environment that existed for any given
build run.  That build run can then be recreated elsewhere without having to
manually specify package versions.  &lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot more to consider here as this kind of approach opens up new
avenues to explore. For the time being, we can recognise that the unikernel
approach lends itself to the achieving immutable infrastructure.&lt;/p&gt;

&lt;h2&gt;What happens next?&lt;/h2&gt;

&lt;p&gt;As I mentioned at the beginning of this post, most of what I&amp;rsquo;ve described is
speculative. I&amp;rsquo;ve deliberately extrapolated from where the tools are now so as
to provoke more thoughts and discussion about how this new model can be used
in the wild.  Some of the things we&amp;rsquo;re already working towards but there are
many other uses that may surprise us &amp;mdash; we won&amp;rsquo;t know until we get there and
experimenting is half the fun.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll keep marching on with more libraries, better tooling and improving
quality.  What happens with unikernels in the rest of 2015 is largely up to
the wider ecosystem.  &lt;/p&gt;

&lt;p&gt;That means you.&lt;/p&gt;

&lt;hr/&gt;

&lt;p class=&quot;footnote&quot;&gt;
Thanks to Thomas Gazagnaire and Richard Mortier for comments on an earlier draft.
&lt;/p&gt;



</content><id>http://amirchaudhry.com/heroku-for-unikernels-pt2</id><title type="text">Towards Heroku for Unikernels: Part 2 - Self Scaling Systems</title><updated>2015-04-03T15:30:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Apr%202015" rel="alternate"/><contributor><uri>http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml</uri><name>OCL Monthly News</name></contributor><content type="html">
      &lt;p&gt;The OCaml Labs initiative within the &lt;a href=&quot;http://www.cl.cam.ac.uk&quot;&gt;Cambridge Computer Laboratory&lt;/a&gt;
is now just over two years old, and it is time for an update about our  activities
since the last update at the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Dec%202013&quot;&gt;end of 2013&lt;/a&gt; and &lt;a href=&quot;http://anil.recoil.org/2012/10/19/announcing-ocaml-labs.html&quot;&gt;2012&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The theme of our group was not to be pure research, but rather a hybrid group that takes on
some of the load of day-to-day OCaml maintenance from &lt;a href=&quot;http://caml.inria.fr/&quot;&gt;INRIA&lt;/a&gt;,
as well as help grow the wider community and meet our own research agendas around
topics such as &lt;a href=&quot;https://queue.acm.org/detail.cfm?id=2566628&quot;&gt;unikernels&lt;/a&gt;.
To this end, all of our projects have been highly collaborative, often involving colleagues
from &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/&quot;&gt;INRIA&lt;/a&gt;,
&lt;a href=&quot;http://janestreet.com&quot;&gt;Jane Street&lt;/a&gt;, &lt;a href=&quot;http://lexifi.com&quot;&gt;Lexifi&lt;/a&gt; and &lt;a href=&quot;http://citrix.com&quot;&gt;Citrix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post covers our progress in tooling, the compiler and language, community efforts, research projects and concludes with our priorities for 2015.&lt;/p&gt;
&lt;h3&gt;Tooling&lt;/h3&gt;

&lt;p&gt;At the start of 2014, we had just helped to release
&lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-1-1-released/&quot;&gt;OPAM 1.1.1&lt;/a&gt; with our colleagues
at &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt;, and serious OCaml users had just started moving
over to using it.&lt;/p&gt;
&lt;p&gt;Our overall goal at OCaml Labs is to deliver a modular set of of development tools around
OCaml that we dub the &lt;em&gt;OCaml Platform&lt;/em&gt;.  The remainder of 2014 was thus spent polishing
this nascent OPAM release into a solid base (both as a command-line tool and as a library)
that we could use as the basis for documentation, testing and build infrastructure, all
the while making sure that bigger OCaml projects continued to migrate over to it.
Things have been busy; here are the highlights of this effort.&lt;/p&gt;
&lt;h4&gt;OPAM&lt;/h4&gt;

&lt;p&gt;The central &lt;a href=&quot;https://github.com/ocaml/opam-repository&quot;&gt;OPAM repository&lt;/a&gt; that 
contains the package descriptions has grown tremendously in 2014, with over
280 contributors committing almost 10000 changesets across 3800 
&lt;a href=&quot;https://github.com/ocaml/opam-repository/pulls&quot;&gt;pull requests&lt;/a&gt; on GitHub.
The front line of incoming testing has been continuous integration by the wonderful
&lt;a href=&quot;http://travis-ci.org/ocaml/opam-repository&quot;&gt;Travis CI&lt;/a&gt;, who also
granted us access to their experimental &lt;a href=&quot;http://docs.travis-ci.com/user/osx-ci-environment/&quot;&gt;MacOS X&lt;/a&gt; 
build pool.  The OPAM package team also to expanded to give David Sheets, Jeremy Yallop, 
Peter Zotov and Damien Doligez commit rights, and they have all been busily triaging new packages
as they come in.&lt;/p&gt;
&lt;p&gt;Several large projects such as &lt;a href=&quot;http://xapi-project.github.io/&quot;&gt;Xapi&lt;/a&gt;, &lt;a href=&quot;http://ocsigen.org&quot;&gt;Ocsigen&lt;/a&gt; and
our own &lt;a href=&quot;http://openmirage.org&quot;&gt;MirageOS&lt;/a&gt; switched over to using OPAM
for day-to-day development, as well as prolific individual developers such as 
&lt;a href=&quot;http://erratique.ch&quot;&gt;Daniel Buenzli&lt;/a&gt; and &lt;a href=&quot;http://ocaml.info/&quot;&gt;Markus Mottl&lt;/a&gt;.
&lt;a href=&quot;https://blogs.janestreet.com/category/ocaml/&quot;&gt;Jane Street&lt;/a&gt; continued to send
regular &lt;a href=&quot;https://github.com/ocaml/opam-repository/pulls?utf8=%E2%9C%93&amp;amp;q=is:pr%20author:diml%20&quot;&gt;monthly updates&lt;/a&gt; 
of their Core/Async suite, and releases appeared from the 
&lt;a href=&quot;https://github.com/ocaml/opam-repository/pull/3570&quot;&gt;Facebook&lt;/a&gt; open-source team
as well (who develop &lt;a href=&quot;https://code.facebook.com/posts/264544830379293/hack-a-new-programming-language-for-hhvm/&quot;&gt;Hack&lt;/a&gt;,
&lt;a href=&quot;https://github.com/facebook/flow&quot;&gt;Flow&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/pfff&quot;&gt;Pfff&lt;/a&gt; in OCaml).&lt;/p&gt;
&lt;p&gt;We used feedback from the users to smooth away many of the rough edges, with:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;a redesigned &lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-2-pin/&quot;&gt;development workflow&lt;/a&gt; that
 lets developers quickly grab a development version of a library  recompile all 
 dependent packages automatically, and quickly publish results to GitHub.&lt;/li&gt;&lt;li&gt;binary distributions for common OS distributions via their 
 &lt;a href=&quot;https://github.com/ocaml/opam/wiki/Distributions&quot;&gt;native packaging&lt;/a&gt;, as well 
 as &lt;a href=&quot;http://opam.ocaml.org/blog/0install-intro/&quot;&gt;0install&lt;/a&gt; and 
 &lt;a href=&quot;https://github.com/mirage/mirage-vagrant-vms&quot;&gt;Vagrant boxes&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;a unified way of cloning the source of any package via &lt;code&gt;opam source&lt;/code&gt;.  This
 handles any supported OPAM archive, including Git, Mercurial or Darcs remotes. &lt;/li&gt;&lt;li&gt;a richer package metadata, including source code, development archives and
 bug report URLs.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;These changes were all incorporated into the &lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-2-0-release/&quot;&gt;OPAM 1.2&lt;/a&gt;,
along with backwards compatibility shims to keep the old 1.1 metadata format working until
the migration is complete.  The 1.2.x series has been a solid and usable
development manager, and last week's release of &lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-2-1-release/&quot;&gt;OPAM 1.2.1&lt;/a&gt; has further polished the core scripting engine.&lt;/p&gt;
&lt;h5&gt;Platform Blog&lt;/h5&gt;

&lt;p&gt;One of the more notable developments during 2014 was the 
&lt;a href=&quot;http://coq-blog.clarus.me/use-opam-for-coq.html&quot;&gt;adoption of OPAM&lt;/a&gt; further up the 
ecosystem by the &lt;a href=&quot;https://coq.inria.fr/&quot;&gt;Coq&lt;/a&gt; theorem prover.  This broadening of the
community prompted us to create an &lt;a href=&quot;http://opam.ocaml.org&quot;&gt;official OPAM blog&lt;/a&gt; to give
us a central place for new and tips, and we've had posts about
&lt;a href=&quot;http://opam.ocaml.org/blog/opam-in-xenserver/&quot;&gt;XenServer&lt;/a&gt; developments, 
the &lt;a href=&quot;http://opam.ocaml.org/blog/turn-your-editor-into-an-ocaml-ide/&quot;&gt;Merlin IDE tool&lt;/a&gt;
and the modern &lt;a href=&quot;http://opam.ocaml.org/blog/about-utop/&quot;&gt;UTop&lt;/a&gt; interactive REPL.
If you are using OPAM in an interesting or production capacity, please do
&lt;a href=&quot;https://github.com/ocaml/platform-blog/issues&quot;&gt;get in touch&lt;/a&gt; so that we can work
with you to write about it for the wider community.&lt;/p&gt;
&lt;p&gt;The goal of the blog is also to start bringing together the various
components that form the OCaml Platform.  These are designed to be
modular tools (so that you can pick and choose which ones are necessary
for your particular use of OCaml).  There are more details available
from the OCaml Workshop presentation at ICFP 2014 (&lt;a href=&quot;https://ocaml.org/meetings/ocaml/2014/ocaml2014_7.pdf&quot;&gt;abstract&lt;/a&gt;,
&lt;a href=&quot;https://ocaml.org/meetings/ocaml/2014/ocl-platform-2014-slides.pdf&quot;&gt;slides&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/watch?v=jxhtpQ5nJHg&amp;amp;list=UUP9g4dLR7xt6KzCYntNqYcw&quot;&gt;video&lt;/a&gt;).&lt;/p&gt;
&lt;h5&gt;Onboarding New Users&lt;/h5&gt;

&lt;p&gt;OPAM has also been adopted now by &lt;a href=&quot;http://harvard.edu&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;http://cornell.edu&quot;&gt;big&lt;/a&gt; &lt;a href=&quot;http://princeton.edu&quot;&gt;universities&lt;/a&gt;
(including &lt;a href=&quot;http://www.cl.cam.ac.uk/teaching/1415/L28/&quot;&gt;us at Cambridge&lt;/a&gt;!)
for undergraduate and graduate Computer Science courses.  The demands increased for
an out-of-the-box solution that makes it as easy possible for new users to
get started with minimum hassle.
We created a &lt;a href=&quot;http://lists.ocaml.org/listinfo/teaching&quot;&gt;dedicated teaching list&lt;/a&gt;
to aid collaboration, and a list of &lt;a href=&quot;http://ocaml.org/learn/teaching-ocaml.html&quot;&gt;teaching resources on ocaml.org&lt;/a&gt;
and supported several initiatives in collaboration with
&lt;a href=&quot;https://github.com/AltGr&quot;&gt;Louis Gesbert&lt;/a&gt; at OCamlPro, as usual with OPAM development).&lt;/p&gt;
&lt;p&gt;The easiest way to make things &amp;quot;just work&amp;quot; are via regular binary builds of the
latest releases of OCaml and OPAM on Debian, Ubuntu, CentOS and Fedora, via
&lt;a href=&quot;http://launchpad.net/~avsm&quot;&gt;Ubuntu PPAs&lt;/a&gt; 
and the &lt;a href=&quot;https://build.opensuse.org/package/show/home%3Aocaml/opam&quot;&gt;OpenSUSE Build Service&lt;/a&gt; repositories.
Our industrial collaborators from Citrix, &lt;a href=&quot;http://jon.recoil.org&quot;&gt;Jon Ludlam&lt;/a&gt; 
and &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; began an 
&lt;a href=&quot;http://lists.ocaml.org/pipermail/opam-devel/2015-January/000910.html&quot;&gt;upstreaming initiative&lt;/a&gt; to Fedora
and sponsored the creation of a &lt;a href=&quot;http://lists.centos.org/pipermail/centos-devel/2014-November/012375.html&quot;&gt;CentOS SIG&lt;/a&gt;
to ensure that binary packages remain up-to-date.  We also contribute to the hardworking packagers
on MacOS X, Debian, FreeBSD, NetBSD and OpenBSD where possible as well to ensure that
binary builds are well rounded out.  Richard Mortier also assembled &lt;a href=&quot;https://github.com/mirage/mirage-vagrant-vms&quot;&gt;Vagrant boxes&lt;/a&gt;
that contain OCaml, for use with VirtualBox.&lt;/p&gt;
&lt;p&gt;Within OPAM itself, we applied polish to the handling of &lt;a href=&quot;https://github.com/ocaml/opam-depext&quot;&gt;external dependencies&lt;/a&gt;
to automate checking that the system libraries required by OPAM are present.  Two emerging tools that should
help further in 2015 are the &lt;a href=&quot;https://github.com/OCamlPro/opam-user-setup&quot;&gt;opam-user-setup&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ocaml/opam/issues/1035&quot;&gt;OPAM-in-a-box&lt;/a&gt; plugins that automate first-time configuration.
These last two are primarily developed at OCamlPro, with design input and support from OCaml Labs.&lt;/p&gt;
&lt;p&gt;We do have a lot of work left to do with making the new user experience really
seamless, and help is &lt;em&gt;very&lt;/em&gt; welcome from anyone who is interested.  It often helps
to get the perspective of a newcomer to find out where the stumbling blocks are, and
we value any such advice.  Just mail &lt;a href=&quot;mailto:opam-devel@lists.ocaml.org&quot;&gt;opam-devel@lists.ocaml.org&lt;/a&gt;
with your thoughts, or &lt;a href=&quot;https://github.com/ocaml/opam/issues&quot;&gt;create an issue&lt;/a&gt; on how we
can improve.  A particularly good example of such an initiative was started by 
Jordan Walke, who prototyped &lt;a href=&quot;https://github.com/jordwalke/CommonML&quot;&gt;CommonML&lt;/a&gt; with
a NodeJS-style development workflow, and 
&lt;a href=&quot;http://lists.ocaml.org/pipermail/opam-devel/2015-February/000975.html&quot;&gt;wrote up&lt;/a&gt; his 
design document for the mailing list. (Your questions or ideas do not need to be as
well developed as Jordan's prototype!)&lt;/p&gt;
&lt;h4&gt;Testing Packages&lt;/h4&gt;

&lt;p&gt;The public Travis CI testing does come with some limitations, since it only
checks that the latest package sets install, but not if any transitive
dependencies fail due to interface changes.  It also doesn't test all the
optional dependency combinations due to the 50 minute time limit.&lt;/p&gt;
&lt;p&gt;We expanded the OPAM repository testing in several ways to get around this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Individual Repositories:&lt;/strong&gt; Thomas Gazagnaire built 
 &lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-2-travisci/&quot;&gt;centralised Travis scripts&lt;/a&gt; 
 that can be used on any OCaml GitHub repository to easily test code before it is
 released into OPAM.  These scripts are sourced from a central &lt;a href=&quot;https://github.com/ocaml/ocaml-travisci-skeleton&quot;&gt;repository&lt;/a&gt;
 and support external, optional and reverse dependency checking across multiple revisions of the
 compiler.  For instance, it just needs &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp/blob/master/.travis.yml&quot;&gt;one file&lt;/a&gt; to test
 all the supported permutations of the &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;CoHTTP&lt;/a&gt; library.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bulk Builds&lt;/strong&gt;: Damien Doligez and I independently started doing large-scale bulk builds of
 the repository to ensure that a single snapshot of the package repository can automatically
 build as many packages as possible.  My implementation used the &lt;a href=&quot;http://docker.com&quot;&gt;Docker&lt;/a&gt;
 container manager to spawn off 1000s of package builds in parallel and commit the results into a filesystem
 This required building a &lt;a href=&quot;http://avsm.github.io/ocaml-dockerfile&quot;&gt;Dockerfile eDSL&lt;/a&gt;, and the results
 are now online at &lt;a href=&quot;https://opam.ocaml.org/builds&quot;&gt;https://opam.ocaml.org/builds&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;OCamlot&lt;/strong&gt;: An ongoing piece of infrastructure work is to take the bulk build logs (which are
 around 7GB per daily run), and to store and render them using our &lt;a href=&quot;http://irmin.io&quot;&gt;Irmin&lt;/a&gt; Git store. 
 Expect to see more around this soon; it has the awesome feature of letting any developer clone
 the build logs for their project locally, to make triage of foreign operating systems as simple 
 as possible.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;h5&gt;Language Evolution&lt;/h5&gt;

&lt;p&gt;This ability to do unattended builds of the package repository has also improved the decision
making process within the core compiler team.  Since we now have a large (3000+ package) corpus of
OCaml code, it became a regular occurrence in the 4.02 development cycle to 
&amp;quot;&lt;a href=&quot;http://anil.recoil.org/2014/04/08/grepping-every-known-ocaml-package-source.html&quot;&gt;ask OPAM&lt;/a&gt;&amp;quot; whether 
a particular feature or new syntax would break any existing code.  This in turn provides an
incentive for commercial users to provide representative samples of their code; for instance, the
Jane Street Core releases in OPAM (with their very modular style) act as an open-source canary
without needing access to any closed source code.&lt;/p&gt;
&lt;p&gt;One good example in 2014 was the decoupling of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Camlp4&quot;&gt;Camlp4&lt;/a&gt; 
macro preprocessor from the main OCaml
distribution.  Since Camlp4 has been used for over a decade and there are some very commonly
used syntax extensions such as &lt;a href=&quot;https://github.com/janestreet/type_conv&quot;&gt;type_conv&lt;/a&gt;, a simple
removal would break a lot of packages.  We used OPAM to perform a gradual movement that most
users hopefully never noticed by the time OCaml 4.02 was released.  First, we added a 
&lt;a href=&quot;https://github.com/ocaml/opam-repository/pull/2558&quot;&gt;dummy package&lt;/a&gt; in OPAM for earlier versions 
of the compiler that had Camlp4 built-in, and then used the OPAM constraint engine to compile it
as an external tool for the newer compiler revisions.  Then we just had to triage the bulk build
logs to find build failures from packages
that were missing a Camlp4 dependency, and &lt;a href=&quot;https://github.com/ocaml/opam-repository/pulls?utf8=%E2%9C%93&amp;amp;q=camlp4%20requires%20is:pr%20&quot;&gt;add them&lt;/a&gt; to the package metadata.&lt;/p&gt;
&lt;h5&gt;GitHub Integration&lt;/h5&gt;

&lt;p&gt;An interesting &lt;a href=&quot;https://twitter.com/vincenthz/status/563108158907097089&quot;&gt;comment&lt;/a&gt; from Vincent Hanquez
about OPAM is that &amp;quot;OCaml's OPAM is a post-GitHub design&amp;quot;.  This is very true, as much of the
workflow for pinning &lt;code&gt;git://&lt;/code&gt; URLs emerged out of being early adopters of GitHub for hosting the
MirageOS.  OCaml Labs supported two pieces of infrastructure integration around GitHub in 2014:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;OPAM has a compiler switch feature that lets you run simultaneous OCaml installations and
 swap between them easily. I used my &lt;a href=&quot;https://github.com/avsm/ocaml-github&quot;&gt;GitHub API bindings&lt;/a&gt;
 to regularly convert every GitHub pull request 
 into &lt;a href=&quot;http://anil.recoil.org/2014/03/25/ocaml-github-and-opam.html&quot;&gt;a custom compiler switch&lt;/a&gt;.
 This lets users reporting bugs try out a patched compiler almost immediately upon a fix becoming
 available.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;The motivation behind this feature was our collaborator Gabriel Scherer's 
 &lt;a href=&quot;http://gallium.inria.fr/blog/patch-review-on-github/&quot;&gt;experiment&lt;/a&gt; to enable patch review of
 OCaml on GitHub, alongside the venerable &lt;a href=&quot;http://caml.inria.fr/mantis/view_all_bug_page.php&quot;&gt;Mantis bug tracker&lt;/a&gt;.
 We supported this via adding Travis CI support to the main compiler, and also helped to migrate a
 number of support libraries to GitHub, such as &lt;a href=&quot;https://github.com/ocaml/camlp4&quot;&gt;camlp4&lt;/a&gt;.  These
 can all be found on the &lt;a href=&quot;https://github.com/ocaml&quot;&gt;ocaml&lt;/a&gt; organisation on GitHub.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;h4&gt;Codoc Documentation&lt;/h4&gt;

&lt;p&gt;Leo White, David Sheets, Amir Chaudhry and Thomas Gazagnaire led the charge 
to build a modern documentation generator for OCaml, and 
&lt;a href=&quot;http://lists.ocaml.org/pipermail/platform/2015-February/000539.html&quot;&gt;published&lt;/a&gt;
an &lt;em&gt;alpha&lt;/em&gt; version of &lt;a href=&quot;https://github.com/dsheets/codoc&quot;&gt;codoc 0.2.0&lt;/a&gt; after a lot of work throughout 2014.
In the 2014 OCaml workshop presentation 
(&lt;a href=&quot;http://ocaml.org/meetings/ocaml/2014/ocaml2014_7.pdf&quot;&gt;abstract&lt;/a&gt;,
&lt;a href=&quot;http://ocaml.org/meetings/ocaml/2014/ocl-platform-2014-slides.pdf&quot;&gt;slides&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/watch?v=jxhtpQ5nJHg&amp;amp;list=UUP9g4dLR7xt6KzCYntNqYcw&quot;&gt;video&lt;/a&gt;),
we mentioned the &amp;quot;module wall&amp;quot; for documentation and this attempts to fix it.
To try it out, simply follow the directions in the README on that repository,
or &lt;a href=&quot;http://dsheets.github.io/codoc&quot;&gt;browse some samples&lt;/a&gt; of the current,
default output of the tool. Please do bear in mind codoc and its constituent
libraries are still under heavy development and are &lt;em&gt;not&lt;/em&gt; feature complete, but
we're gathering &lt;a href=&quot;https://github.com/dsheets/codoc/issues&quot;&gt;feedback&lt;/a&gt; from early
adopters.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;codoc&lt;/code&gt;'s aim is to provide a widely useful set of tools for generating OCaml
documentation. In particular, we are striving to:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Cover all of OCaml's language features&lt;/li&gt;&lt;li&gt;Provide accurate name resolution and linking&lt;/li&gt;&lt;li&gt;Support cross-linking between different packages&lt;/li&gt;&lt;li&gt;Expose interfaces to the components we've used to build &lt;code&gt;codoc&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Provide a magic-free command-line interface to the tool itself&lt;/li&gt;&lt;li&gt;Reduce external dependencies and default integration with other tools&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;We haven't yet achieved all of these at all levels of our tool stack but are
getting close, and the patches are all under discussion for integration into
the mainstream OCaml compiler.
&lt;code&gt;codoc&lt;/code&gt; 0.2.0 is usable today (if a little rough in some areas like default CSS),
and there is a &lt;a href=&quot;http://opam.ocaml.org/blog/codoc-0-2-0-released/&quot;&gt;blog post&lt;/a&gt; that outlines the architecture of the new system to
make it easier to understand the design decisions that went into it.&lt;/p&gt;
&lt;h4&gt;Community Governance&lt;/h4&gt;

&lt;p&gt;As the amount of infrastructure built around the &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt; domain grows (e.g. mailing lists, file hosting, bulk building), it is important to establish a governance framework to ensure that it is being used as best needed by the wider OCaml community.&lt;/p&gt;
&lt;p&gt;Amir Chaudhry took a good look at how other language communities organise themself, 
and began putting together a succinct 
&lt;a href=&quot;http://amirchaudhry.com/towards-governance-framework-for-ocamlorg/&quot;&gt;governance framework&lt;/a&gt; 
to capture how the community around &lt;code&gt;ocaml.org&lt;/code&gt; operates, and how to quickly resolve any conflicts 
that may arise in the future.  He took care to ensure it had a well-defined scope, is 
simple and self-contained, and (crucially) documents the current reality.  The result 
of this work is circulating privately through all the existing volunteers for a first 
round of feedback, and will go live in the next few months as a living document 
that explains how our community operates.&lt;/p&gt;
&lt;h4&gt;Assemblage&lt;/h4&gt;

&lt;p&gt;One consequence of OCaml's age (close to twenty years old now) is that the tools built
around the compiler have evolved fairly independently.  While OPAM now handles the high-level
package management, there is quite a complex ecosystem of other components that are complex
for new users to get to grips with: &lt;a href=&quot;http://github.com/ocaml/oasis&quot;&gt;OASIS&lt;/a&gt;,
&lt;a href=&quot;http://projects.camlcity.org/projects/findlib.html&quot;&gt;ocamlfind&lt;/a&gt;,
&lt;a href=&quot;https://ocaml.org/learn/tutorials/ocamlbuild/&quot;&gt;ocamlbuild&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/the-lambda-church/merlin&quot;&gt;Merlin&lt;/a&gt; to name a few.
Each of these components (while individually stable) have their own metadata and
namespace formats, further compounding the lack of cohesion of the tools.&lt;/p&gt;
&lt;p&gt;Thomas Gazagnaire and Daniel Buenzli embarked on an effort to build an eDSL
that unifies OCaml package descriptions, with the short-term aim of generating the
support files required by the various support tools, and the long-term goal of
being the integration point for the build, test and documentation generation
lifecycle of an OCaml/OPAM package.  This prototype, dubbed &lt;a href=&quot;https://github.com/samoht/assemblage&quot;&gt;Assemblage&lt;/a&gt;
has gone through several iterations and &lt;a href=&quot;https://github.com/samoht/assemblage/labels/design&quot;&gt;design discussions&lt;/a&gt;
over the summer of 2014.  Daniel has since been splitting out portions of it
into the &lt;a href=&quot;http://erratique.ch/software/bos&quot;&gt;Bos&lt;/a&gt; OS interaction library.&lt;/p&gt;
&lt;p&gt;Assemblage is not released officially yet, but we are committed to resuming work
on it this summer when Daniel visits again, with the intention of unifying much
of our workflow through this tool.   If you are interested in build and packaging
systems, now is the time to &lt;a href=&quot;https://github.com/samoht/assemblage&quot;&gt;make your opinion known&lt;/a&gt;!&lt;/p&gt;
&lt;h3&gt;Core Compiler&lt;/h3&gt;

&lt;p&gt;We also spent time in 2014 working on the core OCaml language and compiler, with our work
primarily led by Jeremy Yallop and Leo White.  These efforts were not looking to make any
radical changes in the core language; instead, we generally opted for evolutionary
changes that either polish rough edges in the language (such as open type and handler cases),
or new features that fit into the ML style of building programs.&lt;/p&gt;
&lt;h4&gt;New Features in 4.02.0&lt;/h4&gt;

&lt;p&gt;The OCaml 4.02 series was primarily developed and &lt;a href=&quot;https://ocaml.org/releases/4.02.html&quot;&gt;released&lt;/a&gt; in 2014.
The &lt;a href=&quot;http://caml.inria.fr/pub/distrib/ocaml-4.02/notes/Changes&quot;&gt;ChangeLog&lt;/a&gt; generated much
&lt;a href=&quot;https://blogs.janestreet.com/ocaml-4-02-everything-else/&quot;&gt;user excitement&lt;/a&gt;,
and we were also pleased to have contributed several language improvements.&lt;/p&gt;
&lt;h5&gt;Handler Cases and exceptional syntax&lt;/h5&gt;

&lt;p&gt;OCaml's &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; constructs are good at dealing with exceptions
and values respectively, but neither constructs can handle both values and exceptions.
Jeremy Yallop investigated 
&lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/2014/02/04/handler-case.html#match-exception&quot;&gt;how to handle success&lt;/a&gt;
more elegantly, and an elegant unified syntax emerged.  A simple example is that
of a stream iterator that uses exceptions for control flow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let rec iter_stream f s =
  match (try Some (MyStream.get s) with End_of_stream -&amp;gt; None) with
  | None -&amp;gt; ()
  | Some (x, s') -&amp;gt; f x; iter_stream f s'&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code is not only verbose, but it also has to allocate an &lt;code&gt;option&lt;/code&gt; value to ensure
that the &lt;code&gt;iter_stream&lt;/code&gt; calls remains tail recursive.  The new syntax in OCaml 4.02
allows the above to be rewritten succinctly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let rec iter_stream f s =
  match MyStream.get s with
  | (x, s') -&amp;gt; f x; iter_stream f s'
  | exception End_of_stream -&amp;gt; ()&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Read more about the background of this feature in Jeremy's 
&lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/2014/02/04/handler-case.html#match-exception&quot;&gt;blog post&lt;/a&gt;, the associated discussion in the &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6318&quot;&gt;upstream Mantis bug&lt;/a&gt;,
and the final &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec245&quot;&gt;manual page&lt;/a&gt; in the OCaml 4.02 release.
For an example of its use in a real library, see the Jane Street &lt;a href=&quot;https://github.com/janestreet/sexplib/blob/1bd69553/lib/conv.ml#L213-L215&quot;&gt;usage&lt;/a&gt; in the &lt;a href=&quot;https://github.com/janestreet/sexplib&quot;&gt;s-expression&lt;/a&gt; handling library (which they use widely to reify arbitrary OCaml values and exceptions).&lt;/p&gt;
&lt;h5&gt;Open Extensible Types&lt;/h5&gt;

&lt;p&gt;A long-standing trick to build &lt;a href=&quot;https://blogs.janestreet.com/rethinking-univ/&quot;&gt;universal containers&lt;/a&gt; 
in OCaml has been to encode them using the exception &lt;code&gt;exn&lt;/code&gt; type.
There is a similar concept of a &lt;a href=&quot;http://mlton.org/UniversalType&quot;&gt;universal type&lt;/a&gt; in Standard ML,
and they were described in the &amp;quot;&lt;a href=&quot;http://www.andres-loeh.de/OpenDatatypes.pdf&quot;&gt;Open Data Types and Open Functions&lt;/a&gt;&amp;quot;
paper by Andres L&amp;ouml;h and Ralf Hinze in 2006.&lt;/p&gt;
&lt;p&gt;Leo White designed, implemented and upstreamed support for 
&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/extn.html#sec246&quot;&gt;extensible variant types&lt;/a&gt; in 
OCaml 4.02. Extensible variant types are variant types that can be extended with new variant constructors.
They can be defined as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type attr = ..

type attr += Str of string

type attr +=
  | Int of int
  | Float of float&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pattern matching on an extensible variant type requires a default case to handle unknown 
variant constructors, just as is required for pattern matching on exceptions (extensible
types use the exception memory representation at runtime).&lt;/p&gt;
&lt;p&gt;With this feature added, the OCaml &lt;code&gt;exn&lt;/code&gt; type simply becomes a special case of open extensible
types. Exception constructors can be declared using the type extension syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    type exn += Exc of int&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can read more about the discussion behind open extensible types in the upstream
&lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5584&quot;&gt;Mantis bug&lt;/a&gt;.  If you'd like to see another
example of their use, they have been adopted by the latest releases of the 
Jane Street Core libraries in the 
&lt;a href=&quot;https://github.com/janestreet/core_kernel/blob/43ee3eef/lib/type_equal.ml#L64&quot;&gt;Type_equal&lt;/a&gt;
module.&lt;/p&gt;
&lt;h4&gt;Modular Implicits&lt;/h4&gt;

&lt;p&gt;A common criticism of OCaml is its lack of support for ad-hoc polymorphism. 
The classic example of this is OCaml's separate addition operators for 
integers (&lt;code&gt;+&lt;/code&gt;) and floating-point numbers (&lt;code&gt;+.&lt;/code&gt;).
Another example is the need for type-specific printing functions (&lt;code&gt;print_int&lt;/code&gt;, &lt;code&gt;print_string&lt;/code&gt;, etc.)
rather than a single &lt;code&gt;print&lt;/code&gt; function which works across multiple types.&lt;/p&gt;
&lt;p&gt;Taking inspiration from Scala's 
&lt;a href=&quot;http://docs.scala-lang.org/tutorials/tour/implicit-parameters.html&quot;&gt;implicits&lt;/a&gt; and 
&lt;a href=&quot;http://www.mpi-sws.org/~dreyer/papers/mtc/main-long.pdf&quot;&gt;Modular Type Classes&lt;/a&gt; by Dreyer &lt;em&gt;et al.&lt;/em&gt;,
Leo White designed a system for ad-hoc polymorphism in OCaml based on using modules as
type-directed implicit parameters.  The design not only supports implicit modules, but also 
implicit functors (that is, modules parameterised by other module types) to permit the expression
of generic modular implicits in exactly the same way that functors are used to build abstract
data structures.&lt;/p&gt;
&lt;p&gt;Frederic Bour joined us as a summer intern and dove straight
into the implementation, resulting in an 
&lt;a href=&quot;http://andrewray.github.io/iocamljs/modimp_show.html&quot;&gt;online demo&lt;/a&gt; and ML Workshop presentation 
(&lt;a href=&quot;https://sites.google.com/site/mlworkshoppe/modular-implicits.pdf?attredirects=0&quot;&gt;abstract&lt;/a&gt;,
 &lt;a href=&quot;https://www.youtube.com/watch?v=3wVUXTd4WNc&quot;&gt;video&lt;/a&gt; and
 &lt;a href=&quot;http://www.lpw25.net/ml2014.pdf&quot;&gt;paper&lt;/a&gt;).
Another innovation in how we've been trialling this feature is the use of Andy Ray's
&lt;a href=&quot;https://andrewray.github.io/iocamljs/&quot;&gt;IOCamlJS&lt;/a&gt;
to publish an interactive, online notebook that is fully hosted in the browser.  You can follow the
examples of modular implicits &lt;a href=&quot;https://andrewray.github.io/iocamljs/modimp_show.html&quot;&gt;online&lt;/a&gt;,
or try them out on your own computer via an OPAM switch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;opam switch 4.02.0+modular-implicits
eval `opam config env`
opam install utop 
utop&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some of the early feedback on modular implicits from industrial users was interesting.
Jane Street commented that although this would be a big usability leap, it would be dangerous to
lose control over exactly what goes into the implicit environment (i.e. the programmer should always
know what &lt;code&gt;(a + b)&lt;/code&gt; represents by locally reasoning about the code).  The current design thus follows
the ML discipline of maintaining explicit control over the namespace, with any ambiguities in resolving
an implicit module type resulting in a type error.&lt;/p&gt;
&lt;h4&gt;Multicore&lt;/h4&gt;

&lt;p&gt;In addition to ad-hoc polymorphism, support for parallel execution on multicore CPUs is undoubtedly
the most common feature request for OCaml.  This has been high on our list after improving tooling 
support, and Stephen Dolan and Leo White made solid progress in 2014 on the core runtime plumbing
required.&lt;/p&gt;
&lt;p&gt;Stephen initially added &lt;a href=&quot;https://github.com/stedolan/ocaml&quot;&gt;thread-local support&lt;/a&gt; to the 
OCaml compiler.  This design avoided the need to make the entire OCaml runtime preemptive
(and thus a huge patch) by allocating thread-local state per core.&lt;/p&gt;
&lt;p&gt;We are now deep into the design and implementation of the programming abstractions built
over these low-level primitives.  One exciting aspect of our implementation is much of the scheduling
logic for multicore OCaml can be written in (single-threaded) OCaml, making the design very
flexible with respect to &lt;a href=&quot;http://kcsrk.info/papers/mmscc_marc12.pdf&quot;&gt;heterogenous hardware&lt;/a&gt; 
and &lt;a href=&quot;http://fable.io&quot;&gt;variable IPC performance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get feedback on the overall design of multicore OCaml, we presented at OCaml 2014
(&lt;a href=&quot;http://www.cl.cam.ac.uk/~sd601/papers/multicore_slides.pdf&quot;&gt;slides&lt;/a&gt;,
 &lt;a href=&quot;https://www.youtube.com/watch?v=FzmQTC_X5R4&quot;&gt;video&lt;/a&gt; and
 &lt;a href=&quot;https://ocaml.org/meetings/ocaml/2014/ocaml2014_1.pdf&quot;&gt;abstract&lt;/a&gt;), and 
 Stephen visited INRIA to consult with the development team and Arthur Chargueraud (the author of &lt;a href=&quot;http://www.chargueraud.org/softs/pasl/&quot;&gt;PASL&lt;/a&gt;). 
Towards the end of the year, &lt;a href=&quot;http://kcsrk.info/&quot;&gt;KC Sivaramakrishnan&lt;/a&gt; finished his PhD
studies at Purdue and joined
our OCaml Labs group.  He is the author of &lt;a href=&quot;http://multimlton.cs.purdue.edu/mML/Welcome.html&quot;&gt;MultiMlton&lt;/a&gt;,
and is now driving the completion of the OCaml multicore work along with Stephen Dolan, Leo White and
Mark Shinwell. Stay tuned for updates from us when there is more to show later this year!&lt;/p&gt;
&lt;h4&gt;Ctypes: a Modular Foreign Function Interface&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes&quot;&gt;Ctypes&lt;/a&gt; library started as an experiment with
GADTs by Jeremy Yallop, and has since ballooned in a robust, comprehensive library
for safely interacting with the OCaml foreign function interface.   The first release
came out in time to be included in 
&lt;a href=&quot;https://realworldocaml.org/v1/en/html/foreign-function-interface.html&quot;&gt;Real World OCaml&lt;/a&gt; 
in lieu of the low-level FFI (which I was not particularly enamoured with having to explain
in a tight page limit).&lt;/p&gt;
&lt;p&gt;Throughout 2014, Jeremy expanded support for a number of features requested by users
(both industrial and academic) who adopted the library in preference to manually writing
C code to interface with the runtime, and issued several updated 
&lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/releases&quot;&gt;releases&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;C Stub Generation&lt;/h5&gt;

&lt;p&gt;The first release of Ctypes required the use of &lt;a href=&quot;https://sourceware.org/libffi/&quot;&gt;libffi&lt;/a&gt;
to dynamically load shared libraries and dynamically construct function call stack
frames whenever a foreign function is called.  While this works for simple libraries,
it cannot cover &lt;em&gt;all&lt;/em&gt; usecases, since interfacing with C demands an understanding
of &lt;code&gt;struct&lt;/code&gt; memory layout, C preprocessor macros, and other platform-dependent quirks
which are more easily dealt with by invoking a C compiler.  Finally, the performance
of a &lt;code&gt;libffi&lt;/code&gt;-based API will necessarily be slower than writing direct C stub code.&lt;/p&gt;
&lt;p&gt;While many other language FFIs provide separate libraries for dynamic and static
FFI libraries, we decided to have a go at building a &lt;em&gt;modular&lt;/em&gt; version of Ctypes
that could handle both cases from a single description of the foreign function interface.
The result (dubbed &amp;quot;Cmeleon&amp;quot;) remained surprisingly succinct and usable, and now
covers almost every use of the OCaml foreign function interface.  We 
submitted a paper to &lt;a href=&quot;http://icfpconference.org/2015&quot;&gt;ICFP 2015&lt;/a&gt; dubbed
&amp;quot;&lt;a href=&quot;http://anil.recoil.org/papers/drafts/2015-cmeleon-icfp-draft1.pdf&quot;&gt;A modular foreign function interface&lt;/a&gt;&amp;quot;
that describes it in detail.  Here is a highlight of how simple a generic binding looks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module Bindings(F : FOREIGN) = struct
  open F
  let gettimeofday = foreign &amp;quot;gettimeofday&amp;quot;
     (ptr timeval @-&amp;gt; ptr timezone @-&amp;gt; returning int)
end&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;FOREIGN&lt;/code&gt; module type completely abstracts the details of whether or not dynamic
or static binding is used, and handles C complexities such as computing the struct
layout on the local machine architecture.&lt;/p&gt;
&lt;h5&gt;Inverse Stubs&lt;/h5&gt;

&lt;p&gt;The other nice result from functorising the foreign function interface emerged
when we tried to &lt;em&gt;invert&lt;/em&gt; the FFI and serve a C interface from OCaml code (for
example, by compiling the OCaml code as a 
&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/intfc.html&quot;&gt;shared library&lt;/a&gt;).  This
would let us begin swapping out C libraries that we &lt;a href=&quot;http://openssl.org&quot;&gt;don't trust&lt;/a&gt;
with &lt;a href=&quot;https://github.com/mirage/ocaml-tls&quot;&gt;safer equivalents&lt;/a&gt; written in OCaml.&lt;/p&gt;
&lt;p&gt;You can see an &lt;a href=&quot;https://github.com/yallop/ocaml-ctypes-inverted-stubs-example&quot;&gt;example&lt;/a&gt;
 of how inverted stubs work via a simple C XML parsing exposed
from the &lt;a href=&quot;http://erratique.ch/software/xmlm&quot;&gt;Xmlm&lt;/a&gt; library.  We can define a C &lt;code&gt;struct&lt;/code&gt;
by:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(* Define a struct of callbacks (C function pointers) *)
let handlers : [`handlers] structure typ = structure &amp;quot;handlers&amp;quot;
let (--) s f = field handlers s (funptr f)
 let on_data      = &amp;quot;on_data&amp;quot;      -- (string @-&amp;gt; returning void)
 let on_start_tag = &amp;quot;on_start_tag&amp;quot; -- (string @-&amp;gt; string @-&amp;gt; returning void)
 let on_end_tag   = &amp;quot;on_end_tag&amp;quot;   -- (void @-&amp;gt; returning void)
 let on_dtd       = &amp;quot;on_dtd&amp;quot;       -- (string @-&amp;gt; returning void) 
 let on_error     = &amp;quot;on_error&amp;quot;     -- (int @-&amp;gt; int @-&amp;gt; string @-&amp;gt; returning void)
let () = seal handlers&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then expose this via C functions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module Stubs(I : Cstubs_inverted.INTERNAL) = struct
  (* Expose the type 'struct handlers' to C. *)
  let () = I.structure handlers

  (* We expose just a single function to C.  The first argument is a (pointer
     to a) struct of callbacks, and the second argument is a string
     representing a filename to parse. *)
  let () = I.internal &amp;quot;parse_xml&amp;quot; 
     (ptr handlers @-&amp;gt; string @-&amp;gt; returning void) parse
end&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can find the full source code to these snippets on the 
&lt;a href=&quot;https://github.com/yallop/ocaml-ctypes-inverted-stubs-example&quot;&gt;ocaml-ctypes-inverted-stubs-example&lt;/a&gt;
repository on GitHub.&lt;/p&gt;
&lt;p&gt;We'll be exploring this aspect of Ctypes further in 2015 for SSL/TLS with
David Kaloper and Hannes Mehnert, and Microsoft Research has generously funded a 
&lt;a href=&quot;http://research.microsoft.com/en-us/collaboration/global/phd_projects2015.aspx&quot;&gt;PhD studentship&lt;/a&gt; 
to facilitate the work.&lt;/p&gt;
&lt;h5&gt;Community Contributions&lt;/h5&gt;

&lt;p&gt;Ctypes benefited enormously from several external contributions from the OCaml
community.  From a portability perspective, A. Hauptmann contributed
&lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/pull/190&quot;&gt;Windows support&lt;/a&gt;, and
Thomas Leonard added &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/pull/231&quot;&gt;Xen support&lt;/a&gt;
to allow Ctypes bindings to work with &lt;a href=&quot;http://openmirage.org&quot;&gt;MirageOS unikernels&lt;/a&gt; (which opens
up the intriguing possibility of accessing shared libraries across virtual machine boundaries
in the future).  C language support was fleshed out by Edwin Torok contributing
&lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/pull/238&quot;&gt;typedef support&lt;/a&gt;,
Ramkumar Ramachandra adding &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/pull/220&quot;&gt;C99 bools&lt;/a&gt; 
and Peter Zotov integrating &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/pull/143&quot;&gt;native strings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The winner of &amp;quot;most enthusiastic use of OCaml Labs code&amp;quot; goes to &lt;a href=&quot;https://github.com/braibant&quot;&gt;Thomas Braibant&lt;/a&gt;
of &lt;a href=&quot;http://cryptosense.com/the-team/&quot;&gt;Cryptosense&lt;/a&gt;, who used &lt;em&gt;every&lt;/em&gt; feature of the
Ctypes library (consider multi-threaded, inverted, staged and marshalled bindings) in their
effort to &lt;a href=&quot;http://www.economist.com/news/science-and-technology/21647269-automating-search-loopholes-software-hacking-hackers&quot;&gt;hack the hackers&lt;/a&gt;.  David Sheets comes a close second with his implementation of the
&lt;a href=&quot;https://github.com/dsheets/profuse&quot;&gt;FUSE binary protocol&lt;/a&gt;, parameterised by version quirks.&lt;/p&gt;
&lt;p&gt;If you're using Ctypes, we would love to hear about your particular use.  A search on
GitHub and OPAM reveals over 20 projects using it already, including industrial use
at &lt;a href=&quot;http://cryptosense.com&quot;&gt;Cryptosense&lt;/a&gt; and &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Jane Street&lt;/a&gt;,
and ports to Windows, *BSD, MacOS X and even iPhone and Android.  There's a
&lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/wiki&quot;&gt;getting started&lt;/a&gt; guide, and
a &lt;a href=&quot;http://lists.ocaml.org/listinfo/ctypes&quot;&gt;mailing list&lt;/a&gt; available.&lt;/p&gt;
&lt;h3&gt;Community and Teaching Efforts&lt;/h3&gt;

&lt;p&gt;In addition to the online community building, we also participated in a number of conferences
and face-to-face events to promote education about functional programming.&lt;/p&gt;
&lt;h4&gt;&amp;nbsp;Conferences and Talks&lt;/h4&gt;

&lt;p&gt;There has been a huge growth in the number of quality conferences in recent years, making 
it tough to choose which ones to attend.
&lt;a href=&quot;http://icfpconference.org&quot;&gt;ICFP&lt;/a&gt; is the academic meeting point that predates most of them, 
and we &lt;a href=&quot;http://anil.recoil.org/2014/08/31/ocaml-labs-at-icfp-2014.html&quot;&gt;participated extensively&lt;/a&gt; in 2014 via talks, tutorials and a &lt;a href=&quot;https://www.youtube.com/watch?v=UEIHfXLMtwA&quot;&gt;keynote&lt;/a&gt; at the Haskell Symposium.&lt;br/&gt;I also served on the &lt;a href=&quot;http://icfpconference.org/icfp2014/&quot;&gt;program committee&lt;/a&gt; and 
&lt;a href=&quot;http://anil.recoil.org/2015/02/18/icfp15-call-for-sponsorships.html&quot;&gt;industrial relations chair&lt;/a&gt; 
and took over as the steering committee 
chair of &lt;a href=&quot;http://cufp.org&quot;&gt;CUFP&lt;/a&gt;.  Jeremy Yallop, Thomas Gazagnaire and Leo White all 
served program committees on workshops, with Jeremy also chairing this year's ML Workshop.&lt;/p&gt;
&lt;p&gt;Outside of academic conferences, we participated in a number of non-academic conferences such
as &lt;a href=&quot;https://qconsf.com/&quot;&gt;QCon&lt;/a&gt;, &lt;a href=&quot;http://oscon.com&quot;&gt;OSCON&lt;/a&gt;, &lt;a href=&quot;http://ccc.de&quot;&gt;CCC&lt;/a&gt;, 
&lt;a href=&quot;https://operatingsystems.io/&quot;&gt;New Directions in OS&lt;/a&gt;, &lt;a href=&quot;http://functionalconf.com&quot;&gt;FunctionalConf&lt;/a&gt;,
&lt;a href=&quot;https://skillsmatter.com/conferences/1819-functional-programming-exchange&quot;&gt;FPX&lt;/a&gt; and &lt;a href=&quot;https://fosdem.org/2014/&quot;&gt;FOSDEM&lt;/a&gt;. 
The vast majority of these talks were about the MirageOS, and slides can be found at &lt;a href=&quot;http://decks.openmirage.org&quot;&gt;decks.openmirage.org&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;The 2048 Browser Game&lt;/h5&gt;

&lt;p&gt;Yaron Minsky and I have run OCaml tutorials for ICFP for 
&lt;a href=&quot;http://cufp.org/2011/t3-building-functional-os.html&quot;&gt;a&lt;/a&gt; 
&lt;a href=&quot;http://cufp.org/2013/t2-yaron-minsky-anil-madhavapeddy-ocaml-tutorial.html&quot;&gt;few&lt;/a&gt;
&lt;a href=&quot;http://cufp.org/2012/t1-real-world-ocaml-anil-madhavapeddy-university-c.html&quot;&gt;years&lt;/a&gt;, and 
we finally hung up our boots in favour of a new crowd.&lt;/p&gt;
&lt;p&gt;Jeremy Yallop and Leo White stepped up to the mark with their ICFP/CUFP 2014 
&lt;a href=&quot;http://cufp.org/2014/t7-leo-white-introduction-to-ocaml.html&quot;&gt;Introduction to OCaml&lt;/a&gt;
tutorial, which had the additional twist of being taught entirely in a web browser
by virtue of using the &lt;a href=&quot;http://ocsigen.org/js_of_ocaml&quot;&gt;js_of_ocaml&lt;/a&gt; and &lt;a href=&quot;http://andrewray.github.io/iocamljs/&quot;&gt;IOCamlJS&lt;/a&gt;.
They decided that a good practical target was the popular &lt;a href=&quot;http://gabrielecirulli.github.io/2048/&quot;&gt;2048&lt;/a&gt; game that
has wasted many programmer hours here at OCaml Labs.  They &lt;a href=&quot;https://github.com/ocamllabs/2048-tutorial&quot;&gt;hacked on it&lt;/a&gt; over the summertime, assisted by our visitor Daniel Buenzli who also released useful libraries such as
&lt;a href=&quot;http://erratique.ch/software/vg&quot;&gt;Vg&lt;/a&gt;, &lt;a href=&quot;http://erratique.ch/software/react&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;http://erratique.ch/software/useri&quot;&gt;Useri&lt;/a&gt;, and &lt;a href=&quot;http://erratique.ch/software/gg&quot;&gt;Gg&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The end result is satisfyingly &lt;a href=&quot;http://ocamllabs.github.io/2048-tutorial/&quot;&gt;playable online&lt;/a&gt;, with the source code available at &lt;a href=&quot;https://github.com/ocamllabs/2048-tutorial&quot;&gt;ocamllabs/2048-tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thomas Gazagnaire got invited to Bangalore for &lt;a href=&quot;http://functionalconf.com/&quot;&gt;Functional Conf&lt;/a&gt; later in the year, and hee extended the &lt;a href=&quot;http://gazagnaire.org/fuconf14/&quot;&gt;interactive tutorial notebook&lt;/a&gt; and also ran an OCaml tutorial to a packed room.  We were very happy to support the first functional programming conference in India, and hope to see many more such events spring up!  Amir Chaudhry then went to Belgium to &lt;a href=&quot;https://fosdem.org/2015/&quot;&gt;FOSDEM 2015&lt;/a&gt; where he showed off &lt;a href=&quot;http://amirchaudhry.com/unikernel-arm-demo-fosdem/&quot;&gt;the 2048 game running as an ARM unikernel&lt;/a&gt; to a crowd of attendees at the Xen booth.&lt;/p&gt;
&lt;h4&gt;Graduate Teaching&lt;/h4&gt;

&lt;p&gt;Jeremy Yallop and Leo White (with assistance from Alan Mycroft and myself) also led the design of
a new graduate course on &lt;a href=&quot;http://www.cl.cam.ac.uk/teaching/1415/L28/&quot;&gt;Advanced Functional Programming&lt;/a&gt;
at the Computer Laboratory.  This ran in the &lt;a href=&quot;http://en.wikipedia.org/wiki/Lent_term&quot;&gt;Lent Term&lt;/a&gt; and
was over-subscribed by three times the number who pre-registered (due to a number of PhD students
and our collaborators from &lt;a href=&quot;http://citrix.com&quot;&gt;Citrix&lt;/a&gt; also attending).&lt;/p&gt;
&lt;p&gt;The course materials are &lt;a href=&quot;http://www.cl.cam.ac.uk/teaching/1415/L28/materials.html&quot;&gt;freely available online&lt;/a&gt;
and cover the theory behind functional programming, and then move onto type inference, abstraction and
parametricity, GADTs, rows, monads, and staging.  We will be running this again in future years, and the
lecture materials are already proving useful to 
&lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2015-04/msg00001.html&quot;&gt;answer mailing list questions&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Mentoring Beginners&lt;/h4&gt;

&lt;p&gt;We also had the pleasure of mentoring up-and-coming functional programmers via several outreach programs,
both face-to-face and remote.&lt;/p&gt;
&lt;h5&gt;Cambridge Compiler Hacking&lt;/h5&gt;

&lt;p&gt;We started the &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/&quot;&gt;Cambridge Compiler Hacking&lt;/a&gt; sessions
in a small way towards the end of 2013 in order to provide a local, friendly place to assist people
who wanted to dip their toes into the unnecessarily mysterious world of programming language hacking.
The plan was simple: provide drinks, pizza, network and a &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki&quot;&gt;bug list of varying difficulty&lt;/a&gt; for attendees to choose from and work on for the evening, with mentoring from the
experienced OCaml contributors.&lt;/p&gt;
&lt;p&gt;We continued this bi-monthly tradition in 2014, with a regular attendance of 15-30 people, and
even cross-pollinated communities with our local F# and Haskell colleagues.  We rotated locations
from the Cambridge Computer Laboratory to Citrix, Makespace, and the new Cambridge Postdoc Centre.
We posted some &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/2014/06/24/highlights-from-recent-sessions.html&quot;&gt;highlights&lt;/a&gt;
from sessions towards the start of the year, and are very happy with how it's going.  There
has even been uptake of the bug list across the water in France, thanks to Gabriel Scherer.&lt;/p&gt;
&lt;p&gt;In 2015, we'd like to branch out further and host some sessions in London. If you have a suggestion
for a venue or theme, please &lt;a href=&quot;http://lists.ocaml.org/listinfo/cam-compiler-hacking&quot;&gt;get in touch&lt;/a&gt;!&lt;/p&gt;
&lt;h5&gt;Summer Programs&lt;/h5&gt;

&lt;p&gt;There has been a laudable rise in summer programs designed to encourage diversity in 
our community, and we of course leap at the opportunity to participate in these when we find them.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;a href=&quot;https://gnome.org/opw/&quot;&gt;GNOME Outreach Program&lt;/a&gt; (now also known as &lt;a href=&quot;https://www.gnome.org/outreachy/&quot;&gt;Outreachy&lt;/a&gt;)
 had one funded place for Xen and MirageOS.  &lt;a href=&quot;http://www.somerandomidiot.com/&quot;&gt;Mindy Preston&lt;/a&gt; did a spectacular
 &lt;a href=&quot;http://www.somerandomidiot.com/blog/categories/ocaml/&quot;&gt;blog series&lt;/a&gt; about her experiences and motivations
 behind learning OCaml.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://www.google-melange.com/&quot;&gt;Google Summer of Code 2014&lt;/a&gt; also had us &lt;a href=&quot;http://openmirage.org/blog/applying-for-gsoc2014&quot;&gt;participating&lt;/a&gt; via MirageOS, 
 and &lt;a href=&quot;https://github.com/moonlightdrive&quot;&gt;Jyotsna Prakash&lt;/a&gt; took on the challenging job of building
 OCaml bindings for Amazon EC2, also detailed on &lt;a href=&quot;https://1000hippos.wordpress.com/&quot;&gt;her blog&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Amir Chaudhry began the &lt;a href=&quot;https://github.com/mirage/mirage-www/wiki/Pioneer-Projects&quot;&gt;Mirage Pioneer Projects&lt;/a&gt;
 initiative to give beginners an easier onramp, and this has taken off very effectively as a way
 to advertise interesting projects for beginners at varying levels of difficulties.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Our own students also had the chance to participate in such workshops to get out of Cambridge
in the summer!
&lt;a href=&quot;http://hh360.user.srcf.net/blog/&quot;&gt;Heidi Howard&lt;/a&gt; liveblogged her experiences at the &lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/2015/01/14/programming-languages-mentoring-workshop-plmw/&quot;&gt;PLMW&lt;/a&gt; workshop in Mumbai.
Meanwhile, &lt;a href=&quot;https://github.com/dsheets&quot;&gt;David Sheets&lt;/a&gt; got to travel to the slightly less exotic London to &lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/2014/11/25/new-directions-in-operating-systems/&quot;&gt;liveblog OSIO&lt;/a&gt;, and Leonhard Markert covered &lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/2014/09/05/ocaml-2014/&quot;&gt;ICFP 2014&lt;/a&gt; as a student volunteer.&lt;/p&gt;
&lt;h4&gt;Blogging and Online Activities&lt;/h4&gt;

&lt;p&gt;Our &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/blogs/&quot;&gt;blog roll&lt;/a&gt; maintains the ongoing stream of
activity from the OCaml Labs crew, but there were some particular highlights throughout 2014.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/&quot;&gt;Thomas Leonard&lt;/a&gt; began writing about his experiences with switching
 his &lt;a href=&quot;http://0install.net&quot;&gt;0install&lt;/a&gt; installation system from 
 &lt;a href=&quot;http://roscidus.com/blog/blog/2014/06/06/python-to-ocaml-retrospective/&quot;&gt;Python to OCaml&lt;/a&gt;
 and &lt;a href=&quot;http://roscidus.com/blog/blog/2014/02/13/ocaml-what-you-gain/&quot;&gt;what you gain with OCaml&lt;/a&gt;.
 This series led to a bunch of interesting feedback on social networking sites, and Thomas
 joined the group full-time to work on our research into 
 &lt;a href=&quot;http://roscidus.com/blog/blog/2015/01/21/securing-the-unikernel/&quot;&gt;unikernels&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.skjegstad.com/&quot;&gt;Magnus Skjegstad&lt;/a&gt; returned from Norway to Cambridge to work on 
 MirageOS, and came up with some &lt;a href=&quot;http://www.skjegstad.com/blog/2015/03/25/mirageos-vm-per-url-experiment/&quot;&gt;crazy experiements&lt;/a&gt;,
 as well as helping to build &lt;a href=&quot;http://www.skjegstad.com/blog/2015/01/19/mirageos-xen-virtualbox/&quot;&gt;Vagrant images&lt;/a&gt; of the OCaml development environment.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://amirchaudhry.com&quot;&gt;Amir Chaudhry&lt;/a&gt; began his quest to 
 &lt;a href=&quot;http://amirchaudhry.com/writing-planet-in-pure-ocaml/&quot;&gt;port his website&lt;/a&gt; website
 to a &lt;a href=&quot;http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines/&quot;&gt;Jekyll unikernel&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;http://openmirage.org/blog/announcing-mirage-20-release&quot;&gt;Mirage 2.0 release&lt;/a&gt; in the summer of 2014
 saw a slew of blogs posts about the &lt;a href=&quot;http://openmirage.org/blog/2014-in-review&quot;&gt;surge&lt;/a&gt; in MirageOS activity.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;It wasn't all just blogging though, and Jeremy Yallop and Leo White in particular participated in some
epic OCaml &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5528&quot;&gt;bug threads&lt;/a&gt; about new features, and
&lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2015-02/msg00150.html&quot;&gt;explanations&lt;/a&gt; about OCaml semantics
on the mailing list.&lt;/p&gt;
&lt;p&gt;Amir Chaudhry also continued to curate and develop the content on the &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt;
website with our external collaborators &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml&quot;&gt;Ashish Agarwal&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml&quot;&gt;Christophe Troestler&lt;/a&gt; and &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml&quot;&gt;Phillippe Wang&lt;/a&gt;.
Notably, it is now the recommended site for OCaml (with the &lt;a href=&quot;http://caml.inria.fr&quot;&gt;INRIA site&lt;/a&gt;
being infrequently updated), and also hosts the &lt;a href=&quot;https://ocaml.org/meetings/&quot;&gt;ACM OCaml Workshop&lt;/a&gt;
pages.  One addition that highlighted the userbase of OCaml in the teaching community came from
building a &lt;a href=&quot;https://ocaml.org/learn/teaching-ocaml.html&quot;&gt;map of all of the universities&lt;/a&gt; where the
language is taught, and this was Yan Shvartzshnaider's &lt;a href=&quot;http://yansnotes.blogspot.co.uk/2014/11/good-news-everyone-ocamlorg-teaching.html&quot;&gt;first contribution&lt;/a&gt; to the site.&lt;/p&gt;
&lt;h4&gt;Visitors and Interns&lt;/h4&gt;

&lt;p&gt;Finally, a really important part of any community is hanging out with each other to chat over ideas in a friendly environment.
As usual, we had a very steady stream of visitors and interns throughout 2014 to facilitate this.&lt;/p&gt;
&lt;p&gt;Frederic Bour, Benjamin Farinier and Matthieu Journault joined us as summer interns from their respective universities in France as part of their Masters programs.  Frederic worked on modular implicits and &lt;a href=&quot;https://www.irill.org/videos/oups-december-2014/Modular_implicits&quot;&gt;gave a great talk&lt;/a&gt; at the OCaml Users group.  Benjamin and Matthieu worked on Irmin data structures and complexity (and &lt;a href=&quot;https://github.com/mirage/merge-queues&quot;&gt;merge-queues&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirage/merge-ropes&quot;&gt;merge-ropes&lt;/a&gt;), and Benjamin had his paper on &amp;quot;&lt;a href=&quot;http://anil.recoil.org/papers/2015-jfla-irmin.pdf&quot;&gt;Mergeable Persistent Data Structures&lt;/a&gt;&amp;quot; accepted to &lt;a href=&quot;http://jfla.inria.fr/2015/&quot;&gt;JFLA 2015&lt;/a&gt;, while Matthieu's work on efficient algorithms for synchronising Irmin DAGs is being integrated into the upstream source code.&lt;/p&gt;
&lt;p&gt;Daniel Buenzli repeated his visit from 2013 and spent a productive summer with us, commenting on almost every project we're working on.  In his own words (edited for brevity):&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I started by implementing and releasing &lt;a href=&quot;http://erratique.ch/software/uucp&quot;&gt;Uucp&lt;/a&gt;, a library to provide efficient access to a selection of the  properties of the latest Unicode Character database (UCD). [...] As a side effect of the previous point I took time to write an absolute &lt;a href=&quot;http://erratique.ch/software/uucp/doc/Uucp.html#uminimal&quot;&gt;minimal introduction to Unicode&lt;/a&gt;. [...]
Since I was in this Unicode business I took the opportunity to propose a &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/80&quot;&gt;31 loc patch to the standard library&lt;/a&gt; for a type to represent Unicode scalar values (an Unicode character to be imprecise) to improve interoperability.&lt;/p&gt;
&lt;p&gt;The usual yearly update to OpenGL was announced at the Siggraph conference. This prompted me to update the ctypes-based &lt;a href=&quot;http://erratique.ch/software/tgls&quot;&gt;tgls library&lt;/a&gt; for supporting the latest entry point of OpenGL 4.5 and OpenGL ES 3.1. Since the bindings are automatically generated from the OpenGL XML registry the work is not too involved but there's always the odd function signature you don't/can't handle automatically yet.&lt;/p&gt;
&lt;p&gt;Spend quite a bit (too much) time on &lt;a href=&quot;http://erratique.ch/software/useri&quot;&gt;useri&lt;/a&gt;, a small multi-platform abstraction for setting up a drawing surface and gather user input (&lt;em&gt;not&lt;/em&gt; usury) as &lt;a href=&quot;http://erratique.ch/software/react&quot;&gt;React&lt;/a&gt; events. Useri started this winter as a layer on top of SDL to implement a &lt;a href=&quot;http://erratique.ch/log/2014-05-18&quot;&gt;CT scan app&lt;/a&gt; and it felt like this could be the basis for adding interactivity and animation to Vg/Vz visualizations &amp;ndash; js viz libraries simply rely on the support provided by the browser or SVG support but Vg/Vz strives for backend independence and clear separations of concern (up to which limit remains an open question). Unfortunately I couldn't bring it to a release and got a little bit lost in browser compatibility issues and trying to reconcile what browser and SDL give us in terms of functionality and way of operating, so that a maximum of client code can be shared among the supported platforms. But despite this non-release it still managed to be useful in some way, see the next point.&lt;/p&gt;
&lt;p&gt;Helped Jeremy and Leo to implement the rendering and interaction for their ICFP tutorial &lt;a href=&quot;https://github.com/ocamllabs/2048-tutorial&quot;&gt;2048 js_of_ocaml implementation&lt;/a&gt;. This featured the use of Gg, Vg, Useri and React and I was quite pleased with the result (despite some performance problems in certain browsers, but hey composable rendering and animation without a single assignement in client code). It's nice to see that all these pains at trying to design good APIs eventually fit together [...]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A couple of visitors joined us from sunny &lt;a href=&quot;http://github.com/mirleft&quot;&gt;Morocco&lt;/a&gt;, where Hannes Mehnert and David Kaloper had gone to work on a clean-slate TLS stack.  They found the &lt;a href=&quot;http://openmirage.org&quot;&gt;MirageOS&lt;/a&gt; effort online, and got in touch about visiting.  After a very fun summer of hacking, their stack is now the standard TLS option in MirageOS and resulted in the &lt;a href=&quot;http://amirchaudhry.com/bitcoin-pinata/&quot;&gt;Bitcoin Pinata challenge&lt;/a&gt; being issued!  Hannes and David have since moved to Cambridge to work on this stack full-time in 2015, but the internships served as a great way for everyone to get to know each other.&lt;/p&gt;
&lt;p&gt;We also had the pleasure of visits from several of our usually remote collaborators. &lt;a href=&quot;https://github.com/Chris00&quot;&gt;Christophe Troestler&lt;/a&gt;, &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Yaron Minsky&lt;/a&gt;, &lt;a href=&quot;http://github.com/diml&quot;&gt;Jeremie Diminio&lt;/a&gt; and &lt;a href=&quot;https://github.com/andrewray&quot;&gt;Andy Ray&lt;/a&gt; all visited for the annual OCaml Labs &lt;a href=&quot;https://gist.github.com/avsm/18450004ae19c2facf7a&quot;&gt;review meeting&lt;/a&gt; in Christ's College.
There were also many academic talks from foreign visitors in our &lt;a href=&quot;http://talks.cam.ac.uk/show/archive/8316&quot;&gt;SRG seminar series&lt;/a&gt;, ranging from &lt;a href=&quot;http://www.cse.iitb.ac.in/~uday/&quot;&gt;Uday Khedkar&lt;/a&gt; from IIT to &lt;a href=&quot;http://okmij.org/ftp/&quot;&gt;Oleg Kiselyov&lt;/a&gt; deliver multiple talks on staging and optimisation (as well as making a celebrity appearance at the compiler hacking session, and &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Yaron Minsky&lt;/a&gt; delivering an Emacs-driven departmental seminar on his experiences with &lt;a href=&quot;http://talks.cam.ac.uk/talk/index/51144&quot;&gt;Incremental&lt;/a&gt; computation.&lt;/p&gt;
&lt;h3&gt;Research Efforts&lt;/h3&gt;

&lt;p&gt;The OCaml Labs are of course based in the Cambridge Computer Laboratory, where 
our day job is to do academic research.  Balancing the demands of open source 
coding, community efforts and top-tier research has be a tricky one, but an effort
that has been worthwhile.&lt;/p&gt;
&lt;p&gt;Our research efforts are broadly unchanged &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Dec%202013&quot;&gt;from 2013&lt;/a&gt;
(it takes time to craft good ideas!), and this will not be an exhaustive recap.  Instead, we'll summarise
them here and point to our &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/papers/index.html&quot;&gt;papers&lt;/a&gt; that describe
the work in detail.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;http://openmirage.org&quot;&gt;MirageOS&lt;/a&gt; really found its own feet in 2014, with a 
 &lt;a href=&quot;http://openmirage.org/blog/announcing-mirage-20-release&quot;&gt;summer 2.0 release&lt;/a&gt; and
 an extensive &lt;a href=&quot;http://openmirage.org/blog/2014-in-review&quot;&gt;end-of-year recap&lt;/a&gt;.
 The most notable thing has been how well the MirageOS research work has melded
 with the core OCaml Labs efforts, since much of it has been constructing good
 quality OCaml libraries to plug holes in the ecosystem.  It also served to make
 us use OPAM on a day-to-day basis for our own work, thus creating an effective
 feedback loop between open-source and research.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;In the &lt;a href=&quot;http://trilogy2.it.uc3m.es/&quot;&gt;Trilogy2&lt;/a&gt; and &lt;a href=&quot;http://usercentricnetworking.eu/&quot;&gt;UCN&lt;/a&gt;
 EU projects, we built out MirageOS features such as the
 &lt;a href=&quot;http://anil.recoil.org/papers/2015-nsdi-jitsu.pdf&quot;&gt;Jitsu&lt;/a&gt; toolstack for the
 &amp;quot;just-in-time&amp;quot; summoning of unikernels in response to DNS requests.  This paper
 will be presented next month at UlSENIX &lt;a href=&quot;https://www.usenix.org/conference/nsdi15/&quot;&gt;NSDI&lt;/a&gt;.
 It also drove the development of the &lt;a href=&quot;http://openmirage.org/blog/introducing-xen-minios-arm&quot;&gt;ARMv7 port&lt;/a&gt;,
 an architecture for which OCaml has an excellent native code generator, as well
 as more experimental forays into &lt;a href=&quot;http://arxiv.org/abs/1412.4638&quot;&gt;BitCoin incentive schemes&lt;/a&gt;
 for distributed systems.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;http://irmin.io&quot;&gt;Irmin&lt;/a&gt; Git-like branchable store created by Thomas Gazagnaire matured,
 with Dave Scott &lt;a href=&quot;https://www.youtube.com/watch?v=DSzvFwIVm5s&quot;&gt;prototyping&lt;/a&gt; a complex
 port of the &lt;a href=&quot;http://wiki.xen.org/wiki/XenStore&quot;&gt;XenStore&lt;/a&gt; database to Irmin, thus 
 letting us show off &lt;a href=&quot;http://decks.openmirage.org/xendevsummit14#/&quot;&gt;debugging systems with Git&lt;/a&gt;.
 We had a paper accepted on some early datastructures accepted at &lt;a href=&quot;http://anil.recoil.org/papers/2015-jfla-irmin.pdf&quot;&gt;JFLA&lt;/a&gt;,
 and Thomas Leonard is building the JavaScript backend for running in-browser,
 while Yan Schvartzshnaider is experimenting with &lt;a href=&quot;http://yansnotes.blogspot.co.uk/2015/01/work-summary-ocaml-labs.html&quot;&gt;graph processing&lt;/a&gt; over the DAG representation for privacy-friendly queries.
 KC is investigating how to adapt his PLDI 2015 paper on &lt;a href=&quot;http://kcsrk.info/papers/quelea_pldi15.pdf&quot;&gt;Quelea&lt;/a&gt; into using
 Irmin as a backend as well.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/ocamllabs/higher&quot;&gt;Higher&lt;/a&gt; kinded polymorphism library written
 by Jeremy Yallop and Leo White was published in &lt;a href=&quot;http://www.lpw25.net/flops2014.pdf&quot;&gt;FLOPS 2014&lt;/a&gt;,
 forming a basis for building more complex use-cases that need the flexibility of higher
 kinded types without requiring functorising code.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Our long standing research into &lt;a href=&quot;http://nymote.org&quot;&gt;personal online privacy&lt;/a&gt; 
 led to our next system target that uses unikernels: the &lt;a href=&quot;http://arxiv.org/abs/1501.04737&quot;&gt;Databox&lt;/a&gt; paper
 outlines the architecture, and was covered in the &lt;a href=&quot;http://www.theguardian.com/technology/2015/feb/01/control-personal-data-databox-end-user-agreement&quot;&gt;Guardian&lt;/a&gt; newspaper.  Jon Crowcroft led the establishment of the Cambridge wing of the &lt;a href=&quot;http://www.mccrc.eu/about-us&quot;&gt;Microsoft Cloud Computing Research Center&lt;/a&gt; to consider the legal aspect of things, and so we have made forays outside of technology into considering the implications of &lt;a href=&quot;http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-863.pdf&quot;&gt;region-specific clouds&lt;/a&gt; as well.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Some of the most exciting work done in the group as part of the &lt;a href=&quot;http://rems.io&quot;&gt;REMS&lt;/a&gt; 
and &lt;a href=&quot;http://www.naas-project.org/&quot;&gt;NaaS&lt;/a&gt; projects came towards the end of 2014 and start of 2015, with
multiple submissions going into top conferences.  Unfortunately, due to most of them
being double blind reviewed, we cannot link to the papers yet.  Keep an eye on the
blog and &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/papers/index.html&quot;&gt;published paper set&lt;/a&gt;,
or ask us directly about what's been going on!&lt;/p&gt;
&lt;h3&gt;Priorities for 2015&lt;/h3&gt;

&lt;p&gt;As spring breaks and the weather (almost) becomes bearable again, we're setting our work priorities
for the remainder of the year.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tooling Cohesion&lt;/strong&gt;: The entire core team is focussed on fusing together
 the individual tools that have been created last year into a cohesive OCaml Platform release that
 covers the lifecycle of documentation, testing and build.
 This is being managed by Amir Chaudhry.  OPAM remains at the heart of this strategy,
 and Louis Gesbert and Thomas Gazagnaire have settled on the 
 &lt;a href=&quot;https://github.com/ocaml/opam/wiki/1.3-Roadmap&quot;&gt;OPAM 1.3 roadmap&lt;/a&gt; (&lt;a href=&quot;http://lists.ocaml.org/pipermail/opam-devel/2015-February/000940.html&quot;&gt;summary&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multicore&lt;/strong&gt;:  &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/kcsrk.info&quot;&gt;KC Sivaramakrishnan&lt;/a&gt; has joined the core OCaml Labs
 fulltime to drive the multicore work into a publically testable form. Leo White recently 
 departed after many productive years in Cambridge to head into a career in industry 
 (but still remains very much involved with OCaml development!).&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Language Evolution&lt;/strong&gt;: Jeremy Yallop continues to drive our efforts on staged programming,
 modular implicits, and a macro system for OCaml, all of which are key features that
 make building complex, reliable systems more tractable than ever.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;I'd like to thank the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/index.html&quot;&gt;entire team&lt;/a&gt;
and wider community for a wonderfully enjoyable 2014 and start of 2015, and am very thankful
to the funding and support from Jane Street, Citrix, British Telecom, RCUK, EPSRC, DARPA and
the EU FP7 that made it all possible.
As always, please feel free to contact any of us directly with questions, or reach out to
me &lt;a href=&quot;mailto:avsm2@cl.cam.ac.uk&quot;&gt;personally&lt;/a&gt; with any queries, concerns or bars of chocolate
as encouragement.&lt;/p&gt;

   </content><id>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Apr%202015</id><title type="text">Apr 2015 news update</title><updated>2015-04-02T12:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://amirchaudhry.com/heroku-for-unikernels-pt1" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;In my &lt;a href=&quot;http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines/&quot;&gt;Jekyll to Unikernel post&lt;/a&gt;, I described an automated
workflow that would take your static website, turn it into a MirageOS
unikernel, and then store that unikernel in a git repo for later deployment. 
Although it was written from the perspective of a static website, the process
was applicable to any MirageOS project.
This post covers how things have progressed since then and the kind of
automated, end-to-end deployments that we can achieve with unikernels.  &lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re already familiar with the above-linked post then it should be clear
that this will involve writing a few more scripts and ensuring
they&amp;rsquo;re in the right place.  The rest of this post will go through a real
world example of such an automated system, which we&amp;rsquo;ve set up for building and
deploying the unikernel that serves our slide decks &amp;mdash; &lt;a href=&quot;https://github.com/mirage/mirage-decks&quot;&gt;mirage-decks&lt;/a&gt;.  Once
you&amp;rsquo;ve gone though this post, you should be able to recreate such a workflow
for your own needs. In Part 2 of this series I&amp;rsquo;ll build on this post and
consider what the possibilities could be if we extended the system using
some of our &lt;a href=&quot;http://amirchaudhry.com/brewing-miso-to-serve-nymote/&quot;&gt;other tools&lt;/a&gt; &amp;mdash; thus arriving at something very much
like our own Heroku for Unikernels.&lt;/p&gt;

&lt;h3&gt;Standardised build scripts&lt;/h3&gt;

&lt;p&gt;Almost all of our OCaml projects now use Travis CI for build and testing (and
deployment). In fact, there are so many libraries now that we recently put
together an &lt;a href=&quot;https://github.com/ocaml/ocaml-travisci-skeleton&quot;&gt;OCaml Travis Skeleton&lt;/a&gt;, which means we don&amp;rsquo;t
have to manually keep the scripts in sync across all our repos &amp;mdash; and fewer
copy/paste/edits means fewer mistakes. &lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re familiar with the build scripts from &lt;a href=&quot;http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines#setting-up-travis-ci&quot;&gt;last time&lt;/a&gt;, then
you can browse the new scripts and you&amp;rsquo;ll see that they&amp;rsquo;re broadly similar. 
In many cases you may well be able to depend on one or other of the scripts
directly and for a handful of scenarios, you can fork and patch them to
suit you (i.e. for MirageOS unikernels).  We can do this because we&amp;rsquo;ve made it
quick to set up an OCaml environment using an &lt;a href=&quot;https://launchpad.net/~avsm&quot;&gt;Ubuntu PPA&lt;/a&gt;. The rest
of the work is done by the &lt;code&gt;mirage&lt;/code&gt; tool itself so once that&amp;rsquo;s installed, the
build process becomes fairly straightforward. The complexity around secure
keys was also &lt;a href=&quot;http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines/#sending-travis-a-private-ssh-key&quot;&gt;covered last time&lt;/a&gt;, which allowed us to commit the
final unikernel to a deployment repo.  That means the remaining step is
to automate the deployment itself.&lt;/p&gt;

&lt;h3&gt;Automated deployment of unikernels&lt;/h3&gt;

&lt;p&gt;Committing the unikernel to a deployment repo is where the previous post ended
and a &lt;a href=&quot;http://amirchaudhry.com/unikernels-for-everyone/&quot;&gt;number of people&lt;/a&gt; forged ahead and wrote about their
experiences deploying onto AWS and Linode.  Many of these deployments
(understandably) involve a number of quite manual steps. It would be
particularly useful to construct a set of scripts that can be fully automated,
such that a &lt;code&gt;git push&lt;/code&gt; to a repo will automatically run through the cycle of
building, testing, storing and &lt;em&gt;activating&lt;/em&gt; a new unikernel.  We&amp;rsquo;ve done
exactly this with some of our repos and this post will talk through those
scripts.  &lt;/p&gt;

&lt;h4&gt;The deployment options &amp;mdash; Xen or *nix&lt;/h4&gt;

&lt;p&gt;MirageOS unikernels can currently be built for Xen and Unix backends.  This is
a straightforward step and typically the build matrix is already set up to
test that both of them build as expected. For this post, I&amp;rsquo;ve only considered
the Xen backend as that&amp;rsquo;s our chosen deployment method but it would be equally
feasible to deploy the unix-based unikernels onto a *nix machine in much the
same way. 
In this sense, you get to choose whether you want to deploy the unikernels
onto a &lt;a href=&quot;http://en.wikipedia.org/wiki/Hypervisor#Classification&quot;&gt;Hypervisor&lt;/a&gt; (for isolation and security) or whether running
them as unix-processes better suits your needs. 

The unikernel approach means that &lt;em&gt;both&lt;/em&gt; options are open to
you, with little more than a command-line flag between them.&lt;/p&gt;

&lt;p&gt;In terms of the deployment machines there are several options to consider. The
most obvious is to set up a dedicated host, where you have full access to the
machine and can &lt;a href=&quot;http://wiki.xenproject.org/wiki/Xen_Project_Beginners_Guide&quot;&gt;install Xen&lt;/a&gt;.  Another is to have a machine
running on EC2 and &lt;a href=&quot;http://somerandomidiot.com/blog/2014/08/19/i-am-unikernel/&quot;&gt;create scripts&lt;/a&gt; to deal with unikernels. You
could also build and deploy onto &lt;a href=&quot;http://openmirage.org/wiki/xen-on-cubieboard2&quot;&gt;Xen on the Cubieboard2&lt;/a&gt;. If you&amp;rsquo;d
rather test out the complete system first, you could set up an appropriate
&lt;a href=&quot;http://www.skjegstad.com/blog/2015/01/19/mirageos-xen-virtualbox/&quot;&gt;machine in Virtualbox&lt;/a&gt; to work with.&lt;/p&gt;

&lt;p&gt;For our workflow, we use Xen unikernels which we deploy to a dedicated host. 
For the sake of brevity, I won&amp;rsquo;t go into the details of how to set up
the machine but you can follow the instructions linked above.&lt;/p&gt;

&lt;h4&gt;The scripts for decks.openmirage.org&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mirage/mirage-decks&quot;&gt;Decks&lt;/a&gt; is the source repo that holds many of our slides, which
we&amp;rsquo;ve presented at conferences and events over the years (I admit that I have
yet to &lt;a href=&quot;https://github.com/mirage/mirage-decks/issues/49&quot;&gt;add mine&lt;/a&gt;).  The repo compiles to a unikernel that can
then serve those slides, as you see at &lt;a href=&quot;http://decks.openmirage.org&quot;&gt;decks.openmirage.org&lt;/a&gt;. For
maximum fun-factor, we usually run that unikernel from a Cubieboard2 when
giving talks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://amirchaudhry.com/images/singles/mirage-cubieboard.jpg&quot; alt=&quot;mirage-decks-on-cubieboard&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The toolchain for this unikernel includes build, store and deploy.  We&amp;rsquo;ll
recap the first two steps before going through the final one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt; &amp;mdash; In the root of the decks source repo, you&amp;rsquo;ll notice the
&lt;code&gt;.travis.yml&lt;/code&gt; file, which fetches the standard build script mentioned earlier.
Building the unikernel proceeds according to the options in the build matrix. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;wget https://raw.githubusercontent.com/ocaml/ocaml-travisci-skeleton/master/.travis-mirage.sh&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bash -ex .travis-mirage.sh&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OCAML_VERSION=4.02 MIRAGE_BACKEND=unix MIRAGE_NET=socket&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OCAML_VERSION=4.02 MIRAGE_BACKEND=unix MIRAGE_NET=direct&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OCAML_VERSION=4.02 MIRAGE_BACKEND=xen&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MIRAGE_ADDR=&amp;quot;46.43.42.134&amp;quot; MIRAGE_MASK=&amp;quot;255.255.255.128&amp;quot; MIRAGE_GWS=&amp;quot;46.43.42.129&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;DEPLOY=1&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;....&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;....&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;....&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;....&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;....&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;....&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, two builds occur for Unix and one for Xen with different
parameters being used for each.  If you look at the
&lt;a href=&quot;https://github.com/mirage/mirage-decks/blob/master/.travis.yml&quot;&gt;actual travis file&lt;/a&gt;, you&amp;rsquo;ll notice there are 26 lines of
encrypted data.  This is how we pass the deployment key to Travis CI, so that
it has push access to the &lt;em&gt;separate&lt;/em&gt; &lt;a href=&quot;https://github.com/mirage/mirage-decks-deployment&quot;&gt;mirage-decks-deployment&lt;/a&gt;
repo.  You can read the section in the previous post to see how we
&lt;a href=&quot;https://github.com/mirage/mirage-decks-deployment&quot;&gt;send Travis a private key&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Store&lt;/strong&gt; &amp;mdash; One of the combinations in the build matrix (configured for Xen),
is intended for deployment.  When that unikernel is completed, an additional
part of the script is triggered that pushes it into the deployment repo. &lt;/p&gt;

&lt;h4&gt;Deployment scripts&lt;/h4&gt;

&lt;p&gt;After the &amp;lsquo;build&amp;rsquo; and &amp;lsquo;store&amp;rsquo; steps above, we have a
&lt;a href=&quot;https://github.com/mirage/mirage-decks-deployment&quot;&gt;deployment repository&lt;/a&gt; with a collection of Xen unikernels. For
this stage, we have a new set of scripts that live in this repo alongside those
unikernels. Specifically, you&amp;rsquo;ll notice a folder called &lt;code&gt;scripts&lt;/code&gt; that
contains four files.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;.
&amp;#9500;&amp;#9472;&amp;#9472; Makefile
&amp;#9500;&amp;#9472;&amp;#9472; README.md
&amp;#9500;&amp;#9472;&amp;#9472; scripts
&amp;#9474;&amp;nbsp;&amp;nbsp; &amp;#9500;&amp;#9472;&amp;#9472; crontab
&amp;#9474;&amp;nbsp;&amp;nbsp; &amp;#9500;&amp;#9472;&amp;#9472; deploy.sh
&amp;#9474;&amp;nbsp;&amp;nbsp; &amp;#9500;&amp;#9472;&amp;#9472; install-hooks.sh
&amp;#9474;&amp;nbsp;&amp;nbsp; &amp;#9492;&amp;#9472;&amp;#9472; post-merge.hook
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A quick summary of the setup is that we clone the repo onto our deployment
machine and install some hooks there.  Then a simple cronjob will perform
&lt;code&gt;git pull&lt;/code&gt; at regular intervals.  If a merge event occurs, then it means the
repo has been updated and another script is triggered. That script removes the
currently running unikernel and boots the latest version from the repo.  It&amp;rsquo;s
fairly straightforward and I&amp;rsquo;ll explain what each of the files does below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Makefile&lt;/strong&gt; - After cloning the repo, run &lt;code&gt;make install&lt;/code&gt;.  This will trigger
&lt;code&gt;install-hooks.sh&lt;/code&gt; to set things up appropriately. It&amp;rsquo;s worth remembering that
from this point on, the git repo on the deployment machine will not be
identical to the deployment repo on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;install-hooks.sh&lt;/strong&gt; &amp;mdash;  The first two lines ensure that the commands
will be run from the root of the git repo.  The third line symlinks the
&lt;code&gt;post-merge.hook&lt;/code&gt; file into the appropriate place within the &lt;code&gt;.git&lt;/code&gt; directory.
This is the folder where customized &lt;a href=&quot;http://www.git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&quot;&gt;git hooks&lt;/a&gt; need to be placed in
order to work.  The final line adds the file &lt;code&gt;scripts/crontab&lt;/code&gt; to the
deployment machine&amp;rsquo;s list of cron jobs.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git rev-parse --show-toplevel&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# obtain path to root of repo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ROOT&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# symlink the post-merge.sh file into the .git/hooks folder&lt;/span&gt;
ln -sf &lt;span class=&quot;nv&quot;&gt;$ROOT&lt;/span&gt;/scripts/post-merge.hook &lt;span class=&quot;nv&quot;&gt;$ROOT&lt;/span&gt;/.git/hooks/post-merge
crontab scripts/crontab                &lt;span class=&quot;c&quot;&gt;# add to list of cron jobs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;crontab&lt;/strong&gt; &amp;mdash; This file is a cronjob that sets up the deployment machine to
perform a &lt;code&gt;git pull&lt;/code&gt; on the deployment repo at regular intervals. Changing the
file in the repo will ultimately cause it to be updated on the deployment
machine (cf. &lt;code&gt;deploy.sh&lt;/code&gt;). At the moment, it&amp;rsquo;s set to run every 11 minutes.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;*/11 * * * * &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/mirage-decks-deployment &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git pull&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;post-merge.hook&lt;/strong&gt; &amp;mdash; Since we&amp;rsquo;ve already run the Makefile, this file is
symlinked from the appropriate place on the deployment machine&amp;rsquo;s copy of the
repo.  When a &lt;code&gt;git pull&lt;/code&gt; results in new commits being downloaded and merged,
then this script is triggered immediately afterwards.  In this case, it just
executes the &lt;code&gt;deploy.sh&lt;/code&gt; script.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git rev-parse --show-toplevel&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# obtain path to root of repo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ROOT&lt;/span&gt;/scripts/deploy.sh           &lt;span class=&quot;c&quot;&gt;# execute the deploy script&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;deploy.sh&lt;/strong&gt; &amp;mdash; This is where the work actually happens and you&amp;rsquo;ll notice that
there really isn&amp;rsquo;t much to do!  I&amp;rsquo;ve commented in the code below to explain
what&amp;rsquo;s going on.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;VM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mir-decks
&lt;span class=&quot;nv&quot;&gt;XM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xm

&lt;span class=&quot;nv&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git rev-parse --show-toplevel&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ROOT&lt;/span&gt;

crontab scripts/crontab     &lt;span class=&quot;c&quot;&gt;# Update cron scripts&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Identify the latest build in the repo and then use&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the generic Xen config script to construct a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# specific file for this unikernel. Essentially,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 'sed' just does a find/replace on two elements and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the result is written to a new file.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KERNEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ROOT&lt;/span&gt;/xen/&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;cat xen/latest&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
sed -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;s,@VM@,$VM,g; s,@KERNEL@,$KERNEL/$VM.xen,g&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &amp;lt; &lt;span class=&quot;nv&quot;&gt;$XM&lt;/span&gt;.conf.in &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &amp;gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KERNEL&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$XM&lt;/span&gt;.conf

&lt;span class=&quot;c&quot;&gt;# Move into the folder with the latest unikernel.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Remove any uncompressed Xen images found there&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (since we may be starting a rebuilt unikernel).&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Unzip the compressed unikernel.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KERNEL&lt;/span&gt;
rm -f &lt;span class=&quot;nv&quot;&gt;$VM&lt;/span&gt;.xen
bunzip2 -k &lt;span class=&quot;nv&quot;&gt;$VM&lt;/span&gt;.xen.bz2

&lt;span class=&quot;c&quot;&gt;# Instruct Xen to remove the currently running&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# unikernel and then start up the new one we&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# just unzipped.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
sudo &lt;span class=&quot;nv&quot;&gt;$XM&lt;/span&gt; destroy &lt;span class=&quot;nv&quot;&gt;$VM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
sudo &lt;span class=&quot;nv&quot;&gt;$XM&lt;/span&gt; create &lt;span class=&quot;nv&quot;&gt;$XM&lt;/span&gt;.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, we now have a complete system!
Of course, this arrangement isn&amp;rsquo;t perfect and
there are number of things we could improve.  For example, it depends on a
cron job, which means it may take a while before a new unikernel is live.
Replacing this with something triggered on a webhook could be an improvement,
but it does mean exposing an end-point to the internet.  The scripts will also
redeploy the &lt;em&gt;current&lt;/em&gt; unikernel, even if the only change is to the crontab
schedule.  Some extra work in the deploy script, using some git tools, might
work around this. &lt;/p&gt;

&lt;p&gt;Despite these minor issues, we do have a completely end-to-end workflow that
takes us all the way from pushing some new changes to deploying a new
unikernel!  An additional feature is that &lt;em&gt;everything&lt;/em&gt; is checked into version
control. Right from the scripts to completed artefacts (including a method of
transmitting secure keys/data, over public systems). &lt;/p&gt;

&lt;p&gt;There is minimal work done outside the code you&amp;rsquo;ve already seen, though there
is obviously some effort involved in setting up the deployment machine. 
However, as mentioned earlier, you could either use the unix-based unikernels
or experiment with &lt;a href=&quot;http://www.skjegstad.com/blog/2015/01/19/mirageos-xen-virtualbox/&quot;&gt;Virtualbox VM with Xen&lt;/a&gt; just to test out this
entire toolchain. &lt;/p&gt;

&lt;p&gt;Overall, we&amp;rsquo;ve only added around 20 lines of code to the initial 50 or so that
we use for the Travis CI build.  So for &lt;em&gt;less than 100 lines of code&lt;/em&gt;, we have
a &lt;em&gt;complete&lt;/em&gt; end-to-end system that can take a MirageOS project from a
&lt;code&gt;git push&lt;/code&gt;, all the way through to a live deployment.  &lt;/p&gt;

&lt;h3&gt;Fleshing out the backbone&lt;/h3&gt;

&lt;p&gt;In our current system, if the unikernel &lt;em&gt;builds&lt;/em&gt; appropriately then we just
assume it&amp;rsquo;s ok to deploy to production. Fire and forget! What could
possibly go wrong!  Of course, this is a somewhat naive approach and for any
critical system it would be better to hook in some additional things.&lt;/p&gt;

&lt;h4&gt;Testing frameworks&lt;/h4&gt;

&lt;p&gt;One obvious improvement would be to introduce a more thorough testing regimen,
which would include running unit tests as part of the build. Indeed, various
libraries in the MirageOS project are already moving towards this model
(e.g see the &lt;a href=&quot;http://openmirage.org/wiki/weekly-2015-03-11#Qualityandtest&quot;&gt;notes&lt;/a&gt; for links).  &lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s even possible to go beyond unit tests and introduce more
functional/systems/stress testing on the complete unikernel before permitting
deployment.  This would help to surface any wider issues as services interact
and we could even simulate network conditions &amp;mdash; achieving something like
&amp;lsquo;staging on steroids&amp;rsquo;.  &lt;/p&gt;

&lt;h4&gt;Logging and notifications&lt;/h4&gt;

&lt;p&gt;The scenario we have above also assumes that things work smoothly and nobody
needs to know anything.  It would be useful to hook in some form of logging
and reporting, such that when a new unikernel is deployed a notification can
be sent/stored somewhere. In the short term, there are likely existing tools
and ways of doing this so it would be a matter of putting them together.&lt;/p&gt;

&lt;h4&gt;Looking ahead&lt;/h4&gt;

&lt;p&gt;Overall, with the above model, we can easily set up a system where we go from
writing code, to testing it via CI, to deploying it to a staging server for
functional tests, and finally pushing it out into live deployment.  All of
this can be done with a few additional scripts and minimal interaction from
the developer.  We can achieve this because we don&amp;rsquo;t have to concern ourselves
with large blobs of code, multiple different systems and keeping environments
in sync. Once we&amp;rsquo;ve built the unikernel, the rest almost becomes trivial. &lt;/p&gt;

&lt;p&gt;This is close enough for me to declare it as a &amp;lsquo;Heroku for unikernels&amp;rsquo; but
obviously, there&amp;rsquo;s much more we can (and should) do with such a system. If we
extrapolate &lt;em&gt;just a little&lt;/em&gt; from where we are now, there are a range of
exciting possibilities to consider in terms of automation, scalability and
distributed systems.  Especially if we incorporate other aspects of the
&lt;a href=&quot;http://amirchaudhry.com/brewing-miso-to-serve-nymote/&quot;&gt;toolstack we&amp;rsquo;re working towards&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://amirchaudhry.com/heroku-for-unikernels-pt2/&quot;&gt;Part 2&lt;/a&gt; of this series is where I&amp;rsquo;ll consider these possibilities, which will
be more speculative and less constrained.  It will cover the kinds of systems
we can create once the tools are more mature and will touch on ideas around
hyper-elastic clouds, embedded systems and what this means for the concept of
immutable infrastructure.&lt;/p&gt;

&lt;p&gt;Since we already have the &amp;lsquo;backbone&amp;rsquo; of the toolchain in place, it&amp;rsquo;s easier to
see where it can be extended and how.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit: The second part of this series is now up -
&amp;ldquo;&lt;a href=&quot;http://amirchaudhry.com/heroku-for-unikernels-pt2/&quot;&gt;Self Scaling Systems&lt;/a&gt;&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p class=&quot;footnote&quot;&gt;
Thanks to Anil Madhavapeddy and Thomas Leonard for comments on an earlier
draft and Richard Mortier for his work on the deployment toolchain.
&lt;/p&gt;

</content><id>http://amirchaudhry.com/heroku-for-unikernels-pt1</id><title type="text">Towards Heroku for Unikernels: Part 1 - Automated deployment</title><updated>2015-03-31T14:30:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://kcsrk.info/multicore/opam/ocaml/2015/03/25/opam-switch-to-multicore/" rel="alternate"/><contributor><uri>http://kcsrk.info/atom-ocaml.xml</uri><name>KC Sivaramakrishnan</name></contributor><content type="html">&lt;p&gt;OPAM has a great &lt;a href=&quot;https://opam.ocaml.org/doc/Usage.html#opamswitch&quot;&gt;compiler
switch&lt;/a&gt; feature that lets you
simultaneously host several OCaml installations, each with its own compiler
version and a set of installed packages. I wanted to use the power of &lt;code&gt;opam
switch&lt;/code&gt; for working with the experimental &lt;a href=&quot;https://github.com/ocamllabs/ocaml-multicore&quot;&gt;multicore
OCaml&lt;/a&gt; compiler. The key
advantage of doing this is that it lets you easily install packages from the
&lt;a href=&quot;http://opam.ocaml.org/&quot;&gt;OPAM repository&lt;/a&gt;, while sandboxing it from other OCaml
installations on your system. The post will show how to create OPAM compiler
switch for multicore OCaml.&lt;/p&gt;

&lt;h2&gt;Install opam-compiler-conf&lt;/h2&gt;

&lt;p&gt;The first step is to install Gabriel Scherer's &lt;a href=&quot;https://github.com/gasche/opam-compiler-conf&quot;&gt;opam-compiler-conf
script&lt;/a&gt; which lets you do opam
switches on local installations:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/gasche/opam-compiler-conf
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;opam-compiler-conf
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir -p ~/.local/bin
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nv&quot;&gt;BINDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.local/bin install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This installs the &lt;code&gt;opam-compiler-conf&lt;/code&gt; script under &lt;code&gt;~/.local/bin&lt;/code&gt;. Make sure
this directory is under your search path. Now, &lt;code&gt;$opam compiler-conf&lt;/code&gt; should
give you the list of available commands.&lt;/p&gt;

&lt;h2&gt;Build multicore OCaml locally&lt;/h2&gt;

&lt;p&gt;Typing &lt;code&gt;opam switch&lt;/code&gt; should list the compilers currently installed in your
system and those that are available. For instance, here is my setup:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam switch
system  C system  System compiler &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4.02.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
4.02.1  I 4.02.1  Official 4.02.1 release
4.02.0  I 4.02.0  Official 4.02.0 release
4.01.0  I 4.01.0  Official 4.01.0 release
--     -- 3.11.2  Official 3.11.2 release
--     -- 3.12.1  Official 3.12.1 release
--     -- 4.00.0  Official 4.00.0 release
--     -- 4.00.1  Official 4.00.1 release
&lt;span class=&quot;c&quot;&gt;# 66 more patched or experimental compilers, use '--all' to show&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can easily switch between the installations using &lt;code&gt;opam switch
[system-name]&lt;/code&gt;. Let us now install multicore OCaml as a new switch:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/ocamllabs/ocaml-multicore
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ocaml-multicore
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam compiler-conf configure
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make world
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam compiler-conf install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;opam config env&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The multicore compiler is now installed and has been made the current compiler:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam switch
system                      I system                      System compiler &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4.02.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
4.02.1+local-git-multicore  C 4.02.1+local-git-multicore  Local checkout of 4.02.1 at /Users/kc/ocaml-multicore
4.02.1                      I 4.02.1                      Official 4.02.1 release
4.02.0                      I 4.02.0                      Official 4.02.0 release
4.01.0                      I 4.01.0                      Official 4.01.0 release
--                         -- 3.11.2                      Official 3.11.2 release
--                         -- 3.12.1                      Official 3.12.1 release
--                         -- 4.00.0                      Official 4.00.0 release
--                         -- 4.00.1                      Official 4.00.1 release
&lt;span class=&quot;c&quot;&gt;# 66 more patched or experimental compilers, use '--all' to show&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can be confirmed by:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ocamlc -version
4.02.1+multicore-dev0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which shows the current OCaml bytecode compiler version.&lt;/p&gt;

&lt;h2&gt;Working with the local switch&lt;/h2&gt;

&lt;p&gt;Every time you change the compiler source, you need to rebuild the compiler and
reinstall the switch:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Changed compiler source...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make world
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam compiler-conf reinstall&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The local installation can be removed by &lt;code&gt;opam compiler-conf uninstall&lt;/code&gt;.&lt;/p&gt;
</content><id>http://kcsrk.info/multicore/opam/ocaml/2015/03/25/opam-switch-to-multicore/</id><title type="text">Opam Switch to Multicore OCaml</title><updated>2015-03-25T18:15:00+00:00</updated><author><email></email><name>KC Sivaramakrishnan</name></author></entry><entry><link href="http://www.skjegstad.com/blog/2015/03/25/mirageos-vm-per-url-experiment/" rel="alternate"/><contributor><uri>http://www.skjegstad.com/feeds/all.atom.xml</uri><name>Magnus Skjegstad</name></contributor><content type="html">&lt;p&gt;I recently wrote a DNS server that can boot unikernels on demand called &lt;a href=&quot;https://github.com/MagnusS/jitsu&quot;&gt;Jitsu&lt;/a&gt;. The following diagram shows a simplified version of how Jitsu works. The client sends a DNS query to a DNS server (Jitsu). The DNS server starts a unikernel and sends a DNS response back to the client while the unikernel is booting. When the client receives the DNS response it opens a TCP connection to the unikernel, which now has completed booting and is ready to respond to the TCP connection.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.skjegstad.com/images/blog/jitsu/jitsu.jpg&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The unikernels are built using &lt;a href=&quot;http://www.openmirage.org&quot;&gt;MirageOS&lt;/a&gt;, a library operating system that allows applications to be compiled directly to small Xen VMs. These unikernels only include the operating system components the application needs - nothing else is added. This results in very small VMs with low resource requirements that boot quickly. &lt;/p&gt;
&lt;p&gt;Now, what if I wanted to use Jitsu to boot my unikernel website when someone accesses it? My website is fairly low traffic, so this could potentially save me some resource use and hosting costs. Unfortunately, there are always a few requests per hour to some of the more popular sections, which likely would make my unikernel run most of the time. But what if I could split my unikernel into even smaller unikernels? What if I went to an extreme and had one unikernel per URL? Then I could only boot unikernels for the URLs that are being used and they would only need to know how to serve a single page. This could also have a number of benefits, such as the ability to spin up multiple unikernels for an extremely popular web page and use DNS to direct clients to the unikernel that is closest to them &amp;mdash; while keeping the rest of the site inactive (let's ignore web crawlers for now). If I had dynamic sections of my website there could also be security benefits: Every dynamic page would run as a separate VM. An attack on a single page would not have to bring down the rest of the site nor reveal any data stored in other unikernels.&lt;/p&gt;


&lt;p&gt;As an experiment, I wanted to see if I could run &lt;em&gt;every&lt;/em&gt; URL hosted under my domain as a separate virtual machine. The goal was to map each URL to a domain name, which in turn was directed to a separate VM running a web server that hosts a single page. For example, the URL http://www.skjegstad.com/index.html becomes http://index.html.www.skjegstad.com/.  Each domain is then mapped to a single IPv4 address on my local network.&lt;/p&gt;
&lt;p&gt;Here is an abstract from the DNS zone file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.11&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m4v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.12&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;33.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.13&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.14&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see that even individual images have their own DNS entry, and will be served separately.&lt;/p&gt;
&lt;p&gt;There is an OCaml web server library, called &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;CoHTTP&lt;/a&gt;, which we can use with MirageOS. Using this library, unikernels can be written that host static web pages. The web content itself can either be compiled into the unikernel (as a data structure) or be stored directly on a block storage device. For this experiment, I use the built-in data structure to store a single file per unikernel. &lt;/p&gt;
&lt;p&gt;For the unikernel code, I take the static_webserver example from &lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton&lt;/a&gt;. The code automatically creates a web server that hosts the files located in the &lt;code&gt;./htdocs&lt;/code&gt; subdirectory when the unikernel is built.&lt;/p&gt;
&lt;p&gt;The demo code (available &lt;a href=&quot;https://github.com/MagnusS/vm-per-url-experiment&quot;&gt;here&lt;/a&gt;) accepts a directory with static web pages as input. I will use my own website in the examples below, but any site with static web pages should work.&lt;/p&gt;
&lt;p&gt;First, mirror (or copy) a static website:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run the &lt;a href=&quot;https://github.com/MagnusS/vm-per-url-experiment/blob/master/create.py&quot;&gt;create.py&lt;/a&gt; script to generate a unikernel with a web server for each file, which will serve that single file from memory. Note that the folder name and domain name must match - otherwise the script will become confused and not rewrite the URLs properly.  My site has 49 pages and I've copied the entire output below.  This step should only take a few seconds on a reasonably modern machine.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;# Run create.py on the contents of the www.skjegstad.com folder. Folder name and domain name must match.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Indexing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;85956378&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc89cf3a2729&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f7fb9c68d5c3701996b3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m4v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m4v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c286eccb0f59b299cca1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;33.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera_33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bef80428ab04abb98c3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d9ee421440ceec86a4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a9fdfed9d054ee4d48de&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;28.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera_28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ca0d87ae96d8648c36d&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenshot1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenshot1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1ce89d1c806c4234f2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ubuntu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ubuntu_in_vm_overview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d368ef42317b28f6243&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xen_in_vm_overview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a4e519b0d91b8967b62&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MobileNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MobileNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;390&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a92f0488aa32f17e3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f9a90e263ac465d53558&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fc21dfa295c33c6e3bd3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;afc6634e807f1bddad22&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1f&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b97ef7d3a4a1ba0f4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dedbc5bfcd11fe49a83&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8f15f&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a23ae6563d2d890&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;software&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;855&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d32b8905249554f69&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;macvim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funnel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.05.01.2012&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cb72fc8606b734fd7322&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.12.01.2012&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;570&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b6f207695db4d2898&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirageos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virtualbox&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.19.01.2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ada75a179f0d6c6cdff&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;experimenting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distributed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chat&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.02.12.2011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d0613c7f413609ab402&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bloom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.20.10.2011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c11e5af4b1a8ee667bf5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;198f10ff&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b77757798200&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bloom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;da3c099920c48f77b625&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec590d332b74f3521787&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;befa876942eb63d806d0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;experiments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d14e6010e04324f1fa9&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d09920f7a15c2f930686&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bd2e2788f6309bc762c&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirageos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b08718e16dddf30473f&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dfc57a0ce3fc7382a001&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a13890b437ef10df36e4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;papers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mistsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milcom2010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad_mistsd_milcom2010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b39a34888b769596fe0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;papers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milcom09skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milcom09skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;09854f&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b4a6c9bafe01&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;papers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milcom11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distributed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milcom11_distributed_chat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;759&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daabffb7ac70f3c82&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2434&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc8c7a5f966b2bc9&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6ff&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ef4c2d9236d7a398&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modernizr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modernizr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b8ff82e33ce3d777d9e&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;octopress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;octopress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2e5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e43546763b649cd3b&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edf18f0bba513af40346&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a577cb04bac38034dc95&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1395516324&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e9d12885cf941b2f149c&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1395516324&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c23144b5f096a13a71bb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code_bg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1395516324&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;19e1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;de022f4a565bc1e2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1395516324&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;29ff&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b603a5d0cdebdc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1395516324&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d4e8d94047cf9c45080&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1395516324&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;433115&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bed52cbea861a0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Preparing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bacfdf7b71099057d8c&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Zone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Makefile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VMs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DNS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the script completes, a unikernel has been created in &lt;code&gt;./staging&lt;/code&gt; for each file in the www.skjegstad.com directory. To compile the unikernels using the mirage-tool, run &lt;code&gt;make&lt;/code&gt;. Note that this requires a working MirageOS development environment and I have written a guide for setting this up &lt;a href=&quot;http://www.skjegstad.com/blog/2015/01/19/mirageos-xen-virtualbox/&quot;&gt;here&lt;/a&gt;. This step will take some time, depending on how many pages you have. In my case, it was around 4 minutes in Virtualbox on my laptop.&lt;/p&gt;
&lt;p&gt;When all the unikernels have been successfully built, &lt;code&gt;make run&lt;/code&gt; will start each of them using Xen's &lt;code&gt;xl&lt;/code&gt; tool. Use &lt;code&gt;sudo xl list&lt;/code&gt; to see the running unikernels. This is the &lt;code&gt;xl&lt;/code&gt; output for 49 MirageOS virtual machines hosting www.skjegstad.com on my local network:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;                                        &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Mem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VCPUsStateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                                     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;292&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-----&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;2156.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;85956378&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc89cf3a2729&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f7fb9c68d5c3701996b3&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c286eccb0f59b299cca1&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bef80428ab04abb98c3&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d9ee421440ceec86a4&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a9fdfed9d054ee4d48de&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ca0d87ae96d8648c36d&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1ce89d1c806c4234f2&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d368ef42317b28f6243&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a4e519b0d91b8967b62&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;390&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a92f0488aa32f17e3&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f9a90e263ac465d53558&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fc21dfa295c33c6e3bd3&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;afc6634e807f1bddad22&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;1f&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b97ef7d3a4a1ba0f4&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dedbc5bfcd11fe49a83&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;8f15f&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a23ae6563d2d890&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;855&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d32b8905249554f69&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cb72fc8606b734fd7322&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;570&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b6f207695db4d2898&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ada75a179f0d6c6cdff&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d0613c7f413609ab402&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c11e5af4b1a8ee667bf5&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;198f10ff&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b77757798200&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;da3c099920c48f77b625&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ec590d332b74f3521787&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;befa876942eb63d806d0&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d14e6010e04324f1fa9&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d09920f7a15c2f930686&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bd2e2788f6309bc762c&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b08718e16dddf30473f&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;69&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dfc57a0ce3fc7382a001&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a13890b437ef10df36e4&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b39a34888b769596fe0&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;09854f&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b4a6c9bafe01&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;759&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daabffb7ac70f3c82&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2434&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc8c7a5f966b2bc9&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;6ff&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ef4c2d9236d7a398&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b8ff82e33ce3d777d9e&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;2e5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e43546763b649cd3b&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;edf18f0bba513af40346&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a577cb04bac38034dc95&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e9d12885cf941b2f149c&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;81&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c23144b5f096a13a71bb&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;19e1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;de022f4a565bc1e2&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;29ff&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b603a5d0cdebdc&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d4e8d94047cf9c45080&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;433115&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bed52cbea861a0&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;86&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bacfdf7b71099057d8c&lt;/span&gt;                        &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The create.py-script also generated a DNS zone file that maps the domain names to IP addresses. This is the generated zone file for www.skjegstad.com:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;SOA&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;postmaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;CNAME&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.11&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m4v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.12&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;33.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.13&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.14&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ardrone1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.15&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;28.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.16&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenshot1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.17&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mirage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ubuntu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.18&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mirage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.19&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MobileNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.20&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.21&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.22&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.23&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.24&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.25&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uavexperiment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.26&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;software&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.27&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;macvim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;funnel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.05.01.2012&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.28&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.12.01.2012&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.29&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mirageos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virtualbox&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.19.01.2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.30&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;experimenting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distributed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chat&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.02.12.2011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.31&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bloom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.20.10.2011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.32&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;virtualbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.33&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bloom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.34&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.35&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unikernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.36&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;experiments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.37&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.38&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.39&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mirageos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.40&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ardrone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.41&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.42&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;papers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mistsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milcom2010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.43&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;papers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milcom09skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.44&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;papers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milcom11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distributed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.45&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;publications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.46&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.47&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modernizr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.48&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;octopress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.49&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.50&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.51&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.52&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.53&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.54&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.55&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.56&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.57&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skjegstad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;192.168.56.58&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The zone file can be loaded in your favorite DNS server (e.g. bind or unbound). It is also relatively easy to build a quick DNS server in OCaml based on ocaml-dns:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dns&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lwt&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Lwt_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Dns_server_unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve_with_zonefile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;www.skjegstad.com.zone&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have written an extended version with support for forwarding unknown DNS requests to another DNS server. It is available for download &lt;a href=&quot;https://github.com/MagnusS/vm-per-url-experiment/blob/master/serve_dns.ml&quot;&gt;here&lt;/a&gt; and is included in the demo code. In fact, you could also run the DNS server as a unikernel, but I will leave that as an exercise for the reader (&lt;a href=&quot;http://hh360.user.srcf.net/blog/2015/02/part-1-running-your-own-dns-resolver-with-mirageos/&quot;&gt;this blog post&lt;/a&gt; by Heidi Howard is a good starting point with lots of &lt;a href=&quot;https://github.com/heidi-ann/ocaml-dns-examples&quot;&gt;examples&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Point your DNS server to the IP of the DNS server that hosts the zone file to start browsing the static website. Each static page should map to a separate domain name which is run by a single MirageOS unikernel!&lt;/p&gt;
&lt;h3&gt;Conclusion / discussion&lt;/h3&gt;
&lt;p&gt;Currently this is just a quick experiment and is not very practical. I would still need a unikernel or Linux VM to run the DNS server and I have not been able to find a hosting provider that has a minimum configuration which would be appropriate for large or small unikernels (e.g. 8MB vs 64MB RAM). Each VM/URL would also require a unique public IP address unless they are placed behind another service (NAT) that can route the HTTP requests to an internal network. &lt;/p&gt;
&lt;p&gt;If you followed along, then you would also notice that the compiled unikernels in &lt;code&gt;./staging&lt;/code&gt; take up around 175MB (49 unikernels). When running, they collectively consume around 1.6GB of memory. However, it was a lot easier to try this experiment using unikernels than it would have been with a traditional OS stack.&lt;/p&gt;
&lt;p&gt;A more practical architecture would perhaps be to run a website and DNS server from a single host initially. As each web page is mapped to a URL, the DNS server could then be configured to automatically boot new unikernels only if a subdomain experienced high load. It could, for example, deploy unikernels automatically to Amazon EC2 that serve a single file and start returning its IP address in DNS queries in periods with high load. Once the website has been 'disaggregated' this way, it would even be possible to start VMs in availability zones that are geographically close to the where the spike in traffic is originating!  This could all be configured to happen automatically, with DNS entries being updated as new pages are added and with unikernels being deployed to places where they are in demand.&lt;/p&gt;
&lt;p&gt;(Thanks to Amir Chaudry for commenting on a draft of this post)&lt;/p&gt;</content><id>http://www.skjegstad.com/blog/2015/03/25/mirageos-vm-per-url-experiment/</id><title type="text">A unikernel experiment: A VM for every URL</title><updated>2015-03-25T00:00:00+00:00</updated><author><email></email><name>Magnus Skjegstad</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=956" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;This article&amp;nbsp;is the third in the &amp;ldquo;Running your own DNS Resolver with MirageOS&amp;rdquo; series. In the&amp;nbsp;&lt;a href=&quot;http://hh360.user.srcf.net/blog/2015/02/part-1-running-your-own-dns-resolver-with-mirageos/&quot; title=&quot;Part 1: Running your own DNS Resolver with MirageOS&quot;&gt;first part&lt;/a&gt;, we used the&amp;nbsp;&lt;a href=&quot;https://github.com/mirage/ocaml-dns&quot;&gt;ocaml-dns&lt;/a&gt;&amp;nbsp;library to lookup the hostname corresponding with an IP address using its&amp;nbsp;&lt;a href=&quot;https://github.com/mirage/ocaml-dns/blob/master/mirage/dns_resolver_mirage.mli&quot;&gt;Dns_resolver_mirage&lt;/a&gt;&amp;nbsp;module. In the&amp;nbsp;&lt;a href=&quot;http://hh360.user.srcf.net/blog/2015/03/part-2-running-your-own-dns-resolver-with-mirageos/&quot; title=&quot;Part 2: Running your own DNS Resolver with MirageOS&quot;&gt;second part&lt;/a&gt;, we wrote a simple DNS server, which serves RRs from a zone file using the &lt;a href=&quot;https://github.com/mirage/ocaml-dns/blob/master/mirage/dns_server_mirage.mli&quot;&gt;Dns_server_mirage&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;Today in the third part, we will combine the above to write a simple DNS resolver, which relays queries to another DNS resolver. Then we will compose this with our simple DNS server from last week, to build a resolver which first looks up queries in the host file and if unsuccessful will relay the query to another DNS resolver.&lt;/p&gt;
&lt;p&gt;As always, the complete code for these examples is in &lt;a href=&quot;https://github.com/heidi-ann/ocaml-dns-examples&quot;&gt;ocaml-dns-examples&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;3.1 DNS FoRwarder&lt;/h5&gt;
&lt;p&gt;When writing our simple DNS server, we used a function called serve_with_zonefile in Dns_server_mirage to service incoming DNS queries. Now we are going remove a layer of abstraction and instead use&amp;nbsp;serve_with_processor:&lt;/p&gt;
&lt;pre&gt;val serve_with_processor: t -&amp;gt; port:int -&amp;gt; processor:(module PROCESSOR) -&amp;gt; unit Lwt.t
val serve_with_zonefile : t -&amp;gt; port:int -&amp;gt; zonefile:string -&amp;gt; unit Lwt.t
&lt;/pre&gt;
&lt;p&gt;Now instead of passing the function a simple string, representing the filename of zonefile, we pass a first class module, satisfying the PROCESSOR signature. We can generate such a module by writing a process and using processor_of_process:&lt;/p&gt;
&lt;pre&gt;type ip_endpoint = Ipaddr.t * int

type 'a process = src:ip_endpoint -&amp;gt; dst:ip_endpoint -&amp;gt; 'a -&amp;gt; Dns.Query.answer option Lwt.t

module type PROCESSOR = sig
  include Dns.Protocol.SERVER

  (** DNS responder function.
      @param src Server sockaddr
      @param dst Client sockaddr
      @param Query packet
      @return Answer packet
  *)
  val process : context process
end

type 'a processor = (module PROCESSOR with type context = 'a)

val processor_of_process : Dns.Packet.t process -&amp;gt; Dns.Packet.t processor&lt;/pre&gt;
&lt;p&gt;So given a&amp;nbsp;Dns.Packet.t process, which is a function of type:&lt;/p&gt;
&lt;pre&gt;src:ip_endpoint -&amp;gt; dst:ip_endpoint -&amp;gt;&amp;nbsp;Dns.Packet.t -&amp;gt; Dns.Query.answer option Lwt.t&lt;/pre&gt;
&lt;p&gt;We can now service DNS packets. If we assume that myprocess is a function of this type, we can service DNS queries with the following unikernel&lt;/p&gt;
&lt;pre&gt;open Lwt
open V1_LWT
open Dns
open Dns_server

let port = 53

module Main (C:CONSOLE) (K:KV_RO) (S:STACKV4) = struct

  module U = S.UDPV4
  module DS = Dns_server_mirage.Make(K)(S)

  let myprocess ~src ~dst packet = ...

  let start c k s =
    let server = DS.create s k in
    let processor = ((Dns_server.processor_of_process myprocess) :&amp;gt; (module Dns_server.PROCESSOR)) in 
    DS.serve_with_processor server ~port ~processor
end

&lt;/pre&gt;
&lt;p&gt;Now we will write an implementation of myprocess which will service DNS packets by forwarding them to another DNS resolver and then relaying the response.&lt;/p&gt;
&lt;p&gt;Recall from part 1, that you can use the resolve function in Dns_resolver_mirage to do this. All that remains is to wrap invocation of resolve, in a function of type&amp;nbsp;Dns.Packet.t process, which can be done as follows:&lt;/p&gt;
&lt;pre&gt; 
let process resolver ~src ~dst packet =
      let open Packet in
      match packet.questions with
      | [] -&amp;gt; (* we are not supporting QDCOUNT = 0  *)
          return None 
      | [q] -&amp;gt; 
         DR.resolve (module Dns.Protocol.Client) resolver 
         resolver_addr resolver_port q.q_class q.q_type q.q_name 
          &amp;gt;&amp;gt;= fun result -&amp;gt;
          return (Some (Dns.Query.answer_of_response result))) 
      | _ -&amp;gt; (* we are not supporting QDCOUNT &amp;gt; 1 *)
          return None&lt;/pre&gt;
&lt;h5&gt;3.2 DNS server &amp;amp; forwarder&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;[this part requires PR 58 on ocaml-dns until it is merged in]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We will extend our DNS forwarded to first check a zonefile, this is achieve with just 3 extra lines:&lt;/p&gt;
&lt;pre&gt;...
DS.eventual_process_of_zonefiles server [zonefile]
&amp;gt;&amp;gt;= fun process -&amp;gt;
let processor = (processor_of_process (compose process (forwarder resolver)) :&amp;gt; (module Dns_server.PROCESSOR)) in
...
&lt;/pre&gt;
&lt;p&gt;Here we are using compose to use two processes: one called process generated from the zonefile and one called forwarder, from the forwarding code&amp;nbsp;in the last section.&lt;/p&gt;
&lt;p&gt;Next time, we will extend our DNS resolver to include a cache.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content><id>http://hh360.user.srcf.net/blog/?p=956</id><title type="text">Part 3: Running your own DNS Resolver with MirageOS</title><updated>2015-03-19T12:01:22+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=832" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://hh360.user.srcf.net/blog/2015/02/part-1-running-your-own-dns-resolver-with-mirageos/&quot; title=&quot;Part 1: Running your own DNS Resolver with MirageOS&quot;&gt;Last time&lt;/a&gt;, we wrote a simple &amp;ldquo;dig like&amp;rdquo; unikernel. Given a domain and the address of a nameserver, the unikernel resolved the domain&amp;nbsp;by asking the nameserver and returned the return to the console.&lt;/p&gt;
&lt;p&gt;Today, we will look at another way to resolve a DNS query, being a DNS server. This is useful in its own right but also allows us to cool things with our local DNS resolver such as locally overwriting DNS names and resolving .local names, both of which we will add to our DNS resolver another day.&lt;/p&gt;
&lt;p&gt;Today&amp;nbsp;we use features only added to ocaml-dns library in version 0.15 (currently &lt;a href=&quot;https://github.com/mirage/ocaml-dns/pull/52&quot;&gt;PR #52&lt;/a&gt;), so if you do not have this version or later, then update OPAM or pin the master branch on github.&lt;/p&gt;
&lt;p&gt;Building a DNS server with MirageOS is simple, look at the following code:&lt;/p&gt;
&lt;pre&gt;open Lwt
open V1_LWT
open Dns
open Dns_server

let port = 53
let zonefile = &amp;quot;test.zone&amp;quot;

module Main (C:CONSOLE) (K:KV_RO) (S:STACKV4) = struct

  module U = S.UDPV4
  module DNS = Dns_server_mirage.Make(K)(S)

  let start c k s =
    let t = DNS.create s k in
    DNS.serve_with_zonefile t ~port ~zonefile
end
&lt;/pre&gt;
&lt;p&gt;The above code will serve DNS requests to port 53, responding with the resource records (RR) in test.zone. We have provided an example zone file in the &lt;a href=&quot;https://github.com/heidi-ann/ocaml-dns-examples&quot;&gt;repo&lt;/a&gt;&amp;nbsp;with the code from this guide. To use this unikernel, we also need to edit the config.ml file from yesterday.&lt;/p&gt;
&lt;pre&gt;open Mirage

let data = crunch &amp;quot;./data&amp;quot;

let handler =
  foreign &amp;quot;Unikernel.Main&amp;quot; (console @-&amp;gt; kv_ro @-&amp;gt; stackv4 @-&amp;gt; job)

let ip_config:ipv4_config = {
  address= Ipaddr.V4.make 192 168 1 2;
  netmask= Ipaddr.V4.make 255 255 255 0;
  gateways= [Ipaddr.V4.make 192 168 1 1];
}

let direct =
  let stack = direct_stackv4_with_static_ipv4 default_console tap0 ip_config  in
  handler $ default_console $ data $ stack

let () =
  add_to_ocamlfind_libraries [&amp;quot;dns.mirage&amp;quot;;&amp;quot;dns.lwt-core&amp;quot;];
  add_to_opam_packages [&amp;quot;dns&amp;quot;];
  register &amp;quot;dns&amp;quot; [direct]
&lt;/pre&gt;
&lt;p&gt;We are using crunch to access the zone file in the data directory. As explain in part 1, this config file is specific to my network setup for xen backends and can easily be generalised.&lt;/p&gt;
&lt;p&gt;You can now test your DNS server and see it work&lt;/p&gt;
&lt;pre&gt;$ dig @192.168.1.2 ns0.d1.signpo.st.&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content><id>http://hh360.user.srcf.net/blog/?p=832</id><title type="text">Part 2: Running your own DNS Resolver with MirageOS</title><updated>2015-03-02T21:50:27+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=792" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;The following is the first part in a step-by-step guide to setting up your own DNS resolver using MirageOS. I will be running this on a low power, low cost ARM device called the &lt;a href=&quot;http://www.amazon.co.uk/Cubieboard-A20-chip-New-IT/dp/B00FB5ILQ4&quot;&gt;Cubieboard 2&lt;/a&gt;. Up to date code for each version of the DNS&amp;nbsp;resolver is on G&lt;a href=&quot;https://github.com/heidi-ann/ocaml-dns-examples&quot;&gt;ithub&lt;/a&gt;. This guide assumes some basic experience&amp;nbsp;of &lt;a href=&quot;http://ocsigen.org/lwt/2.4.7/api/index&quot;&gt;lwt&lt;/a&gt; and MirageOS, up to the level of the&amp;nbsp;&lt;a href=&quot;http://www.openmirage.org/wiki/hello-world&quot;&gt;Hello World Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback on this article and pull requests to the &lt;a href=&quot;https://github.com/heidi-ann/ocaml-dns-examples&quot;&gt;demo code&lt;/a&gt;&amp;nbsp;are welcome.&lt;/p&gt;
&lt;h4&gt;Part&amp;nbsp;1.1 &amp;ndash; Setting up the cubieboard with MirageOS&lt;/h4&gt;
&lt;p&gt;Plenty of information on setting up a cubieboard with Xen and MirageOS is available elsewhere, most notability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MirageOS &lt;a href=&quot;http://www.openmirage.org/wiki/hello-world&quot;&gt;Hello World Tutorial&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cubieboard2 Xen&lt;a href=&quot;https://github.com/mirage/xen-arm-builder&quot;&gt; Binaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For debugging I am a big fan for wireshark. I run a full wireshark sesson on the machine which is connection sharing to my cubieboard network, to check all external traffic.&lt;/p&gt;
&lt;p&gt;For this guide, I will always be compiling for Xen ARM backend, with direct network connection via br0 and a static IP for all unikernels. My test network router is configured to give out static IP of the form 192.168.1.x to hosts&amp;nbsp;with the MAC address 00:00:00:00:00:0x. As a result, my config.ml file look like:&lt;/p&gt;
&lt;pre&gt;open Mirage

let ip_config:ipv4_config = {
  address= Ipaddr.V4.make 192 168 1 2;
  netmask= Ipaddr.V4.make 255 255 255 0;
  gateways= [Ipaddr.V4.make 192 168 1 1];
}

let client =
  foreign &amp;quot;Unikernel.Client&amp;quot; @@ console @-&amp;gt; stackv4 @-&amp;gt; job

let () =
  add_to_ocamlfind_libraries [ &amp;quot;dns.mirage&amp;quot;; ];
  register &amp;quot;dns-client&amp;quot; 
[ client $ default_console $ direct_stackv4_with_static_ipv4 default_console tap0 ip_config]
&lt;/pre&gt;
&lt;p&gt;Since the IP address of the unikernel is 192.168.1.2, before launching the unikernel, I do:&lt;/p&gt;
&lt;pre&gt;echo &amp;quot;vif = [ 'mac=00:00:00:00:00:02,bridge=br0' ]&amp;quot; &amp;gt;&amp;gt; dns-client.xl
&lt;/pre&gt;
&lt;p&gt;I build unikernel using the usual commands:&lt;/p&gt;
&lt;pre&gt;mirage configure --xen
make depend; make; make run
# edit file.xl
sudo xl create -c file.xl
&lt;/pre&gt;
&lt;h4&gt;Part&amp;nbsp;1.2 &amp;ndash; Getting Started&lt;/h4&gt;
&lt;p&gt;The following is the complete code for a unikernel which queries a DNS server for a DNS domain and prints to console the IP address returned.&lt;/p&gt;
&lt;pre&gt;open Lwt
open V1_LWT

let domain = &amp;quot;google.com&amp;quot;
let server = Ipaddr.V4.make 8 8 8 8

module Client (C:CONSOLE) (S:STACKV4) = struct

  module U = S.UDPV4
  module DNS = Dns_resolver_mirage.Make(OS.Time)(S)

  let start c s =
    let t = DNS.create s in
    OS.Time.sleep 2.0 
    &amp;gt;&amp;gt;= fun () -&amp;gt;
    C.log_s c (&amp;quot;Resolving &amp;quot; ^ domain)
    &amp;gt;&amp;gt;= fun () -&amp;gt;
    DNS.gethostbyname t ~server domain
    &amp;gt;&amp;gt;= fun rl -&amp;gt;
    Lwt_list.iter_s
      (fun r -&amp;gt;
         C.log_s c (&amp;quot;Answer &amp;quot; ^ (Ipaddr.to_string r))
      ) rl

end
&lt;/pre&gt;
&lt;p&gt;This unikernel will query a DNS server at 8.8.8.8 (google public DNS resolver) for a domain google.com. Here we are using the simple function, DNS.gethostbyname, with the following type sig:&lt;/p&gt;
&lt;pre&gt;  val gethostbyname : t -&amp;gt;
    ?server:Ipaddr.V4.t -&amp;gt; ?dns_port:int -&amp;gt;
    ?q_class:Dns.Packet.q_class -&amp;gt;
    ?q_type:Dns.Packet.q_type -&amp;gt;
    string -&amp;gt; Ipaddr.t list Lwt.t
&lt;/pre&gt;
&lt;p&gt;This returns a list of IP&amp;rsquo;s, which we then iterative over with Lwt_list.iter_s and print to the console.&lt;/p&gt;
&lt;h4&gt;Part&amp;nbsp;1.3 &amp;ndash;&amp;nbsp;Boot time parameters&lt;/h4&gt;
&lt;p&gt;Hardcoding the server and domain is far from ideal, instead we will provide them at boot time with Bootvar, the interface for bootvar is below:&lt;/p&gt;
&lt;pre&gt;type t
(* read boot parameter line and store in assoc list - expected format is &amp;quot;key1=val1 key2=val2&amp;quot; *)
val create: unit -&amp;gt; t Lwt.t

(* get boot parameter *)
val get: t -&amp;gt; string -&amp;gt; string option

(* get boot parameter, throws Not Found exception *)
val get_exn: t -&amp;gt; string -&amp;gt; string
&lt;/pre&gt;
&lt;p&gt;We can now use this to provide domain and server at boot time instead of compile time&lt;/p&gt;
&lt;pre&gt;let start c s =
    Bootvar.create () &amp;gt;&amp;gt;= fun bootvar -&amp;gt;
    let domain = Bootvar.get_exn bootvar &amp;quot;domain&amp;quot; in
    let server = Ipaddr.V4.of_string_exn (Bootvar.get_exn bootvar &amp;quot;server&amp;quot;) in
    ...
&lt;/pre&gt;
&lt;h4&gt;Part&amp;nbsp;1.4 &amp;ndash; Using Resolve&lt;/h4&gt;
&lt;p&gt;Now, a real DNS resolver will need to make many more parameters (any DNS query) and return full DNS responses not just IP address. Thus we need to move on from DNS.hostbyname to using the less abstract resolve function, resolve:&lt;/p&gt;
&lt;pre&gt;  val resolve :
    (module Dns.Protocol.CLIENT) -&amp;gt;
    t -&amp;gt; Ipaddr.V4.t -&amp;gt; int -&amp;gt;
    Dns.Packet.q_class -&amp;gt;
    Dns.Packet.q_type -&amp;gt;
    Dns.Name.domain_name -&amp;gt;
    Dns.Packet.t Lwt.t 
&lt;/pre&gt;
&lt;p&gt;We can achieve same result of hostbyname as follows:&lt;/p&gt;
&lt;pre&gt;...
    DNS.resolve (module Dns.Protocol.Client) t server 53 Q_IN Q_A (string_to_domain_name domain)
    &amp;gt;&amp;gt;= fun r -&amp;gt;
    let ips =
    List.fold_left (fun a x -&amp;gt;
      match x.rdata with
      | A ip -&amp;gt; (Ipaddr.V4 ip) :: a
      | _ -&amp;gt; a ) [] r.answers in
...
&lt;/pre&gt;
&lt;p&gt;We are now explicit about parameters such as port, class and type. Note that we have opened the &lt;a href=&quot;https://github.com/mirage/ocaml-dns/blob/master/lib/name.mli&quot;&gt;Dns.Name&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirage/ocaml-dns/blob/master/lib/packet.mli&quot;&gt;Dns.Packet.t&lt;/a&gt; modules. The return value of resolve is a &lt;a href=&quot;https://github.com/mirage/ocaml-dns/blob/master/lib/packet.mli&quot;&gt;Dns.Packet.t&lt;/a&gt;, we fold over answers in the produce an IPaddr.V4 list as with hostbyname. We can also use the to_string function in Packet to print&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve taken a break to do some refactoring work on the ocaml-dns library. In the next post, Part 2, we will expand our code to a DNS stub resolver.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</content><id>http://hh360.user.srcf.net/blog/?p=792</id><title type="text">Part 1: Running your own DNS Resolver with MirageOS</title><updated>2015-02-18T17:08:32+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="https://mirage.io/blog/announcing-bitcoin-pinata" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;a href=&quot;http://ownme.ipredator.se/&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/btc-pinata/btc-pinata.png&quot; width=&quot;300px&quot; style=&quot;float:right; padding: 10px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last summer we announced the beta release of a clean-slate implementation of
TLS in pure OCaml, alongside a &lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;series of blog posts&lt;/a&gt; that described
the libraries and the thinking behind them.  It took two hackers six months
&amp;mdash; starting on &lt;a href=&quot;https://goo.gl/maps/GpcQs&quot;&gt;the beach&lt;/a&gt; &amp;mdash;  to get the stack to that point and
their &lt;a href=&quot;https://tls.openmirage.org&quot;&gt;demo server&lt;/a&gt; is still going strong. Since then, the team has
continued working and recently &lt;a href=&quot;http://media.ccc.de/browse/congress/2014/31c3_-_6443_-_en_-_saal_2_-_201412271245_-_trustworthy_secure_modular_operating_system_engineering_-_hannes_-_david_kaloper.html#video&quot;&gt;presented&lt;/a&gt; at the 31st Chaos
Communication Congress.&lt;/p&gt;
&lt;p&gt;The authors are putting their stack to the test again and this time they've
built a &lt;strong&gt;&lt;a href=&quot;http://ownme.ipredator.se&quot;&gt;Bitcoin Pi&amp;ntilde;ata&lt;/a&gt;&lt;/strong&gt;! Essentially, they've hidden a
private key to a bitcoin address within a Unikernel running on Xen. If you're
able to smash your way in, then you get to keep the spoils.&lt;/p&gt;
&lt;p&gt;There's more context around this in my &lt;a href=&quot;http://amirchaudhry.com/bitcoin-pinata/&quot;&gt;Pi&amp;ntilde;ata post&lt;/a&gt; and you can see
the details on the &lt;a href=&quot;http://ownme.ipredator.se&quot;&gt;site itself&lt;/a&gt;. Remember that the codebase is
&lt;a href=&quot;https://github.com/mirleft/&quot;&gt;all open&lt;/a&gt; (as well as &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues?q=label:%22security%20concern%22%20&quot;&gt;issues&lt;/a&gt;) so there's nothing to
reverse engineer. Have fun!&lt;/p&gt;

   </content><id>https://mirage.io/blog/announcing-bitcoin-pinata</id><title type="text">Smash the Bitcoin Pinata for fun and profit!</title><updated>2015-02-10T16:00:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2015/02/05/south-of-england-regional-programming-language-seminar" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;If you're within travelling distance of Cambridge and interested in
programming language theory then you might like to
&lt;a href=&quot;http://doodle.com/n93sqw86sa7azc3m&quot;&gt;sign up&lt;/a&gt; to come along to the first
&lt;a href=&quot;http://dominic-mulligan.co.uk/?page_id=148&quot;&gt;South of England Regional Programming Language Seminar&lt;/a&gt;
at &lt;a href=&quot;http://www.wolfson.cam.ac.uk/&quot;&gt;Wolfson College&lt;/a&gt; on the 30th April.  We
have an exciting programme, starting with an invited talk from Conor McBride:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The dependent lollipop&lt;/strong&gt; &lt;em&gt;(Conor McBride, Strathclyde)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improving implicit parallelism&lt;/strong&gt; &lt;em&gt;(Jose Calderon, York)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Many-core compiler fuzzing&lt;/strong&gt; &lt;em&gt;(Alastair Donaldson, Imperial)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fine-grained language composition&lt;/strong&gt; &lt;em&gt;(Laurence Tratt, King's College London)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graphical models of concurrent program execution&lt;/strong&gt; &lt;em&gt;(Tony Hoare, Microsoft)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further information is available on the
&lt;a href=&quot;http://dominic-mulligan.co.uk/?page_id=148&quot;&gt;S-REPLS website&lt;/a&gt;.&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2015/02/05/south-of-england-regional-programming-language-seminar</id><title type="text">South of England Regional Programming Language Seminar (S-REPLS)</title><updated>2015-02-05T12:00:00+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2015/02/05/back-in-the-lab" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;We'll be meeting in the Computer Lab next Tuesday (10th February 2015) for another evening of compiler hacking.  All welcome!  Please &lt;strong&gt;&lt;a href=&quot;http://doodle.com/zxmeyn2ih92mke85&quot;&gt;add yourself to the Doodle poll&lt;/a&gt;&lt;/strong&gt; if you're planning to come along, and sign up to the &lt;a href=&quot;http://lists.ocaml.org/listinfo/cam-compiler-hacking&quot;&gt;mailing list&lt;/a&gt; to receive updates.&lt;/p&gt;

&lt;h3&gt;Talk: Generating code with polymorphic let (Oleg Kiselyov)&lt;/h3&gt;

&lt;p&gt;This time we'll be starting with a talk from &lt;a href=&quot;http://okmij.org/ftp&quot;&gt;Oleg Kiselyov&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;Generating code with polymorphic let&lt;/h4&gt;

&lt;p&gt;One of the simplest ways of implementing staging is source-to-source
translation from the quotation-unquotation code to code-generating
combinators. For example, MetaOCaml could be implemented as a
pre-processor to the ordinary OCaml. However simple, the approach is
surprising productive and extensible, as Lightweight Modular Staging
(LMS) in Scala has demonstrated. However, there is a fatal flaw:
handling quotations that contain polymorphic let. The translation to
code-generating combinators represents a future-stage let-binding with
the present-staging lambda-binding, which is monomorphic. Even if
polymorphic lambda-bindings are allowed, they require type
annotations, which precludes the source-to-source translation.&lt;/p&gt;

&lt;p&gt;We show the solution to the problem, using a different translation. It
works with the current OCaml. It also almost works in theory,
requiring a small extension to the relaxed value
restriction. Surprisingly, this extension seems to be exactly the one
needed to make the value restriction sound in a staged language with
reference cells and cross-stage-persistence.&lt;/p&gt;

&lt;p&gt;The old, seems completely settled question of value restriction is
thrown deep-open in staged languages. We gain a profound problem to
work on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;(Approximate) schedule&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;6pm&lt;/strong&gt; Start, set up&lt;br/&gt;
&lt;strong&gt;6.30pm&lt;/strong&gt; Talk&lt;br/&gt;
&lt;strong&gt;7pm&lt;/strong&gt; Pizza&lt;br/&gt;
&lt;strong&gt;7.30pm-10pm&lt;/strong&gt; Compiler hacking  &lt;/p&gt;

&lt;h3&gt;Further details&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Where&lt;/strong&gt;:
  Room &lt;a href=&quot;http://www.cl.cam.ac.uk/research/dtg/openroommap/static/?s=FW11&amp;amp;amp%3Blabels=1&quot;&gt;FW11&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/directions/&quot;&gt;Computer Laboratory, Madingley Road&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt;: 6pm, Tuesday 10th February&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who&lt;/strong&gt;: anyone interested in improving OCaml. Knowledge of OCaml programming will obviously be helpful, but prior experience of working on OCaml internals isn't necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&lt;/strong&gt;: fixing bugs, implementing new features, learning about OCaml internals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wiki&lt;/strong&gt;: &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki&quot;&gt;https://github.com/ocamllabs/compiler-hacking/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're defining &amp;quot;compiler&amp;quot; pretty broadly, to include anything that's part of the standard distribution, which means at least the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/libref/index.html&quot;&gt;standard library&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual024.html&quot;&gt;runtime&lt;/a&gt;, tools (&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/depend.html&quot;&gt;ocamldep&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc105&quot;&gt;ocamllex&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc107&quot;&gt;ocamlyacc&lt;/a&gt;, etc.), &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual032.html&quot;&gt;ocamlbuild&lt;/a&gt;, the &lt;a href=&quot;http://caml.inria.fr/resources/doc/index.en.html&quot;&gt;documentation&lt;/a&gt;, and the compiler itself. We'll have suggestions for &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;mini-projects&lt;/a&gt; for various levels of experience (see also some &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-previously-worked-on&quot;&gt;things we've done on previous evenings&lt;/a&gt;), but feel free to come along and work on whatever you fancy.&lt;/p&gt;

&lt;p&gt;We'll be ordering pizza, so if you want to be counted for food you should aim to arrive by 6pm.&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2015/02/05/back-in-the-lab</id><title type="text">Ninth OCaml compiler hacking evening (back in the lab, with a talk from Oleg)</title><updated>2015-02-05T12:00:00+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2015/01/21/securing-the-unikernel/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;Back in July, I used &lt;a href=&quot;http://openmirage.org/&quot;&gt;MirageOS&lt;/a&gt; to create &lt;a href=&quot;http://roscidus.com/blog/blog/2014/07/28/my-first-unikernel/&quot;&gt;my first unikernel&lt;/a&gt;, a simple REST service for queuing file uploads, deployable as a virtual machine.
While a traditional VM would be a complete Linux system (kernel, init system, package manager, shell, etc), a Mirage unikernel is a single OCaml program which pulls in just the features (network driver, TCP stack, web server, etc) it needs as libraries.
Now it&amp;rsquo;s time to look at securing the system with HTTPS and access controls, ready for deployment.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#ocaml&quot;&gt;OCaml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#xen&quot;&gt;Xen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#transport-layer-security&quot;&gt;Transport Layer Security&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#c-stubs-for-xen&quot;&gt;C stubs for Xen&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#ethernet-frame-alignment&quot;&gt;Ethernet frame alignment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#http-api&quot;&gt;HTTP API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-private-key&quot;&gt;The private key&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-partition-code&quot;&gt;The partition code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#entropy&quot;&gt;Entropy&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#access-control&quot;&gt;Access control&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#python-client&quot;&gt;Python client&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://news.ycombinator.com/item?id=8922568&quot;&gt;Hacker News&lt;/a&gt; and
  &lt;a href=&quot;http://www.reddit.com/r/netsec/comments/2t67e2/securing_the_unikernel/&quot;&gt;Reddit&lt;/a&gt; )&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As a quick reminder, the service (&amp;ldquo;Incoming queue&amp;rdquo;) accepts uploads from various contributors and queues them until the (firewalled) repository software downloads them, checks the GPG signatures, and merges them into the public software repository, signed with the repository&amp;rsquo;s key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/0repo-multi.png&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Although the queue service isn&amp;rsquo;t security critical, since the GPG signatures are made and checked elsewhere, I would like to ensure it has a few properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only the repository can fetch items from the queue.&lt;/li&gt;
  &lt;li&gt;Only authorised users can upload to it.&lt;/li&gt;
  &lt;li&gt;I can see where an upload came from and revoke access if necessary.&lt;/li&gt;
  &lt;li&gt;An attacker cannot take control of the system and use it to attack other systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We often think of security as a set of things we want to &lt;em&gt;prevent&lt;/em&gt; - taking away possible actions from a fundamentally vulnerable underlying system (such as my original implementation, which had no security features).
But ideally I&amp;rsquo;d like every component of the system to be isolated by default, with allowed interactions (shown here by arrows) specified explicitly.
We should then be able to argue (informally) that the system will meet the goals above without having to verify that every line of code is correct.&lt;/p&gt;

&lt;p&gt;My unikernel is written in OCaml and runs as a guest OS under the Xen hypervisor, so let&amp;rsquo;s look at how well those technologies support isolation first&amp;hellip;&lt;/p&gt;

&lt;h2&gt;OCaml&lt;/h2&gt;

&lt;p&gt;I want to isolate the components of my unikernel, giving each just the access it requires.
When writing an OS, some unsafe code will occasionally be needed, but it should be clear which components use unsafe features (so they can be audited more carefully), and unsafe features shouldn&amp;rsquo;t be needed often.&lt;/p&gt;

&lt;p&gt;For example, the code for handling an HTTP upload request should only be able to use our on-disk queue&amp;rsquo;s &lt;a href=&quot;https://github.com/0install/0repo-queue/blob/6ff713d353316447eda66b310adc42634accf98a/upload_queue.mli#L22&quot;&gt;Uploader interface&lt;/a&gt; and its own HTTP connection.
Then we would know that an attacker with upload permission can only cause new items to be added to the queue, no matter how buggy that code is.
It should not be able to read the web server&amp;rsquo;s private key, establish new out-bound connections, corrupt the disk, etc.&lt;/p&gt;

&lt;p&gt;Like most modern languages, OCaml is memory-safe, so components can&amp;rsquo;t interfere with each other through buggy pointer arithmetic or unsafe casts of the kind commonly found in C code.&lt;/p&gt;

&lt;p&gt;But we also need to avoid global variables, which would allow two components to communicate without us explicitly connecting them.
I can&amp;rsquo;t reason about the security of the system by looking at arrows in the architecture diagrams if unconnected components can magically create new arrows by themselves!
I&amp;rsquo;ve seen a few interesting approaches to this problem (please correct me if I&amp;rsquo;ve got this wrong):&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Haskell&lt;/dt&gt;
  &lt;dd&gt;Haskell avoids all side-effects, which makes global variables impossible (without using &amp;ldquo;unsafe&amp;rdquo; features), since updating them would be a side-effect.&lt;/dd&gt;
  &lt;dt&gt;Rust&lt;/dt&gt;
  &lt;dd&gt;Rust almost avoids the problem of globals through its ownership types.
Since only one thread can have a pointer to a mutable value at a time, mutable values can&amp;rsquo;t normally be global.
Rust does allow &amp;ldquo;mutable statics&amp;rdquo; (which contain only pointers to fixed data), but requires an explicit &amp;ldquo;unsafe&amp;rdquo; block to use them, which is good.&lt;/dd&gt;
  &lt;dt&gt;E&lt;/dt&gt;
  &lt;dd&gt;E allows modules to declare top-level variables, but each time the module is imported it creates a fresh copy.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;OCaml does allow global variables, but by convention they are generally not used.&lt;/p&gt;

&lt;p&gt;A second problem is controlling access to the outside world, including the network and disks (which you could consider to be more global variables):&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Haskell&lt;/dt&gt;
  &lt;dd&gt;Haskell doesn&amp;rsquo;t allow functions to access the outside world at all, but they can return an &lt;code&gt;IO&lt;/code&gt; type if they want to do something (the caller must then pass this value up to the top level).
This makes it easy to see that e.g. evaluating a function &amp;ldquo;&lt;code&gt;uriPath :: URI -&amp;gt; String&lt;/code&gt;&amp;rdquo; cannot access the network.
However, it appears that all IO gets lumped in together: a value of type &lt;code&gt;IO String&lt;/code&gt; may cause any side-effects at all (disk, network, etc), so the entire side-effecting part of the program needs to be audited.&lt;/dd&gt;
  &lt;dt&gt;Rust&lt;/dt&gt;
  &lt;dd&gt;Rust allows all code full access to the system via its standard library.
For example, any code can read or write any file.&lt;/dd&gt;
  &lt;dt&gt;E&lt;/dt&gt;
  &lt;dd&gt;E passes all access to the outside world to the program&amp;rsquo;s entry point.
For example, &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; grants access to the file system and &lt;code&gt;&amp;lt;unsafe&amp;gt;&lt;/code&gt; grants access to all unsafe features.
These can be passed to libraries to grant them access, and can be attenuated (wrapped) to provide limited access.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;main.e &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;import:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;file:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myprog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;queue&lt;/code&gt; has read-write access to the &lt;code&gt;/var/myprog/queue&lt;/code&gt; sub-tree (and nothing else).
It also has no way to share data with any other parts of the program, including other queues.&lt;/p&gt;

&lt;p&gt;Like Rust, OCaml does not limit access to the outside world.
However, Mirage itself uses E-style dependency injection everywhere, with the unikernel&amp;rsquo;s &lt;code&gt;start&lt;/code&gt; function being passed all external resources as arguments:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;unikernel.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CONSOLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BLOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cohttp_lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Upload_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Because everything in Mirage is defined using abstract types, libraries always expect to be passed the things they need explicitly.
We know that &lt;code&gt;Upload_queue&lt;/code&gt; above won&amp;rsquo;t access a block device directly because it needs to support different kinds of block device.&lt;/p&gt;

&lt;p&gt;OCaml &lt;em&gt;does&lt;/em&gt; enforce its abstractions.
There&amp;rsquo;s no way for the &lt;code&gt;Upload_queue&lt;/code&gt; to discover that &lt;code&gt;block&lt;/code&gt; is really a Xen block device with some extra functionality
(as a Java program might do with &lt;code&gt;if (block instanceof XenBlock)&lt;/code&gt;, for example).
This means that we can reason about the limits of what functions may do by looking only at their type signatures.&lt;/p&gt;

&lt;p&gt;The use of functors means you can attenuate access as desired.
For example, if we want to grant just part of &lt;code&gt;block&lt;/code&gt; to the queue then we can create our own module implementing the &lt;code&gt;BLOCK&lt;/code&gt; type that exposes just some partition of the device, and pass that to the &lt;code&gt;Upload_queue.Make&lt;/code&gt; functor.&lt;/p&gt;

&lt;p&gt;In summary then, we can reason about security fairly well in Mirage if we assume the libraries are not malicious, but we cannot make hard guarantees.
It should be possible to check with automatic static analysis that we&amp;rsquo;re not using any &amp;ldquo;unsafe&amp;rdquo; features such as global variables, direct access to devices, or allocating uninitialised memory, but I don&amp;rsquo;t know of any tools to do that (except &lt;a href=&quot;http://www.skyhunter.com/marcs/emilyWalnut.html&quot;&gt;Emily&lt;/a&gt;, but that seems to be just a proof-of-concept).
But these issues are minor: any reasonably safe modern language will be a huge improvement over legacy C or C++ systems!&lt;/p&gt;

&lt;h2&gt;Xen&lt;/h2&gt;

&lt;p&gt;The Xen hypervisor allows multiple guest operating systems to run on a single physical machine.
It is used by many cloud hosting providers, including Amazon&amp;rsquo;s AWS.
I run it on my CubieTruck - a small ARM board.
Xen allows me to run my unikernel on the same machine as other services, but ideally with the same security properties as if it had its own dedicated machine.
If some other guest on the machine is compromised, it shouldn&amp;rsquo;t affect my unikernel, and if the unikernel is compromised then it shouldn&amp;rsquo;t affect other guests.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;caption-wrapper center&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/xen.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;A typical Xen deployment, running four domains.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;A typical Xen deployment, running four domains.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The diagram above shows a deployment with Linux and Mirage guests. Only dom0 has access to the physical hardware; the other guests only see virtual devices, provided by dom0.&lt;/p&gt;

&lt;p&gt;How secure is Xen?
The &lt;a href=&quot;http://xenbits.xen.org/xsa/&quot;&gt;Xen security advisories&lt;/a&gt; page shows that there are about 3 new Xen advisories each month.
However, it&amp;rsquo;s hard to compare programs this way because the number of vulnerabilities reported depends greatly on the number of people using the program, whether they use it for security-critical tasks, and how seriously the project takes problems (e.g. whether a denial-of-service attack is considered a security bug).&lt;/p&gt;

&lt;p&gt;I started using Xen in April 2014.
These are the security problems I&amp;rsquo;ve found myself so far:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://xenbits.xen.org/xsa/advisory-93.html&quot;&gt;XSA-93&lt;/a&gt; Hardware features unintentionally exposed to guests on ARM&lt;/dt&gt;
  &lt;dd&gt;While trying to get Mini-OS to boot, I tried implementing ARM&amp;rsquo;s recommended boot code for invalidating the cache
(at startup, you should invalidate the cache, dropping any previous contents).
When running under a hypervisor this should be a null-op since the cache is always valid by the time a guest is running, but Xen allowed the operation to go ahead, discarding pending writes by the hypervisor and other guests and crashing the system.
This could probably be used for a successful attack.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://xenbits.xen.org/xsa/advisory-94.html&quot;&gt;XSA-94&lt;/a&gt; : Hypervisor crash setting up GIC on arm32&lt;/dt&gt;
  &lt;dd&gt;I tried to program an out-of-range register, causing the hypervisor to dereference a null pointer and panic.
This is just a denial of service (the host machine needs to be rebooted); it shouldn&amp;rsquo;t allow access to other VMs.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://xenbits.xen.org/xsa/advisory-95.html&quot;&gt;XSA-95&lt;/a&gt; : Input handling vulnerabilities loading guest kernel on ARM&lt;/dt&gt;
  &lt;dd&gt;I got the length wrong when creating the zImage for the unikernel (I included the .bss section in the length).
The &lt;code&gt;xl create&lt;/code&gt; tool didn&amp;rsquo;t notice and tried to read the extra data, causing the tool to segfault.
You could use this to read a bit of private data from the &lt;code&gt;xl&lt;/code&gt; process, but it&amp;rsquo;s unlikely there would be anything useful there.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Although that&amp;rsquo;s more bugs than you might expect, note that they&amp;rsquo;re all specific to the relatively new ARM support.
The second and third are both due to using C, and would have been avoided in a safer language.
I&amp;rsquo;m not really sure why the &amp;ldquo;xl&amp;rdquo; tool needs to be in C - that seems to be asking for trouble.&lt;/p&gt;

&lt;p&gt;To drive the physical hardware, Xen runs the first guest (dom0) with access to everything.
This is usually Linux, and I had various problems with that. For example:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://lists.xen.org/archives/html/xen-devel/2014-08/msg00053.html&quot;&gt;Bug sharing the same page twice&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;Linux got confused when the unikernel shared the same page twice (it split a single page of RAM into multiple TCP segments).
This wasn&amp;rsquo;t a security bug (I think), but after it was fixed, I then got:&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://lists.xen.org/archives/html/xen-devel/2014-08/msg00596.html&quot;&gt;Page still granted&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;If my unikernel sent a network packet and then exited quickly, dom0 would get stuck and I&amp;rsquo;d have to reboot.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;https://github.com/talex5/linux/commit/6b6dcc2857d84070c94fe4e3498486337d292870&quot;&gt;Oops if network is used too quickly&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;The Linux dom0 initialises the virtual network device while the VM is booting.
My unikernel booted fast enough to send packets before the device structure had been fully filled in, leading to an oops.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://lists.xen.org/archives/html/xen-devel/2014-09/msg02254.html&quot;&gt;Linux Dom0 oops and reboot on indirect block requests&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;Sending lots of block device requests to Linux dom0 from the unikernel would cause Linux to oops in &lt;code&gt;swiotlb_tbl_unmap_single&lt;/code&gt; and reboot the host.
I wasn&amp;rsquo;t the first to find this though, and backporting the patch from Linux 3.17 seemed to fix it (I don&amp;rsquo;t actually know what the problem was).&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;So it might seem that using Xen doesn&amp;rsquo;t get us very far.
We&amp;rsquo;re still running Linux in dom0, and it still has full access to the machine.
For example, a malicious network packet from outside or from a guest might still give an attacker full control of the machine.
Why not just use &lt;a href=&quot;http://www.linux-kvm.org/&quot;&gt;KVM&lt;/a&gt; and run the guests under Linux directly?&lt;/p&gt;

&lt;p&gt;The big (potential) advantage of Xen here is &lt;a href=&quot;http://wiki.xen.org/wiki/Dom0_Disaggregation&quot;&gt;Dom0 Disaggregation&lt;/a&gt;.
With this, Dom0 gives control of different pieces of physical hardware to different VMs rather than driving them itself.
For example, &lt;a href=&quot;https://wiki.qubes-os.org/&quot;&gt;Qubes&lt;/a&gt; (a security-focused desktop OS using Xen) runs a separate &amp;ldquo;&lt;a href=&quot;https://wiki.qubes-os.org/wiki/QubesNet&quot;&gt;NetVM&lt;/a&gt;&amp;rdquo; Linux guest just to handle the network device.
This is connected only to the &lt;a href=&quot;https://qubes-os.org/wiki/QubesFirewall&quot;&gt;FirewallVM&lt;/a&gt; - another Linux guest that just routes packets to other VMs.&lt;/p&gt;

&lt;p&gt;This is interesting for two reasons.
First, if an attacker exploits a bug in the network device driver, they&amp;rsquo;re still outside your firewall.
Secondly, it provides a credible path to replacing parts of Linux with alternative implementations, possibly written in safer languages.
You could, for example, have Linux running dom0 but use FreeBSD to drive the network card, Mirage to provide the firewall, and OpenBSD to handle USB.&lt;/p&gt;

&lt;p&gt;Finally, it&amp;rsquo;s worth noting that Mirage is not tied to Xen, but can target various systems (mainly Unix and Xen currently, but there is some JavaScript support too).
If it turns out that e.g. &lt;a href=&quot;http://genode.org/about/challenges&quot;&gt;Genode on seL4&lt;/a&gt; (a formally verified microkernel) provides better security, we should be able to support that too.&lt;/p&gt;

&lt;h2&gt;Transport Layer Security&lt;/h2&gt;

&lt;p&gt;We won&amp;rsquo;t get far securing the system while attackers can read and modify our communications.
The &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/&quot;&gt;ocaml-tls&lt;/a&gt; project provides an OCaml implementation of TLS (&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;Transport Layer Security&lt;/a&gt;), and
in September &lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2014-09/msg00100.html&quot;&gt;Hannes Mehnert showed it running on Mirage/Xen/ARM devices&lt;/a&gt;.
Given the various flaws exposed recently in popular C TLS libraries, an OCaml implementation is very welcome.
Getting the Xen support in a state where it could be widely used took a bit of work, but
I&amp;rsquo;ve submitted all the patches I made, so it should be easier for other people now - see &lt;a href=&quot;https://github.com/mirage/mirage-dev/pull/52&quot;&gt;https://github.com/mirage/mirage-dev/pull/52&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;C stubs for Xen&lt;/h3&gt;

&lt;p&gt;TLS needs some C code for the low-level cryptographic functions, which have to be constant time to avoid leaking information about the key, so first I had to make packages providing versions of libgmp, ctypes, zarith and nocrypto compiled to run in kernel mode.&lt;/p&gt;

&lt;p&gt;The reason you need to compile C programs specially to run in kernel mode is because on x86 processors user mode code can assume the existence of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Red_zone_(computing)&quot;&gt;red zone&lt;/a&gt;, which allows some optimisations that aren&amp;rsquo;t safe in kernel mode.&lt;/p&gt;

&lt;h3&gt;Ethernet frame alignment&lt;/h3&gt;

&lt;p&gt;The Mirage network driver sends Ethernet frames to dom0 by sharing pages of memory.
Each frame must therefore be contained in a single page.
The TLS code was (correctly) passing a large buffer to the TCP layer, which &lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2015-01/msg00029.html&quot;&gt;incorrectly&lt;/a&gt; asked the network device to send each TCP-sized chunk of it.
Chunks overlapping page boundaries then got rejected.&lt;/p&gt;

&lt;p&gt;My previous experiments with &lt;a href=&quot;http://roscidus.com/blog/blog/2014/10/27/visualising-an-asynchronous-monad/#udp-transmission&quot;&gt;tracing the network layer&lt;/a&gt; had shown that we actually share two pages for each packet: one for the IP header and one for the payload.
Doing this avoids the need to copy the data to a new buffer, but adds the overhead of granting and revoking access to both pages.
I modified the network driver to copy the data into a single block inside a single page and got &lt;a href=&quot;https://github.com/mirage/mirage-net-xen/pull/17&quot;&gt;a large speed boost&lt;/a&gt;.
Indeed, it got so much faster that it triggered &lt;a href=&quot;https://github.com/mirage/mirage-net-xen/pull/16&quot;&gt;a bug handling full transmit buffers&lt;/a&gt; - which made it initially appear slower!&lt;/p&gt;

&lt;p&gt;In addition to fixing the alignment problem when using TLS, and being faster, this has a nice security benefit:
the only data shared with the network driver domain is data explicitly sent to it.
Before, we had to share the entire page of memory containing the application&amp;rsquo;s buffer, and there was no way to know what else might have been there.
This offers some protection if the network driver domain is compromised.&lt;/p&gt;

&lt;h3&gt;HTTP API&lt;/h3&gt;

&lt;p&gt;My original code configured a plain HTTP server on port 8080 like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;config.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;http_server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TCP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conduit_direct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;queue&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; creates TCP/IP stack.
&lt;code&gt;conduit_direct&lt;/code&gt; can dynamically select different transports (e.g. http or vchan).
&lt;code&gt;http_server&lt;/code&gt; applies the configuration to the conduit to get an HTTP server using plain HTTP.&lt;/p&gt;

&lt;p&gt;I added support to &lt;code&gt;Conduit_mirage&lt;/code&gt; to let it wrap any underlying conduit with TLS.
However, the configuration needed for TLS is fairly complicated, and involves a secret key which must be protected.
Therefore, I switched to creating only the &lt;code&gt;conduit&lt;/code&gt; in &lt;code&gt;config.ml&lt;/code&gt; and having the unikernel itself load the key and certificate by copying a local &amp;ldquo;keys&amp;rdquo; directory into the unikernel image as a &amp;ldquo;crunch&amp;rdquo; filesystem:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;config.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conduit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conduit_direct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls_over_conduit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_entropy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;queue&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conduit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crunch&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;unikernel.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conduit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;certificate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X509&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certificate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tls_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Tls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certificate&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conduit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TLS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TCP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8443&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;nn&quot;&gt;Conduit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This runs a secure HTTPS server on port 8443.
The rest of the code is as before.&lt;/p&gt;

&lt;h3&gt;The private key&lt;/h3&gt;

&lt;p&gt;The next question is where to store the real private key.
The examples provided by the TLS package compile it into the unikernel image using crunch, but it&amp;rsquo;s common to keep unikernel binaries in Git repositories and people don&amp;rsquo;t expect kernel images to contain secrets.
In a traditional Linux system, we&amp;rsquo;d store the private key on the disk, so I decided to try the same here.
(I did think about storing the key encrypted in the unikernel and storing the password on the disk so you&amp;rsquo;d need both to get the key, but the TLS library doesn&amp;rsquo;t support encrypted keys yet.)&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t use a regular filesystem for my queuing service, and I wouldn&amp;rsquo;t want to share it with the key if I did, so instead I reserved a separate 4KB partition of the disk for the key.
It turned out that Mirage already has partitioning support in the form of the &lt;a href=&quot;https://github.com/mirage/ocaml-mbr&quot;&gt;ocaml-mbr&lt;/a&gt; library.
I didn&amp;rsquo;t actually create an MBR at the start, but just used the &lt;a href=&quot;https://github.com/talex5/ocaml-mbr/blob/master/lib/mbr_partition.mli&quot;&gt;&lt;code&gt;Mbr_partition&lt;/code&gt;&lt;/a&gt; functor to wrap the underlying block device into two parts.
The configuration looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/queue-baseline.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;How safe is this?
I don&amp;rsquo;t want to audit all the code for handling the queue, and I shouldn&amp;rsquo;t have to: we can see from the diagram that the only components with access to the key are the disk, the partitions and the TLS library.
We need to trust that the TLS library will protect the key (not easy, but that&amp;rsquo;s its job) and that &lt;code&gt;queue_partition&lt;/code&gt; won&amp;rsquo;t let &lt;code&gt;queue&lt;/code&gt; access the part of the disk with the key.&lt;/p&gt;

&lt;p&gt;We also need to trust the disk, but if the partitions are only allowing correct requests through, that shouldn&amp;rsquo;t be too much to ask.&lt;/p&gt;

&lt;h3&gt;The partition code&lt;/h3&gt;

&lt;p&gt;Before relying on the partition code, we&amp;rsquo;d better take a look at it because it may not be designed to enforce security.
Indeed, a quick look at the code shows that it isn&amp;rsquo;t:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length_sectors&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unknown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;read %Ld %Ld out of range&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length_sectors&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unknown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;write %Ld %Ld out of range&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;It checks only that the requested start sector plus the length of the results buffer is less than the length of the partition.
To (hopefully) make this bullet-proof, I:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;moved the checks into a single function so we don&amp;rsquo;t have to check two copies,&lt;/li&gt;
  &lt;li&gt;added a check that the start sector isn&amp;rsquo;t negative,&lt;/li&gt;
  &lt;li&gt;modified the end check to avoid integer overflow, and&lt;/li&gt;
  &lt;li&gt;added some unit-tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adjust_start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers_len_sectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length_sectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers_len_sectors&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unknown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s %Ld+%Ld out of range&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers_len_sectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adjust_start&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;read&amp;quot;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adjust_start&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;write&amp;quot;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The need to protect against overflow is an annoyance.
OCaml&amp;rsquo;s &lt;code&gt;Int64.(add max_int one)&lt;/code&gt; doesn&amp;rsquo;t abort, but returns &lt;code&gt;Int64.min_int&lt;/code&gt;.
That&amp;rsquo;s disappointing, but not surprising.
I wrote a unit-test that tried to read sector &lt;code&gt;Int64.max_int&lt;/code&gt; and ran it (before updating the code) to check it detected the problem.
I was expecting the partition code to pass the request to the underlying block device, which I expected to return an error about the invalid sector, but it didn&amp;rsquo;t!
It turns out, &lt;code&gt;Int64.to_int&lt;/code&gt; (used by my in-memory test block device) silently truncates out-of-range integers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Int64.max_int;;
- : int64 = 9223372036854775807L
# Int64.(add max_int one);;
- : int64 = -9223372036854775808L
# Int64.min_int;;
- : int64 = -9223372036854775808L
# Int64.(to_int min_int);;
- : int = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, if the queue can be tricked into asking for sector 9223372036854775807 then the partition would accept it as valid and the block device would truncate it and give access to sector 0 - the sector with the private key!&lt;/p&gt;

&lt;p&gt;Still, this is a nice demonstration of how we can add security in Mirage by inserting a new module (&lt;code&gt;Mbr_partition&lt;/code&gt;) between two existing ones.
Rather than having some complicated fixed policy language (e.g. SELinux), we can build whatever security abstractions we like.
Here I just limited which parts of the disk the queue could access, but we could do many other things: make a partition read-only, make it readable only until the unikernel finishes initialising, apply rate-limiting on reads, etc.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the final code. It:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Takes a block device, a conduit, and a KV store as inputs.&lt;/li&gt;
  &lt;li&gt;Creates two partitions (views) onto the block device.&lt;/li&gt;
  &lt;li&gt;Creates a queue on one partition.&lt;/li&gt;
  &lt;li&gt;Reads the private key from the other, and the certificate from the KV store.&lt;/li&gt;
  &lt;li&gt;Begins serving HTTPS requests.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;unikernel.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CONSOLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BLOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Conduit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Conduit_mirage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CertStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KV_RO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Part&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mbr_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Upload_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Conduit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conduit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_sectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_partition_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sector_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sector_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_sectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_sectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_sectors&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;n&quot;&gt;length_sectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_sectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;|=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_sector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_sectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;n&quot;&gt;length_sectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_sectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;|=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;certs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;read_from_kv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert_store&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tls/server.pem&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;gt;|=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X509&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_pem_cstruct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;read_from_partition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_key_len&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;&amp;gt;|=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;X509&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;PK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_pem_cstruct1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tls_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Tls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_server&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;certs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn_closed&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TLS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TCP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8443&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Conduit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conduit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Entropy&lt;/h3&gt;

&lt;p&gt;Another issue is getting good random numbers, which is required for the cryptography.
On start-up, the unikernel displayed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Entropy_xen_weak: using a weak entropy source seeded only from time.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix this, you need to use &lt;a href=&quot;https://github.com/djs55/mirage-entropy&quot;&gt;Dave Scott&amp;rsquo;s version&lt;/a&gt; (with a slight patch from me):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;opam pin add mirage-entropy-xen 'https://github.com/talex5/mirage-entropy.git#handshake'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should then see:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Entropy_xen: attempting to connect to Xen entropy source org.openmirage.entropy.1
Console.connect org.openmirage.entropy.1: doesn't currently exist, waiting for hotplug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;a href=&quot;https://github.com/mirage/xentropyd&quot;&gt;xentropyd&lt;/a&gt; in dom0 to share the host&amp;rsquo;s entropy with guests.&lt;/p&gt;

&lt;p&gt;The interesting question here is what Linux guests do for entropy, especially on ARM where there&amp;rsquo;s no &lt;code&gt;RdRand&lt;/code&gt; instruction.&lt;/p&gt;

&lt;h2&gt;Access control&lt;/h2&gt;

&lt;p&gt;Traditional means of access control involve issuing users with passwords or X.509 client certificates, which they share with the software they&amp;rsquo;re running.
All requests sent by the client can then be authenticated as coming from them and approved based on some access control policy.
This approach leads to all the well-known problems with traditional access control: the &lt;a href=&quot;http://en.wikipedia.org/wiki/Confused_deputy_problem&quot;&gt;confused deputy problem&lt;/a&gt;, Cross-Site Request Forgery, Clickjacking, etc, so I want to avoid that kind of &amp;ldquo;ambient authority&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The previous diagram let us reason about how the different components within the unikernel could interact with each other, showing the possible (initial) interactions with arrows.
Now I want to stretch arrows across the Internet, so I can reason in the same way about the larger distributed system that includes my queue service with the uploaders and downloaders.&lt;/p&gt;

&lt;p&gt;Like C pointers, traditional web URLs do not give us what we want: a compromised CA anywhere in the world will allow an attacker to impersonate our service, and our URLs may be guessable.
Instead, I decided to try a &lt;a href=&quot;http://www.waterken.com/dev/YURL/Definition/&quot;&gt;YURL&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;rdquo;[&amp;hellip;] the identifier MUST provide enough information to: locate the target site; authenticate the target site; and, if required, establish a private communication channel with the target site. A URL that meets these requirements is a YURL.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The latest version of this (draft) scheme I could find was some brief notes in &lt;a href=&quot;http://iiw.idcommons.net/HTTPSY_%E2%80%93_Leave_the_Certificate_Authority_Behind&quot;&gt;HTTPSY&lt;/a&gt; (2014), which uses the format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;httpsy://algorithm:fingerprint@domain:port/path1/!redactedPath2/&amp;hellip;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two parts we need to consider: how the client determines that it is connected to the real service, and how the service determines what the client can do.&lt;/p&gt;

&lt;p&gt;To let the client authenticate the server without relying on the CA system, YURLs include a hash (fingerprint) of the server&amp;rsquo;s public key.
You can get the fingerprint of an X509 certificate like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openssl x509 -in server.pem -fingerprint -sha256 -noout
SHA256 Fingerprint=3F:27:2D:E6:D6:3D:7C:08:E0:E3:EF:02:A8:DA:9A:74:62:84:57:21:B4:72:39:FD:D0:72:0E:76:71:A5:E9:94
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Base32-encoding shortens this to &lt;code&gt;h4ts3zwwhv6aryhd54bkrwu2orriivzbwrzdt7oqoihhm4nf5gka&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, to get the value with OCaml, use:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs_of_cert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Nocrypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SHA256&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;To control what each user of the service can do, we give each user a unique YURL containing a &lt;a href=&quot;http://wiki.erights.org/wiki/Swiss_number&quot;&gt;Swiss number&lt;/a&gt;, which is like a password except that it applies only to a specific resource, not to the whole site.
The Swiss number comes after the &lt;code&gt;!&lt;/code&gt; in the URL, which indicates to browsers that it shouldn&amp;rsquo;t be displayed, included in Referer headers, etc.
You can use any unguessably long random string here (I used &lt;code&gt;pwgen 32 1&lt;/code&gt;).
After checking the server&amp;rsquo;s fingerprint, the client requests the path with the Swiss number included.&lt;/p&gt;

&lt;p&gt;Putting it all together, then, a sample URL to give to the downloader looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;httpsy://sha256:h4ts3zwwhv6aryhd54bkrwu2orriivzbwrzdt7oqoihhm4nf5gka@10.0.0.2:8443/downloader/!eequuthieyexahzahShain0abeiwaej4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The old code for handling requests looked like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Cohttp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/uploader&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_uploader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/downloader&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_downloader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This becomes:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re_endpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;^/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(uploader&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|downloader&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)/!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(.*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)$&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Cohttp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re_endpoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched_group&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swiss_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched_group&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Nocrypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SHA256&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;B64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swiss_hash&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;uploader&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;kW8VOKYP1eu/cWInpJx/jzYDSJzo1RUR14GoxV/CImM=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;handle_uploader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;downloader&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PEj3nuboy3BktVGzi9y/UBmgkrGuhHD1i6WsXDw1naI=&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;handle_downloader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;0repo&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;bad_path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bad_path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I hashed the Swiss number here so that the unikernel doesn&amp;rsquo;t have to contain any secrets and I therefore don&amp;rsquo;t have to worry about timing attacks.
Even if the attacker knows the hash we&amp;rsquo;re looking for, they still shouldn&amp;rsquo;t be able to generate a URL which hashes to that value.&lt;/p&gt;

&lt;p&gt;By giving each user of the service a different Swiss number we can keep records of who authorised each request and revoke access individually if needed (here the &lt;code&gt;~user:&amp;quot;Alice&amp;quot;&lt;/code&gt; indicates this is the uploader URL we gave to Alice).&lt;/p&gt;

&lt;p&gt;Of course, the YURLs need to be sent to users securely too.
In my case, the users already have known GPG keys, so I can just email them an encrypted version.&lt;/p&gt;

&lt;h3&gt;Python client&lt;/h3&gt;

&lt;p&gt;The downloader (0repo) is written in Python, so the next step was to check that it could still access the service.
The Python SSL API was rather confusing, but this seems to work:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;client.py &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.parse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ssl&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Note: MUST check fingerprint BEFORE sending URL path with Swiss number&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FingerprintContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;required_fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;verify_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CERT_REQUIRED&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;check_hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required_fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fingerprint&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrap_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpeercert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary_form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;actual_fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b32encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ascii'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual_fingerprint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required_fingerprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Expected server certificate to have fingerprint:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; but got:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required_fingerprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual_fingerprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapped&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Testing...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;httpsy://sha256:h4ts3zwwhv6aryhd54bkrwu2orriivzbwrzdt7oqoihhm4nf5gka@localhost:8443/downloader/!eequuthieyexahzahShain0abeiwaej4&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;httpsy&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sha256&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPSConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FingerprintContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;check_hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parsed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getresponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fetching item of size &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;...&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-Length'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fetched &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bytes&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;MirageOS should allow us to build systems that are far more secure than traditional operating systems.
By starting with isolated components and then connecting them together in a controlled way we can feel some confidence that our security goals will be met.&lt;/p&gt;

&lt;p&gt;At the language level, OCaml&amp;rsquo;s abstract types and functors make it easy to reason informally about how the components of our system will interact. Mirage passes values granting access to the outside world (disks, network cards, etc) to our unikernel&amp;rsquo;s &lt;code&gt;start&lt;/code&gt; function.
Our code can then delegate these permissions to the rest of the code in a controlled fashion.
For example, we can grant the queuing code access only to its part of the disk (and not the bit containing the TLS private key) by wrapping the disk in a partition functor.
Although OCaml doesn&amp;rsquo;t actually prevent us from bypassing this system and accessing devices directly, code that does so would not be able to support the multiple different back-ends (e.g. Unix and Xen) that Mirage requires and so could not be written accidentally.
It should be possible for a static analysis tool to verify that modules don&amp;rsquo;t do this.&lt;/p&gt;

&lt;p&gt;Moving up a level from separating the components of our unikernel, Xen allows us to isolate multiple unikernels and other VMs running on a single physical host.
Just as we interposed a disk partition between the queue and the disk within the unikernel, we can use Xen to interpose a firewall VM between the physical network device and our unikernel.&lt;/p&gt;

&lt;p&gt;Finally, the use of transport layer security and YURLs allows us to continue this pattern of isolation to the level of networks, so that we can reason in the same way about distributed systems.
My current code mixes the handling of YURLs with the existing application logic, but it should be possible to abstract this and make it reusable, so that remote services appear just like any local service.
In many systems this is awkward because local APIs are used synchronously while remote ones are asynchronous, but in Mirage everything is non-blocking anyway, so there is no difference.&lt;/p&gt;

&lt;p&gt;I feel I should put some kind of warning here about these very new security features not being ready for real use and how you should instead use mature, widely deployed systems such as Linux and OpenSSL.
But really, can it be any worse?&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve spotted any flaws in my reasoning or code, please add comments!
The code for this unikernel can be found on the &lt;code&gt;tls&lt;/code&gt; branch at &lt;a href=&quot;https://github.com/0install/0repo-queue/tree/tls&quot;&gt;https://github.com/0install/0repo-queue/tree/tls&lt;/a&gt;.&lt;/p&gt;

</content><id>http://roscidus.com/blog/blog/2015/01/21/securing-the-unikernel/</id><title type="text">Securing the Unikernel</title><updated>2015-01-21T10:03:08+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://www.skjegstad.com/blog/2015/01/19/mirageos-xen-virtualbox/" rel="alternate"/><contributor><uri>http://www.skjegstad.com/feeds/all.atom.xml</uri><name>Magnus Skjegstad</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://www.openmirage.org&quot;&gt;MirageOS&lt;/a&gt; is a library operating system. An application written for MirageOS is compiled to an operating system kernel that only contains the specific functionality required by the application - a &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2566628&quot;&gt;unikernel&lt;/a&gt;. The MirageOS unikernels can be compiled for different targets, including standalone VMs that run under Xen. The Xen unikernels can be deployed directly to common cloud services such as &lt;a href=&quot;http://openmirage.org/wiki/xen-boot&quot;&gt;Amazon EC2&lt;/a&gt; and &lt;a href=&quot;http://christopherbothwell.com/ocaml/mirage/linode/2014/12/08/hello-linode.html&quot;&gt;Linode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have done a lot of MirageOS development for Xen lately and it can be inconvenient to have to rely on an external server or service to be able to run and debug the unikernel. As an alternative I have set up a VM in Virtualbox with a Xen server. The MirageOS unikernels then run as VMs in Xen, which itself runs in a VM in Virtualbox. With the &amp;quot;Host-only networking&amp;quot; feature in Virtualbox the unikernels are accessible from the host operating system, which can be very useful for testing client/server applications. A unikernel that hosts a web page can for example be tested in a web browser in the host OS. I am hoping that this setup may be useful to others so I am documenting it in this blog post.&lt;/p&gt;


&lt;p&gt;My current VM is based on &lt;a href=&quot;http://releases.ubuntu.com/14.04/&quot;&gt;Ubuntu Server 14.04 LTS&lt;/a&gt; with Xen hypervisor 4.4 installed. The steps described in this post should be transferrable to other distributions if they support newer versions of the Xen hypervisor (4.4+). I have also included a list of alternative development environments for Mirage &lt;a href=&quot;http://www.skjegstad.com/feeds/all.atom.xml#alternatives&quot;&gt;near the end&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Install the Ubuntu VM&lt;/h3&gt;
&lt;p&gt;First, create a new Virtualbox VM with at least 1 GB RAM and 20 GB disk and start the Ubuntu Server installation. How to install Ubuntu in Virtualbox is covered in detail &lt;a href=&quot;https://help.ubuntu.com/community/Ubuntu_as_Guest_OS&quot;&gt;elsewhere&lt;/a&gt;, so I will only briefly describe the most relevant steps. &lt;/p&gt;
&lt;p&gt;To keep the VM lightweight, install as few features as possible. We will use SSH to login to the server so select &amp;quot;OpenSSH Server&amp;quot;. You may want to install a desktop environment later, but keep in mind that the graphics support will be limited under two layers of virtualization (Virtualbox + Xen). &lt;/p&gt;
&lt;p&gt;Give the Linux VM a hostname that is unique on your network as we will use this to access it with SSH later. I use &amp;quot;virtualxen&amp;quot;. &lt;/p&gt;
&lt;p&gt;Add a user you want to use for development, for example &amp;quot;mirage&amp;quot;. &lt;/p&gt;
&lt;p&gt;You may also want to reserve some of the disk space for Mirage if you plan to run applications that use block storage. During guided partitioning in the Ubuntu installer, if you choose to use the entire disk, the next question will allow you to specify a percentage of the disk that you want to use. If you plan to use Xen VMs that need direct disk access you should leave some of it for this purpose, for example 50%.&lt;/p&gt;
&lt;p&gt;After completing the installation, run apt-get update/upgrade and install the Virtualbox guest utilities, then reboot:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;sudo apt-get update
sudo apt-get upgrade
sudo apt-get install virtualbox-guest-utils 
sudo reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install the Xen Hypervisor&lt;/h3&gt;
&lt;p&gt;After installing the Ubuntu Server VM, your configuration will be as in the following figure. Ubuntu runs in Virtualbox which runs under the main operating system (OS X in my case). &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.skjegstad.com/images/blog/mirage_dev/ubuntu_in_vm_overview.jpg&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We are now going to install the Xen hypervisor, which will become a thin layer between Virtualbox and the Ubuntu Server installation. The Xen hypervisor will be able to run VMs within the Virtualbox VM and we can use the Ubuntu installation to control Xen. This is the new configuration with Xen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.skjegstad.com/images/blog/mirage_dev/xen_in_vm_overview.jpg&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.xen.org/wiki/Dom0&quot;&gt;Dom0&lt;/a&gt; is the original Ubuntu Server installation and the &lt;a href=&quot;http://wiki.xen.org/wiki/DomU&quot;&gt;DomU&lt;/a&gt;'s will be our future Mirage applications.&lt;/p&gt;
&lt;p&gt;To install Xen, log in to Ubuntu and install the Xen hypervisor with the following command. We will also need bridge-utils (for configuring networking), build-essential (development tools) and git (version control):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# install hypervisor and other tools&lt;/span&gt;
sudo apt-get install xen-hypervisor-4.4-amd64 bridge-utils build-essential git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the installation is complete, reboot the Virtualbox VM to start into Xen and the Ubuntu Server installation (which now has become dom0). &lt;/p&gt;
&lt;p&gt;Xen can be controlled from dom0 with the &lt;code&gt;xl&lt;/code&gt; command. To verify that Ubuntu is running under Xen, log in and run &lt;code&gt;sudo xl list&lt;/code&gt; to show a list of running domains. The output should look similar to this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo xl list
Name                                        ID   Mem VCPUs       State      Time&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Domain-0                                     0  1896     1      r-----         31.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only Xen domain running at this point should be Dom0.&lt;/p&gt;
&lt;p&gt;We are now ready to set up networking. &lt;/p&gt;
&lt;h3&gt;Networking&lt;/h3&gt;
&lt;p&gt;Internet access should work out of the box for dom0, but to enable network access from the domU's we have set up a bridge device that they can connect to. We will call this device br0. Since this is a development environment we also want the unikernels to be accessible from the host operating system (so we can test them), but not from the local network. Virtualbox has a feature that allows this called a host-only network. &lt;/p&gt;
&lt;p&gt;To set up the host-only network in Virtualbox we have to shutdown the VM (&lt;code&gt;sudo shutdown -h now&lt;/code&gt;). Then go to Preferences in Virtualbox and select the &amp;quot;Network&amp;quot; tab and &amp;quot;Host-only Networks&amp;quot;. Create a new network. Make sure that the built-in DHCP server is disabled - I have not managed to get the built-in DHCP server to work with Mirage, so we will install a DHCP server in dom0 instead. If you already have an existing host-only network and you disabled the DHCP server in this step, remember to restart Virtualbox to make sure that the DHCP server is not running. &lt;/p&gt;
&lt;p&gt;After setting up the host-only network, exit preferences and open the settings for the VM. Under the &amp;quot;Network&amp;quot; tab, go to &amp;quot;Adapter 2&amp;quot;, enable it and choose to attach to &amp;quot;Host-only Adapter&amp;quot;. Select the name of the network that you just created in Preferences. Under advanced, select &amp;quot;Allow All&amp;quot; for &amp;quot;Promiscuous mode&amp;quot;. Exit and save.&lt;/p&gt;
&lt;p&gt;You can now start the VM with the new network configuration. After booting, edit /etc/network/interfaces to setup up the host-only adapter (eth1) and add it to the bridge (br0). The configuration below is based on the default IP range (192.168.56.x) for host-only networking in Virtualbox - if you have made changes to the default network configuration you may have to update the configuration here as well. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# /etc/network/interfaces&lt;/span&gt;
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp

auto eth1
iface eth1 inet manual
    pre-up ifconfig &lt;span class=&quot;nv&quot;&gt;$IFACE&lt;/span&gt; up
    post-down ifconfig &lt;span class=&quot;nv&quot;&gt;$IFACE&lt;/span&gt; down

auto br0
iface br0 inet static
    bridge_ports eth1
    address 192.168.56.5
    broadcast 192.168.56.255
    netmask 255.255.255.0
    &lt;span class=&quot;c&quot;&gt;# disable ageing (turn bridge into switch)&lt;/span&gt;
    up /sbin/brctl setageing br0 0
    &lt;span class=&quot;c&quot;&gt;# disable stp&lt;/span&gt;
    up /sbin/brctl stp br0 off
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we install dnsmasq to setup a DHCP server in dom0. This DHCP server will be responsible for assigning IP addresses to the unikernels that attach to br0.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install dnsmasq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To enable the DHCP server on br0, edit /etc/dnsmasq.conf and add the following lines:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dhcp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168.56.150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168.56.200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This configures the DHCP server to run on br0 and to dynamically assign IP addresses in the range 192.168.56.150 to 192.168.56.200 with a lease time of 1 hour. &lt;/p&gt;
&lt;p&gt;To be able to access dom0 via SSH from the host operating system (outside Virtualbox) we install avahi-daemon. Avahi-daemon enables mDNS, which will allow you to connect to &amp;quot;virtualxen.local&amp;quot; from the host operating system:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install avahi-daemon
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reboot dom0 to activate the changes (&lt;code&gt;sudo reboot&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You should now be able to connect to dom0 with SSH from the host OS:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh mirage@virtualxen.local
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dom0 can also be accessed from the host by using the IP address for br0 that we set above: 192.168.56.5.&lt;/p&gt;
&lt;h3&gt;Installing MirageOS in dom0&lt;/h3&gt;
&lt;p&gt;Before we can compile MirageOS unikernels we have to install OCaml.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# install ocaml and friends&lt;/span&gt;
sudo apt-get install ocaml-compiler-libs ocaml-interp ocaml-base-nox ocaml-base ocaml ocaml-nox ocaml-native-compilers camlp4 camlp4-extra m4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also need the OCaml package manager, &lt;a href=&quot;https://opam.ocaml.org&quot;&gt;opam&lt;/a&gt;. A new version of opam was recently release and the version that comes with many Linux distros is outdated. To get the latest version (currently 1.2.x) I use &lt;a href=&quot;http://0install.net&quot;&gt;0install&lt;/a&gt; to install opam directly from the installation script provided on the ocaml.org web page. If you don't want to use 0install, a list of other options is available &lt;a href=&quot;http://opam.ocaml.org/doc/Install.html&quot;&gt;here&lt;/a&gt; (including PPA's). &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# install 0install&lt;/span&gt;
sudo apt-get install zeroinstall-injector
&lt;span class=&quot;c&quot;&gt;# install opam&lt;/span&gt;
0install add opam http://tools.ocaml.org/opam.xml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;0install installs applications in ~/bin. To add this directory to your path logout and back in. &lt;/p&gt;
&lt;p&gt;After installing opam, run &lt;code&gt;opam init&lt;/code&gt; and follow the instructions to complete the installation. Note that the opam commands should not be run with sudo, as it installs everything in ~/.opam in your home directory.&lt;/p&gt;
&lt;p&gt;If you want to run the development version of Mirage, you can add mirage-dev as an opam repository. Keep in mind that this repository contains the latest changes to Mirage, which may not always work. &lt;em&gt;The safest option is to skip this step&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# optional - add mirage-dev to opam &lt;/span&gt;
opam remote add mirage-dev git://github.com/mirage/mirage-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now install Mirage:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# install libs required to build many mirage apps&lt;/span&gt;
sudo apt-get install libssl-dev pkg-config
&lt;span class=&quot;c&quot;&gt;# install mirage&lt;/span&gt;
opam install mirage -v
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After Mirage has been installed you should be able to run the Mirage configuration tool &lt;code&gt;mirage&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mirage --version
2.0.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you use emacs or vim I also recommend installing &lt;a href=&quot;https://github.com/the-lambda-church/merlin/wiki&quot;&gt;Merlin&lt;/a&gt;, which provides tab completion, type lookup and many other useful IDE features for OCaml. &lt;/p&gt;
&lt;h3&gt;Creating a Mirage VM&lt;/h3&gt;
&lt;p&gt;To verify that everything works, we will now download the &lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;Mirage examples&lt;/a&gt; and compile the static website example. This example will start a web server hosting a &amp;quot;Hello world&amp;quot; page that we should be able to access from the host OS. The IP-address will be assigned with DHCP. &lt;/p&gt;
&lt;p&gt;First, clone the Mirage examples:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# clone mirage-skeleton&lt;/span&gt;
git clone http://github.com/mirage/mirage-skeleton.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then go to the &lt;code&gt;mirage-skeleton/static-webpage&lt;/code&gt; folder and run &lt;code&gt;env DHCP=true mirage configure --xen&lt;/code&gt;. This command will download and install all the required dependencies and then create a Makefile. When the command completes, run &lt;code&gt;make&lt;/code&gt; to compile.&lt;/p&gt;
&lt;p&gt;If make completes successfully, there will be a file called &lt;code&gt;www.xl&lt;/code&gt; that contains the Xen DomU configuration file for the unikernel. By default the line that contains the network interface configuration is commented out. Remove the # in front of the line that begins with 'vif = ...' to enable network support. The &lt;code&gt;www.xl&lt;/code&gt; file should look similar to this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mirage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mirage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skeleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_website&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xen&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linux&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;on_crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preserve&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# You must define the network and block interfaces manually.&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# The disk configuration is defined here:&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;# http:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//xenbits.xen.org/docs/4.3-testing/misc/xl-disk-configuration.txt&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;# An example would look like:&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;# disk = [ '/dev/loop0,,xvda' ]&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# The network configuration is defined here:&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;# http:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//xenbits.xen.org/docs/4.3-testing/misc/xl-network-configuration.html&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;# An example would look like:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The memory is set to 256 MB by default, but most of the example unikernels require much less than this. The static webserver example runs fine with 16 MB.&lt;/p&gt;
&lt;p&gt;You should now be able to start the unikernel using the command &lt;code&gt;sudo xl create www.xl -c&lt;/code&gt;: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xl&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Parsing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xl&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Xen&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Minimal&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;start_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0000000000332000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;nr_pages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;shared_inf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5457d000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;pt_base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0000000000335000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;nr_pt_frames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mfn_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00000000002&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;mod_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;mod_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cmd_line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0000000000291&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00000000002&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b1b40&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Mirage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start_kernel&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Init&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0000000000000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;_etext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;000000000015&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cc0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;_erodata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0000000000197000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;_edata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0000000000258220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0000000000291&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00000000002&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b1b40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;start_pfn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;max_pfn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Mapping&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000000&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0000000000000000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0000000000197000&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;skipped&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Initialise&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allocator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bb000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bb000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Demand&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pfns&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10001000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0000002010001000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Initialising&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Initialising&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gnttab_table&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapped&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0000000010001000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xencaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app_main_thread&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OCAMLRUNPARAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CAMLRUNPARAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Unsupported&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lseek&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mini&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kernel&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Unsupported&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lseek&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mini&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kernel&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Unsupported&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lseek&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mini&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kernel&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OCAMLRUNPARAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CAMLRUNPARAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TMPDIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TEMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Netif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resume&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hook&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Netif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Netfront&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;domid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;MAC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ee&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Attempt&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/dev/urandom)!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configuring&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;DHCP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;discovery&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Sending&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DHCP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;broadcast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;552&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;DHCP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ciaddr&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yiaddr&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.178&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;siaddr&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.5&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;giaddr&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;chaddr&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c0ffeec0ffee00000000000000000000&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sname&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;DHCP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.178&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;DHCP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Offer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DNS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Routers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subnet&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Lease&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;identifer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Sending&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DHCP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;broadcast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;552&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;DHCP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ciaddr&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;yiaddr&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.178&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;siaddr&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.5&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;giaddr&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;chaddr&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c0ffeec0ffee00000000000000000000&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sname&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;DHCP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;received&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;IPv4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.178&lt;/span&gt;
                                        &lt;span class=&quot;nx&quot;&gt;Netmask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;
                                                              &lt;span class=&quot;nx&quot;&gt;Gateways&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168.56.5&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;sg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gso_tcpv4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rx_copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rx_flip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;smart_poll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ARP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sending&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gratuitous&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.178&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;DHCP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;received&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bound&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.178&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nm&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gw&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168.56.5&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The console output shows the IP address that was assigned to the unikernel (&amp;quot;DHCP offer received and bound...&amp;quot;). In the example above the IP is 192.168.56.178. From the host operating system you should now be able to open this IP in a web browser to see the &amp;quot;Hello Mirage World!&amp;quot; message.&lt;/p&gt;
&lt;p&gt;If you login to dom0 in a new terminal &lt;code&gt;xl list&lt;/code&gt; will show the running domains, which now includes &amp;quot;www&amp;quot;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;                                        &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Mem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VCPUsStateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                                     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1355&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-----&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;6691.4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;                                         &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;----&lt;/span&gt;       &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To stop the unikernel, run &lt;code&gt;sudo xl destroy www&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a name=&quot;alternatives&quot;&gt;Some alternatives&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The environment described in this post is my current development environment and is based on a Xen server running in a Virtualbox VM with the latest versions of opam and Mirage. I use a host-only second network adapter to allow access to the Mirage applications from the host running Virtualbox. &lt;/p&gt;
&lt;p&gt;Mirage applications can also be compiled in &lt;a href=&quot;http://openmirage.org/wiki/hello-world&quot;&gt;Unix mode&lt;/a&gt;, which produces an executable that can be executed directly in a Unix-like operating system. Currently OS X seems to be particularly well supported. This mode may often be the easiest way to debug and develop a Mirage application, but not all of Mirage's features are available in this mode and some applications may require low level access to the system - for example to block storage or network interfaces - which may not be available in this mode. &lt;/p&gt;
&lt;p&gt;Another approach is to use a &lt;a href=&quot;http://cubieboard.org&quot;&gt;Cubieboard2&lt;/a&gt; with a prebuilt &lt;a href=&quot;http://github.com/mirage/xen-arm-builder&quot;&gt;Mirage/Xen image&lt;/a&gt; to set up a low cost, portable Xen server for development. If you want to have long running Mirage services in your local network or host your own web page this may be a good alternative. Note that compilation times can be slow on this platform compared to an x86 based VM.&lt;/p&gt;
&lt;p&gt;An automated VM setup is being developed based on Debian, Vagrant and Packer &lt;a href=&quot;http://github.com/mirage/mirage-vagrant-vms&quot;&gt;here&lt;/a&gt;. This can be useful if you don't want to manually perform the setup steps outlined in this post. Currently this setup uses an older version of Debian which comes with Xen 4.1, but it should be possible to upgrade to Debian Jessie or later.&lt;/p&gt;</content><id>http://www.skjegstad.com/blog/2015/01/19/mirageos-xen-virtualbox/</id><title type="text">Local MirageOS development with Xen and Virtualbox</title><updated>2015-01-19T00:00:00+00:00</updated><author><email></email><name>Magnus Skjegstad</name></author></entry><entry><link href="http://amirchaudhry.com/towards-governance-framework-for-ocamlorg" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;The projects around the OCaml.org domain name are becoming more established
and it&amp;rsquo;s time to think about how they&amp;rsquo;re organised. 2014 saw a &lt;em&gt;lot&lt;/em&gt; of
activity, which built on the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#OnlineatOCamlorg&quot;&gt;successes from 2013&lt;/a&gt;.
Some of the main things that stand out to me are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;More &lt;a href=&quot;http://ocaml.org/contributors.html&quot;&gt;volunteers&lt;/a&gt; contributing to the public website with
translations, bug fixes and content updates, as well as many new visitors &amp;mdash;
for example, the new page on &lt;a href=&quot;http://ocaml.org/learn/teaching-ocaml.html&quot;&gt;teaching OCaml&lt;/a&gt; received over 5k
visits alone. The increasing contributions are a result of the earlier work on
&lt;a href=&quot;http://amirchaudhry.com/announcing-new-ocamlorg/&quot;&gt;re-engineering the site&lt;/a&gt; and there are many ways to get involved
so please do &lt;a href=&quot;https://github.com/ocaml/ocaml.org/labels/contribute!&quot;&gt;contribute&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://opam.ocaml.org/&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/web/opampkg-2015-01-08.png&quot; style=&quot;float: right; margin-left: 10px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The relentless improvements and growth of OPAM, both in terms of the
repository &amp;mdash; with over 1000 additional packages and several
&lt;a href=&quot;http://lists.ocaml.org/pipermail/opam-devel/2014-October/000781.html&quot;&gt;new repo maintainers&lt;/a&gt; &amp;mdash; and also improved workflows (e.g the new
&lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-2-pin/&quot;&gt;pin functionality&lt;/a&gt;). 
The OPAM site and package list also moved to the ocaml.org domain, becoming
the substrate for the OCaml Platform efforts. This began with the work towards
&lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-2-0-beta4/&quot;&gt;OPAM 1.2&lt;/a&gt; and there is much more to come (including closer
integration in terms of styling). Join the &lt;a href=&quot;http://lists.ocaml.org/listinfo/platform&quot;&gt;Platform list&lt;/a&gt; to
keep up to date.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;Much more activity on the &lt;a href=&quot;http://lists.ocaml.org&quot;&gt;mailing lists&lt;/a&gt; in general and user groups
requesting to have lists made (e.g the &lt;a href=&quot;http://lists.ocaml.org/listinfo/teaching&quot;&gt;teaching list&lt;/a&gt;). If anyone
has a need for a new list, just ask on the
&lt;a href=&quot;http://lists.ocaml.org/listinfo/infrastructure&quot;&gt;infrastructure list&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is other work besides those I&amp;rsquo;ve mentioned and I think by any measure,
all the projects have been quite successful. As the community continues to
develop, it&amp;rsquo;s important to clarify how things currently work to improve the
level of transparency and make it easier for newcomers to get involved.&lt;/p&gt;

&lt;h3&gt;Factors for a governance framework&lt;/h3&gt;

&lt;p&gt;For the last couple of months, I&amp;rsquo;ve been looking over how larger projects
manage themselves and the governance documents that are available. My aim has
been to put such a document together for the OCaml.org domain without
introducing burdensome processes.  There are number of things that stood out
to me during this process, which have guided the approach I&amp;rsquo;m taking.&lt;/p&gt;

&lt;p&gt;My considerations for an OCaml.org governance document:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A governance document is not &lt;em&gt;necessary&lt;/em&gt; for success but it&amp;rsquo;s valuable to
demonstrate a commitment to a &lt;strong&gt;stable decision-making process&lt;/strong&gt;.  There are
many projects that progress perfectly well without any documented processes
and indeed the work around OCaml.org so far is a good example of this (as well
as OCaml itself).  However, for projects to achieve a scale greater than the
initial teams, it&amp;rsquo;s a significant benefit to encode in writing how things work
(NB: please note that I didn&amp;rsquo;t define the &lt;em&gt;type&lt;/em&gt; of decision-making process -
merely that it&amp;rsquo;s a stable one).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It must &lt;strong&gt;clarify its scope&lt;/strong&gt; so that there is no confusion about what the
document covers. In the case of OCaml.org, it needs to be clear that the
governance covers the domain itself, rather than referring to the website. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It should &lt;strong&gt;document the reality&lt;/strong&gt;, rather than represent an aspirational
goal or what people &lt;em&gt;believe&lt;/em&gt; a governance structure should look like.  It&amp;rsquo;s
very tempting to think of an idealised structure without recognising that
behaviours and norms have &lt;em&gt;already&lt;/em&gt; been established. Sometimes this will be
vague and poorly defined but that might simply indicate areas that the
community hasn&amp;rsquo;t encountered yet (e.g it&amp;rsquo;s uncommon for any new project to
seriously think about dispute resolution processes until they have to).  In
this sense, the initial version of a governance document should simply be a
written description of how things currently stand, rather than a means to
adjust that behaviour.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It should be &lt;strong&gt;simple and self-contained&lt;/strong&gt;, so that anyone can understand
the intent quickly without recourse to other documents.  It may be tempting to
consider every edge-case or try to resolve every likely ambiguity but this
just leads to large, legal documents.  This approach may well be necessary
once projects have reached a certain scale but to implement it sooner would be
a case of premature optimisation &amp;mdash; not to mention that very few people would 
read and remember such a document.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It&amp;rsquo;s a &lt;strong&gt;living document&lt;/strong&gt;. If the community decides that it would prefer a
new arrangement, then the document conveniently provides a stable starting
point from which to iterate. Indeed, it &lt;em&gt;should&lt;/em&gt; adapt along with the project
that it governs. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the above points in mind, I&amp;rsquo;ve been putting together a draft governance
framework to cover how the OCaml.org domain name is managed.  It&amp;rsquo;s been a
quiet work-in-progress for some time and I&amp;rsquo;ll be getting in touch with
maintainers of specific projects soon.  Once I&amp;rsquo;ve had a round of reviews, I&amp;rsquo;ll
be sharing it more widely and posting it here!&lt;/p&gt;


</content><id>http://amirchaudhry.com/towards-governance-framework-for-ocamlorg</id><title type="text">Towards a governance framework for OCaml.org</title><updated>2015-01-08T18:15:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="https://mirage.io/blog/2014-in-review" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;small&gt;
 This work funded in part by the EU FP7 User-Centric Networking project, Grant
 No. 611001.
&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;An action-packed year has flown by for MirageOS, and it's time for a little recap of what's been happening and the plans for the new year.
We announced &lt;a href=&quot;http://openmirage.org/blog/announcing-mirage10&quot;&gt;MirageOS 1.0&lt;/a&gt; just over a year ago, and 2014 also saw a major &lt;a href=&quot;http://openmirage.org/blog/announcing-mirage-20-release&quot;&gt;2.0 summer release&lt;/a&gt; and the growth of a developer community that have been building support for IPv6, Transport Layer Security, on-demand spawning, profiling and much more.  There have been 205 individual library &lt;a href=&quot;http://openmirage.org/releases&quot;&gt;releases&lt;/a&gt;, 25 &lt;a href=&quot;http://decks.openmirage.org&quot;&gt;presentations&lt;/a&gt;, and lots of &lt;a href=&quot;http://openmirage.org/links&quot;&gt;online chatter&lt;/a&gt; through the year, so here follows a summary of our major activities recently.&lt;/p&gt;
&lt;h3&gt;Clean-Slate Transport Layer Security&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://media.ccc.de/browse/congress/2014/31c3_-_6443_-_en_-_saal_2_-_201412271245_-_trustworthy_secure_modular_operating_system_engineering_-_hannes_-_david_kaloper.html#video&quot;&gt;&lt;img src=&quot;http://openmirage.org/graphics/tls-31c3.png&quot; width=&quot;300px&quot; style=&quot;float:right; padding: 5px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;David Kaloper and Hannes Mehnert started 2014 with getting interested in writing a &lt;a href=&quot;https://ocaml.org/meetings/ocaml/2014/ocaml2014_4.pdf&quot;&gt;safer and cleaner TLS stack&lt;/a&gt; in OCaml, and ended the year with a complete demonstration and talk last week in &lt;a href=&quot;http://media.ccc.de/browse/congress/2014/31c3_-_6443_-_en_-_saal_2_-_201412271245_-_trustworthy_secure_modular_operating_system_engineering_-_hannes_-_david_kaloper.html#video&quot;&gt;31C3&lt;/a&gt;, the premier hacker conference!  Their blog posts over the summer remain an excellent introduction to the new stack:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;OCaml-TLS: Introducing transport layer security (TLS) in pure OCaml&lt;/a&gt;&amp;quot;&lt;/em&gt; presents the motivation and architecture behind our clean-slate implementation of the protocol.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;OCaml-TLS: building the nocrypto library core&lt;/a&gt;&amp;quot;&lt;/em&gt; talks about the cryptographic primitives that form the heart of TLS confidentiality guarantees, and how they expose safe interfaces to the rest of the stack.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;OCaml-TLS: adventures in X.509 certificate parsing and validation&lt;/a&gt;&amp;quot;&lt;/em&gt; explains how authentication and chain-of-trust verification is implemented in our stack.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-asn1&quot;&gt;OCaml-TLS: ASN.1 and notation embedding&lt;/a&gt;&amp;quot;&lt;/em&gt; introduces the libraries needed for handling ASN.1 grammars, the wire representation of messages in TLS.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/ocaml-tls-api-internals-attacks-mitigation&quot;&gt;OCaml-TLS: the protocol implementation and mitigations to known attacks&lt;/a&gt;&amp;quot;&lt;/em&gt; concludes with the implementation of the core TLS protocol logic itself.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;By summer, the stack was complete enough to connect to the majority of TLS 1.0+ sites on the Internet, and work progressed to integration with the remainder of the MirageOS libraries.  By November, the &lt;a href=&quot;https://github.com/mirage/ocaml-conduit&quot;&gt;Conduit&lt;/a&gt; network library had Unix support for both the &lt;a href=&quot;https://github.com/savonet/ocaml-ssl&quot;&gt;OpenSSL/Lwt&lt;/a&gt; bindings and the pure OCaml stack, with the ability to dynamically select them.  You can now deploy and test the pure OCaml TLS stack on a webserver simply by:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;opam install lwt tls cohttp
export CONDUIT_TLS=native
cohttp-server-lwt -c &amp;lt;certfile&amp;gt; -p &amp;lt;port&amp;gt; &amp;lt;directory&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will spin up an HTTPS server that serves the contents of &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt; to you over TLS.
At the same time, we were also working on integrating the TLS stack into the Xen unikernel backend, so we could run completely standalone.  This required some surgery:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;a href=&quot;https://github.com/mirleft/ocaml-nocrypto&quot;&gt;nocrypto&lt;/a&gt; crypto core is written in C, so we had to improve support for linking in external C libraries.  Since the Xen unikernel is a single address-space custom kernel, we also need to be careful to compile it with the correct compilation flags or else risk &lt;a href=&quot;https://github.com/mirage/mirage-tcpip/issues/80&quot;&gt;subtle bugs&lt;/a&gt;. Thomas Leonard completely rearranged the MirageOS compilation pipeline to support &lt;a href=&quot;https://github.com/mirage/mirage/pull/332&quot;&gt;separation compilation of C stubs&lt;/a&gt;, and we had the opportunity to remove lots of duplicated code within &lt;a href=&quot;https://github.com/mirage/mirage-platform&quot;&gt;mirage-platform&lt;/a&gt; as a result of this work.&lt;/li&gt;&lt;li&gt;Meanwhile, the problem of gathering entropy in a virtual machine reared its head.  We created a &lt;a href=&quot;https://github.com/mirage/mirage-entropy&quot;&gt;mirage-entropy&lt;/a&gt; device driver, and an &lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2014-11/msg00146.html&quot;&gt;active discussion&lt;/a&gt; ensued about how best to gather reliable randomness from Xen.  &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; built the best solution -- the &lt;a href=&quot;https://github.com/mirage/xentropyd&quot;&gt;xenentropyd&lt;/a&gt; that proxies entropy from dom0 to a unikernel VM.&lt;/li&gt;&lt;li&gt;David Kaloper also ported the &lt;code&gt;nocrypto&lt;/code&gt; library to use the &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes&quot;&gt;OCaml-Ctypes&lt;/a&gt; library, which increases the safety of the C bindings significantly.  This is described in more detail in the &amp;quot;&lt;a href=&quot;http://openmirage.org/blog/modular-foreign-function-bindings&quot;&gt;Modular foreign function bindings&lt;/a&gt;&amp;quot; blog post from the summer.  This forms the basis for allowing Xen unikernels to communicate with C code, and integration with the MirageOS toolchain will continue to improve next year.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;You can see &lt;a href=&quot;http://media.ccc.de/browse/congress/2014/31c3_-_6443_-_en_-_saal_2_-_201412271245_-_trustworthy_secure_modular_operating_system_engineering_-_hannes_-_david_kaloper.html#video&quot;&gt;Hannes and David present OCaml-TLS&lt;/a&gt; at CCC online.  It's been a real pleasure watching their work develop in the last 12 months with such precision and attention to detail!&lt;/p&gt;
&lt;h3&gt;HTTP and JavaScript&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://rgrinberg.com/&quot;&gt;Rudi Grinberg&lt;/a&gt; got sufficiently irked with the poor state of documentation for the &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;CoHTTP&lt;/a&gt; library that he began gently contributing fixes towards the end of 2013, and rapidly became one of the maintainers.  He also began improving the ecosystem around the web stack by building a HTTP routing layer, described in his blog posts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://rgrinberg.com/blog/2014/12/13/primitive-type-safe-routing/&quot;&gt;Type Safe Routing - Baby Steps&lt;/a&gt;&lt;/em&gt;: type-safe routing of URLs to avoid dangling links&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://rgrinberg.com/blog/2014/04/04/introducing-opium/&quot;&gt;Introducing Opium&lt;/a&gt;&lt;/em&gt;: middleware for REST services&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://rgrinberg.com/blog/2014/04/11/middleware-intro/&quot;&gt;Middleware in Opium&lt;/a&gt;&lt;/em&gt;: a walkthrough the Opium HTTP middleware model&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://rgrinberg.com/blog/2014/05/23/humane-re-intro/&quot;&gt;Introducing Humane-Re&lt;/a&gt;&lt;/em&gt;: more friendly regular expression interfaces&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Meanwhile, &lt;a href=&quot;http://www.ujamjar.com/&quot;&gt;Andy Ray&lt;/a&gt; started developing &lt;a href=&quot;http://www.ujamjar.com/hardcaml/&quot;&gt;HardCaml&lt;/a&gt; (a register transfer level hardware design system) in OCaml, and built the &lt;a href=&quot;https://andrewray.github.io/iocamljs/&quot;&gt;iocamljs&lt;/a&gt; interactive browser notebook.  This uses &lt;a href=&quot;http://ocsigen.org/js_of_ocaml&quot;&gt;js_of_ocaml&lt;/a&gt; to port the &lt;em&gt;entire&lt;/em&gt; OCaml compilation toolstack to JavaScript, including &lt;code&gt;ocamlfind&lt;/code&gt;, Lwt threading and dynamic loading support.  The results are browsable &lt;a href=&quot;https://andrewray.github.io/iocamljs/&quot;&gt;online&lt;/a&gt;, and it is now easy to generate a JavaScript-driven interactive page for many MirageOS libraries.&lt;/p&gt;
&lt;p&gt;An interesting side effect of Andy's patches were the addition of a &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp/pull/172&quot;&gt;JavaScript port&lt;/a&gt; to the CoHTTP library.  For those not familiar with the innards, CoHTTP uses the &lt;a href=&quot;https://realworldocaml.org/v1/en/html/functors.html&quot;&gt;OCaml module system&lt;/a&gt; to build a very portable HTTP implementation that can make mapped to different I/O models (Lwt or Async cooperative threading or POSIX blocking I/O), and to different operating systems (e.g. Unix or MirageOS).  The JavaScript support mapped the high-level modules in CoHTTP to the XMLHTTPRequest native to JavaScript, allowing the same OCaml HTTP client code to run efficiently on Unix, Windows and now an IOCamlJS browser instance.&lt;/p&gt;
&lt;p&gt;MirageOS uses a number of libraries developed by the &lt;a href=&quot;http://ocsigen.org&quot;&gt;Ocsigen&lt;/a&gt; team at &lt;a href=&quot;http://irill.org&quot;&gt;IRILL&lt;/a&gt; in Paris, and so I was thrilled to &lt;a href=&quot;https://www.irill.org/videos/oups-december-2014/MirageOS&quot;&gt;deliver a talk&lt;/a&gt; there in December.  Romain Calascibetta started integrating Ocsigen and MirageOS over the summer, and the inevitable plotting over beer in Paris lead &lt;a href=&quot;https://github.com/Drup&quot;&gt;Gabriel Radanne&lt;/a&gt; to kick off an effort to integrate the complete Ocsigen web stack into MirageOS. Head to &lt;a href=&quot;https://github.com/ocsigen/ocsigenserver/issues/54&quot;&gt;ocsigen/ocsigenserver#54&lt;/a&gt; if you're interested in seeing this happen in 2015!
I also expect the JavaScript and MirageOS integration to continue to improve in 2015, thanks to large industrial users such as &lt;a href=&quot;https://github.com/facebook&quot;&gt;Facebook&lt;/a&gt; adopting &lt;code&gt;js_of_ocaml&lt;/code&gt; in their open-source tools such as &lt;a href=&quot;https://github.com/facebook/hack&quot;&gt;Hack&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/flow&quot;&gt;Flow&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;IPv6&lt;/h3&gt;

&lt;p&gt;We've wanted IPv6 support in MirageOS since its inception, and several people contributed to making this possible.  At the start of the year, &lt;a href=&quot;https://github.com/hhugo&quot;&gt;Hugo Heuzard&lt;/a&gt; and &lt;a href=&quot;https://github.com/dsheets&quot;&gt;David Sheets&lt;/a&gt; got &lt;a href=&quot;https://github.com/mirage/ocaml-ipaddr/pull/9&quot;&gt;IPv6 parsing support&lt;/a&gt; into the &lt;code&gt;ipaddr&lt;/code&gt; library (with me watching bemusedly at how insanely complex parsing is versus IPv4).&lt;/p&gt;
&lt;p&gt;Meanwhile, &lt;a href=&quot;https://www.dpmms.cam.ac.uk/~no263/&quot;&gt;Nicolas Ojeda Bar&lt;/a&gt; had been building OCaml networking libraries independently for some time, such as a &lt;a href=&quot;https://github.com/nojb/ocaml-imap&quot;&gt;IMAP client&lt;/a&gt;, &lt;a href=&quot;https://github.com/nojb/ocaml-maildir&quot;&gt;Maildir&lt;/a&gt; handler, and a &lt;a href=&quot;https://github.com/nojb/ocaml-bt&quot;&gt;Bittorrent&lt;/a&gt; client.  He became interested in the networking layer of MirageOS, and performed a &lt;a href=&quot;https://github.com/mirage/mirage-tcpip/pull/70&quot;&gt;comprehensive cleanup&lt;/a&gt;  that resulted in a more modular stack that now supports both IPv4 and IPv6!&lt;/p&gt;
&lt;p&gt;The addition of IPv6 support also forced us to consider how to simplify the configuration frontend to MirageOS unikernels that was &lt;a href=&quot;http://openmirage.org/blog/mirage-1.1-released&quot;&gt;originally written&lt;/a&gt; by Thomas Gazagnaire and &lt;a href=&quot;http://openmirage.org/blog/intro-tcpip&quot;&gt;described here&lt;/a&gt; by Mindy Preston.
Nicolas has &lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2014-12/msg00001.html&quot;&gt;proposed&lt;/a&gt; a declarative extension to the configuration that allows applications to extend the &lt;code&gt;mirage&lt;/code&gt; command-line more easily, thus unifying the &amp;quot;built-in&amp;quot; MirageOS compilation modes (such as choosing between Xen or Unix) and protocol-specific choices (such as configuring IPv4 and IPv6).&lt;/p&gt;
&lt;p&gt;The new approach opens up the possibility of writing more user-friendly configuration frontends that can render them as a text- or web-based selectors, which is really important as more real-world uses of MirageOS are being created.  It should be possible in 2015 to solve common problems such as web or DNS serving without having to write a single line of OCaml code.&lt;/p&gt;
&lt;h3&gt;Profiling&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2014/10/27/visualising-an-asynchronous-monad&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/block-reads-3-32.png&quot; width=&quot;300px&quot; style=&quot;float:right; padding: 5px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of the benefits touted by our CACM article on &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2566628&quot;&gt;unikernels&lt;/a&gt; at the start of the year was the improved tooling from the static linking of an entire application stack with an operating system layer.
&lt;a href=&quot;http://roscidus.com&quot;&gt;Thomas Leonard&lt;/a&gt; joined the project this year after publishing a widely read &lt;a href=&quot;http://roscidus.com/blog/blog/2014/06/06/python-to-ocaml-retrospective/&quot;&gt;blog series&lt;/a&gt; on his experiences from switching from Python to OCaml.
Aside from leading (and upstreaming to Xen) the port of &lt;a href=&quot;http://openmirage.org/blog/introducing-xen-minios-arm&quot;&gt;MirageOS to ARM&lt;/a&gt;, he also explored how to add profiling throughout the unikernel stack.&lt;/p&gt;
&lt;p&gt;The support is now comprehensive and integrated into the MirageOS trees: the &lt;a href=&quot;http://ocsigen.org/lwt&quot;&gt;Lwt&lt;/a&gt; cooperative threading engine has hooks for thread switching, most of the core libraries register named events, traces are dumped into shared memory buffers in the &lt;a href=&quot;http://wiki.eclipse.org/Linux_Tools_Project/TMF/CTF_guide&quot;&gt;CTF&lt;/a&gt; file format used by the Linux trace toolkit, and there are JavaScript and GTK+ &lt;a href=&quot;https://github.com/talex5/mirage-trace-viewer&quot;&gt;GUI frontends&lt;/a&gt; that can parse them.&lt;/p&gt;
&lt;p&gt;You can find the latest instructions on &lt;a href=&quot;http://openmirage.org/wiki/profiling&quot;&gt;Tracing and Profiling&lt;/a&gt; on this website, and here are Thomas' original blog posts on the subject:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2014/08/15/optimising-the-unikernel/&quot;&gt;Optimising the Unikernel&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2014/10/27/visualising-an-asynchronous-monad/&quot;&gt;Visualising an Asynchronous Monad&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Irmin&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt; spent most of the year furiously hacking away at the storage layer in Irmin, which is a clean-slate storage stack that uses a Git-like branching model as the basis for distributed unikernel storage.  &lt;a href=&quot;https://github.com/mirage/irmin/releases/tag/0.9.0&quot;&gt;Irmin 0.9.0&lt;/a&gt; was released in December with efficiency improvements and a sufficiently portable set of dependencies to make JavaScript compilation practical.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-irmin&quot;&gt;Introducing Irmin: Git-like distributed, branchable storage&lt;/a&gt;&amp;quot;&lt;/em&gt;  describes the concepts and high-level architecture of the system.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-irmin-in-xenstore&quot;&gt;Using Irmin to add fault-tolerance to the Xenstore database&lt;/a&gt;&amp;quot;&lt;/em&gt; shows how Irmin is used in a real-world application: the security-critical Xen toolstack that manages hosts full of virtual machines (&lt;a href=&quot;https://www.youtube.com/watch?v=DSzvFwIVm5s&quot;&gt;video&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;There have been several other early adopters of Irmin for their own projects (independent of MirageOS).  One of the most exciting is by &lt;a href=&quot;https://github.com/gregatcam&quot;&gt;Gregory Tsipenyuk&lt;/a&gt;, who has been developing a version-controlled &lt;a href=&quot;https://github.com/gregtatcam/imaplet-lwt&quot;&gt;Irmin-based IMAP server&lt;/a&gt; that offers a very different model for e-mail management.  Expect to see more of this in the new year!&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;We also had the pleasure of Benjamin Farinier and Matthieu Journault join us as summer interns.  Both of them did a great job improving the internals of Irmin, and Benjamin's work on &lt;em&gt;&lt;a href=&quot;http://gazagnaire.org/pub/FGM15.pdf&quot;&gt;Mergeable Persistent Datastructures&lt;/a&gt;&lt;/em&gt; will be presented at JFLA 2015.&lt;/p&gt;
&lt;h3&gt;Jitsu&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://decks.openmirage.org/irill14-seminar#/&quot;&gt;&lt;img src=&quot;http://openmirage.org/graphics/decks-on-arm.png&quot; width=&quot;250px&quot; style=&quot;float:right; padding: 5px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.skjegstad.com/&quot;&gt;Magnus Skjegstad&lt;/a&gt; returned to Cambridge and got interested in the rapid dynamic provisioning of unikernels.  He built &lt;a href=&quot;https://github.com/MagnusS/jitsu&quot;&gt;Jitsu&lt;/a&gt;, a DNS server that spawns unikernels in response to DNS requests and boots them in real-time with no perceptible lag to the end user.  The longer term goal behind this is to enable a community cloud of ARM-based &lt;a href=&quot;http://cubieboard.org/&quot;&gt;Cubieboard2&lt;/a&gt; boards that serve user content without requiring centralised data centers, but with the ease-of-use of existing systems.&lt;/p&gt;
&lt;p&gt;Building Jitsu and hitting our goal of extremely low latency management of unikernels required a huge amount of effort from across the MirageOS team.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; and &lt;a href=&quot;http://jon.recoil.org&quot;&gt;Jon Ludlam&lt;/a&gt; (two of the Xen maintainers at Citrix) improved the Xen &lt;code&gt;xl&lt;/code&gt; toolstack to deserialise the VM startup chain to shave 100s of milliseconds off every operation.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/&quot;&gt;Thomas Leonard&lt;/a&gt; drove the removal of our forked &lt;a href=&quot;http://wiki.xen.org/wiki/Mini-OS&quot;&gt;Xen MiniOS&lt;/a&gt; with a library version that is being fed upstream (including ARM support).  This made the delta between Xen and MirageOS much smaller and therefore made reducing end-to-end latency tractable.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dsheets&quot;&gt;David Sheets&lt;/a&gt; built a test harness to boot unikernel services and measure their latency under very different conditions, including contrasting boot timer versus &lt;a href=&quot;http://docker.com&quot;&gt;Docker&lt;/a&gt; containers.  In many instances, we ended up booting faster than containers due to not touching disk at all with a standalone unikernel.  &lt;a href=&quot;http://www.cl.cam.ac.uk/~iml1/&quot;&gt;Ian Leslie&lt;/a&gt; built us some custom power measurement hardware that came in handy to figure out how to drive down the energy cost of unikernels running on ARM boards.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt;, Balraj Singh, Magnus Skjegstad built the &lt;code&gt;synjitsu&lt;/code&gt; proxy server that intercepts and proxies TCP connections to mask the couple of 100 milliseconds during unikernel boot time, ensuring that no TCP connections ever require retransmission from the client.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; and I built out the &lt;a href=&quot;https://github.com/mirage/&quot;&gt;vchan&lt;/a&gt; shared memory transport that supports low-latency communiction between unikernels and/or Unix processes.  This is rapidly heading into a Plan9-like model, with the additional twist of using Git instead of a flat filesystem hierarchy as its coordination basis.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://amirchaudhry.com/&quot;&gt;Amir Chaudhry&lt;/a&gt; and &lt;a href=&quot;http://mort.io&quot;&gt;Richard Mortier&lt;/a&gt; documented the Git-based (and eventually Irmin-based) workflow behind managing the unikernels themselves, so that they can easily be deployed to distance ARM devices simply by running &lt;code&gt;git pull&lt;/code&gt;.  You can read more about this in his &lt;a href=&quot;http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines/&quot;&gt;From Jekyll to Unikernels&lt;/a&gt; post.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;All of this work was hastily crammed into a &lt;a href=&quot;https://www.usenix.org/conference/nsdi15/call-for-papers&quot;&gt;USENIX NSDI 2015&lt;/a&gt; paper that got submitted at 4am on a bright autumn morning.  We'll put the preprint available when it's ready in January, along with a blog post describing how you can deploy this infrastructure for yourself.&lt;/p&gt;
&lt;h3&gt;Community&lt;/h3&gt;

&lt;p&gt;All of the above work was only possible due to the vastly improved tooling and infrastructure around the project.  Our community manager Amir Chaudhry led the &lt;a href=&quot;http://openmirage.org/docs/&quot;&gt;minuted&lt;/a&gt; calls every two weeks that tied the efforts together, and we established some &lt;a href=&quot;https://github.com/mirage/mirage-www/wiki/Pioneer-Projects&quot;&gt;pioneer projects&lt;/a&gt; for newcomers to tackle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://openmirage.org/graphics/opam-packages-20141231.png&quot; width=&quot;250px&quot; style=&quot;float:right; padding: 5px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://opam.ocaml.org&quot;&gt;OPAM&lt;/a&gt; package manager continued to be the frontend for all MirageOS tools, with releases of libraries happening &lt;a href=&quot;http://openmirage.org/releases&quot;&gt;regularly&lt;/a&gt;.  Because of the modular nature of MirageOS code, most of the libraries can also be used as normal Unix-based libraries, meaning that we aren't just limited to MirageOS users but can benefit from the entire OCaml community.  The graph to the right shows the growth of the total package database since the project started to give you a sense of how much activity there is.&lt;/p&gt;
&lt;p&gt;The major &lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-2-0-release/&quot;&gt;OPAM 1.2&lt;/a&gt; also added a number of new features that made MirageOS code easier to develop, including a &lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-2-pin/&quot;&gt;Git-based library pinning workflow&lt;/a&gt; that works superbly with GitHub, and &lt;a href=&quot;http://opam.ocaml.org/blog/opam-1-2-travisci/&quot;&gt;easier Travis integration&lt;/a&gt; for continuous integration.  &lt;a href=&quot;https://github.com/niksu&quot;&gt;Nik Sultana&lt;/a&gt; also improved the &lt;a href=&quot;https://github.com/mirage/is-mirage-broken/tree/master/logs&quot;&gt;is-mirage-broken&lt;/a&gt; to give us a cron-driven prod if a library update caused an end-to-end failure in building the MirageOS website or other self-hosted infrastructure.&lt;/p&gt;
&lt;p&gt;Our favourite &lt;a href=&quot;http://www.somerandomidiot.com&quot;&gt;random idiot&lt;/a&gt;, Mindy Preston, wrote up a superb blog series about her experiences in the spring of 2014 with moving her homepage to be hosted on MirageOS.  This was followed up by &lt;a href=&quot;http://roscidus.com/blog/blog/2014/07/28/my-first-unikernel/&quot;&gt;Thomas Leonard&lt;/a&gt;, &lt;a href=&quot;http://philtomson.github.io/blog/2014/09/10/some-notes-on-building-and-running-mirage-unikernels-on-cubieboard2/&quot;&gt;Phil Tomson&lt;/a&gt;, &lt;a href=&quot;https://github.com/iw/mirage-jekyll&quot;&gt;Ian Wilkinson&lt;/a&gt;, &lt;a href=&quot;http://ocaml.is-awesome.net/2014/11/building-a-blog-with-mirage-os&quot;&gt;Toby Moore&lt;/a&gt;, and many others that we've tried to record in our &lt;a href=&quot;http://openmirage.org/links/&quot;&gt;link log&lt;/a&gt;.  We really appreciate the hundreds of bug reports filed by users and folk trying out MirageOS; by taking the trouble to do this, you've  helped us refine and polish the frontend.  One challenge for 2015 that we could use help on is to pull together many of these distributed blogged instructions and merge them back into the main documentation (get in touch if interested!).&lt;/p&gt;
&lt;p&gt;OCaml has come a long way in the last year in terms of tooling, and another task my research group &lt;a href=&quot;http://ocaml.io&quot;&gt;OCaml Labs&lt;/a&gt; works on at Cambridge is the development of the &lt;a href=&quot;https://ocaml.org/meetings/ocaml/2014/ocaml2014_7.pdf&quot;&gt;OCaml Platform&lt;/a&gt;.  I'll be blogging separately about our OCaml-specific activities in a few days, but all of this work has a direct impact on MirageOS itself since it lets us establish a local feedback loop between MirageOS and OCaml developers to rapidly iterate on large-scale development.  The regular &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/&quot;&gt;OCaml compiler hacking sessions&lt;/a&gt; organised by Jeremy Yallop and Leo White have been a great success this year, with a wide variety of people from academic (Cambridge, London universities and Microsoft Research) and industrial (Jane Street, Citrix and Facebook among others) and locally interested folk.
One very important project that has had a lot of work put into it in 2014 (but isn't quite ready for a public release yet) is &lt;a href=&quot;https://github.com/samoht/assemblage&quot;&gt;Assemblage&lt;/a&gt;, which will remove much of the boilerplate currently needed to build and release an OCaml library to OPAM.&lt;/p&gt;
&lt;p&gt;We also had a great time working with open-source summer programs. Thanks to the Xen Foundation and GNOME for their support here, and we hope to do this again next summer!  The roundup posts were:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://www.somerandomidiot.com/blog/2014/08/22/opw-fin/&quot;&gt;OPW FIN&lt;/a&gt;&lt;/em&gt; by Mindy Preston: on of her &lt;a href=&quot;http://gnome.org/opw/&quot;&gt;FOSS Outreach Program&lt;/a&gt; work.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://1000hippos.wordpress.com/&quot;&gt;Amazon Adventures&lt;/a&gt;&lt;/em&gt; by Jyotsna Prakash: on her &lt;a href=&quot;https://developers.google.com/open-source/soc/?csw=1&quot;&gt;Google Summer of Code&lt;/a&gt; 2014 efforts on EC2 bindings.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Upcoming features&lt;/h3&gt;

&lt;p&gt;So what's coming up for our unikernels in 2015?  Our focus heading into the new year is very much on improving the ease-of-use and deployability of MirageOS and fleshing out the feature set for the early adopters such as the &lt;a href=&quot;https://github.com/xapi-project&quot;&gt;XAPI&lt;/a&gt; project, &lt;a href=&quot;http://events.linuxfoundation.org/sites/events/files/slides/XenStore_MAC_XenSummit_2014.pdf&quot;&gt;Galois&lt;/a&gt;, and the &lt;a href=&quot;http://nymote.org&quot;&gt;Nymote&lt;/a&gt; personal data project.  Here are some of the highlights:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dust Clouds&lt;/strong&gt;: The work on Jitsu is leading to the construction of what we term &amp;quot;&lt;a href=&quot;http://anil.recoil.org/papers/2010-iswp-dustclouds.pdf&quot;&gt;dust clouds&lt;/a&gt;&amp;quot;: on-demand scaling of unikernel services within milliseconds of requests coming in, terminated right beside the user on local ARM devices.  The model supports existing clouds as well, and so we are improving support for cloud APIs such via Jyotsna Prakash's &lt;a href=&quot;https://github.com/moonlightdrive/ocaml-ec2&quot;&gt;EC2&lt;/a&gt; bindings, &lt;a href=&quot;https://github.com/djs55/xe-unikernel-upload&quot;&gt;XenAPI&lt;/a&gt;, and (volunteers needed) OpenStack support.  If you're interested in tracking this work, head over to the &lt;a href=&quot;http://nymote.org&quot;&gt;Nymote&lt;/a&gt; site for updates.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Portability&lt;/strong&gt;: Beyond Xen, there are several efforts afoot to port MirageOS to bare metal targets.  One promising effort is to use &lt;a href=&quot;http://rumpkernel.org&quot;&gt;Rump Kernels&lt;/a&gt; as the boot infrastructure and MirageOS as the application stack.  We hope to have a Raspberry Pi and other ARM targets fairly soon.  Meanwhile at the end of the spectrum is mobile computing, which was part of the original &lt;a href=&quot;http://anil.recoil.org/papers/2010-bcs-visions.pdf&quot;&gt;multiscale&lt;/a&gt; vision for starting the project.  The JavaScript, iOS and Android ports are all progressing (mainly thanks to community contributions around OCaml support for this space, such as Jeff Psellos' hard work on &lt;a href=&quot;http://psellos.com/ocaml/&quot;&gt;OCaml-IOS&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Protocol Development&lt;/strong&gt;: There are a huge number of protocols being developed independently, and more are always welcome.  &lt;a href=&quot;https://github.com/infidel&quot;&gt;Luke Dunstan&lt;/a&gt; is hacking on &lt;a href=&quot;https://github.com/mirage/ocaml-dns/pull/35#discussion_r22388447&quot;&gt;multicast DNS&lt;/a&gt; support, we have an IMAP &lt;a href=&quot;https://github.com/nojb/ocaml-imap&quot;&gt;client&lt;/a&gt; and &lt;a href=&quot;https://github.com/gregtatcam/imaplet-lwt/&quot;&gt;server&lt;/a&gt;, &lt;a href=&quot;https://github.com/dominicjprice&quot;&gt;Dominic Price&lt;/a&gt; has built a series of social network APIs for &lt;a href=&quot;https://github.com/dominicjprice/sociaml-facebook-api&quot;&gt;Facebook&lt;/a&gt; or &lt;a href=&quot;https://github.com/dominicjprice/sociaml-tumblr-api&quot;&gt;Tumblr&lt;/a&gt;, and &lt;a href=&quot;http://nottingham.ac.uk/horizon/people/masoud.koleini&quot;&gt;Masoud Koleini&lt;/a&gt; has been extending Haris Rotsos' work to achieve a line-rate and type-safe &lt;a href=&quot;https://github.com/mirage/ocaml-openflow&quot;&gt;OpenFlow&lt;/a&gt; switch and controller based on the &lt;a href=&quot;https://github.com/frenetic-lang&quot;&gt;Frenetic&lt;/a&gt; project.  Hannes is also developing &lt;a href=&quot;https://github.com/hannesm/jackline&quot;&gt;Jackline&lt;/a&gt;, which uses his MirageOS to assemble a trustworthy communication client.  &lt;a href=&quot;http://erratique.ch/software&quot;&gt;Daniel Buenzli&lt;/a&gt; also continues to release a growing set of high-quality, modular libraries that we depend on throughout MirageOS.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Storage&lt;/strong&gt;: All storage services from the unikernels will be Git-based (e.g. logging, command-and-control, key-value retrieval).  Expect to see Xen toolstack extensions that make this support seamless, so a single Linux VM will be able to control a large army of unikernels via persistent data structures.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Want to get involved?&lt;/h3&gt;

&lt;p&gt;This is a really fun time to get involved with unikernels and the MirageOS project. The year of 2014 has seen &lt;a href=&quot;http://openmirage.org/links/&quot;&gt;lots of discussion&lt;/a&gt; about the potential of unikernels and we'll see some of the first big deployments involving them in 2015.  For the ones among you who wish to learn more, then check out the &lt;a href=&quot;https://github.com/mirage/mirage-www/wiki/Pioneer-Projects&quot;&gt;pioneer projects&lt;/a&gt;, watch out for &lt;a href=&quot;http://openmirage.org/wiki&quot;&gt;Amir's meeting notes&lt;/a&gt; and join the voice calls if you want a more interactive discussion, and engage on the &lt;a href=&quot;http://openmirage.org/community/&quot;&gt;mailing lists&lt;/a&gt; with any questions you might have.&lt;/p&gt;
&lt;p&gt;For me personally, it's been a real privilege to spend the year working with and learning from the friendly, intelligent and diverse community that is springing up around the project.  The progression from experiment to reality has been a lot of work, but the unikernel dream is finally coming together rath[er nicely thanks to everyone's hard work and enthusiasm.  I'd also like to thank all of our &lt;a href=&quot;http://openmirage.org/community/&quot;&gt;funding bodies&lt;/a&gt; and the &lt;a href=&quot;http://linuxfoundation.org&quot;&gt;Linux Foundation&lt;/a&gt; and the &lt;a href=&quot;http://xenproject.org&quot;&gt;Xen Project&lt;/a&gt; (especially Lars Kurth and Russell Pavlicek) for their support throughout the year that made all this work possible.  Happy new year, everyone!&lt;/p&gt;

   </content><id>https://mirage.io/blog/2014-in-review</id><title type="text">MirageOS 2014 review: IPv6, TLS, Irmin, Jitsu and community growth</title><updated>2014-12-31T16:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2014/10/27/visualising-an-asynchronous-monad/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;Many asynchronous programs make use of &lt;a href=&quot;http://en.wikipedia.org/wiki/Promise_(programming)&quot;&gt;promises&lt;/a&gt; (also known as using &lt;em&gt;light-weight threads&lt;/em&gt; or an &lt;em&gt;asynchronous monad&lt;/em&gt;) to manage concurrency.
I&amp;rsquo;ve been working on tools to collect trace data from such programs and visualise the results, to help with profiling and debugging.&lt;/p&gt;

&lt;p&gt;The diagram below shows a trace from a &lt;a href=&quot;http://openmirage.org/&quot;&gt;Mirage unikernel&lt;/a&gt; reading data from disk in a loop.
You should be able to pan around by dragging in the diagram, and zoom by using your mouse&amp;rsquo;s scroll wheel.
If you&amp;rsquo;re on a mobile device then pinch-to-zoom should work if you follow the full-screen link, although it will probably be slow.
If nothing else works, the ugly zoom buttons at the bottom zoom around the last point clicked.&lt;/p&gt;



&lt;canvas style=&quot;width: 100%; height: 500px&quot;&gt;
  &lt;p&gt;
  &lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/trace-viewer-console.png&quot; width=&quot;622&quot; height=&quot;484&quot; alt=&quot;Mirage Trace Viewer screenshot&quot;/&gt;&lt;br/&gt;
  &lt;strong&gt;WARNING: No HTML canvas support (this is just a static image)! Try a newer browser&amp;hellip;&lt;/strong&gt;
  &lt;/p&gt;
&lt;/canvas&gt;
&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/javascripts/trace-viewer.html?trace=intro&quot;&gt;View full screen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The web viewer requires JavaScript and HTML canvas support.
If it doesn&amp;rsquo;t work, you can also build the &lt;a href=&quot;https://github.com/talex5/mirage-trace-viewer&quot;&gt;trace viewer&lt;/a&gt; as a (much faster) native GTK application.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll explain how to read these diagrams, and how to trace your own programs.&lt;/p&gt;

&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://news.ycombinator.com/item?id=8514923&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;http://www.reddit.com/r/programming/comments/2kgp50/visualising_an_asynchronous_monad/&quot;&gt;Reddit&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#introduction&quot;&gt;Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#bind&quot;&gt;Bind&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#join&quot;&gt;Join&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#choose&quot;&gt;Choose&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#pick&quot;&gt;Pick&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#exceptions&quot;&gt;Exceptions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#making-your-own-traces&quot;&gt;Making your own traces&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#examples&quot;&gt;Examples&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#profiling-the-console&quot;&gt;Profiling the console&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#udp-transmission&quot;&gt;UDP transmission&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#tcp-transmission&quot;&gt;TCP transmission&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#disk-access&quot;&gt;Disk access&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#implementation-notes&quot;&gt;Implementation notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Many asynchronous programs make use of &lt;em&gt;promises&lt;/em&gt; (also known as using &lt;em&gt;light-weight threads&lt;/em&gt; or an &lt;em&gt;asynchronous monad&lt;/em&gt;).
A promise/thread is a place-holder for a value that will arrive in the future.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a really simple example (an OCaml program using &lt;a href=&quot;http://ocsigen.org/lwt/&quot;&gt;Lwt&lt;/a&gt;).
It creates a thread that resolves to unit (void) after one second:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lwt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lwt_unix&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example_1&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* Run the main loop until example_1 resolves. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Lwt_unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example_1&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;canvas style=&quot;width: 100%; height: 106px&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;In the diagram, time runs from left to right.
Threads (promises) are shown as horizontal lines.
The diagram shows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initially, only the main thread (&amp;ldquo;0&amp;rdquo;) is present.&lt;/li&gt;
  &lt;li&gt;The main thread then creates a new thread, labelled &amp;ldquo;sleep&amp;rdquo;.&lt;/li&gt;
  &lt;li&gt;The sleep thread is a &amp;ldquo;task&amp;rdquo; thread (this is just a helpful label added when the thread is created).&lt;/li&gt;
  &lt;li&gt;The whole process then goes to sleep for one second, which is shown by the darker background.&lt;/li&gt;
  &lt;li&gt;At the end of the second, the process wakes up and resolves the sleep thread to its value (unit), shown by the green arrow.&lt;/li&gt;
  &lt;li&gt;The main thread, which was waiting for the sleep thread, reads the value (the blue arrow) and exits the program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you zoom in on the arrows (go down to a grid division of about 10 microseconds), you&amp;rsquo;ll also see a white segment on the main thread, which shows when it was running (only one thread runs at a time).&lt;/p&gt;

&lt;p&gt;Because thread 0 is actually the main event loop (rather than a Lwt thread), things are a little more complicated than normal.
When the process has nothing to do, thread 0 puts the process to sleep until the next scheduled timer.
When the OS wakes the process, thread 0 resumes, determines that the &amp;ldquo;sleep&amp;rdquo; thread can be resolved, and does so.
This causes any callbacks registered on the sleep thread to be called, but in this case there aren&amp;rsquo;t any and control returns to thread 0.
Thread 0 then checks the sleep thread (because that determines when to finish), and ends the loop because it&amp;rsquo;s resolved.&lt;/p&gt;

&lt;h3&gt;Bind&lt;/h3&gt;

&lt;p&gt;Callbacks can be attached to a promise/thread to process the value when it arrives.
Attaching the callback immediately creates a new promise for the final result of the callback.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a program that sleeps twice in series.
The &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; (bind) operator attaches the callback function to the first thread.
I&amp;rsquo;ve made the sleeps very short so you can see the process waking up without having to zoom.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example_2&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00001&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;canvas style=&quot;width: 100%; height: 136px&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;In this case, the main thread creates two new threads at the start: one for the result of the first sleep and a second (&amp;ldquo;bind&amp;rdquo;) for the result of running the callback on the result.
It&amp;rsquo;s easier to see how the first thread is resolved here: the main thread handling the polling loop wakes up and resolves the sleep thread, which then causes the bind thread to resume.&lt;/p&gt;

&lt;p&gt;You might wonder why the bind thread disappears when the second sleep starts.
It hasn&amp;rsquo;t finished, but when the bind&amp;rsquo;s callback function returns the second sleep thread as its result, the bind thread is merged with the sleep thread.
This is the asynchronous equivalent of a tail call optimisation, allowing us to create loops without needing an unbounded number of threads.&lt;/p&gt;

&lt;p&gt;Actually, displaying binds in this way tends to clutter up the diagrams, so the viewer has a simplification rule that is enabled by default: if the first event on a bind thread is a read, the part of the bind up to that point isn&amp;rsquo;t drawn.
Therefore, the default display for this program is:&lt;/p&gt;

&lt;canvas style=&quot;width: 100%; height: 106px&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;If you zoom in on the central green arrow, you can see the tiny remaining bind thread between the two sleeps.&lt;/p&gt;

&lt;h3&gt;Join&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Lwt.join&lt;/code&gt; waits for a collection of threads to finish:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example_3&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;canvas style=&quot;width: 100%; height: 196px&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;In the trace, you can see the join thread being notified each time one of the threads it&amp;rsquo;s waiting for completes.
When they&amp;rsquo;re all done, it resolves itself.&lt;/p&gt;

&lt;h3&gt;Choose&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Lwt.choose&lt;/code&gt; is similar to join, but only waits until one of its threads finishes:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example_4&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;canvas style=&quot;width: 100%; height: 196px&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;I cheated a bit here.
To avoid clutter, the viewer only draws each thread until its last recorded event (without this, threads that get garbage collected span the whole width of the trace), so I used &lt;code&gt;Profile.label ~thread &amp;quot;(continues)&amp;quot;&lt;/code&gt; to create extra label events on the two remaining threads to make it clearer what&amp;rsquo;s happening here.&lt;/p&gt;

&lt;h3&gt;Pick&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Lwt.pick&lt;/code&gt; is similar to choose, but additionally cancels the other threads:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example_5&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;pick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;003&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;canvas style=&quot;width: 100%; height: 196px&quot;&gt;&lt;/canvas&gt;

&lt;h3&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;Failed threads are shown with a red bar at the end and the exception message is displayed.
Also, any &amp;ldquo;reads&amp;rdquo; arrow coming from it is shown in red rather than blue.
Here, the bind thread fails but the try one doesn&amp;rsquo;t because it catches the exception and returns unit.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example_6&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;try_lwt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;oops&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Note: I&amp;rsquo;m using the Lwt syntax extension here for &lt;code&gt;try_lwt&lt;/code&gt;, but you can use &lt;code&gt;Lwt.try_bind&lt;/code&gt; if you prefer.&lt;/p&gt;

&lt;canvas style=&quot;width: 100%; height: 106px&quot;&gt;&lt;/canvas&gt;

&lt;p&gt;The same simplification done for &amp;ldquo;bind&amp;rdquo; threads also applies to &amp;ldquo;try&amp;rdquo; threads, so the try thread doesn&amp;rsquo;t appear at all until you zoom in on the red arrow.&lt;/p&gt;

&lt;h2&gt;Making your own traces&lt;/h2&gt;

&lt;p&gt;Update: These instructions were out-of-date so I&amp;rsquo;ve removed them. See the &lt;a href=&quot;https://github.com/mirage/mirage-profile&quot;&gt;mirage-profile&lt;/a&gt; page for up-to-date instructions.&lt;/p&gt;

&lt;h2&gt;Examples&lt;/h2&gt;

&lt;p&gt;A few months ago, I made &lt;a href=&quot;http://roscidus.com/blog/blog/2014/07/28/my-first-unikernel/&quot;&gt;my first unikernel&lt;/a&gt; - a REST service for queuing files as a Xen guest OS.
Unlike a normal guest, which would include a Linux kernel, init system, libc, shell, Apache, etc, a Mirage unikernel is a single executable, and almost pure OCaml (apart from malloc, the garbage collector, etc).
Unikernels can be very small and simple, and have a much smaller attack surface than traditional systems.&lt;/p&gt;

&lt;p&gt;For my first attempt at &lt;a href=&quot;http://roscidus.com/blog/blog/2014/08/15/optimising-the-unikernel/&quot;&gt;optimising the unikernel&lt;/a&gt;, I used OCaml&amp;rsquo;s built-in profiling support.
This recorded function calls and how much time was spent in each one.
But I quickly discovered that CPU time was rarely the important factor - how the various asynchronous threads were scheduled was more important, and the tracing made it difficult to see this.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s see how the new tracing does on my previous problems&amp;hellip;&lt;/p&gt;

&lt;h3&gt;Profiling the console&lt;/h3&gt;

&lt;p&gt;In the previous profiling post, I generated this graph using libreoffice:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/xen-console-messages.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;As a reminder, Xen guests output to the console by writing the text to a shared memory page, increasing a counter to indicate this, and signalling dom0. The console logger in dom0 reads the data, increments another counter to confirm it got it, and signals back to the guest that that part of the buffer is free again.&lt;/p&gt;

&lt;p&gt;To use the new tracing system, I added a &lt;code&gt;Profile.note_increase &amp;quot;sent&amp;quot; len&lt;/code&gt; to the main loop, which increments a &amp;ldquo;sent&amp;rdquo; count on each iteration (i.e. each time we write a line to the console).
The viewer adds a mark on the trace for each increment and overlays a graph (the red line) so you can see overall progress easily:&lt;/p&gt;

&lt;canvas style=&quot;width: 100%; height: 300px&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/javascripts/trace-viewer.html?trace=console&quot;&gt;View full screen&lt;/a&gt; | &lt;a href=&quot;http://roscidus.com/blog/data/traces/console.sexp&quot;&gt;Download console.sexp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As before, we can see that we send messages rapidly in bursts, followed by long periods without progress.
Zooming in to the places where the red line is increasing, we can see the messages being written to the buffer without any delays.
Looking at the edges of the sleeping regions, it&amp;rsquo;s clear that we&amp;rsquo;re simply waiting for Xen to notify us of space by signalling us on event channel 2.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the complete test code:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lwt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CONSOLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'X'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1800&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nn&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note_increase&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sent&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Wrote %d bytes in %.3f seconds (%.2f KB/s)&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float_of_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;for_lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;UDP transmission&lt;/h3&gt;

&lt;p&gt;Last time, we saw packet transmission being interrupted by periods of sleeping, garbage collection, and some brief but mysterious pauses.
I noted that the GC tended to run during &lt;code&gt;Ring.ack_responses&lt;/code&gt;, suggesting that was getting called quite often, and with the new tracing we can see why.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/udp-packets.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;This trace shows a unikernel booting (scroll left if you want to see that) and then sending 10 UDP packets.
I&amp;rsquo;ve left the trace running a little longer so you can see the acks (this is very obvious when sending more than 10 packets, but I wanted to keep this trace small):&lt;/p&gt;

&lt;canvas style=&quot;width: 100%; height: 700px&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/javascripts/trace-viewer.html?trace=udp&quot;&gt;View full screen&lt;/a&gt; | &lt;a href=&quot;http://roscidus.com/blog/data/traces/udp.sexp&quot;&gt;Download udp.sexp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mirage creates two threads for each packet that we add to the ring buffer and they stick around until we get a notification back from dom0 that the packet has been read (actually, we create six threads for each packet, but the bind simplification hides four of them).&lt;/p&gt;

&lt;p&gt;It looks like each packet is in two parts, as each one generates two acks, one much later than the other.
I think the two parts are the UDP header and the payload, which each have their own IO page.
Given the time needed to share and unshare pages, it would probably be more efficient to copy the payload into the same page as the header.
Interestingly, dom0 seems to ack all the headers first, but holds on to the payload pages for longer.&lt;/p&gt;

&lt;p&gt;With 20 threads for just ten packets, you can imagine that the trace gets rather crowded when sending thousands!&lt;/p&gt;

&lt;h3&gt;TCP transmission&lt;/h3&gt;

&lt;p&gt;As before, the TCP picture is rather complicated:&lt;/p&gt;

&lt;canvas style=&quot;width: 100%; height: 700px&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/javascripts/trace-viewer.html?trace=tcp&quot;&gt;View full screen&lt;/a&gt; | &lt;a href=&quot;http://roscidus.com/blog/data/traces/tcp.sexp&quot;&gt;Download tcp.sexp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above shows a unikernel running on my ARM Cubietruck connecting to netcat on my laptop and sending 100 TCP packets over the stream.
There are three counters here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;main-to-tcp&lt;/code&gt; (purple) is incremented by the main thread just before sending a block of data to the TCP stream (just enough to fill one TCP segment).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tcp-to-ip&lt;/code&gt; (red) shows when the TCP system sent a segment to the IP layer for transmission.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tcp-ackd-segs&lt;/code&gt; (orange) shows when the TCP system got confirmation of receipt from the remote host (note: a TCP ask is not the same as a dom0 ring ack, which just says the network driver has accepted the segment for transmission).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is clearly scope to improve the viewer here, but a few things can be seen already.
The general cycle is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The unikernel is sleeping, waiting for TCP acks.&lt;/li&gt;
  &lt;li&gt;The remote end acks some packets (the orange line goes up).&lt;/li&gt;
  &lt;li&gt;The TCP layer transmits some of the buffered packets (red line goes up).&lt;/li&gt;
  &lt;li&gt;The TCP layer allows the main code to send more data (purple line goes up).&lt;/li&gt;
  &lt;li&gt;The transmitted pages are freed (the dense vertical green lines) once Xen acks them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I did wonder whether we unshared the pages as soon as dom0 had read the segment, or only when the remote end sent the TCP ack.
Having the graphs overlaid on the trace lets us answer this question - you can see that when the red line goes up (segments sent to dom0), the &lt;code&gt;ring.write&lt;/code&gt; thread that is created then ends (and the page is unshared) in response to &lt;code&gt;ring.poll ack_responses&lt;/code&gt;, before the TCP acks arrive.&lt;/p&gt;

&lt;p&gt;TCP starts slowly, but as the window size gets bigger and more packets are transmitted at a time, the sleeping periods get shorter and then disappear as the process becomes CPU-bound.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also a long garbage collection period near the end (shortly before we close the socket).
This might be partly the fault of the tracing system, which currently allocates lots of small values, rather than writing to a preallocated buffer.&lt;/p&gt;

&lt;h3&gt;Disk access&lt;/h3&gt;

&lt;p&gt;For our final example, let&amp;rsquo;s revisit the block device profiling from last time.
Back then, making a series of read requests, each for 32 pages of data, produced this chart:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/block-reads-1-32.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;With the new tracing, we can finally see what those mysterious wake-ups in the middle are:&lt;/p&gt;

&lt;canvas style=&quot;width: 100%; height: 500px&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/javascripts/trace-viewer.html?trace=disk-direct&quot;&gt;View full screen&lt;/a&gt; | &lt;a href=&quot;http://roscidus.com/blog/data/traces/disk-direct.sexp&quot;&gt;Download disk-direct.sexp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each time the main test code&amp;rsquo;s read call returns, the orange trace (&amp;ldquo;read&amp;rdquo;) goes up.
You can see that we make three blocking calls to dom0 for each request.
I added another counter for the number of active grant refs (pages shared with dom0), shown as the red line (&amp;ldquo;gntref&amp;rdquo;).
You can see that for each call we share a bunch of pages, wait, and then unshare them all again.&lt;/p&gt;

&lt;p&gt;In each group of three, we share 11 pages for the first two requests, but only 10 for the third.
This makes obvious what previously required a careful reading of the block code: requests for more than 11 pages have to be split up because that&amp;rsquo;s all you can fit in the request structure.
Our request for 32 pages is split into requests for 11 + 11 + 10 pages, which are sent in series.&lt;/p&gt;

&lt;p&gt;In fact, Xen also supports &amp;ldquo;indirect&amp;rdquo; requests, where the request structure references full pages of requests.
I added support for this to mirage-block-xen, which improved the speed nicely.
Here&amp;rsquo;s a trace with indirect requests enabled:&lt;/p&gt;

&lt;canvas style=&quot;width: 100%; height: 500px&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/javascripts/trace-viewer.html?trace=disk-indirect&quot;&gt;View full screen&lt;/a&gt; | &lt;a href=&quot;http://roscidus.com/blog/data/traces/disk-indirect.sexp&quot;&gt;Download disk-indirect.sexp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you zoom in where the red line starts to rise, you can see it has 32 steps, as we allocate all the pages in one go, followed by a final later increment for the indirect page.&lt;/p&gt;

&lt;p&gt;Zooming out, you can see we paused for GC a little later.
We got lucky here, with the GC occurring just after we sent the request and just before we started waiting for the reply, so it hardly slowed us down.
If we&amp;rsquo;d been unlucky the GC might have run before we sent the request, leaving dom0 idle and wasting the time.
Keeping multiple requests in flight would eliminate this risk.&lt;/p&gt;

&lt;h2&gt;Implementation notes&lt;/h2&gt;

&lt;p&gt;I originally wrote the viewer as a native GTK application in OCaml.
The browser version was created by running the magical &lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;js_of_ocaml&lt;/a&gt; tool, which turned out to be incredibly easy.
I just had to add support for the HTML canvas API alongside the code for GTK&amp;rsquo;s Cairo canvas, but they&amp;rsquo;re almost the same anyway.
Now my embarrassing inability to learn JavaScript need not hold me back!&lt;/p&gt;

&lt;p&gt;Finding a layout algorithm that produced sensible results was the hardest part.
I&amp;rsquo;m quite pleased with the result.
The basic algorithm is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generate an &lt;a href=&quot;http://en.wikipedia.org/wiki/Interval_tree&quot;&gt;interval tree&lt;/a&gt; of the thread lifetimes.&lt;/li&gt;
  &lt;li&gt;Starting with the root thread, place each thread at the highest place on the screen where it doesn&amp;rsquo;t overlap any other threads, and no higher than its parent.&lt;/li&gt;
  &lt;li&gt;Visit the threads recursively, depth first, visiting the child threads created in &lt;em&gt;reverse&lt;/em&gt; order.&lt;/li&gt;
  &lt;li&gt;If one thread merges with another, allow them to overlap.&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t show bind-type threads as children of their actual creator, but instead delay their start time to when they get activated and make them children of the thread that activates them, &lt;em&gt;unless&lt;/em&gt; their parent merges with them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the vertical layout I originally used scrolling, but it was hard to navigate.
It now transforms the vertical coordinates from the layout engine by passing them through the &lt;code&gt;tanh&lt;/code&gt; function, allowing you to focus on a particular thread but still see all the others, just more bunched up.
The main difficulty here is focusing on one of the top or bottom threads without wasting half the display area, which complicated the code a bit.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Understanding concurrent programs can be much easier with a good visualisation.
By instrumenting Lwt, it was quite easy to collect useful information about what threads were doing.
Libraries that use Lwt only needed to be modified in order to label the threads.&lt;/p&gt;

&lt;p&gt;My particular interest in making these tools is to explore the behaviour of &lt;a href=&quot;http://openmirage.org/&quot;&gt;Mirage unikernels&lt;/a&gt; - tiny virtual machines written in OCaml that run without the overhead of traditional operating systems.&lt;/p&gt;

&lt;p&gt;The traces produced provide much more information than the graphs I made previously.
We can see now not just when the unikernel isn&amp;rsquo;t making progress, but why.
We saw that the networking code spends a lot of time handling ack messages from dom0 saying that it has read the data we shared with it, and that the disk code was splitting requests into small chunks because it didn&amp;rsquo;t support indirect requests.&lt;/p&gt;

&lt;p&gt;There is plenty of scope for improvement in the tools - some things I&amp;rsquo;d like include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A way to group or hide threads if you want to focus on something else, as diagrams can become very cluttered with e.g. threads waiting for shared pages to be released.&lt;/li&gt;
  &lt;li&gt;The ability to stitch together traces from multiple machines so you can e.g. follow the progress of an IP packet after it leaves the VM.&lt;/li&gt;
  &lt;li&gt;A visual indication of when interrupts occur vs when Mirage gets around to servicing them.&lt;/li&gt;
  &lt;li&gt;More stats collection and reporting (e.g. average response time to handle a TCP request, etc).&lt;/li&gt;
  &lt;li&gt;A more compact log format and more efficient tracing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But hopefully, these tools will already help people to learn more about how their unikernels behave.
If you&amp;rsquo;re interested in tracing or unikernels, the &lt;a href=&quot;http://openmirage.org/community/&quot;&gt;Mirage mailing list&lt;/a&gt; is a good place to discuss things.&lt;/p&gt;





</content><id>http://roscidus.com/blog/blog/2014/10/27/visualising-an-asynchronous-monad/</id><title type="text">Visualising an asynchronous monad</title><updated>2014-10-27T07:21:04+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2014/09/23/compiler-hacking-by-the-river" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;&lt;strong&gt;Update: This session will be a joint F#/OCaml hacking event, beginning with a talk from Don Syme about F# compiler and language development!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the eighth Cambridge OCaml compiler hacking evening we'll be meeting in the &lt;a href=&quot;http://www.cam.ac.uk/news/first-ever-postdoc-centre-is-new-home-for-research-staff&quot;&gt;University Postdoc centre&lt;/a&gt; at &lt;a href=&quot;https://goo.gl/maps/cZXev&quot;&gt;16 Mill Lane&lt;/a&gt; (near the river, next door to &lt;a href=&quot;http://makespace.org/space/&quot;&gt;Makespace&lt;/a&gt;) on 6.30pm Tuesday 30th September.&lt;/p&gt;

&lt;p&gt;If you're planning to come along, it'd be helpful if you could &lt;a href=&quot;http://doodle.com/svwkevcs5p2xs8n8&quot;&gt;&lt;strong&gt;indicate interest via Doodle&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://lists.ocaml.org/listinfo/cam-compiler-hacking&quot;&gt;sign up to the mailing list&lt;/a&gt; to receive updates:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where&lt;/strong&gt;:
  Postdoc Centre&lt;br/&gt;
  Basement, &lt;a href=&quot;https://goo.gl/maps/cZXev&quot;&gt;16 Mill Lane&lt;/a&gt;&lt;br/&gt;
  Cambridge, CB2 1SB&lt;br/&gt;
  United Kingdom  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt;: 6.30pm, Tuesday 30th September&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who&lt;/strong&gt;: anyone interested in improving OCaml. Knowledge of OCaml programming will obviously be helpful, but prior experience of working on OCaml internals isn't necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&lt;/strong&gt;: fixing bugs, implementing new features, learning about OCaml internals.  This time we'll be focusing on code quality: refactoring, adding test cases, reviewng existing proposals and updating packages after the recent &lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2014-08/msg00127.html&quot;&gt;release of OCaml 4.02&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wiki&lt;/strong&gt;: &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki&quot;&gt;https://github.com/ocamllabs/compiler-hacking/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're defining &amp;quot;compiler&amp;quot; pretty broadly, to include anything that's part of the standard distribution, which means at least the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/libref/index.html&quot;&gt;standard library&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual024.html&quot;&gt;runtime&lt;/a&gt;, tools (&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/depend.html&quot;&gt;ocamldep&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc105&quot;&gt;ocamllex&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc107&quot;&gt;ocamlyacc&lt;/a&gt;, etc.), &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual032.html&quot;&gt;ocamlbuild&lt;/a&gt;, the &lt;a href=&quot;http://caml.inria.fr/resources/doc/index.en.html&quot;&gt;documentation&lt;/a&gt;, and the compiler itself. We'll have suggestions for &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;mini-projects&lt;/a&gt; for various levels of experience (see also some &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-previously-worked-on&quot;&gt;things we've done on previous evenings&lt;/a&gt;), but feel free to come along and work on whatever you fancy.&lt;/p&gt;

&lt;p&gt;We'll also be ordering pizza, so if you want to be counted for food you should aim to arrive by 6.45pm.&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2014/09/23/compiler-hacking-by-the-river</id><title type="text">Eighth OCaml compiler hacking evening (at Mill Lane, by the river)</title><updated>2014-09-23T19:00:00+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2014/09/17/simplifying-the-solver-with-functors/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;After &lt;a href=&quot;http://roscidus.com/blog/blog/2014/06/06/python-to-ocaml-retrospective/&quot;&gt;converting 0install to OCaml&lt;/a&gt;, I&amp;rsquo;ve been looking at using more of OCaml&amp;rsquo;s features to further clean up the APIs.
In this post, I describe how using OCaml functors has made 0install&amp;rsquo;s dependency solver easier to understand and more flexible.&lt;/p&gt;



&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://news.ycombinator.com/item?id=8342826&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;http://www.reddit.com/r/programming/comments/2gw0dn/simplifying_0installs_solver_with_ocamls_functors/&quot;&gt;Reddit&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#introduction&quot;&gt;Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#how-dependency-solvers-work&quot;&gt;How dependency solvers work&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#optimising-the-result&quot;&gt;Optimising the result&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-current-solver-code&quot;&gt;The current solver code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#discovering-the-interface&quot;&gt;Discovering the interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#comparison-with-java&quot;&gt;Comparison with Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#diagnostics&quot;&gt;Diagnostics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#selections&quot;&gt;Selections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;To run a program you need to pick a version of it to use, as well as compatible versions of all its dependencies.
For example, if you wanted &lt;a href=&quot;http://0install.net/&quot;&gt;0install&lt;/a&gt; to select a suitable set of components to run &lt;a href=&quot;http://www.serscis.eu/0install/serscis-access-modeller&quot;&gt;SAM&lt;/a&gt;, you could do it like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;&quot;&gt;&lt;span class=&quot;line&quot;&gt;$ 0install select http://www.serscis.eu/0install/serscis-access-modeller
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;- URI: http://www.serscis.eu/0install/serscis-access-modeller
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  Version: 0.16
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  Path: (not cached)
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  - URI: http://repo.roscidus.com/utils/graphviz
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    Version: 2.38.0-2
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    Path: (package:arch:graphviz:2.38.0-2:x86_64)
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  - URI: http://repo.roscidus.com/java/swt
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    Version: 3.6.1
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    Path: (not cached)
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  - URI: http://repo.roscidus.com/java/iris
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    Version: 0.6.0
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    Path: (not cached)
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  - URI: http://repo.roscidus.com/java/openjdk-jre
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    Version: 7.65-2.5.2-1
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    Path: (package:arch:jre7-openjdk:7.65-2.5.2-1:x86_64)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, the solver selected SAM version 0.16, along with its dependencies. GraphViz 2.38.0 and OpenJDK-JRE 7.65 are already installed from my distribution repository, while SWT 3.6.1 and IRIS 0.6.0 need to be downloaded (e.g. using &lt;code&gt;0install download&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This post is about the code that decides which versions to use, and my attempts to make it easier to understand using OCaml functors and abstraction.
For a gentle introduction to functors, see &lt;a href=&quot;https://realworldocaml.org/v1/en/html/functors.html&quot;&gt;Real World OCaml: Chapter 9. Functors&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;How dependency solvers work&lt;/h3&gt;

&lt;p&gt;( This section isn&amp;rsquo;t about functors, but it&amp;rsquo;s quite interesting background. You can skip it if you prefer. )&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say I want to run &lt;code&gt;foo&lt;/code&gt;, a graphical Java application.
There are three versions available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;foo1&lt;/code&gt; (stable)
    &lt;ul&gt;
      &lt;li&gt;requires Java 6..!7 (at least version 6, but before version 7)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;foo2&lt;/code&gt; (stable)
    &lt;ul&gt;
      &lt;li&gt;requires Java 6.. (at least version 6)&lt;/li&gt;
      &lt;li&gt;requires SWT&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;foo3&lt;/code&gt; (testing)
    &lt;ul&gt;
      &lt;li&gt;requires Java 7..&lt;/li&gt;
      &lt;li&gt;requires SWT&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s imagine we have some candidates for Java and SWT too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java: &lt;code&gt;java6_32bit&lt;/code&gt;, &lt;code&gt;java6_64bit&lt;/code&gt;, &lt;code&gt;java7_64bit&lt;/code&gt;, &lt;code&gt;java8_64bit&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;SWT: &lt;code&gt;swt35_32bit&lt;/code&gt;, &lt;code&gt;swt35_64bit&lt;/code&gt;, &lt;code&gt;swt36_32bit&lt;/code&gt;, &lt;code&gt;swt36_64bit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My computer can run 32- and 64-bit binaries, so we need to consider both.&lt;/p&gt;

&lt;p&gt;We start by generating a set of boolean constraints defining the necessary and sufficient conditions for a set of valid selections.
Each candidate becomes one variable, with &lt;code&gt;true&lt;/code&gt; meaning it will be used and &lt;code&gt;false&lt;/code&gt; that it won&amp;rsquo;t (following the approach in &lt;a href=&quot;https://cseweb.ucsd.edu/~lerner/papers/opium.html&quot;&gt;OPIUM&lt;/a&gt;).
For example, we don&amp;rsquo;t want to select more than one version of each component, so the following must all be true:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;at_most_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;at_most_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java6_32bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java6_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java7_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java8_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;at_most_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swt35_32bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt35_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt36_32bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt36_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;We must select some version of &lt;code&gt;foo&lt;/code&gt; itself, since that&amp;rsquo;s our goal:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;If we select &lt;code&gt;foo1&lt;/code&gt;, we must select one of the Java 6 candidates.
Another way to say this is that we must either &lt;em&gt;not&lt;/em&gt; select foo1 or, if we do, we must select a compatible Java version:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java6_32bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java6_64bit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java6_32bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java6_64bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java7_64bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java8_64bit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java7_64bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java8_64bit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt35_32bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt35_64bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt36_32bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt36_64bit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt35_32bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt35_64bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt36_32bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swt36_64bit&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;SWT doesn&amp;rsquo;t work with Java 8 (in this imaginary example):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swt35_32bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java8_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swt35_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java8_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swt36_32bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java8_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swt36_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java8_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Finally, although we can use 32 bit or 64 bit programs, we can&amp;rsquo;t mix different types within a single program:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java6_32bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java6_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java7_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java8_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swt35_32bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swt35_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swt36_32bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swt36_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x64&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Once we have all the equations, we throw them at a standard &lt;a href=&quot;http://en.wikipedia.org/wiki/Boolean_satisfiability_problem&quot;&gt;SAT&lt;/a&gt; solver to get a set of valid versions.
0install&amp;rsquo;s SAT solver is based on the &lt;a href=&quot;http://minisat.se/Papers.html&quot;&gt;MiniSat&lt;/a&gt; algorithm.
The basic algorithm, &lt;a href=&quot;http://en.wikipedia.org/wiki/DPLL_algorithm&quot;&gt;DPLL&lt;/a&gt;, works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The SAT solver simplifies the problem by looking for clauses with only a single variable.
If it finds any, it knows the value of that variable and can simplify the other clauses.&lt;/li&gt;
  &lt;li&gt;When no further simplification is possible, it asks its caller to pick a variable to try.
Here, we might try &lt;code&gt;foo2=true&lt;/code&gt;, for example.
It then goes back to step 1 to simplify again and so on, until it has either a solution or a conflict.
If a variable assignment leads to a conflict, then we go back and try it the other way (e.g. &lt;code&gt;foo2=false&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the above example, the process would be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;No initial simplification is possible.&lt;/li&gt;
  &lt;li&gt;Try &lt;code&gt;foo2=true&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;This immediately leads to &lt;code&gt;foo1=false&lt;/code&gt; and &lt;code&gt;foo3=false&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Now we try &lt;code&gt;java8_64bit=true&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;This immediately removes the other versions of Java from consideration.&lt;/li&gt;
  &lt;li&gt;It also immediately leads to &lt;code&gt;x64=true&lt;/code&gt;, which eliminates all the 32-bit binaries.&lt;/li&gt;
  &lt;li&gt;It also eliminates all versions of SWT.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;foo2&lt;/code&gt; depends on SWT, so eliminating all versions leads to &lt;code&gt;foo2=false&lt;/code&gt;, which is a conflict because we already set it to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;MiniSat, unlike basic DPLL, doesn&amp;rsquo;t just backtrack when it gets a conflict.
It also works backwards from the conflicting clause to find a small set of variables that are sufficient to cause the conflict.
In this case, we find that &lt;code&gt;foo2 and java8_64bit&lt;/code&gt; implies conflict.
To avoid the conflict, we must make sure that at least one of these is false, and we can do this by adding a new clause:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java8_64bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;In this example, this has the same effect as simple backtracking, but if we&amp;rsquo;d chosen other variables between these two then learning the general rule could save us from exploring many other dead-ends.
We now try with &lt;code&gt;java7_64bit=true&lt;/code&gt; and then &lt;code&gt;swt36_64bit=true&lt;/code&gt;, which leads to a solution.&lt;/p&gt;

&lt;h3&gt;Optimising the result&lt;/h3&gt;

&lt;p&gt;The above process will always find some valid solution if one exists, but we generally want an &amp;ldquo;optimal&amp;rdquo; solution (e.g. preferring newer versions).
There are several ways to do this.&lt;/p&gt;

&lt;p&gt;In his talk at &lt;a href=&quot;https://ocaml.org/meetings/ocaml/2014/#Program&quot;&gt;OCaml 2014&lt;/a&gt;, &lt;em&gt;Using Preferences to Tame your Package Manager&lt;/em&gt;, Roberto Di Cosmo explained how their tools allow you to specify a function to be optimised (e.g. &lt;code&gt;-count(removed),-count(changed)&lt;/code&gt; to minimise the number of packages to be removed or changed).
When you have a global set of package versions (as in OPAM, Debian, etc) this is very useful, because the package manager needs to find solution that balances the needs of all installed programs.&lt;/p&gt;

&lt;p&gt;0install has an interesting advantage here.
We can install multiple versions of libraries in parallel, and we don&amp;rsquo;t allow one program to influence another program&amp;rsquo;s choices.
If we run another SWT application, &lt;code&gt;bar&lt;/code&gt;, we&amp;rsquo;ll probably pick the same SWT version (&lt;code&gt;bar&lt;/code&gt; will probably also prefer the latest stable 64-bit version) and so &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; will share the copy.
But if we run a non-SWT Java application, we are free to pick a better version of Java (e.g. Java 8) just for that program.&lt;/p&gt;

&lt;p&gt;This means that we don&amp;rsquo;t need to find a compromise solution for multiple programs.
When running &lt;code&gt;foo&lt;/code&gt;, the version of &lt;code&gt;foo&lt;/code&gt; itself is far more important than the versions of the libraries it uses.
We therefore define the &amp;ldquo;optimal&amp;rdquo; solution as the one optimising first the version of the main program, then the version of its first dependency and so on.
This means that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The behaviour is predictable and easy to explain.&lt;/li&gt;
  &lt;li&gt;The behaviour is stable (small changes to libraries deep in the tree have little effect).&lt;/li&gt;
  &lt;li&gt;Programs can rank their dependencies by importance, because earlier dependencies are optimised first.&lt;/li&gt;
  &lt;li&gt;If &lt;code&gt;foo2&lt;/code&gt; is the best version for our policy (e.g. &amp;ldquo;prefer latest stable version&amp;rdquo;) then every solution with &lt;code&gt;foo2=true&lt;/code&gt; is better than every solution without.
If we direct the solver to try &lt;code&gt;foo2=true&lt;/code&gt; and get a solution, there&amp;rsquo;s no point considering the &lt;code&gt;foo2=false&lt;/code&gt; cases.
This means that the first solution we find will always be optimal, which is very fast!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The current solver code&lt;/h2&gt;

&lt;p&gt;The existing code is made up of several components:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;caption-wrapper border center&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/solver/components.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;Arrows indicate &amp;quot;uses&amp;quot; relationship.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Arrows indicate &amp;ldquo;uses&amp;rdquo; relationship.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;SAT Solver&lt;/dt&gt;
  &lt;dd&gt;Implements the SAT solver itself (if you want to use this code in your own projects, Simon Cruanes has
made a standalone version at &lt;a href=&quot;https://github.com/c-cube/sat&quot;&gt;https://github.com/c-cube/sat&lt;/a&gt;, which has some additional features and
optimisations).&lt;/dd&gt;
  &lt;dt&gt;Solver&lt;/dt&gt;
  &lt;dd&gt;Fetches the candidate versions for each interface URI (equivalent to the package name in other systems) and builds up the SAT problem, then uses the SAT solver to solve it.
It directs the SAT solver in the direction of the optimal solution when there is a choice, as explained above.&lt;/dd&gt;
  &lt;dt&gt;Impl provider&lt;/dt&gt;
  &lt;dd&gt;Takes an interface URI and provides the candidates (&amp;ldquo;implementations&amp;rdquo;) to the solver.
The candidates can come from multiple XML &amp;ldquo;feed&amp;rdquo; files: the one at the given URI itself, plus any extra feeds that one imports, plus any additional local or remote feeds the user has added (e.g. a version in a local Git checkout or which has been built from source locally).
The impl provider also filters out obviously impossible choices (e.g. Windows binaries if we&amp;rsquo;re on Linux, uncached versions in off-line mode, etc) and then ranks the remaining candidates according to the local policy (e.g. preferring stable versions, higher version numbers, etc).&lt;/dd&gt;
  &lt;dt&gt;Feed provider&lt;/dt&gt;
  &lt;dd&gt;Simply loads the feed XML from the disk cache or local file, if available.
It does not access the network.&lt;/dd&gt;
  &lt;dt&gt;Driver&lt;/dt&gt;
  &lt;dd&gt;Uses the solver to get an initial solution.
Then it asks the feed provider which feeds the solver tried to access and starts downloading them.
As new feeds arrive, it runs the solver again, possibly starting more downloads.
Managing these downloads is quite interesting; I used it as the example in &lt;a href=&quot;http://roscidus.com/blog/blog/2013/11/28/asynchronous-python-vs-ocaml/&quot;&gt;Asynchronous Python vs OCaml&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;This is reasonably well split up already, thanks to occasional refactoring efforts, but we can always do better.
The subject of today&amp;rsquo;s refactoring is the solver module itself.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the problem:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;solver.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_selections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Selections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(* The remaining methods are used to provide diagnostics *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;General&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    			  &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic_implementation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;General&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diagnostics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic_implementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(** Find a set of implementations which satisfy these&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;  * requirements.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;  * @param closest_match adds a lowest-ranked (but valid)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;  *        implementation to every interface, so we can always&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;  *        select something. Useful for diagnostics. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_solve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Impl_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;closest_match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;What does &lt;code&gt;do_solve&lt;/code&gt; actually do?
It gets candidates (of type &lt;code&gt;Impl.generic_implementation&lt;/code&gt;) from &lt;code&gt;Impl_provider&lt;/code&gt; and produces a &lt;code&gt;Selections.t&lt;/code&gt;.
&lt;code&gt;Impl.generic_implementation&lt;/code&gt; is a complex type including, among other things, the raw XML &lt;code&gt;&amp;lt;implementation&amp;gt;&lt;/code&gt; element from the feed XML.
A &lt;code&gt;Selections.t&lt;/code&gt; is a set of &lt;code&gt;&amp;lt;selection&amp;gt;&lt;/code&gt; XML elements.&lt;/p&gt;

&lt;p&gt;In other words: &lt;code&gt;do_solve&lt;/code&gt; takes some arbitrary XML and produces some other XML.
It&amp;rsquo;s very hard to tell from the &lt;code&gt;solver.mli&lt;/code&gt; interface file what features of the input data it uses in the solve, and which it simply passes through.&lt;/p&gt;

&lt;p&gt;Now imagine that instead of working on these messy concrete types, the solver instead used only a module with this type:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sigs.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required_interface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restrictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meets_restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;We could then see exactly what information the solver needed to do its job.
For example, we could see just from the type signature that the solver doesn&amp;rsquo;t understand version numbers, but just uses &lt;code&gt;meets_restriction&lt;/code&gt; to check whether an abstract implementation (candidate) meets an abstract restriction.&lt;/p&gt;

&lt;p&gt;Using OCaml&amp;rsquo;s functors we can do just this, splitting out the core (non-XML) parts of the solver into a &lt;code&gt;Solver_core&lt;/code&gt; module with a signature something like:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;solver_core.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SOLVER_INPUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_solve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;closest_match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This says that, given &lt;em&gt;any&lt;/em&gt; concrete module that matches the &lt;code&gt;SOLVER_INPUT&lt;/code&gt; type, the &lt;code&gt;Make&lt;/code&gt; functor will return a module with a suitable &lt;code&gt;do_solve&lt;/code&gt; function.
In particular, the compiler will check that the solver core makes no further assumptions about the types.
If it assumes that a &lt;code&gt;Model.impl_provider&lt;/code&gt; is any particular concrete type then &lt;code&gt;solver_core.ml&lt;/code&gt; will fail to compile, for example.&lt;/p&gt;

&lt;h2&gt;Discovering the interface&lt;/h2&gt;

&lt;p&gt;The above sounds nice in theory, but how easy is it to change the existing code to the new design?
I don&amp;rsquo;t even know what &lt;code&gt;SOLVER_INPUT&lt;/code&gt; will actually look like - surely more complex than the example above!
Actually, it turned out to be quite easy.
You can start with just a few concrete types, e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sigs.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic_implementation&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This doesn&amp;rsquo;t constrain &lt;code&gt;Solver_core&lt;/code&gt; at all, since it&amp;rsquo;s allowed to know the real types and use them as before.
This step just lets us make the &lt;code&gt;Solver_core.Make&lt;/code&gt; functor and have things still compile and work.&lt;/p&gt;

&lt;p&gt;Next, I made &lt;code&gt;impl_provider&lt;/code&gt; abstract (removing the &lt;code&gt;= Impl_provider.impl_provider&lt;/code&gt;), letting the compiler find all the places where the code assumed the concrete type.&lt;/p&gt;

&lt;p&gt;First, it was getting the candidate implementations for an interface from it.
The &lt;code&gt;impl_provider&lt;/code&gt; was actually returning several things: the valid candidates, the rejects, and an optional conflicting interface (used when one interface replaces another).
The solver doesn&amp;rsquo;t use the rejects, which are only needed for the diagnostics system, so we can simplify that interface here.&lt;/p&gt;

&lt;p&gt;Secondly, not all dependencies need to be considered (e.g. a Windows-only dependency when we&amp;rsquo;re on Linux).
Since the &lt;code&gt;impl_provider&lt;/code&gt; already knows the platform in order to filter out incompatible binaries, we also use it to filter the dependencies.
Our new module type is:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sigs.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic_implementation&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;replacement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_info&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_dep_needed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;At this point, I&amp;rsquo;m not trying to improve the interface, just to find out what it is.
Continuing to make the types abstract in this way is a fairly mechanical process, which led to:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sigs.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;(* new name for impl_provider *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;replacement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_info&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_requires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine_group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine_group&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restrictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meets_restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_iface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_required_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_essential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restricts_only&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_dep_needed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_self_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_self_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The main addition is the &lt;code&gt;command&lt;/code&gt; type, which is essentially an optional entry point to an implementation.
For example, if a library can also be used as a program then it may provide a &amp;ldquo;run&amp;rdquo; command, perhaps adding a dependency on an option parser library.
Programs often also provide a &amp;ldquo;test&amp;rdquo; command for running the unit-tests, etc.
There are also two &lt;code&gt;to_string&lt;/code&gt; functions at the end for debugging and diagnostics.&lt;/p&gt;

&lt;p&gt;Having elicited this API between the solver and the rest of the system, it was clear that it had a few flaws:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;is_dep_needed&lt;/code&gt; is pointless. There are only two places where we pass a dependency to the solver (&lt;code&gt;requires&lt;/code&gt; and &lt;code&gt;command_requires&lt;/code&gt;), so we can just filter the unnecessary dependencies out there and not bother the solver core with them at all.
The abstraction ensures there&amp;rsquo;s no other way for the solver core to get a dependency.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;impl_self_commands&lt;/code&gt; and &lt;code&gt;command_self_commands&lt;/code&gt; worried me.
These are used for the (rare) case that one command in an implementation depends on another command in the same implementation.
This might happen if, for example, the &amp;ldquo;test&amp;rdquo; command wants to test the &amp;ldquo;run&amp;rdquo; command.
Logically, these are just another kind of dependency; returning them separately means code that follows dependencies might forget them.&lt;/p&gt;

    &lt;p&gt;Sure enough, there was just such a bug in the code.
When we build the SAT problem we &lt;em&gt;do&lt;/em&gt; consider self commands (so we always find a valid result), but when we&amp;rsquo;re optimising the result we ignore them, possibly leading to non-optimal solutions.
I added a unit-test and made &lt;code&gt;requires&lt;/code&gt; return both dependencies and self commands together to avoid the same mistake in future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For a similar reason, I replaced &lt;code&gt;dep_iface&lt;/code&gt;, &lt;code&gt;dep_required_commands&lt;/code&gt;, &lt;code&gt;restricts_only&lt;/code&gt; and &lt;code&gt;dep_essential&lt;/code&gt; with a single &lt;code&gt;dep_info&lt;/code&gt; function returning a record type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I added &lt;code&gt;type command_name = private string&lt;/code&gt;.
This means that the solver can&amp;rsquo;t confuse command names with other strings and makes the type signature more obvious.
I didn&amp;rsquo;t make it fully abstract, but was a bit lazy and used &lt;code&gt;private&lt;/code&gt;, allowing the solver to cast to a string for debug logging and to let it use them as keys in a StringMap.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is a boolean &lt;code&gt;source&lt;/code&gt; attribute in &lt;code&gt;do_solve&lt;/code&gt; and &lt;code&gt;implementations&lt;/code&gt;.
This is used if the user wants to select source code rather than a binary.
I wanted to support the case of a compiler that is compiled using an older version of itself (though I never completed this work).
In that case, we need to select different versions of the same interface, so the solver actually picks a unique implementation for each (interface, source) pair.&lt;/p&gt;

    &lt;p&gt;I tried giving these pairs a new abstract type - &amp;ldquo;role&amp;rdquo; - and that simplified things nicely.
It turned out that every place where we passed only an interface (e.g. &lt;code&gt;dep_iface&lt;/code&gt;), we eventually ended up doing &lt;code&gt;(iface, false)&lt;/code&gt; to get back to a role, so I was able to replace these with roles too.&lt;/p&gt;

    &lt;p&gt;This is quite significant.
Currently, the main interface can be source or binary but dependencies are always binary.
For example, source code may depend on a compiler, build tool, etc.
People have wondered in the past how easy it would be to support dependencies on source code too - it turns out this now requires no changes to the solver, just an extra attribute in the XML format!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With the role type now abstract, I removed &lt;code&gt;Model.t&lt;/code&gt; (the &lt;code&gt;impl_provider&lt;/code&gt;) and moved it inside the role type.
This simplifies the API and allows us to use different providers for different roles (imagine solving for components to cross-compile a program; some dependencies like &lt;code&gt;make&lt;/code&gt; should be for the build platform, while others are for the target).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s the new API:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sigs.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;dep_role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;dep_restrictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;dep_importance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;essential&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recommended&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restricts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;dep_required_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;replacement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_information&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_requires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine_group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine_group&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meets_restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Note: &lt;code&gt;Role&lt;/code&gt; is a submodule to make it easy to use it as the key in a map.&lt;/p&gt;

&lt;p&gt;Hopefully you find it much easier to understand what the solver does (and doesn&amp;rsquo;t) do from this type.
The &lt;code&gt;Solver_core&lt;/code&gt; code no longer depends on the rest of 0install and can be understood on its own.&lt;/p&gt;

&lt;p&gt;The remaining code in &lt;code&gt;Solver&lt;/code&gt; defines the implementation of a &lt;code&gt;SOLVER_INPUT&lt;/code&gt; module and applies the functor, like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoreModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic_implementation&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;StringMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;dep_role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep_iface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;c&quot;&gt;(* note: only dependencies on binaries supported for now. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;dep_importance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep_importance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;dep_required_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep_required_commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Core&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Solver_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CoreModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;CoreModel&lt;/code&gt; implementation of &lt;code&gt;SOLVER_INPUT&lt;/code&gt; simply maps the abstract types and functions to use the real types.
The limitation that dependencies are always binary is easier to see here, and it&amp;rsquo;s fairly obvious how to fix it.&lt;/p&gt;

&lt;p&gt;Note that we &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; define the module as &lt;code&gt;module CoreModel : SOLVER_INPUT = ...&lt;/code&gt;.
The rest of the code in &lt;code&gt;Solver&lt;/code&gt; still needs to see the concrete types; only &lt;code&gt;Solver_core&lt;/code&gt; is restricted to see it just as a &lt;code&gt;SOLVER_INPUT&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Comparison with Java&lt;/h2&gt;

&lt;p&gt;Using functors for this seemed pretty easy, and I started wondering how I&amp;rsquo;d solve this problem in other languages.
Python simply can&amp;rsquo;t do this kind of thing, of course - there you have to read all the code to understand what it does.
In Java, we might declare some abstract interfaces, though:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoleInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_implementations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_replacement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;machine_group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;meets_restriction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Restriction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_restrictions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;Importance&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_importance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_required_commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;RoleInfo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_implementations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_solve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s a problem, though.
We can create a &lt;code&gt;ConcreteRole&lt;/code&gt; and pass that to &lt;code&gt;Solver.do_solve&lt;/code&gt;, but we&amp;rsquo;ll get back a map from abstract roles to abstract impls.
We need to get concrete types out to do anything useful with the result.&lt;/p&gt;

&lt;p&gt;A Java programmer would probably cast the results back to the concrete types, but there&amp;rsquo;s a problem with this (beyond the obvious fact that it&amp;rsquo;s not statically type checked):
If we accept dynamic casting as a legitimate technique (OCaml doesn&amp;rsquo;t support it), there&amp;rsquo;s nothing to stop the abstract solver core from doing it too.
We&amp;rsquo;re back to reading all the code to find out what information it really uses.&lt;/p&gt;

&lt;p&gt;There are other places where dynamic casts are needed too, such as in &lt;code&gt;meets_restriction&lt;/code&gt; (which needs a concrete implementation, not an abstract one).&lt;/p&gt;

&lt;p&gt;I did try using generics, but I didn&amp;rsquo;t manage to get it to compile, and I stopped when I got to:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;n&quot;&gt;do_solve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I think it&amp;rsquo;s fair to say that if this ever did compile, it certainly wouldn&amp;rsquo;t have made the code easier to read.&lt;/p&gt;

&lt;h2&gt;Diagnostics&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Diagnostics&lt;/code&gt; module takes a failed solver result (produced with &lt;code&gt;do_solve ~closest_match:true&lt;/code&gt;) that is close to what we think the user wanted but with some components left blank, and tries to explain to the user why none of the available candidates was suitable
(see the &lt;a href=&quot;http://0install.net/injector-trouble.html&quot;&gt;Trouble-shooting&lt;/a&gt; guide for some examples and pictures).&lt;/p&gt;

&lt;p&gt;I made a &lt;code&gt;SOLVER_RESULT&lt;/code&gt; module type which extended &lt;code&gt;SOLVER_INPUT&lt;/code&gt; with the final selections and diagnostic information:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sigs.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_RESULT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_INPUT&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_restrictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rejection&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rejects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe_problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rejection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_of_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_of_restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dummy_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(** Placeholder for missing impls *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Note: the &lt;code&gt;explain&lt;/code&gt; function here is for the diagnostics-of-last-resort; the diagnostics system uses it on cases it can&amp;rsquo;t explain itself, which generally indicates a bug somewhere.&lt;/p&gt;

&lt;p&gt;Then I made a &lt;code&gt;Diagnostics.Make&lt;/code&gt; functor as with &lt;code&gt;Solver_core&lt;/code&gt;.
This means that the diagnostics now sees the same information as the solver, with the above additions.
For example, it sees the same dependencies as the solver did (e.g. we can&amp;rsquo;t forget to filter them out with &lt;code&gt;is_dep_needed&lt;/code&gt;).
Like the solver, the diagnostics assumed that a dependency was always a binary dependency and used &lt;code&gt;(iface, false)&lt;/code&gt; to get the role.
Since the role is now abstract, it can&amp;rsquo;t do this and should cope with source dependencies automatically.&lt;/p&gt;

&lt;p&gt;The new API prompted me to consider self-command dependencies again, so the diagnostics code is now able to explain correctly problems caused by missing self-commands (previously, I forgot to handle this case).&lt;/p&gt;

&lt;h2&gt;Selections&lt;/h2&gt;

&lt;p&gt;Sometimes we use the results of the solver directly.
In other cases, we save them to disk as an &lt;a href=&quot;http://0install.net/selections-spec.html&quot;&gt;XML selections document&lt;/a&gt; first.
These XML documents are handled by the &lt;code&gt;Selections&lt;/code&gt; module, which had its own API.&lt;/p&gt;

&lt;p&gt;For consistency, I decided to share type names and methods as much as possible.
I split out the core of &lt;code&gt;SOLVER_INPUT&lt;/code&gt; into another module type:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CORE_MODEL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_requires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_info&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CORE_MODEL&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl_to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_information&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restrictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meets_restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine_group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;machine_group&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Actually, there is some overlap with &lt;code&gt;SOLVER_RESULT&lt;/code&gt; too, so I created a &lt;code&gt;SELECTIONS&lt;/code&gt; type as well:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/solver/sigs.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Now the relationship becomes clear.
&lt;code&gt;SOLVER_INPUT&lt;/code&gt; extends the core model with ways to get the possible candidates and restrictions on their use.
&lt;code&gt;SELECTIONS&lt;/code&gt; extends the core with ways to find out which implementations were selected.
&lt;code&gt;SOLVER_RESULT&lt;/code&gt; combines the above two, providing extra information for diagnostics by relating the selections back to the candidates (information that isn&amp;rsquo;t available when loading saved selections).&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELECTIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoleMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MAP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_RESULT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SOLVER_INPUT&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SELECTIONS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rejection&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rejects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_restrictions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_of_impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format_machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_of_restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe_problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rejection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_selections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RoleMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I had a bit of trouble here.
I wanted to include &lt;code&gt;CORE_MODEL&lt;/code&gt; in &lt;code&gt;SELECTIONS&lt;/code&gt;, but doing that caused an error when I tried to bring them together in &lt;code&gt;SOLVER_RESULT&lt;/code&gt;,
because of the duplicate &lt;code&gt;Role&lt;/code&gt; submodule.
So instead I just define the types I need and let the user of the signature link them up.&lt;/p&gt;

&lt;p&gt;Update: I&amp;rsquo;ve since discovered that you can just do &lt;code&gt;with module Role := Role&lt;/code&gt; to solve this.&lt;/p&gt;

&lt;p&gt;Correct use of the &lt;code&gt;with&lt;/code&gt; keyword seems the key to a happy life with OCaml functors.
When defining the &lt;code&gt;RoleMap&lt;/code&gt; submodule in &lt;code&gt;SELECTIONS&lt;/code&gt; I use it to let users know the keys of a &lt;code&gt;RoleMap&lt;/code&gt; are the same type as &lt;code&gt;SELECTIONS.role&lt;/code&gt; (otherwise it will be abstract and you can&amp;rsquo;t assume anything about it).
In &lt;code&gt;SOLVER_RESULT&lt;/code&gt;, I use it to link the types in &lt;code&gt;SELECTIONS&lt;/code&gt; with the types in &lt;code&gt;SOLVER_INPUT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice the use of &lt;code&gt;=&lt;/code&gt; vs &lt;code&gt;:=&lt;/code&gt;.
&lt;code&gt;=&lt;/code&gt; says that two types are the same.
&lt;code&gt;:=&lt;/code&gt; additionally removes the type from the module signature.
We use &lt;code&gt;:=&lt;/code&gt; for &lt;code&gt;impl&lt;/code&gt; because we already have a type with that name from &lt;code&gt;SOLVER_INPUT&lt;/code&gt; and we can&amp;rsquo;t have two.
However, we use &lt;code&gt;=&lt;/code&gt; for &lt;code&gt;role&lt;/code&gt; because that doesn&amp;rsquo;t exist in &lt;code&gt;CORE_MODEL&lt;/code&gt; and we&amp;rsquo;d like &lt;code&gt;SOLVER_RESULT&lt;/code&gt; to include everything in &lt;code&gt;SELECTIONS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, I included the new &lt;code&gt;SELECTIONS&lt;/code&gt; signature in the interface file for the &lt;code&gt;Selections&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;selections.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;General&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface_uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CORE_MODEL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SELECTIONS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command_name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;With this change, anything that uses &lt;code&gt;SELECTIONS&lt;/code&gt; can work with both loaded selections and with the solver output, even though they have different implementations.
For example, the &lt;code&gt;Tree&lt;/code&gt; module generates a tree (for display) from a selections dependency graph (pruning loops and diamonds).
It&amp;rsquo;s now a functor, which can be used with either.
For example, &lt;code&gt;0install show selections.xml&lt;/code&gt; applies it to the &lt;code&gt;Selections&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SelectionsTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Selections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SelectionsTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_tree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The same code is used in the GUI to render the tree view, but now with &lt;code&gt;Make(Solver.Model)&lt;/code&gt;.
As before, it&amp;rsquo;s important to preserve the types - the GUI needs to know that each node in the tree is a &lt;code&gt;Solver.Model.Role.t&lt;/code&gt; so that it can show information about the available candidates, for example.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;An important function of a package manager is finding a set of package versions that are compatible.
An efficient way to do this is to express the necessary and sufficient constraints as a set of boolean equations and then use a SAT solver to find a solution.
While finding a valid solution is easy, finding the optimal one can be harder.
Because 0install is able to install libraries in parallel and can choose to use different versions for different applications, it only needs to consider one application at a time.
As well as being faster, this makes it possible to use a simple definition of optimality that is easy to compute.&lt;/p&gt;

&lt;p&gt;0install&amp;rsquo;s existing solver code has already been broken down into modular components: downloading metadata, collecting candidates, rejecting invalid candidates and ranking the rest, building the SAT problem and solving it.
However, the code that builds the SAT problem and optimises the solution was tightly coupled to the concrete representation, making it harder to see what it was doing and harder to extend it with new features.
Its type signature essentially just said that it takes XML as input and returns XML as output.&lt;/p&gt;

&lt;p&gt;OCaml functors are functions over modules.
They allow a module to declare the interface it expects from its dependencies in an abstract way, providing just the information the module requires and nothing else.
The module can then be compiled against this abstract interface, ensuring that it makes no assumptions about the actual types.
Later, the functor can be applied to the concrete representation to get a module that uses the concrete types.&lt;/p&gt;

&lt;p&gt;Turning the existing solver code into a functor turned out to be a simple iterative process that discovered the existing implicit API between the solver and the rest of the code.
Once this abstract API had been found, many possible improvements became obvious.
The new solver core is both simpler than the original and can be understood on its own without looking at the rest of the code.
It is also more flexible: we could now add support for source dependencies, cross-compilation, etc, without changing the core of the solver.
The challenge now is only how to express these things in the XML format.&lt;/p&gt;

&lt;p&gt;In a language without functors, such as Java, we could still define the solver to work over abstract interfaces, but the results returned would also be abstract, which is not useful.
Trying to achieve the same effect as functors using generics appears very difficult and the resulting code would likely be hard to read.&lt;/p&gt;

&lt;p&gt;Splitting up the abstract interface into multiple module types allowed parts of the interface to be shared with the separate selections-handling module.
This in turn allowed another module - for turning selections into trees - to become a functor that could also work directly on the solver results.
Finally, it made the relationship between the solver results and the selections type clear - solver results are selections plus diagnostics information.&lt;/p&gt;

&lt;p&gt;The code discussed in this post can be found at &lt;a href=&quot;https://github.com/0install/0install&quot;&gt;https://github.com/0install/0install&lt;/a&gt;.&lt;/p&gt;

</content><id>http://roscidus.com/blog/blog/2014/09/17/simplifying-the-solver-with-functors/</id><title type="text">Simplifying the solver with functors</title><updated>2014-09-17T10:55:11+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2014/08/15/optimising-the-unikernel/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;After &lt;a href=&quot;http://roscidus.com/blog/blog/2014/07/28/my-first-unikernel/&quot;&gt;creating my REST queuing service as a Mirage unikernel&lt;/a&gt;, I reported that it could serve the data at 2.46 MB/s from my ARM CubieTruck dev board.
That&amp;rsquo;s fast enough for my use (it&amp;rsquo;s faster than my Internet connection), but I was curious why it was slower than the Linux guest, which serves files with &lt;code&gt;nc&lt;/code&gt; at 20 MB/s.&lt;/p&gt;



&lt;p&gt;( this post also appeared on &lt;a href=&quot;https://news.ycombinator.com/item?id=8206882&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;http://www.reddit.com/r/programming/comments/2e7jbx/optimising_the_unikernel_thomas_leonards_blog/&quot;&gt;Reddit&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-tcp-test-case&quot;&gt;The TCP test-case&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#compiler-optimisations&quot;&gt;Compiler optimisations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#profiling-support&quot;&gt;Profiling support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#profiling-the-console&quot;&gt;Profiling the console&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#profiling-udp&quot;&gt;Profiling UDP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#profiling-tcp&quot;&gt;Profiling TCP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#profiling-disk-access&quot;&gt;Profiling disk access&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#update-linux-is-slow-too&quot;&gt;Update: Linux is slow too!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#profiling-the-queuing-service&quot;&gt;Profiling the queuing service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The TCP test-case&lt;/h2&gt;

&lt;p&gt;To avoid confusing things by testing the disk and the network at the same time, I made a simpler test case that waits for a TCP connection
and transmits a pre-allocated buffer multiple times:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;unikernel.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CONSOLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STACKV4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Io_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pages&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Io_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_cstruct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen_tcpv4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warmups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lenv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;TCPV4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writev&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warmups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;TCPV4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Wrote %d bytes in %.3f seconds (%.2f KB/s)&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float_of_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Profile.time&lt;/code&gt; just runs the function and returns how long it took in seconds.
I do a few warm-up iterations at the start because TCP starts slowly and we don&amp;rsquo;t want to benchmark that.&lt;/p&gt;

&lt;h2&gt;Compiler optimisations&lt;/h2&gt;

&lt;p&gt;While looking at the assembler output during some earlier debugging, I&amp;rsquo;d noticed that gcc was generating very poor code. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0041a550 &amp;lt;_xmalloc&amp;gt;:
  41a550:	e92d4800 	push	{fp, lr}
  41a554:	e28db004 	add	fp, sp, #4
  41a558:	e24dd028 	sub	sp, sp, #40	; 0x28
  41a55c:	e50b0028 	str	r0, [fp, #-40]	; 0x28
  41a560:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
  41a564:	e3a03000 	mov	r3, #0
  41a568:	e50b300c 	str	r3, [fp, #-12]
  41a56c:	e3a03010 	mov	r3, #16
  41a570:	e50b3014 	str	r3, [fp, #-20]
  41a574:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
  41a578:	e3a01004 	mov	r1, #4
  41a57c:	ebffff5d 	bl	41a2f8 &amp;lt;align_up&amp;gt;
  41a580:	e50b002c 	str	r0, [fp, #-44]	; 0x2c
  41a584:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gcc is using registers very inefficiently here.
For example, it stores &lt;code&gt;r1&lt;/code&gt; to &lt;code&gt;[fp, #-44]&lt;/code&gt; and then a few lines later loads from there into &lt;code&gt;r0&lt;/code&gt;, when it could just have moved it directly.
The last two lines show it saving &lt;code&gt;r0&lt;/code&gt; to the stack and then immediately loading it back again into the same register!&lt;/p&gt;

&lt;p&gt;The fix here turned out to be simple.
Mini-OS by default compiles in debug mode with no optimisations.
Compiling with &lt;code&gt;debug=n&lt;/code&gt; fixes this, and I &lt;a href=&quot;https://github.com/mirage/mirage-xen-minios/pull/4&quot;&gt;updated mirage-xen-minios&lt;/a&gt; to do this.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Optimisations&lt;/th&gt;
      &lt;th&gt;TCP download speed&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;6.92 MB/s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-O3&lt;/td&gt;
      &lt;td&gt;11.93 MB/s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Even though Mirage is almost all OCaml, it does use Mini-OS&amp;rsquo;s C functions for various low-level operations and these optimisations make a big difference!&lt;/p&gt;

&lt;h2&gt;Profiling support&lt;/h2&gt;

&lt;p&gt;The OCaml compiler provides a profiling option, which works the same way as gcc&amp;rsquo;s &lt;code&gt;-pg&lt;/code&gt; option for C code.
To enable it, you add &lt;code&gt;true: profile&lt;/code&gt; to your &lt;code&gt;_tags&lt;/code&gt; file and rebuild.&lt;/p&gt;

&lt;p&gt;I decided to see what would happen if I enabled this for my Xen unikernel:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_build/main.native.o: In function `caml_program':
:(.text+0x2): undefined reference to `__gnu_mcount_nc'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Profiling works by inserting a call to &lt;code&gt;__gnu_mcount_nc&lt;/code&gt; at the start of every function.
It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00000000 &amp;lt;caml_program&amp;gt;:
   0:       b500            push    {lr}
   2:       f7ff fffe       bl      0 &amp;lt;__gnu_mcount_nc&amp;gt;
   ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;__gnu_mcount_nc&lt;/code&gt; function gets the address of the callee function (&lt;code&gt;caml_program&lt;/code&gt; in this example) in the link register (&lt;code&gt;lr&lt;/code&gt;/&lt;code&gt;r14&lt;/code&gt;) and the address of its caller on the stack (pushed by the code fragment above).
Normally, the profiler would use this information to build up a static call graph (saying which functions call which other functions).
Using a regular timer interrupt to sample the program counter it can estimate how much time was spent in each function,
and using the call graph it can show cumulative totals (time spent in each function plus time spent in its children).&lt;/p&gt;

&lt;p&gt;I decided to start with something a bit simpler.
I wrote &lt;a href=&quot;https://github.com/talex5/xen/blob/8f786348db50611e1251dc3ed505bdf5bb388fe9/extras/mini-os/arch/arm/arm32.S#L330&quot;&gt;some ARM code&lt;/a&gt; for &lt;code&gt;__gnu_mcount_nc&lt;/code&gt; that simply writes the caller, callee and current time to a trace buffer (when the buffer is full, it stops tracing).
Ideally, I&amp;rsquo;d like to get notified each time we leave a function too.
gcc can do that for C code with its &lt;code&gt;-finstrument-functions&lt;/code&gt; option, but I didn&amp;rsquo;t see an option for that in OCaml.
Instead, I assume that every function runs until I see a call whose caller is not its parent.
This works surprisingly well, though it does mean that if a function seems to take a long time you need to check its parents too,
and it might get confused for recursive calls.
Also, for tail calls, we see the parent as the function we will return to rather than the function that actually called us.&lt;/p&gt;

&lt;p&gt;At the end, I dump out the trace buffer to the console with some OCaml code.
Back on my laptop, I wrote some code to parse this output and look up each address in the ELF image to get the function name for each address.
(This code isn&amp;rsquo;t public yet as it needs a lot of cleaning up.)&lt;/p&gt;

&lt;p&gt;One thing I quickly discovered: compiling just the unikernel with profiling isn&amp;rsquo;t sufficient.
As soon as you call a non-profiled function it can no longer construct the call graph and the results are useless.
I manually recompiled every C and OCaml library I was using with profiling, which was quite tedious.&lt;/p&gt;

&lt;p&gt;Update: Thomas Gazagnaire has added an &lt;a href=&quot;https://github.com/ocaml/opam-repository/pull/2479&quot;&gt;OPAM profiling switch&lt;/a&gt; which should make this much easier in future.&lt;/p&gt;

&lt;p&gt;Initially, the trace buffer filled up almost instantly with calls to &lt;code&gt;stub_evtchn_test_and_clear&lt;/code&gt;.
It seems that we call this once for each of the 4096 channels every time we look for work.
To avoid clutter, I reduced the number of event channels to 10 (this had no noticeable effect on performance).
I also tried removing the &lt;code&gt;memset&lt;/code&gt; which zeroes out newly allocated IO pages.
This also made no difference.&lt;/p&gt;

&lt;p&gt;I measured the overhead added by the tracing, both when compiled in but inactive and when actively writing to the trace buffer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/tracing-overhead.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;So, not too bad.&lt;/p&gt;

&lt;h2&gt;Profiling the console&lt;/h2&gt;

&lt;p&gt;The TCP code&amp;rsquo;s trace was quite complicated, so I decided to start by profiling the much simpler console device,
which I&amp;rsquo;d noticed was surprisingly slow at dumping the trace results.&lt;/p&gt;

&lt;p&gt;A Xen virtual console is a pair of ring buffers (one for input from the keyboard, one for output to the screen) in a shared memory page, defined like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;console.h &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xencons_interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;XENCONS_RING_IDX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;XENCONS_RING_IDX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re only interested in the &amp;ldquo;out&amp;rdquo; side here.
The producer (i.e. our unikernel) writes the data to the buffer and advances the &lt;code&gt;out_prod&lt;/code&gt; counter.
The consumer (&lt;code&gt;xenconsoled&lt;/code&gt;, running in Dom0) reads the data and advances &lt;code&gt;out_cons&lt;/code&gt;.
If the consumer catches up with the producer it sleeps until the producer notifies it there is more data.
If the producer catches up with the consumer (the buffer is full) it sleeps until the consumer notifies it there is space available again.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s my console test-case - writing a string to the console in a loop:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CONSOLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'X'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;(* Warm up *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Wrote %d bytes in %.3f seconds (%.2f KB/s)&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float_of_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I got around 45 KB/s. The trace output looked like this:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Start&lt;/th&gt;
      &lt;th&gt;Function&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Duration&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118684&lt;/td&gt;
      &lt;td&gt;- - &lt;code&gt;camlUnikernel__loop_1270&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;219&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118730&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; &lt;code&gt;camlConsole__write_all_low_1123&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;158&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118737&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - &lt;code&gt;camlRing__repeat_1279&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;89&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118739&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &lt;code&gt;camlRing__write_1270&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;87&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118830&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - &lt;code&gt;camlEventchn__fun_1138&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;58&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118831&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &lt;code&gt;stub_evtchn_notify&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;57&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118907&lt;/td&gt;
      &lt;td&gt;- - &lt;code&gt;camlUnikernel__loop_1270&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;211&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118944&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; &lt;code&gt;camlConsole__write_all_low_1123&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;168&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118951&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - &lt;code&gt;camlRing__repeat_1279&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;118953&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &lt;code&gt;camlRing__write_1270&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;119054&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - &lt;code&gt;camlEventchn__fun_1138&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;58&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;119055&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &lt;code&gt;stub_evtchn_notify&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;57&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The start time and duration are measured in counter clock ticks, and the counter is running at 24 MHz.
The &lt;code&gt;--&amp;gt;--&amp;gt;--&amp;gt;&lt;/code&gt; indicates the level of nesting (I vary the character to make it easier to scan vertically with the eye).
The output shows two iterations of the loop taken from the middle of the sample.
To make the output more readable, my analysis script prunes the tree at calls that took less than 50 ticks, and removes calls to the Lwt library (while still showing the functions they called as a result).
The durations include the times for their children (including pruned children).&lt;/p&gt;

&lt;p&gt;You can see that on each iteration we call &lt;code&gt;Console.write_all_low&lt;/code&gt;, which writes the string to the shared memory ring and notifies the console daemon in Dom0.
Each iteration is taking roughly 200 ticks, which is about 8 us per iteration.
So we&amp;rsquo;d expect the speed to be around 6 bytes / 8 us, which is about 700 KB/s.&lt;/p&gt;

&lt;p&gt;Looking at the cumulative time spent in each function, the top entries are:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Function&lt;/th&gt;
      &lt;th&gt;Ticks (at 24 MHz)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;caml_c_call&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;9002738&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;caml_block_domain&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;9001576&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;block_domain&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;9001462&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;camlUnikernel__loop_1270&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;374418&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;camlConsole__write_all_low_1123&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;298735&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Note: the trace only includes calls until the trace buffer was full, so these aren&amp;rsquo;t the total times for the whole run.
But we can immediately see that we spent most of the time in &lt;code&gt;block_domain&lt;/code&gt;, which is what Mirage calls when it has nothing to do and is waiting for an external event.
Here&amp;rsquo;s a graph showing how many iterations of the test loop we had started over time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/xen-console-messages.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;So, we wrote 679 messages very quickly, then waited a long time, then wrote 1027 more, then waited again, etc.
I thought there might be a bug in &lt;code&gt;block_domain&lt;/code&gt; causing it to miss a wake-up event, so I limited the time it would spend blocking.
It didn&amp;rsquo;t make any difference; it would keep waking up, seeing that it had nothing to do, and going back to sleep again.&lt;/p&gt;

&lt;p&gt;In case the problem was with Mirage&amp;rsquo;s implementation of the shared rings or console device,
I tried writing the same test directly in C in Mini-OS&amp;rsquo;s &lt;code&gt;test.c&lt;/code&gt; and got the same result (I had to modify it slightly because by default Mini-OS&amp;rsquo;s &lt;code&gt;console_print&lt;/code&gt; discards data when the buffer is full instead of waiting).
Finally, I tried it from a Linux guest and got 25 KB/s (interestingly, Linux uses 100% CPU while doing this).
The times were highly variable (each point on this plot is from writing the message 10,000 times and calculating the average):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/xen-console-speed.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;After some investigation, it turned out that Xen was deliberately limiting the rate:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;xen/tools/console/daemon/io.c &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* How many events are allowed in each time period */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define RATE_LIMIT_ALLOWANCE 30&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Duration of each time period in ms */&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define RATE_LIMIT_PERIOD 200&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Mystery solved, although I don&amp;rsquo;t know why the rates are so variable.
Mirage wasn&amp;rsquo;t doing anything except running the test case and Linux was booted with &lt;code&gt;init=/bin/bash&lt;/code&gt;, so there was nothing else running there either.&lt;/p&gt;

&lt;p&gt;Lessons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Just scrolling through the raw trace can be misleading. It appears that it keeps calling the loop function, but in fact almost all the time was spent in the two very rare &lt;code&gt;block_domain&lt;/code&gt; calls. Graphing iterations over time can show these problems effectively.&lt;/li&gt;
  &lt;li&gt;Compare with the speed on Linux. Sometimes, Xen really is that slow and it&amp;rsquo;s not our fault.&lt;/li&gt;
  &lt;li&gt;Compile everything for profiling or the results aren&amp;rsquo;t much use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Profiling UDP&lt;/h2&gt;

&lt;p&gt;TCP involves ack packets, expanding windows and other complications, so I next looked at the simpler &lt;a href=&quot;http://en.wikipedia.org/wiki/User_Datagram_Protocol&quot;&gt;UDP&lt;/a&gt; protocol.
Here, we can throw packets out continuously without worrying about the other end.&lt;/p&gt;

&lt;p&gt;With a payload size of 1476 bytes (the maximum possible for UDP), I got 17 MB/s.
All packets were successfully received on my laptop.
My Linux guest got 13.4 MB/s with &lt;code&gt;nc -u &amp;lt; /dev/zero&lt;/code&gt;, so we&amp;rsquo;re actually faster!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a sample iteration from the trace:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Start&lt;/th&gt;
      &lt;th&gt;Function&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Duration&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;243418&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - &lt;code&gt;camlUnikernel__loop_1287&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;938&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;243436&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &lt;code&gt;camlUdpv4__fun_1430&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;266&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;243439&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; &lt;code&gt;camlIpv4__allocate_frame_1369&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;190&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;243440&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; - &lt;code&gt;camlIo_page__get_1122&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;72&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;243632&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; &lt;code&gt;camlIpv4__fun_1509&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;69&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;243818&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &lt;code&gt;camlNetif__fun_2893&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;185&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;243852&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; &lt;code&gt;camlNetif__fun_2618&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;103&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;243895&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; - &lt;code&gt;camlLwt_ring__fun_1223&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;58&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;244007&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &lt;code&gt;camlNetif__fun_2931&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;132&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;244009&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; &lt;code&gt;camlNetif__xmit_1509&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;123&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;244028&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; - &lt;code&gt;camlNetif__fun_2618&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;76&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;244141&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &lt;code&gt;camlNetif__fun_2958&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;177&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;244144&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; &lt;code&gt;camlRing__push_requests_and_check_notify_1112&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;174&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;244150&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; - &lt;code&gt;camlRing__sring_push_requests_1070&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;158&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;244151&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; - - &lt;code&gt;caml_memory_barrier&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;77&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;244231&lt;/td&gt;
      &lt;td&gt;- - &amp;gt; - - &amp;gt; - - &lt;code&gt;caml_memory_barrier&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;77&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here&amp;rsquo;s a graph of loop iterations (packets sent) over time (each blue dot is one packet sent):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/udp-packets.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The gaps indicate places where we were not sending packets.
The garbage collector shows up twice in the trace (both times in &lt;code&gt;Ring.ack_responses&lt;/code&gt; oddly).
However, we spend more time in &lt;code&gt;block_domain&lt;/code&gt; than doing GC, indicating that we&amp;rsquo;re often waiting for Xen.
Looking at the trace just before it blocks, I see calls to &lt;code&gt;Netif.wait_for_free_tx&lt;/code&gt;, which seems reasonable.&lt;/p&gt;

&lt;h2&gt;Profiling TCP&lt;/h2&gt;

&lt;p&gt;The TCP header is larger than the UDP one, making it less efficient even in the best case,
and TCP needs to process acks, keep track of window sizes, and handle retransmissions.
Strange, then, that the Linux guest manages 39 MB/s over TCP compared with just 13.4 MB/s for UDP!
(even stranger is that I got 47.2 MB/s for Linux when I tried it for last
month&amp;rsquo;s post; however I am using a different version of Linux in dom0 now)&lt;/p&gt;

&lt;p&gt;I capture some packets sent by the Linux guest using &lt;code&gt;tshark&lt;/code&gt; running in Dom0.
Loading it into Wireshark on my laptop, I see that all the TCP checksums are wrong, so it
looks like Linux is using TCP checksum offloading.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;http://lists.xen.org/archives/html/xen-devel/2013-12/msg00884.html&quot;&gt;Question about TCP checksum offload in Xen&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A domain has no way of knowing how any given packet is going to leave the host (or even if it is) so it can&amp;rsquo;t know ahead of time whether to calculate any checksums: the skb&amp;rsquo;s [socket buffers] are just marked with &amp;ldquo;checksum needed&amp;rdquo; as usual and either the egress NIC will do the job or dom0 will do it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Getting this working on Mirage was a bit tricky.
The TCP layer can avoid adding the checksum only if the network device says it&amp;rsquo;s capable of doing it itself, and packets have to be flagged as needing the checksum.
You can&amp;rsquo;t just flag all packets because the Linux dom0 silently drops non-TCP/UDP packets with it set (e.g. ARP packets).
I hacked something together and got a modest speed improvement.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a graph for the TCP test, where each iteration of the loop is sending one TCP packet (segment):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/tcp-packets.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Note: we send many warm up packets before starting the trace as TCP starts slowly (which looks pretty but isn&amp;rsquo;t relevant here).&lt;/p&gt;

&lt;p&gt;Zooming in, the picture is quite interesting (where it had gaps, I searched for a typical function that occurred in the gap and added a symbol for it):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/tcp-packets-zoom.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;It looks like we start by transmitting packets steadily, until the current window is full.
Then we start buffering the packets instead of sending them, which is very fast.
At some point the TCP system stops accepting more data, which causes the main loop to block, allowing us to process other events.
&lt;code&gt;rx_poll response&lt;/code&gt; indicates one iteration of the &lt;code&gt;Netif.rx_poll&lt;/code&gt; loop, which seems to be dealing with acks from Xen saying that our packets have been transmitted (and the memory can therefore be recycled).
After a while, the TCP ack packets arrive and we process them, which opens up the transmit window again.
Then we send out the buffered packets, before returning to the main loop.&lt;/p&gt;

&lt;p&gt;So, in each cycle we spend about 60% of the time transmitting packets, a quarter dealing with acks from Xen and the rest handling TCP acks from the remote host.
It might be possible to optimise things a bit here by reusing grant references, but I didn&amp;rsquo;t investigate further.&lt;/p&gt;

&lt;h2&gt;Profiling disk access&lt;/h2&gt;

&lt;p&gt;My next test case reads a series of sectors sequentially from the disk and then writes them. Reading or writing one sector (4096 bytes) at a time was very slow (2.7 MB/s read, 0.7 MB/s write).
Using larger buffers, so that we transfer more in each operation, helped but even at 64 sectors per op I only got 12.3 MB/s read / 5.12 MB/s write (the device is capable of 20 MB/s read and 10 MB/s write).
Here&amp;rsquo;s a trace where we read using 32-sector buffers (10.9 MB/s):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/block-reads-1-32.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;We spend a lot of time waiting for each block to arrive, although there are some curious ack messages, which we deal with quickly.
What if we have two requests in flight at once?
This gets us 18.27 MB/s:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/block-reads-2-32.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Strangely, the two blocks arrive close together.
Although it takes us longer to get the first one (I don&amp;rsquo;t know why), we get them more quickly after that.
Having three requests in flight doesn&amp;rsquo;t help though (18.25 MB/s):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/block-reads-3-32.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Looking at the block driver code, it batches requests into groups of 11. This probably explains why 32 sectors-per-read did well - it&amp;rsquo;s very close to 33.&lt;/p&gt;

&lt;p&gt;For writing, the number of requests in flight makes little difference, but writing 8 sectors in each request is by far the best (7 MB/s).&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t understand why we&amp;rsquo;re not getting the full speed of the card here, since we&amp;rsquo;re spending most of the time blocking.
However, we are pretty close (18r/7w out of a possible 20r/10w), which is good enough for today.&lt;/p&gt;

&lt;h3&gt;Update: Linux is slow too!&lt;/h3&gt;

&lt;p&gt;I originally tested with &lt;code&gt;hdparm&lt;/code&gt;, which reports about 20 MB/s as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hdparm -t /dev/mmcblk0
 Timing buffered disk reads:  62 MB in  3.07 seconds =  20.21 MB/sec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But testing with &lt;code&gt;dd&lt;/code&gt;, I don&amp;rsquo;t get this speed.
&lt;code&gt;dd&lt;/code&gt;&amp;rsquo;s speed seems to depend a lot on the block size. Using &lt;code&gt;4096 * 11&lt;/code&gt; bytes (which I assume is what dom0 would do in response to a single guest request), I get just 16.9 MB/s:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dd iflag=direct if=/dev/vg0/bench of=/dev/null bs=45056 count=1000
1000+0 records in
1000+0 records out
45056000 bytes (45 MB) copied, 2.65911 s, 16.9 MB/s
&lt;/code&gt;&lt;/pre&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Block size (pages)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Linux dom0&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Linux domU&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;17.0 MB/s&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14.5 MB/s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18.8 MB/s&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16.3 MB/s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;32&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20.8 MB/s&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18.6 MB/s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So perhaps Mirage is doing pretty well already - it&amp;rsquo;s about as fast as the Linux guest.
Xen seems to be the limiting factor here, because it doesn&amp;rsquo;t allow us to make large enough requests.&lt;/p&gt;

&lt;h2&gt;Profiling the queuing service&lt;/h2&gt;

&lt;p&gt;Finally, I looked at applying all this new information to my queuing service.
As a baseline, &lt;code&gt;wget&lt;/code&gt; reports that I can currently download from it at 4.6 MB/s, with profiling compiled in but disabled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/http-download1.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s some complicated copying going on because we&amp;rsquo;re using the HTTP Chunked encoding, which writes the size of each chunk of data followed by the data itself, then the next chunk, etc.
Since we know the length at the start, we can use the simpler Fixed encoding.
This increases the speed to 5.2 MB/s.
It&amp;rsquo;s a shame the HTTP API uses strings everywhere: we have to copy the data from the disk buffer to a string on the heap to give it to the HTTP API, which then copies it back into a new buffer to send it to the network card.
If it took a stream of buffers, we could just pass them straight through.&lt;/p&gt;

&lt;p&gt;Finally, I added the read-ahead support from the block profiling above, which increased the speed to 6.8 MB/s.
Here&amp;rsquo;s the new graph, showing that we&amp;rsquo;re sending packets much faster (note the change in the Y-scale):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/mirage-profiling/http-download2.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I used a queue length of 5, with 33 sectors per request. I tried increasing it to 10, but that caused more GC work.&lt;/p&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Even the unoptimised service is faster than my current (ADSL) Internet connection, so optimising it isn&amp;rsquo;t currently necessary, but it&amp;rsquo;s interesting to look at performance and get a feel for where the bottlenecks are.&lt;/p&gt;

&lt;p&gt;Mirage doesn&amp;rsquo;t have any specific profiling support, but the fact that the whole OS is a single executable makes profiling it quite easy.
OCaml&amp;rsquo;s &lt;code&gt;profile&lt;/code&gt; option isn&amp;rsquo;t a perfect fit for tracing because it doesn&amp;rsquo;t record when a function finishes, but you can still get useful results from it.
Graphing some metric (e.g. packets sent) over time seemed the most useful way to look at the data.
I&amp;rsquo;m currently just using libreoffice&amp;rsquo;s chart tool, but I should probably find something more suitable.
It would be great to be able to zoom in easily, show durations (not just events), filter the trace display easily, etc.
I&amp;rsquo;d also like support for following Lwt threads even when they block.
Recommendations for good visualisation tools welcome!&lt;/p&gt;

&lt;p&gt;Writing to the Xen console from Mirage is slow because &lt;code&gt;xenconsoled&lt;/code&gt; rate limits us. Mirage still gets better performance than Linux though, and uses far less CPU (looks like Linux is just spinning). My UDP test kernel sent data faster than Linux&amp;rsquo;s &lt;code&gt;nc&lt;/code&gt; utility (probably because &lt;code&gt;nc&lt;/code&gt; made a poor choice of payload size). Linux does very well on TCP. I don&amp;rsquo;t know why it&amp;rsquo;s so fast. Using Xen&amp;rsquo;s TCP checksum offloading does help a bit though. SD card performance on Mirage is close to what the hardware supports when I choose the right request size and keep two requests in flight at once. It&amp;rsquo;s surprising we don&amp;rsquo;t manage the full speed, though. For networking and disk access, managing Xen&amp;rsquo;s grant refs for the shared memory pages seems to take up a lot of time - maybe there are ways to optimise that.&lt;/p&gt;

&lt;p&gt;With a few modifications (TCP checksum offload, HTTP fixed encoding, keeping multiple disk reads in flight and using optimal buffer sizes), I increased the download speed of my test service running on my ARM dev board from 2.46 MB/s to 7.24 MB/s (when compiled without profiling).
I&amp;rsquo;m sure people more familiar with Mirage will have more suggestions.&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2014/08/15/optimising-the-unikernel/</id><title type="text">Optimising the unikernel</title><updated>2014-08-15T13:05:27+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2014/07/28/my-first-unikernel/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;I wanted to make a simple REST service for queuing file uploads, deployable as a virtual machine. The traditional way to do this is to download a Linux cloud image, install the software inside it, and deploy that. Instead I decided to try a &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2566628&quot;&gt;unikernel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unikernels promise some interesting benefits. The Ubuntu 14.04 amd64-disk1.img cloud image is 243 MB unconfigured, while the unikernel ended up at just 5.2 MB (running the queue service). Ubuntu runs a large amount of C code in security-critical places, while the unikernel is almost entirely type-safe OCaml. And besides, trying new things is fun.&lt;/p&gt;



&lt;p&gt;( this post also appeared on &lt;a href=&quot;http://www.reddit.com/r/programming/comments/2c1soi/my_first_unikernel_created_in_ocaml_and_mirage/&quot;&gt;Reddit&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=8109485&quot;&gt;Hacker News&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#introduction&quot;&gt;Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#a-hello-world-kernel&quot;&gt;A hello world kernel&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#using-mirage-libraries&quot;&gt;Using Mirage libraries&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-mirage-unix-libraries&quot;&gt;The mirage-unix libraries&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-mirage-tool&quot;&gt;The &lt;code&gt;mirage&lt;/code&gt; tool&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#test-case&quot;&gt;Test case&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#storage&quot;&gt;Storage&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#implementation&quot;&gt;Implementation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#unit-testing-the-storage-system&quot;&gt;Unit-testing the storage system&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-http-server&quot;&gt;The HTTP server&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#buffered-reads&quot;&gt;Buffered reads&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#streaming-uploads&quot;&gt;Streaming uploads&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#buffered-writes&quot;&gt;Buffered writes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#upload-speed-on-xen&quot;&gt;Upload speed on Xen&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#tcp-retransmissions&quot;&gt;TCP retransmissions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#adding-a-block-cache&quot;&gt;Adding a block cache&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#replacing-fat&quot;&gt;Replacing FAT&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regular readers will know that a few months ago I began a new job at Cambridge University.
Working for an author of Real World OCaml and leader of OCaml Labs, on a project building pure-OCaml distributed systems, who found me through my blog posts about learning OCaml, I thought they might want me to write some OCaml.&lt;/p&gt;

&lt;p&gt;But no.
They&amp;rsquo;ve actually had me &lt;a href=&quot;http://openmirage.org/blog/introducing-xen-minios-arm&quot;&gt;porting the tiny Mini-OS kernel to ARM&lt;/a&gt;, using a mixture of C and assembler, to let &lt;a href=&quot;http://openmirage.org/&quot;&gt;the Mirage unikernel&lt;/a&gt; run on ARM devices.
Of course, I got curious and wanted to write a Mirage application for myself&amp;hellip;&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Linux, like many popular operating systems, is a &lt;em&gt;multi-user&lt;/em&gt; system.
This design dates back to the early days of computing, when a single expensive computer, running a single OS, would be shared between many users.
The goal of the kernel is to protect itself from its users, and to protect the users from each other.&lt;/p&gt;

&lt;p&gt;Today, computers are cheap and many people own several.
Even when a physical computer is shared (e.g. in cloud computing), this is typically done by running multiple virtual machines, each serving a single user.
Here, protecting the OS from its (usually single) application is pointless.&lt;/p&gt;

&lt;p&gt;Removing the security barrier between the kernel and the application greatly simplifies things;
we can run the whole system (kernel + application) as a single, privileged, executable - a &lt;em&gt;unikernel&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And while we&amp;rsquo;re rewriting everything anyway, we might as well replace C with a modern memory safe language, eliminating whole classes of bugs and security vulnerabilities, allowing decent error reporting, and providing structured data types throughout.&lt;/p&gt;

&lt;p&gt;In the past, two things have made writing a completely new OS impractical:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Legacy applications won&amp;rsquo;t run on it.&lt;/li&gt;
  &lt;li&gt;It probably won&amp;rsquo;t support your hardware.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Virtualisation removes both obstacles:
legacy applications can run in their own legacy VMs, and
drivers are only needed for the virtual devices - e.g.
a single network driver and a single block driver will cover all real network cards and hard drives.&lt;/p&gt;

&lt;h3&gt;A hello world kernel&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;mirage tutorial&lt;/a&gt; starts by showing the easy, fully-automated way to build a unikernel.
If you want to get started quickly you may prefer to read that and skip this section, but since one of the advantages of unikernels is their relative simplicity, let&amp;rsquo;s do things the &amp;ldquo;hard&amp;rdquo; way first to understand how it works behind the scenes.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the normal &amp;ldquo;hello world&amp;rdquo; program in OCaml:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;hw.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;To compile and run as a normal application, we&amp;rsquo;d do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ocamlopt hw.ml -o hw
$ ./hw 
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How can we make a unikernel that does the equivalent?
As it turns out, the above code works unmodified (though the Mirage people might frown at you for doing it this way).
We compile hw.ml to a &lt;code&gt;hw.native.o&lt;/code&gt; file and then link with the unikernel libraries instead of the standard C library:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export OPAM_DIR=$(opam config var prefix)
$ export PKG_CONFIG_PATH=$OPAM_DIR/lib/pkgconfig
$ ocamlopt -output-obj -o hw.native.o hw.ml
$ ld -d -static -nostdlib --start-group \
    $(pkg-config --static --libs openlibm libminios-xen) \
    hw.native.o \
    $OPAM_DIR/lib/mirage-xen/libocaml.a \
    $OPAM_DIR/lib/mirage-xen/libxencaml.a \
    --end-group \
    $(gcc -print-libgcc-file-name) \
    -o hw.xen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a kernel image, &lt;code&gt;hw.xen&lt;/code&gt;, which can be booted as a VM under the &lt;a href=&quot;http://www.xenproject.org/developers/teams/hypervisor.html&quot;&gt;Xen hypervisor&lt;/a&gt; (as used by Amazon, Rackspace, etc to host VMs). But first, let&amp;rsquo;s look at the libraries we added:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;openlibm&lt;/dt&gt;
  &lt;dd&gt;This is a standard maths library. It provides functions such as &lt;code&gt;sin&lt;/code&gt;, &lt;code&gt;cos&lt;/code&gt;, etc.&lt;/dd&gt;
  &lt;dt&gt;libminios-xen&lt;/dt&gt;
  &lt;dd&gt;This provides the architecture-specific boot code, a &lt;code&gt;printk&lt;/code&gt; function for debugging, &lt;code&gt;malloc&lt;/code&gt; for allocating memory and some low-level functions for talking to Xen.&lt;/dd&gt;
  &lt;dt&gt;libocaml.a&lt;/dt&gt;
  &lt;dd&gt;The OCaml runtime (the garbage collector, etc).&lt;/dd&gt;
  &lt;dt&gt;libxencaml.a&lt;/dt&gt;
  &lt;dd&gt;OCaml bindings for libminios and some boot code.&lt;/dd&gt;
  &lt;dt&gt;libgcc.a&lt;/dt&gt;
  &lt;dd&gt;Support functions for code that gcc generates (actually, not needed on x86).&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;To deploy the new unikernel, we create a Xen configuration file for it (here, I&amp;rsquo;m giving it 16 MB of RAM):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;hw.xl &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hw'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hw.xen'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;on_crash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'preserve'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;on_poweroff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'preserve'&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Setting &lt;code&gt;on_crash&lt;/code&gt; and &lt;code&gt;on_poweroff&lt;/code&gt; to &lt;code&gt;preserve&lt;/code&gt; lets us see any output or errors, which would otherwise be missed if the VM exits too quickly.&lt;/p&gt;

&lt;p&gt;We can now boot our new VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xl create -c hw.xl
Xen Minimal OS!
  start_info: 000000000009b000(VA)
    nr_pages: 0x800
  shared_inf: 0x6ee97000(MA)
     pt_base: 000000000009e000(VA)
nr_pt_frames: 0x5
    mfn_list: 0000000000097000(VA)
   mod_start: 0x0(VA)
     mod_len: 0
       flags: 0x0
    cmd_line: 
       stack: 0000000000055e00-0000000000075e00
Mirage: start_kernel
MM: Init
      _text: 0000000000000000(VA)
     _etext: 000000000003452d(VA)
   _erodata: 000000000003c000(VA)
     _edata: 000000000003e4d0(VA)
stack start: 0000000000055e00(VA)
       _end: 0000000000096d64(VA)
  start_pfn: a6
    max_pfn: 800
Mapping memory range 0x400000 - 0x800000
setting 0000000000000000-000000000003c000 readonly
skipped 0000000000001000
MM: Initialise page allocator for a8000(a8000)-800000(800000)
MM: done
Demand map pfns at 801000-2000801000.
Initialising timer interface
Initialising console ... done.
gnttab_table mapped at 0000000000801000.
xencaml: app_main_thread
getenv(OCAMLRUNPARAM) -&amp;gt; null
getenv(CAMLRUNPARAM) -&amp;gt; null
Unsupported function lseek called in Mini-OS kernel
Unsupported function lseek called in Mini-OS kernel
Unsupported function lseek called in Mini-OS kernel
Hello, world!
main returned 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;( Note: I&amp;rsquo;m testing locally by running Xen under VirtualBox. Not all of Xen&amp;rsquo;s features can be used in this mode, but it works for testing unikernels. I&amp;rsquo;m also using my Git version of &lt;code&gt;mirage-xen&lt;/code&gt;; the official one will display an error after printing the greeting because it expects you to provide a mainloop too. The warnings about &lt;code&gt;lseek&lt;/code&gt; are just OCaml trying to find the current file offsets for &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;As you can see, the boot process is quite short.
Execution begins at &lt;a href=&quot;http://xenbits.xenproject.org/gitweb/?p=xen.git%3Ba=blob%3Bf=extras/mini-os/arch/x86/x86_64.S%3Bh=df3469ef4319a75cc9d4c36b51f4097897c015f2%3Bhb=HEAD#l19&quot;&gt;&lt;code&gt;_start&lt;/code&gt;&lt;/a&gt;.
Using &lt;code&gt;objdump -d hw.xen&lt;/code&gt;, you can see that this just sets up the stack pointer register and calls the C function &lt;code&gt;arch_init&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0000000000000000 &amp;lt;_start&amp;gt;:
       0:   fc                      cld    
       1:   48 8b 25 0f 00 00 00    mov    0xf(%rip),%rsp        # 17 &amp;lt;stack_start&amp;gt;
       8:   48 81 e4 00 00 ff ff    and    $0xffffffffffff0000,%rsp
       f:   48 89 f7                mov    %rsi,%rdi
      12:   e8 e2 bb 00 00          callq  bbf9 &amp;lt;arch_init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://xenbits.xenproject.org/gitweb/?p=xen.git%3Ba=blob%3Bf=extras/mini-os/arch/x86/setup.c%3Bh=5e87dd1d99014a8139d8a63b375793661e57263b%3Bhb=HEAD#l93&quot;&gt;arch_init&lt;/a&gt; (in libminios) initialises the traps and FPU and then prints &lt;code&gt;Xen Minimal OS!&lt;/code&gt; and information about various addresses.
It then calls &lt;code&gt;start_kernel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mirage/mirage-platform/blob/45814f85acca6174915acbb571146e1c4e978684/xen/runtime/xencaml/main.c#L57&quot;&gt;start_kernel&lt;/a&gt; (in libxencaml) sets up a few more features (events, interrupts, malloc, time-keeping and grant tables), then calls &lt;code&gt;caml_startup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mirage/mirage-platform/blob/45814f85acca6174915acbb571146e1c4e978684/xen/runtime/ocaml/startup.c#L202&quot;&gt;caml_startup&lt;/a&gt; (in libocaml) initialises the garbage collector and calls &lt;code&gt;caml_program&lt;/code&gt;, which is our &lt;code&gt;hw.native.o&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We call &lt;code&gt;print_endline&lt;/code&gt;, which libxencaml, as a convenience for debugging, forwards to libminios&amp;rsquo;s &lt;code&gt;console_print&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Using Mirage libraries&lt;/h3&gt;

&lt;p&gt;The above was a bit of a hack, which ended up just using the C console driver in libminios (one of the few things it provides, as it&amp;rsquo;s needed for printk).
We can instead use the &lt;code&gt;mirage-console-xen&lt;/code&gt; OCaml library, like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;hw.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lwt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed to connect to console&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_console&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Mirage uses the usual &lt;code&gt;Lwt&lt;/code&gt; library for cooperative threading, which I wrote about at last year in &lt;a href=&quot;http://roscidus.com/blog/blog/2013/11/28/asynchronous-python-vs-ocaml/&quot;&gt;Asynchronous Python vs OCaml&lt;/a&gt; - &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; means to wait for the result, allowing other code to run. Everything in Mirage is non-blocking, even looking up the console. &lt;code&gt;OS.Main.run&lt;/code&gt; runs the main event loop.&lt;/p&gt;

&lt;p&gt;Since we&amp;rsquo;re using libraries, let&amp;rsquo;s switch to ocamlbuild and give the dependencies in the &lt;code&gt;_tags&lt;/code&gt; file, as usual for OCaml projects:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;_tags &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;&quot;&gt;&lt;span class=&quot;line&quot;&gt;true: warn(A), strict_sequence, package(mirage-console-xen)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The only unusual thing we have to do here is tell ocamlbuild not to link in the &lt;code&gt;Unix&lt;/code&gt; module when we build &lt;code&gt;hw.native.o&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ocamlbuild -lflags -linkpkg,-dontlink,unix -use-ocamlfind hw.native.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the same way, we can use other libraries to access raw block devices (&lt;a href=&quot;https://github.com/mirage/mirage-block-xen&quot;&gt;mirage-block-xen&lt;/a&gt;), timers (&lt;a href=&quot;https://github.com/mirage/mirage-clock&quot;&gt;mirage-clock-xen&lt;/a&gt;) and network interfaces (&lt;a href=&quot;https://github.com/mirage/mirage-net-xen/&quot;&gt;mirage-net-xen&lt;/a&gt;).
Other (non-Xen-specific) OCaml libraries can then be used on top of these low-level drivers.
For example, &lt;a href=&quot;https://github.com/mirage/ocaml-fat&quot;&gt;fat-filesystem&lt;/a&gt; can provide a filesystem on a block device, while &lt;a href=&quot;https://github.com/mirage/mirage-tcpip&quot;&gt;tcpip&lt;/a&gt; provides an OCaml TCP/IP stack on a network interface.&lt;/p&gt;

&lt;h3&gt;The mirage-unix libraries&lt;/h3&gt;

&lt;p&gt;You may have noticed that the Xen driver libraries we used above ended in &lt;code&gt;-xen&lt;/code&gt;.
In fact, each of these is just an implementation of some generic interface provided by Mirage.
For example, &lt;a href=&quot;https://github.com/mirage/mirage/blob/master/types/V1.mli&quot;&gt;mirage/types&lt;/a&gt; defines the abstract &lt;code&gt;CONSOLE&lt;/code&gt; interface as:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CONSOLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** Text console input/output operations. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Invalid_console&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** The type representing possible errors when attaching a console. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DEVICE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** [write t buf off len] writes up to [len] chars of [String.sub buf&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      off len] to the console [t] and returns the number of bytes&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      written. Raises {!Invalid_argument} if [len &amp;gt; buf - off]. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** [write_all t buf off len] is a thread that writes [String.sub buf&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      off len] to the console [t] and returns when done. Raises&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      {!Invalid_argument} if [len &amp;gt; buf - off]. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** [log str] writes as much characters of [str] that can be written&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      in one write operation to the console [t], then writes&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      &amp;quot;\r\n&amp;quot; to it. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** [log_s str] is a thread that writes [str ^ &amp;quot;\r\n&amp;quot;] in the&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      console [t]. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;By linking against the &lt;code&gt;-unix&lt;/code&gt; versions of libraries rather than the &lt;code&gt;-xen&lt;/code&gt; ones, we can compile our code as an ordinary Unix program and run it directly.
This makes testing and debugging very easy.&lt;/p&gt;

&lt;p&gt;To make sure our code is generic enough to do this, we can wrap it in a functor that takes any console module as an input:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;unikernel.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CONSOLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The code that provides a Xen or Unix console and calls this goes in &lt;code&gt;main.ml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;main.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lwt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed to connect to console&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Unikernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;The &lt;code&gt;mirage&lt;/code&gt; tool&lt;/h3&gt;

&lt;p&gt;With the platform-specific code isolated in &lt;code&gt;main.ml&lt;/code&gt;, we can now use the &lt;code&gt;mirage&lt;/code&gt; command-line tool to generate it automatically for the target platform.
&lt;code&gt;mirage&lt;/code&gt; takes a &lt;code&gt;config.ml&lt;/code&gt; configuration file and generates &lt;code&gt;Makefile&lt;/code&gt; and &lt;code&gt;main.ml&lt;/code&gt; based on the current platform and the arguments passed.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;config.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mirage&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Unikernel.Main&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hw&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_console&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;$ mirage configure --unix
$ make
$ ./mir-hw 
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t describe this in detail because at this point we&amp;rsquo;ve reached the start of the &lt;a href=&quot;http://openmirage.org/wiki/hello-world&quot;&gt;official tutorial&lt;/a&gt;, and you can read that instead.&lt;/p&gt;

&lt;h2&gt;Test case&lt;/h2&gt;

&lt;p&gt;Because &lt;a href=&quot;http://0install.net&quot;&gt;0install&lt;/a&gt; is decentralised, it doesn&amp;rsquo;t need a single centrally-managed repository (or several incompatible repositories, each trying to package every program, as is common with Linux distributions).
In 0install, it&amp;rsquo;s possible for every developer to run their own &lt;a href=&quot;http://0install.net/0repo.html&quot;&gt;repository&lt;/a&gt;, containing just their software, with cross-repository dependencies handled automatically.
But just because it&amp;rsquo;s possible doesn&amp;rsquo;t mean we have to go to that extreme: having medium sized repositories each managed by a team of people can be very convenient, especially where package maintainers come and go.&lt;/p&gt;

&lt;p&gt;The general pattern for a group repository is to have a public server that accepts new package uploads from developers, and a private (firewalled) server with the repository&amp;rsquo;s GPG key, which downloads from it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/0repo-multi.png&quot; class=&quot;center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Debian uses an anonymous FTP server for its incoming queue, polling it with a cron job.
This turns out to be surprisingly complicated.
You need to handle incomplete uploads (not processing them until they&amp;rsquo;re done, or deleting them eventually if they never complete), allow contributors to overwrite or delete their own partial uploads (Debian allows you to upload a GPG-signed command file, which provides some control), etc, as well as keep the service fully patched.
Also, the cron system can be annoying: if the package contains a mistake then it will be several minutes before it discovers this and emails the packager.&lt;/p&gt;

&lt;p&gt;Perhaps there are some decent systems out there to handle all this, but it seemed like a good opportunity to try making a unikernel.&lt;/p&gt;

&lt;p&gt;A particularly nice feature of this test-case is that it doesn&amp;rsquo;t matter too much if it fails:
the repository itself will check the developer&amp;rsquo;s signature on the files, so an attacker can&amp;rsquo;t compromise the repository by breaking into the queue; everything in the queue is intended to become public, so we need not worry much about confidentiality; lost uploads can be easily resubmitted; and if it goes down for a bit, it just means that new software can&amp;rsquo;t be added to the repository.
So, there&amp;rsquo;s nothing critical about this service, which is reassuring.&lt;/p&gt;

&lt;h3&gt;Storage&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/mirage/merge-queues&quot;&gt;merge-queues&lt;/a&gt; library builds a queue abstraction on top of
&lt;a href=&quot;https://github.com/mirage/irmin&quot;&gt;Irmin&lt;/a&gt;, a Git-inspired storage system for Mirage.
But my needs are simple, and I wanted to test the more primitive libraries first, so I decided to build my queue directly on a plain filesystem.
This was the first interface I came up with:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;upload_queue.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;43&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;44&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;45&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;46&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;47&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;48&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_aligned_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_device_error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_error&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(** An upload.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt; * To avoid loading complete uploads into RAM, we stream them&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt; * between the network and the disk. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Wrong_size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unknown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** An upload queue. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** Create a new queue, backed by a filesystem. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Upload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(** Add an upload to the queue.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * The upload is added only once the end of the stream is&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * reached, and only if the total size matches the size&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * in the record.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * To cancel an add, just terminate the stream. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(** Interface for the repository software to fetch items&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * from the queue. Only one client may use this interface&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * at a time, or things will go wrong. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(** Return a fresh stream for the item at the head of the&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * queue, without removing it. After downloading it&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * successfully, the client should call [delete]. If the&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * queue is empty, this blocks until an item is available. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(** Delete the item previously retrieved by [peek].&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * If the previous item has already been deleted, this does&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * nothing, even if there are more items in the queue. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code&gt;unikernel.ml&lt;/code&gt; will use this to make a queue, backed by a filesystem.
Uploaders&amp;rsquo; HTTP POSTs will be routed to &lt;code&gt;Upload.add&lt;/code&gt;, while the repository&amp;rsquo;s GET and DELETE invocations go to the &lt;code&gt;Download&lt;/code&gt; submodule.
&lt;code&gt;delete&lt;/code&gt; is a separate operation because we want the repository to confirm that it got the item successfully before we delete it, in case of network errors.&lt;/p&gt;

&lt;p&gt;Ideally, we might require that the &lt;code&gt;DELETE&lt;/code&gt; comes over the same HTTP connection as the &lt;code&gt;GET&lt;/code&gt; just in case we accidentally run two instances of the repository software, but that&amp;rsquo;s unlikely and it&amp;rsquo;s convenient to test using separate &lt;code&gt;curl&lt;/code&gt; invocations.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re using another functor here, &lt;code&gt;Upload_queue.Make&lt;/code&gt;, so that our queue will work over any filesystem.
In theory, we can configure our unikernel with a FAT filesystem on a block device when running under Xen,
while using a regular directory when running under Linux (e.g. for testing).&lt;/p&gt;

&lt;p&gt;But it doesn&amp;rsquo;t work.
You can see at the top that I had to restrict Mirage&amp;rsquo;s abstract &lt;code&gt;FS&lt;/code&gt; type in two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; functions in &lt;code&gt;FS&lt;/code&gt; pass the data using the abstract &lt;code&gt;page_aligned_buffer&lt;/code&gt; type.
Since we need to do something with the data, this isn&amp;rsquo;t good enough.
I therefore declare that this must be a &lt;code&gt;Cstruct.t&lt;/code&gt; (basically, an array of bytes).
This is actually OK; &lt;a href=&quot;https://github.com/mirage/mirage-fs-unix&quot;&gt;mirage-fs-unix&lt;/a&gt; also uses this type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One of the possible error codes from &lt;code&gt;FS&lt;/code&gt; is the abstract type &lt;code&gt;FS.block_device_error&lt;/code&gt;, and I can&amp;rsquo;t
see any way to turn one of these into a string using the &lt;code&gt;FS&lt;/code&gt; interface.
I therefore require a filesystem implementation that defines it to be &lt;code&gt;Fat.Fs.block_error&lt;/code&gt;.
Obviously, this means we now only support the FAT filesystem.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This doesn&amp;rsquo;t prevent us from running as a normal process, because we can ask for a Unix &amp;ldquo;block&amp;rdquo; device (actually, just a plain &lt;code&gt;disk.img&lt;/code&gt; file) and pass that to the &lt;code&gt;Fat&lt;/code&gt; module, but it would be nice to have the option of using a real directory.&lt;/p&gt;

&lt;p&gt;I asked about this on the mailing list - &lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2014-07/msg00048.html&quot;&gt;Mirage questions from writing a REST service&lt;/a&gt; - and it looks like the &lt;code&gt;FS&lt;/code&gt; type will change soon.&lt;/p&gt;

&lt;h3&gt;Implementation&lt;/h3&gt;

&lt;p&gt;For the curious, this initial implementation is in &lt;a href=&quot;https://github.com/0install/0repo-queue/blob/063db53c6faf76c7a9edd18416c25459603b777d/upload_queue.ml&quot;&gt;upload_queue.ml&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Internally, the module creates an in-memory queue to keep track of successful uploads.
Uploads are streamed to the disk and
when an upload completes with the declared size, the filename is added to the queue.
If the upload ends with the wrong size (probably because the connection was lost), the file is deleted.&lt;/p&gt;

&lt;p&gt;But what if our VM gets rebooted?
We need to scan the file system at start up and work out which uploads are complete and which should be deleted.
My first thought was to name the files &lt;code&gt;NUMBER.part&lt;/code&gt; during the upload and rename on success.
However, the &lt;code&gt;FS&lt;/code&gt; interface currently lacks a &lt;code&gt;rename&lt;/code&gt; method.
Instead, I write an &lt;code&gt;N&lt;/code&gt; byte to the start of each file and set it to &lt;code&gt;Y&lt;/code&gt; on success.
That works, but renaming would be nicer!&lt;/p&gt;

&lt;p&gt;For downloading, the &lt;code&gt;peek&lt;/code&gt; function returns the item at the head of the queue.
If the queue is empty, it waits until something arrives.
The repository just makes a GET request - if something is available then it returns immediately,
otherwise the connection stays open until some data is ready, allowing the repository to respond immediately to new uploads.&lt;/p&gt;

&lt;h3&gt;Unit-testing the storage system&lt;/h3&gt;

&lt;p&gt;Because our unikernel can run as a process, testing is easy even if you don&amp;rsquo;t have a local Xen deployment.
A set of unit-tests test the upload queue module just as for any other program, and the service can be run as a normal process, listening on a normal TCP socket.
A slight annoyance here is that the generated Makefile doesn&amp;rsquo;t include any rules to build the tests so you have to add them manually, and
if you regenerate the Makefile then it loses the new rule.&lt;/p&gt;

&lt;p&gt;As you might expect from such a new system, testing uncovered several problems. The first (minor) problem is that when the disk becomes full, the unhelpful error reported by the filesystem is &lt;code&gt;Failure(&amp;quot;Unknown error: Failure(\&amp;quot;fault\&amp;quot;)&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;( I asked about this on the mailing list - &lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2014-07/msg00069.html&quot;&gt;Error handling in Mirage&lt;/a&gt; - and there seems to be agreement that error handling should change. )&lt;/p&gt;

&lt;p&gt;A more serious problem was that deleting files corrupted the FAT directory index.
I downloaded the FAT library and added a unit-test for delete, which made it easy to track the problem down (despite my lack of knowledge of FAT).
Here&amp;rsquo;s the code for marking a directory entry as deleted in the FAT library:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmarshal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lfn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfn'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfn_deleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;marshal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Lfn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfn'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dos'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;marshal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dos'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_cstruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s supposed to take an entry, unmarshal it into an OCaml structure, set the &lt;code&gt;deleted&lt;/code&gt; flag, and marshal the result into a new &lt;code&gt;delta&lt;/code&gt; structure.
These deltas are returned and applied to the device.
The bug is a simple typo: &lt;code&gt;Lfn&lt;/code&gt; (long filename) entries update correctly, but for old &lt;code&gt;Dos&lt;/code&gt; ones it writes the new block to the input, not to &lt;code&gt;delta&lt;/code&gt;.
The fix was simple enough (I also refactored it slightly to encourage the correct behaviour in future):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;marshal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmarshal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lfn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lfn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfn_deleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_cstruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This demonstrates both the good and the bad of Mirage: the bug was easy to find and fix, using regular debugging tools.
I&amp;rsquo;m sure fixing a filesystem corruption bug in the Linux kernel would have been vastly more difficult.
On the other hard, Linux is rather well tested, whereas I appear to be the first person ever to try deleting a file in Mirage!&lt;/p&gt;

&lt;h3&gt;The HTTP server&lt;/h3&gt;

&lt;p&gt;This turned out to be quite simple. Here&amp;rsquo;s the unikernel&amp;rsquo;s &lt;a href=&quot;https://github.com/0install/0repo-queue/blob/92c99d34104b6bea707044924f9753a9cc7f0414/unikernel.ml&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;unikernel.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CONSOLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Upload_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cohttp_lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Upload_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;starting queue service&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/uploader&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_uploader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/downloader&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_downloader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_error&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bad_request&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      	    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Bad path '%s'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn_closed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn_id&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;connection closed&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;conn_closed&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, our functor is extended to take a filesystem (using the restricted type required by our &lt;code&gt;Upload_queue&lt;/code&gt;, as noted above) and an HTTP server module as arguments.&lt;/p&gt;

&lt;p&gt;The HTTP server calls our &lt;code&gt;callback&lt;/code&gt; each time it receives a request, and this dispatches &lt;code&gt;/uploader&lt;/code&gt; requests to &lt;code&gt;handle_uploader&lt;/code&gt; and &lt;code&gt;/downloader&lt;/code&gt; ones to &lt;code&gt;handle_downloader&lt;/code&gt;. These are also very simple, e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Upload_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cohttp_lwt_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cohttp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Length&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(* Adding a content-length loses the transfer-encoding&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;     * for some reason, so add it back: *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cohttp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;s2&quot;&gt;&amp;quot;transfer-encoding&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;chunked&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_downloader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HEAD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;POST&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OPTIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PATCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsupported_method&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The other methods (&lt;code&gt;put&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt;) are similar.&lt;/p&gt;

&lt;h3&gt;Buffered reads&lt;/h3&gt;

&lt;p&gt;Running as a &lt;code&gt;--unix&lt;/code&gt; process, I initially got a download speed of
17.2 KB/s, which was rather disappointing.
Especially as Apache on the same machine gets 615 MB/s!&lt;/p&gt;

&lt;p&gt;Increasing the size of the chunks I was reading from the Fat
filesystem (a disk.img file) from 512 bytes to 1MB, I was able to
increase this to 2.83 MB/s, and removing the &lt;code&gt;O_DIRECT&lt;/code&gt; flag from
&lt;code&gt;mirage-block-unix&lt;/code&gt;, download speed increased to 15 MB/s (so this is
with Linux caching the data in RAM).&lt;/p&gt;

&lt;p&gt;To check the filesystem was the problem, I removed the &lt;code&gt;F.read&lt;/code&gt; call
(so it would return uninitialised data instead of the actual file contents).
It then managed a very respectable 514 MB/s.
Nothing wrong with the HTTP code then.&lt;/p&gt;

&lt;h3&gt;Streaming uploads&lt;/h3&gt;

&lt;p&gt;It all worked nicely running as a Unix process, so the next step was to deploy on Xen.
I was hoping that most of the bugs would already have been found during the Unix testing,
but in fact there were more lurking.&lt;/p&gt;

&lt;p&gt;It worked for very small files, but when uploading larger files it quickly ran
out of memory on my 64-bit x86 test system. I also tried it on my 32-bit CubieTruck
ARM board, but that failed even sooner, with &lt;code&gt;Invalid_argument(&amp;quot;String.create&amp;quot;)&lt;/code&gt; (on 32-bit
platforms, OCaml strings are limited to 16 MB).&lt;/p&gt;

&lt;p&gt;In both cases, the problem was that the &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;cohttp&lt;/a&gt; library tried to read the entire upload in one go.
I found the &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp/blob/86394acdb580257ee78cb6976966662575b01bb0/cohttp/transfer_io.ml#L56&quot;&gt;read&lt;/a&gt; function in &lt;code&gt;Transfer_io&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* TODO functorise string to a bigbuffer *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Done&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;read_exactly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Done&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Final_chunk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I changed it to use &lt;code&gt;read&lt;/code&gt; rather than &lt;code&gt;read_exactly&lt;/code&gt; (&lt;code&gt;read&lt;/code&gt; returns whatever data is available, waiting only if there isn&amp;rsquo;t any at all):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* TODO functorise string to a bigbuffer *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Done&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Final_chunk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Chunk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I also had to change the signature to take a mutable reference (&lt;code&gt;remaining&lt;/code&gt;) for the remaining data, otherwise it has no way to know when it&amp;rsquo;s done (&lt;a href=&quot;https://github.com/talex5/ocaml-cohttp/commit/030969c32d310d690b8df5929d9a5f32caee6eb5&quot;&gt;patch&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;Buffered writes&lt;/h3&gt;

&lt;p&gt;With the uploads now split into chunks, upload speed with &lt;code&gt;--unix&lt;/code&gt; was 178 KB/s.
Batching up the chunks (which were generally 4 KB each) into a 64 KB buffer increased the speed to 2083 KB/s.
With a 1 MB buffer, I got 6386 KB/s.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code I used:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Io_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Io_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_cstruct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Set the first byte to N to indicate that we're not done yet.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt; * If we reboot while this flag is set, the partial upload will&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt; * be deleted. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_buffer_used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_buffer&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'N'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush_page_buffer&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Flushing %d bytes to disk&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_buffer_used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffered_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_buffer&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_buffer_used&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_offset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffered_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;|=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;file_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_buffer_used&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;page_buffer_used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_buffer_free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_buffer_used&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_buffer_free&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_remaining&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blit_from_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_buffer_used&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;page_buffer_used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_buffer_used&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_buffer_free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush_page_buffer&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;add_data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;flush_page_buffer&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Asking on the mailing list confirmed that
&lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2014-07/msg00054.html&quot;&gt;Fat is not well optimised&lt;/a&gt;.
This isn&amp;rsquo;t actually a problem for my service, since it&amp;rsquo;s still faster than
my Internet connection, but there&amp;rsquo;s clearly more work needed here.&lt;/p&gt;

&lt;h3&gt;Upload speed on Xen&lt;/h3&gt;

&lt;p&gt;Testing on my little CubieTruck board, I then got:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Upload speed&lt;/td&gt;
      &lt;td&gt;74 KB/s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Download speed&lt;/td&gt;
      &lt;td&gt;1.6 KB/s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Hmm. To get a feel for what the board is capable of, I ran &lt;code&gt;nc -l -p 8080 &amp;lt; /dev/zero&lt;/code&gt; on the board
and &lt;code&gt;nc cubietruck 8080 | pv &amp;gt; /dev/null&lt;/code&gt; on my laptop, getting 29 MB/s.&lt;/p&gt;

&lt;p&gt;Still, my unikernel is running as a guest, meaning it has the overhead of using the virtual network
interface (it has to pass the data to dom0, which then sends it over the real interface). So I installed
a Linux guest and tried from there. 47.2 MB/s. Interesting. I have no idea why it&amp;rsquo;s faster than dom0!&lt;/p&gt;

&lt;p&gt;I loaded up &lt;a href=&quot;http://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; to see what was happening with the unikernel transfers.
The upload transfer mostly went fast, but stalled in the middle for 15 seconds and then for 12 seconds at the end.
Wireshark showed that the unikernel was ack&amp;rsquo;ing the packets but reducing the TCP window size, indicating that the packets weren&amp;rsquo;t being processed by the application code.
The delays corresponded to the times when we were flushing the data to the SD card, which makes sense.
So, this looks like another filesystem problem (we should be able to write to the SD card much faster than this).&lt;/p&gt;

&lt;h3&gt;TCP retransmissions&lt;/h3&gt;

&lt;p&gt;For the download, Wireshark showed that many of the packets had incorrect TCP checksums and were having to be retransmitted.
I was already familiar with this bug from a previous mailing list discussion: &lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/2014-07/msg00131.html&quot;&gt;wireshark capture of failed download from mirage-www on ARM&lt;/a&gt;.
That turned out be &lt;a href=&quot;http://lists.xenproject.org/archives/html/xen-users/2014-07/msg00067.html&quot;&gt;a Linux bug&lt;/a&gt; - the privileged dom0 code responsible for sending our virtual network packets to the real network becomes confused if two packets occupy the same physical page in memory.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what happens:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We read 1 MB of data from the disk and send it to the HTTP layer as the next chunk.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mirage/ocaml-cohttp/blob/86394acdb580257ee78cb6976966662575b01bb0/cohttp/transfer_io.ml#L48&quot;&gt;&lt;code&gt;Chunked.write&lt;/code&gt;&lt;/a&gt; does the HTTP chunking and sends it to the TCP/IP channel.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-tcpip/blob/dedd5e0626a3fc8d679e60e92e5fc327c37759bd/channel/channel.ml#L181&quot;&gt;&lt;code&gt;Channel.write_string&lt;/code&gt;&lt;/a&gt; writes the HTTP output into pages (aligned 4K blocks of memory).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-tcpip/blob/dedd5e0626a3fc8d679e60e92e5fc327c37759bd/tcp/pcb.ml#L476&quot;&gt;&lt;code&gt;Pcb.writefn&lt;/code&gt;&lt;/a&gt; then determines that each page is too big for a TCP packet and splits each one into smaller chunks, sharing the single underlying page:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writefn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wfn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_available&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcb&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;write_wait_for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcb&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;writefn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wfn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;av_len&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;av_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;av_len&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaing_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cstruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;av_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;av_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;writefn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wfn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_bit&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;writefn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wfn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaing_bit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;av_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;wfn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;My original fix changed &lt;code&gt;mirage-net-xen&lt;/code&gt; to wait until the first buffer had been read before sending the second one.
That fixed the retransmissions, but all the waiting meant I still only got 56 KB/s.
Instead, I changed &lt;code&gt;writefn&lt;/code&gt; to copy &lt;code&gt;remaining_bit&lt;/code&gt; into a new IO page, and with that I got 495 KB/s.&lt;/p&gt;

&lt;p&gt;Replacing the filesystem read with a simple &lt;code&gt;String.create&lt;/code&gt; of the same length, I got 3.9 MB/s, showing that once again the
FAT filesystem was now the limiting factor.&lt;/p&gt;

&lt;h3&gt;Adding a block cache&lt;/h3&gt;

&lt;p&gt;I tried adding a &lt;a href=&quot;https://github.com/0install/0repo-queue/blob/fat-caching/block_cache.ml&quot;&gt;block cache&lt;/a&gt; layer between &lt;code&gt;mirage-block-xen&lt;/code&gt; and &lt;code&gt;fat-filesystem&lt;/code&gt;, like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CONSOLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;V1_LWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BLOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cohttp_lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Block_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Fat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Io_page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Upload_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_cache_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* 1 MB *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;start in queue service&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;BC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_cache_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;BC.connect&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;F.connect&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;With this in place, upload speed remains at 76 KB/s, but the download speed increases to 1 MB/s (for a 20 MB file, which therefore doesn&amp;rsquo;t fit in the cache).
This suggests that the FAT filesystem is reading the same disk sectors many times.
Enlarging the memory cache to cover the whole file, the download speed only increases to 1.3 MB/s,
so the FAT code must be doing some inefficient calculations too.&lt;/p&gt;

&lt;h3&gt;Replacing FAT&lt;/h3&gt;

&lt;p&gt;Since most of my problems seemed to be coming from using FAT, I decided to try a new approach.
I removed all the FAT code and the block cache and changed &lt;code&gt;upload_queue.ml&lt;/code&gt; to write directly to the block
device.
With that (no caching), I get:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Upload speed&lt;/td&gt;
      &lt;td&gt;2.27 MB/s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Download speed&lt;/td&gt;
      &lt;td&gt;2.46 MB/s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That&amp;rsquo;s not too bad. It&amp;rsquo;s faster than my Internet connection, which means that the unikernel is no longer the limiting factor.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the new version: &lt;a href=&quot;https://github.com/0install/0repo-queue/blob/master/upload_queue.ml&quot;&gt;&lt;code&gt;upload_queue.ml&lt;/code&gt;&lt;/a&gt;.
The big simplification comes from knowing that the queue will spend most of its time empty (another good reason to use a small VM for it).
The code has a &lt;code&gt;next_free_sector&lt;/code&gt; which it advances every time an upload starts.
When the queue becomes empty and there are no uploads in progress this variable is reset back to sector 1 (sector 0 holds the index).
This does mean that we may report disk full errors to uploaders even when there is free space on the disk, but this won&amp;rsquo;t happen in typical usage because the repository downloads things as soon as they&amp;rsquo;re uploaded (if it does happen, it just means uploaders have to wait a couple of minutes until the repository empties the queue).&lt;/p&gt;

&lt;p&gt;Managing the block device manually brought a few more advantages over FAT:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;No need to generate random file names for the uploads.&lt;/li&gt;
  &lt;li&gt;No need to delete incomplete uploads (we only write the file&amp;rsquo;s index entry to disk on success).&lt;/li&gt;
  &lt;li&gt;The system should recover automatically from filesystem corruption because invalid entries can be detected reliably at boot time and discarded.&lt;/li&gt;
  &lt;li&gt;Disk full errors are reported correctly.&lt;/li&gt;
  &lt;li&gt;The queue ordering isn&amp;rsquo;t lost on reboot.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Modern operating systems are often extremely complex, but much of this is historical baggage which isn&amp;rsquo;t needed on a modern system where you&amp;rsquo;re running a single application as a VM under a hypervisor. Mirage allows you to create very small VMs which contain almost no C code. These VMs should be easier to write, more reliable and more secure.&lt;/p&gt;

&lt;p&gt;Creating a bootable OCaml kernel is surprisingly easy, and from there adding support for extra devices is just a matter of pulling in the appropriate libraries. By programming against generic interfaces, you can create code that runs under Linux/Unix/OS X or as a virtual machine under Xen, and switch between configurations using the &lt;code&gt;mirage&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;Mirage is still very young, and I found many rough edges while writing my queuing service for 0install:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;While Linux provides fast, reliable filesystems as standard, Mirage currently only provides a basic FAT implementation.&lt;/li&gt;
  &lt;li&gt;Linux provides caching as standard, while you have to implement this yourself on Mirage.&lt;/li&gt;
  &lt;li&gt;Error reporting should be a big improvement over C&amp;rsquo;s error codes, but getting friendly error messages from Mirage is currently difficult.&lt;/li&gt;
  &lt;li&gt;The system has clearly been designed for high performance (the APIs generally write to user-provided buffers to avoid copying, much like C libraries do), but many areas have not yet been optimised.&lt;/li&gt;
  &lt;li&gt;Buffers often have extra requirements (e.g. must be page-aligned, a single page, immutable, etc) which are not currently captured in the type system, and this can lead to run-time errors which would ideally have been detected at compile time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, there is &lt;a href=&quot;http://openmirage.org/blog/announcing-mirage-20-release&quot;&gt;a huge amount of work&lt;/a&gt; happening on Mirage right now and it looks like all of these problems are being worked on.
If you&amp;rsquo;re interested in low-level OS programming and don&amp;rsquo;t want to mess about with C, Mirage is a lot of fun, and it can be useful for practical tasks already with a bit of effort.&lt;/p&gt;

&lt;p&gt;There are still many areas I need to find out more about.
In particular, using the new &lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;pure-OCaml TLS stack&lt;/a&gt; to secure the system and trying the &lt;a href=&quot;http://openmirage.org/blog/introducing-irmin&quot;&gt;Irmin Git-like distributed, branchable storage&lt;/a&gt; to provide the queue instead of writing it myself.
I hope to try those soon&amp;hellip;&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2014/07/28/my-first-unikernel/</id><title type="text">My first unikernel</title><updated>2014-07-28T18:21:10+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=493" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;&lt;span style=&quot;color: #555555;&quot;&gt;&amp;nbsp;&amp;ldquo;ARC: Analysis of Raft Consensus&amp;rdquo;&amp;nbsp;is now available online as a UCAM technical report.&amp;nbsp;&lt;/span&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-857.pdf&quot;&gt;http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-857.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;color: #333333;&quot;&gt;Abstract&lt;/h2&gt;
&lt;p style=&quot;color: #333333;&quot;&gt;The Paxos algorithm, despite being synonymous with distributed consensus for a decade, is famously difficult to reason about and implement due to its non-intuitive approach and underspecification. In response, this project implemented and evaluated a framework for constructing fault-tolerant applications, utilising the recently proposed Raft algorithm for distributed consensus. Constructing a simulation framework for our implementation enabled us to evaluate the protocol on everything from understandability and efficiency to correctness and performance in diverse network environments. We propose a range of optimisations to the protocol and released to the community a testbed for developing further optimisations and investigating optimal protocol parameters for real-world deployments.&lt;/p&gt;
&lt;p&gt;Thank you everyone for your feedback.&lt;/p&gt;
</content><id>http://hh360.user.srcf.net/blog/?p=493</id><title type="text">Release of  “ARC: Analysis of Raft Consensus”</title><updated>2014-07-25T22:05:09+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2014/07/24/compiler-hacking-at-citrix" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;For the seventh Cambridge OCaml compiler-hacking session we'll be meeting at &lt;a href=&quot;https://maps.google.co.uk/maps?q=101%20Cambridge%20Science%20Park%20Milton%20Road,%20Cambridge&amp;amp;hl=en&amp;amp;ll=52.232955,0.150338&amp;amp;spn=0.003082,0.006947&amp;amp;sll=52.231717,0.144648&amp;amp;sspn=0.012327,0.027788&amp;amp;oq=101Cambrideg%20Science&amp;amp;t=h&amp;amp;hq=101%20Cambridge%20Science%20Park%20Milton%20Road,&amp;amp;hnear=Cambridge,%20United%20Kingdom&amp;amp;z=18&quot;&gt;the Citrix office in the Cambridge Science Park&lt;/a&gt; on 6.30pm Friday 1st August.  Thanks to Citrix for supporting and hosting the session!&lt;/p&gt;

&lt;p&gt;We'll kick off with a demo from &lt;a href=&quot;https://github.com/def-lkb&quot;&gt;Fr&amp;eacute;d&amp;eacute;ric Bour&lt;/a&gt; of modular implicits, an OCaml extension that adds support for overloading.&lt;/p&gt;

&lt;p&gt;If you're planning to come along, it'd be helpful if you could &lt;a href=&quot;http://doodle.com/46f2bnk4xny724in&quot;&gt;&lt;strong&gt;indicate interest via Doodle&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;http://lists.ocaml.org/listinfo/cam-compiler-hacking&quot;&gt;sign up to the mailing list&lt;/a&gt; to receive updates:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where&lt;/strong&gt;:
  Citrix Systems Research &amp;amp; Development Ltd.&lt;br/&gt;
  &lt;a href=&quot;https://maps.google.co.uk/maps?q=101%20Cambridge%20Science%20Park%20Milton%20Road,%20Cambridge&amp;amp;hl=en&amp;amp;ll=52.232955,0.150338&amp;amp;spn=0.003082,0.006947&amp;amp;sll=52.231717,0.144648&amp;amp;sspn=0.012327,0.027788&amp;amp;oq=101Cambrideg%20Science&amp;amp;t=h&amp;amp;hq=101%20Cambridge%20Science%20Park%20Milton%20Road,&amp;amp;hnear=Cambridge,%20United%20Kingdom&amp;amp;z=18&quot;&gt;Building 101&lt;/a&gt;&lt;br/&gt;
  Cambridge Science Park&lt;br/&gt;
  Milton Road&lt;br/&gt;
  Cambridge, CB4 0FY&lt;br/&gt;
  United Kingdom  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt;: 6.30pm, Friday 1st August&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who&lt;/strong&gt;: anyone interested in improving OCaml. Knowledge of OCaml programming will obviously be helpful, but prior experience of working on OCaml internals isn't necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&lt;/strong&gt;: fixing bugs, implementing new features, learning about OCaml internals&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wiki&lt;/strong&gt;: &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki&quot;&gt;https://github.com/ocamllabs/compiler-hacking/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're defining &amp;quot;compiler&amp;quot; pretty broadly, to include anything that's part of the standard distribution, which means at least the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/libref/index.html&quot;&gt;standard library&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual024.html&quot;&gt;runtime&lt;/a&gt;, tools (&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/depend.html&quot;&gt;ocamldep&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc105&quot;&gt;ocamllex&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc107&quot;&gt;ocamlyacc&lt;/a&gt;, etc.), &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual032.html&quot;&gt;ocamlbuild&lt;/a&gt;, the &lt;a href=&quot;http://caml.inria.fr/resources/doc/index.en.html&quot;&gt;documentation&lt;/a&gt;, and the compiler itself. We'll have suggestions for &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;mini-projects&lt;/a&gt; for various levels of experience (see also some &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-previously-worked-on&quot;&gt;things we've worked on in previous sessions&lt;/a&gt;), but feel free to come along and work on whatever you fancy.&lt;/p&gt;

&lt;p&gt;We'll also be ordering pizza, so if you want to be counted for food you should aim to arrive by 6.45pm.&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2014/07/24/compiler-hacking-at-citrix</id><title type="text">Seventh OCaml compiler hacking session (at Citrix)</title><updated>2014-07-24T11:00:00+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="https://mirage.io/blog/announcing-mirage-20-release" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;small&gt;
 This work funded in part by the EU FP7 User-Centric Networking project, Grant
 No. 611001.
&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://openmirage.org/blog/announcing-mirage10&quot;&gt;first release&lt;/a&gt; of MirageOS back in December 2013 introduced the prototype
of the &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2566628&quot;&gt;unikernel concept&lt;/a&gt;, which realised the promise of a safe,
flexible mechanism to build highly optimized software stacks purpose-built for deployment in the public cloud (more &lt;a href=&quot;http://openmirage.org/wiki/overview-of-mirage&quot;&gt;background&lt;/a&gt; on this).
Since then, we've been hard at work using and extending MirageOS for real projects and the community has been
&lt;a href=&quot;http://openmirage.org/blog/welcome-to-our-summer-hackers&quot;&gt;steadily growing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We're thrilled to announce the release of MirageOS v2.0 today!  Over the past
few weeks the &lt;a href=&quot;http://openmirage.org/community&quot;&gt;team&lt;/a&gt; has been &lt;a href=&quot;https://github.com/mirage/mirage/issues/257&quot;&gt;hard at work&lt;/a&gt; blogging about all
the new features in this latest release, coordinated by the tireless &lt;a href=&quot;http://amirchaudhry.com&quot;&gt;Amir Chaudhry&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://openmirage.org/graphics/cubieboard2.jpg&quot; width=&quot;250px&quot; style=&quot;float:right; padding: 5px&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ARM device support&lt;/strong&gt;: While the first version of MirageOS was specialised towards conventional x86 clouds, the code generation and boot libraries have now been made portable enough to operate on low-power embedded ARM devices such as the &lt;a href=&quot;http://cubieboard.org/&quot;&gt;Cubieboard 2&lt;/a&gt;.  This is a key part of our efforts to build a safe, unified &lt;a href=&quot;http://anil.recoil.org/papers/2010-bcs-visions.pdf&quot;&gt;mutiscale programming model&lt;/a&gt; for both cloud and mobile workloads as part of the &lt;a href=&quot;http://nymote.org&quot;&gt;Nymote&lt;/a&gt; project.  We also upstreamed the changes required to the Xen Project so that other unikernel efforts such as &lt;a href=&quot;https://github.com/GaloisInc/HaLVM&quot;&gt;HalVM&lt;/a&gt; or &lt;a href=&quot;https://www.usenix.org/system/files/conference/nsdi14/nsdi14-paper-martins.pdf&quot;&gt;ClickOS&lt;/a&gt; can benefit.&lt;ul&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-xen-minios-arm&quot;&gt;Introducing an ARMy of unikernels&lt;/a&gt;&amp;quot;&lt;/em&gt; by &lt;a href=&quot;http://roscidus.com/blog/&quot;&gt;Thomas Leonard&lt;/a&gt; talks about the changes required and &lt;a href=&quot;http://openmirage.org/wiki/xen-on-cubieboard2&quot;&gt;instructions&lt;/a&gt; for trying this out for yourself on your own cheap Cubieboard.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Irmin distributed, branchable storage&lt;/strong&gt;: Unikernels usually execute in a distributed, disconnection-prone environment (particularly with the new mobile ARM support).  We therefore built the &lt;a href=&quot;https://github.com/mirage/irmin&quot;&gt;Irmin&lt;/a&gt; library to explicitly make synchronization easier via a Git-like persistence model that can be used to build and easily trace the operation of distributed applications across all of these diverse environments.&lt;ul&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-irmin&quot;&gt;Introducing Irmin: Git-like distributed, branchable storage&lt;/a&gt;&amp;quot;&lt;/em&gt; by &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt; describes the concepts and high-level architecture of the system.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-irmin-in-xenstore&quot;&gt;Using Irmin to add fault-tolerance to the Xenstore database&lt;/a&gt;&amp;quot;&lt;/em&gt; by &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; shows how Irmin is used in a real-world application: the security-critical Xen toolstack that manages hosts full of virtual machines (&lt;a href=&quot;https://www.youtube.com/watch?v=DSzvFwIVm5s&quot;&gt;video&lt;/a&gt;).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;OCaml TLS&lt;/strong&gt;: The philosophy of MirageOS is to construct the entire operating system in a safe programming style, from the device drivers up.  This continues in this release with a comprehensive OCaml implementation of &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;Transport Level Security&lt;/a&gt;, the most widely deployed end-to-end encryption protocol on the Internet (and one that is very prone to &lt;a href=&quot;https://en.wikipedia.org/wiki/Heartbleed&quot;&gt;bad security holes&lt;/a&gt;).  The blog series is written by &lt;a href=&quot;https://github.com/hannesm&quot;&gt;Hannes Mehnert&lt;/a&gt; and &lt;a href=&quot;https://github.com/pqwy&quot;&gt;David Kaloper&lt;/a&gt;.&lt;ul&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;OCaml-TLS: Introducing transport layer security (TLS) in pure OCaml&lt;/a&gt;&amp;quot;&lt;/em&gt; presents the motivation and architecture behind our clean-slate implementation of the protocol.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;OCaml-TLS: building the nocrypto library core&lt;/a&gt;&amp;quot;&lt;/em&gt; talks about the cryptographic primitives that form the heart of TLS confidentiality guarantees, and how they expose safe interfaces to the rest of the stack.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;OCaml-TLS: adventures in X.509 certificate parsing and validation&lt;/a&gt;&amp;quot;&lt;/em&gt; explains how authentication and chain-of-trust verification is implemented in our stack.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/introducing-asn1&quot;&gt;OCaml-TLS: ASN.1 and notation embedding&lt;/a&gt;&amp;quot;&lt;/em&gt; introduces the libraries needed for handling ASN.1 grammars, the wire representation of messages in TLS.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/ocaml-tls-api-internals-attacks-mitigation&quot;&gt;OCaml-TLS: the protocol implementation and mitigations to known attacks&lt;/a&gt;&amp;quot;&lt;/em&gt; concludes with the implementation of the core TLS protocol logic itself.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Modularity and communication&lt;/strong&gt;: MirageOS is built on the concept of a &lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;library operating system&lt;/a&gt;, and this release provides many new libraries to flexibly extend applications with new functionality.&lt;ul&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/intro-tcpip&quot;&gt;Fitting the modular MirageOS TCP/IP stack together&lt;/a&gt;&amp;quot;&lt;/em&gt; by &lt;a href=&quot;http://somerandomidiot.com&quot;&gt;Mindy Preston&lt;/a&gt; explains the rather unique modular architecture of our TCP/IP stack that lets you swap between the conventional Unix sockets API, or a complete implementation of TCP/IP in pure OCaml.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/update-on-vchan&quot;&gt;Vchan: low-latency inter-VM communication channels&lt;/a&gt;&amp;quot;&lt;/em&gt; by &lt;a href=&quot;http://jon.recoil.org&quot;&gt;Jon Ludlam&lt;/a&gt; shows how unikernels can communicate efficiently with each other to form distributed clusters on a multicore Xen host, by establishing shared memory rings with each other.&lt;/li&gt;&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&quot;http://openmirage.org/blog/modular-foreign-function-bindings&quot;&gt;Modular foreign function bindings&lt;/a&gt;&amp;quot;&lt;/em&gt; by &lt;a href=&quot;https://github.com/yallop&quot;&gt;Jeremy Yallop&lt;/a&gt; continues the march towards abstraction by expaining how to interface safely with code written in C, without having to write any unsafe C bindings!  This forms the basis for allowing Xen unikernels to communicate with existing libraries that they may want to keep at arm's length for security reasons.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;All the libraries required for these new features are &lt;a href=&quot;http://openmirage.org/releases&quot;&gt;regularly
released&lt;/a&gt; into the &lt;a href=&quot;http://opam.ocaml.org&quot;&gt;OPAM&lt;/a&gt; package manager, so
just follow the &lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;installation instructions&lt;/a&gt; to give them a spin.
A release this size probably introduces minor hiccups that may cause build
failures, so we very much encourage &lt;a href=&quot;https://github.com/mirage/mirage/issues&quot;&gt;bug
reports&lt;/a&gt; on our issue tracker or
&lt;a href=&quot;http://openmirage.org/community&quot;&gt;questions&lt;/a&gt; to our mailing lists.  Don't be shy: no question is too
basic, and we'd love to hear of any weird and wacky uses you put this new
release to!  And finally, the lifeblood of MirageOS is about sharing and
&lt;a href=&quot;http://opam.ocaml.org/doc/Packaging.html&quot;&gt;publishing libraries&lt;/a&gt; that add new functionality to the framework, so do get
involved and open-source your own efforts.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Breaking news&lt;/em&gt;: &lt;a href=&quot;http://mort.io&quot;&gt;Richard Mortier&lt;/a&gt; and I will be speaking at &lt;a href=&quot;http://www.oscon.com&quot;&gt;OSCON&lt;/a&gt; this week on Thursday morning about the new features &lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/detail/35024&quot;&gt;in F150 in the Cloud Track&lt;/a&gt;. Come along if you are in rainy Portland at the moment!&lt;/p&gt;

   </content><id>https://mirage.io/blog/announcing-mirage-20-release</id><title type="text">MirageOS v2.0: a recap of the new features</title><updated>2014-07-22T11:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="https://mirage.io/blog/introducing-xen-minios-arm" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;Mirage has just gained the ability to compile unikernels for the Xen/arm32
platform, allowing Mirage guests to run under the Xen hypervisor on ARM
devices such as the &lt;a href=&quot;http://cubietruck.com/collections/frontpage/products/cubieboard2-allwinner-a20-arm-cortex-a7-dual-core-development-board&quot;&gt;Cubieboard 2&lt;/a&gt; and &lt;a href=&quot;http://cubietruck.com/collections/frontpage/products/cubietruck-cubieboard3-cortex-a7-dual-core-2gb-ram-8gb-flash-with-wifi-bt&quot;&gt;CubieTruck&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The ARMv7 architecture introduced the (optional) Virtualization Extensions,
providing hardware support for running virtual machines on ARM devices, and
Xen's &lt;a href=&quot;http://www.xenproject.org/developers/teams/arm-hypervisor.html&quot;&gt;ARM Hypervisor&lt;/a&gt; uses this to support hardware accelerated
ARM guests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.xen.org/wiki/Mini-OS&quot;&gt;Mini-OS&lt;/a&gt; is a tiny OS kernel designed specifically for running under Xen.
It provides code to initialise the CPU, display messages on the console,
allocate memory (malloc), and not much else. It is used as the low-level
core of Mirage's Xen implementation.&lt;/p&gt;
&lt;p&gt;Mirage v1 was built on an old version of Mini-OS which didn't support ARM.
For Mirage v2, we have added ARM support to the current Mini-OS (completing
Karim Allah Ahmed's &lt;a href=&quot;http://lists.xen.org/archives/html/xen-devel/2014-01/msg00249.html&quot;&gt;initial ARM port&lt;/a&gt;) and made Mirage depend
on it as an external library.
This means that Mirage will automatically gain support for other
architectures that get added later.
We are currently working with the Xen developers to get
&lt;a href=&quot;https://github.com/talex5/xen&quot;&gt;our Mini-OS fork&lt;/a&gt; upstreamed.&lt;/p&gt;
&lt;p&gt;In a similar way, we have replaced Mirage v1's bundled maths library with a
dependency on the external
&lt;a href=&quot;https://github.com/JuliaLang/openlibm&quot;&gt;OpenLibm&lt;/a&gt;, which we also extended
with ARM support (this was just a case of fixing the build system; the code
is from FreeBSD's libm, which already supported ARM).&lt;/p&gt;
&lt;p&gt;Mirage v1 also bundled &lt;a href=&quot;http://www.fefe.de/dietlibc/&quot;&gt;dietlibc&lt;/a&gt; to provide its standard C library.
A nice side-effect of this work came when we were trying to separate out the
dietlibc headers from the old Mini-OS headers in Mirage.
These had rather grown together over time and the work was proving
difficult, until we discovered that we no longer needed a libc at all, as
almost everything that used it had been replaced with pure OCaml versions!
The only exception was the &lt;code&gt;printf&lt;/code&gt; code for formatting floating point
numbers, which OCaml uses in its &lt;code&gt;printf&lt;/code&gt; implementation.
We replaced that by taking the small &lt;code&gt;fmt_fp&lt;/code&gt; function from
&lt;a href=&quot;http://www.musl-libc.org/&quot;&gt;musl libc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's the final diffstat of the changes to &lt;a href=&quot;https://github.com/mirage/mirage-platform&quot;&gt;mirage-platform&lt;/a&gt;
adding ARM support:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;778 files changed, 1949 insertions(+), 59689 deletions(-)&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Trying it out&lt;/h3&gt;

&lt;p&gt;You'll need an ARM device with the Virtualization Extensions.
I've been testing using the Cubieboard 2 (and CubieTruck):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://openmirage.org/graphics/cubieboard2.jpg&quot; alt=&quot;Cubieboard2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The first step is to install Xen.
&lt;a href=&quot;http://openmirage.org/wiki/xen-on-cubieboard2&quot;&gt;Running Xen on the Cubieboard2&lt;/a&gt;
documents the manual installation process, but you can now also use
&lt;a href=&quot;https://github.com/mirage/xen-arm-builder&quot;&gt;mirage/xen-arm-builder&lt;/a&gt; to build
an SDcard image automatically.
Copy the image to the SDcard, connect the network cable and power, and the
board will boot Xen.&lt;/p&gt;
&lt;p&gt;Once booted you can ssh to Dom0, the privileged Linux domain used to manage
the system, &lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;install Mirage&lt;/a&gt;, and build your unikernel just
as on x86.
Currently, you need to select the Git versions of some components.
The following commands will install the necessary versions if you're using
the xen-arm-builder image:&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;&lt;code class=&quot;bash&quot;&gt;$ opam init
$ opam install mirage-xen-minios
$ opam remote add mirage-dev git://github.com/mirage/mirage-dev
$ opam install mirage&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Technical details&lt;/h3&gt;

&lt;p&gt;One of the pleasures of unikernels is that you can comprehend the whole
system with relatively little effort, and
those wishing to understand, debug or contribute to the ARM support may find
the following technical sections interesting.
However, you don't need to know the details of the ARM port to use it,
as Mirage abstracts away the details of the underlying platform.&lt;/p&gt;
&lt;h4&gt;The boot process&lt;/h4&gt;

&lt;p&gt;An ARM Mirage unikernel uses the &lt;a href=&quot;http://www.simtec.co.uk/products/SWLINUX/files/booting_article.html&quot;&gt;Linux zImage format&lt;/a&gt;, though it is
not actually compressed. Xen will allocate some RAM for the image and load
the kernel at the offset 0x8000 (32 KB).&lt;/p&gt;
&lt;p&gt;Execution begins in &lt;a href=&quot;https://github.com/talex5/xen/blob/cde4b7e14b0aeedcdc006b0622905b7af2665c77/extras/mini-os/arch/arm/arm32.S#L8&quot;&gt;arm32.S&lt;/a&gt;, with the &lt;code&gt;r2&lt;/code&gt; register pointing to a
&lt;a href=&quot;http://www.devicetree.org&quot;&gt;Flattened Device Tree (FDT)&lt;/a&gt; describing details of the virtual system.
This assembler code performs a few basic boot tasks:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Configuring the MMU, which maps virtual addresses to physical addresses (see next section).&lt;/li&gt;&lt;li&gt;Turning on caching and branch prediction.&lt;/li&gt;&lt;li&gt;Setting up the exception vector table (this says how to handle interrupts and deal with various faults, such as reading from an invalid address).&lt;/li&gt;&lt;li&gt;Setting up the stack pointer and calling the C function &lt;code&gt;arch_init&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/talex5/xen/blob/cde4b7e14b0aeedcdc006b0622905b7af2665c77/extras/mini-os/arch/arm/setup.c#L74&quot;&gt;arch_init&lt;/a&gt; makes some calls to the hypervisor to set up support for the console and interrupt controller, and then calls &lt;code&gt;start_kernel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mirage/mirage-platform/blob/b0a027d4486230ce6e1e8fd0e7354b17e9c388f5/xen/runtime/xencaml/main.c#L57&quot;&gt;start_kernel&lt;/a&gt; (in libxencaml) sets up a few more features (events, malloc, time-keeping and &lt;a href=&quot;http://wiki.xen.org/wiki/Grant_Table&quot;&gt;grant tables&lt;/a&gt;), then calls &lt;code&gt;caml_startup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mirage/mirage-platform/blob/b0a027d4486230ce6e1e8fd0e7354b17e9c388f5/xen/runtime/ocaml/startup.c#L202&quot;&gt;caml_startup&lt;/a&gt; (in libocaml) initialises the garbage collector and calls &lt;code&gt;caml_program&lt;/code&gt;, which is your application's &lt;code&gt;main.ml&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;The address space&lt;/h4&gt;

&lt;p&gt;With the Virtualization Extensions, there are two stages to converting a
virtual memory address (used by application code) to a physical address in
RAM.
The first stage is under the control of the guest VM, mapping the virtual
address to what the guest believes is the physical address (this address is
referred to as the &lt;em&gt;Intermediate Physical Address&lt;/em&gt; or &lt;em&gt;IPA&lt;/em&gt;).
The second stage, under the control of Xen, maps the IPA to the real
physical address.
The tables holding these mappings are called &lt;em&gt;translation tables&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mirage's memory needs are simple: most of the RAM should be used for the
garbage-collected OCaml heap, with a few pages used for interacting with Xen
(these don't go on the OCaml heap because they must be page aligned and must
not move around).&lt;/p&gt;
&lt;p&gt;Xen does not commit to using a fixed address as the IPA of the RAM, but the
C code needs to run from a known location. To solve this problem the
assembler code in &lt;code&gt;arm32.S&lt;/code&gt; detects where it is running from and sets up a
virtual-to-physical mapping that will make it appear at the expected
location, by adding a fixed offset to each virtual address.
For example, on Xen/unstable, we configure the beginning of the virtual
address space to look like this (on Xen 4.4, the physical addresses would
start at 80000000 instead):&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;&lt;th&gt;Virtual address&lt;/th&gt;&lt;th&gt;Physical address (IPA)&lt;/th&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;400000&lt;/td&gt;&lt;td&gt;40000000&lt;/td&gt;&lt;td&gt;Stack (16 KB)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;404000&lt;/td&gt;&lt;td&gt;40004000&lt;/td&gt;&lt;td&gt;Translation tables (16 KB)&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;408000&lt;/td&gt;&lt;td&gt;40008000&lt;/td&gt;&lt;td&gt;Kernel image&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The physical address is always at a fixed offset from the virtual address and
the addresses wrap around, so virtual address c0400000 maps back to physical
address 0 (in this example).&lt;/p&gt;
&lt;p&gt;The stack, which grows downwards, is placed at the start of RAM so that a
stack overflow will trigger a fault rather than overwriting other data.&lt;/p&gt;
&lt;p&gt;The 16 KB translation table is an array of 4-byte entries each mapping 1 MB
of the virtual address space, so the 16 KB table is able to map the entire
32-bit address space (4 GB). Each entry can either give the physical section
address directly (which is what we do) or point to a second-level table
mapping individual 4 KB pages. By using only the top-level table we reduce
possible delays due to &lt;a href=&quot;http://en.wikipedia.org/wiki/Translation_lookaside_buffer&quot;&gt;TLB misses&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After the kernel code comes the data (constants and global variables), then
the &lt;a href=&quot;http://en.wikipedia.org/wiki/.bss&quot;&gt;bss&lt;/a&gt; section (data that is initially
zero, and therefore doesn't need to be stored in the kernel image),
and finally the rest of the RAM, which is handed over to the malloc system.&lt;/p&gt;
&lt;h3&gt;Contact&lt;/h3&gt;

&lt;p&gt;The current version seems to be working well on Xen 4.4 (stable) and the 4.5
development version, but has only been lightly tested.
If you have any problems or questions, or get it working on other devices,
please &lt;a href=&quot;http://openmirage.org/community/&quot;&gt;let us know&lt;/a&gt;!&lt;/p&gt;

   </content><id>https://mirage.io/blog/introducing-xen-minios-arm</id><title type="text">Building an ARMy of Xen unikernels</title><updated>2014-07-22T10:00:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="https://mirage.io/blog/introducing-irmin-in-xenstore" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;em&gt;This is the second in a series of posts that introduces the &lt;a href=&quot;https://github.com/mirage/irmin&quot;&gt;Irmin&lt;/a&gt; distributed storage engine.
You might like to begin with the &lt;a href=&quot;http://openmirage.org/blog/introducing-irmin&quot;&gt;introductory post&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.xen.org/wiki/XenStore&quot;&gt;Xenstore&lt;/a&gt; is a critical service found on all hosts
running &lt;a href=&quot;http://www.xen.org/&quot;&gt;Xen&lt;/a&gt;. Xenstore is necessary to&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;configure all VM I/O devices such as disk controllers and network interface cards;&lt;/li&gt;&lt;li&gt;share performance statistics and OS version information; and&lt;/li&gt;&lt;li&gt;signal VMs during shutdown, suspend, resume, migrate etc.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Xenstore must be &lt;strong&gt;reliable&lt;/strong&gt;: if it fails then the host is unmanageable and must be rebooted.&lt;/p&gt;
&lt;p&gt;Xenstore must be &lt;strong&gt;secure&lt;/strong&gt;: if it is compromised by a VM then that VM can access data belonging
to other VMs.&lt;/p&gt;
&lt;p&gt;The current version of Xenstore is &lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git%3Ba=tree%3Bf=tools/ocaml/xenstored%3Bh=0d762f2a61de098c0100814e0c140575b51688a3%3Bhb=stable-4.4&quot;&gt;already written in OCaml&lt;/a&gt;
and documented in the paper
&lt;a href=&quot;http://gazagnaire.org/pub/GH09.pdf&quot;&gt;OXenstored: an efficient hierarchical and transactional database using functional programming with reference cell comparisons&lt;/a&gt; presented at ICFP 2009.
The existing code works very reliably, but there is always room for improvement
for debuggability of such a complex system component. This is where Irmin, the
storage layer of Mirage 2.0, can help.&lt;/p&gt;
&lt;p&gt;But first, a quick Xenstore primer:&lt;/p&gt;
&lt;h3&gt;Xen and Xenstore in 30 seconds&lt;/h3&gt;

&lt;p&gt;The Xen hypervisor focuses on isolating VMs from each-other; the hypervisor provides a virtual CPU scheduler
and a memory allocator but does not perform I/O on behalf of guest VMs.
On a Xen host, privileged server VMs perform I/O on behalf of client VMs.
The configuration for calculating which server VM services requests for which client VMs is stored in Xenstore, as
key/value pairs.&lt;/p&gt;
&lt;p&gt;The following diagram shows a Xen host with a single client and server VM, with
a single virtual device in operation.  Disk blocks and network packets flow via
shared memory between Xen-aware drivers in the VMs, shown in the lower-half.
The control-plane, shown in the upper-half, contains the metadata about the
datapath: how the device should appear in the client VM; where the I/O should
go in the server VM; where the shared memory control structures are etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://openmirage.org/graphics/xenstore-diagram.png&quot; alt=&quot;Device configuration is stored in Xenstore as key=value pairs.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The Xenstore device attach protocol insists that all device keys are added
through atomic transactions, i.e. partial updates are never visible to clients and transactions
cannot interfere with each other.
A Xenstore server must abort transactions whose operations were not successfully
isolated from other transactions. After an abort, the client is expected to retry.
Each key=value write is communicated to the server as a single request/response, so transactions
comprising multiple writes are open for multiple round-trip times.
This protocol is baked into guest VM kernels (including Linux, FreeBSD, Mirage, ...)
and won't change anytime soon.&lt;/p&gt;
&lt;p&gt;Xenstore is used heavily when lots of VMs are starting in parallel. Each VM typically
has several devices, each of these devices is added in a parallel transaction and therefore
many transactions are open at once. If the server aborts too many of these transactions,
causing the clients to retry, the system will make little progress and may appear to live-lock.
The challenge for a Xenstore implementation is to minimise the number of aborted
transactions and retries, without compromising on the isolation guarantee.&lt;/p&gt;
&lt;h3&gt;Irmin Xenstore design goals&lt;/h3&gt;

&lt;p&gt;The design goals of the Irmin-based Mirage Xenstore server are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;safely restart after a crash;&lt;/li&gt;&lt;li&gt;make system debugging easy; and&lt;/li&gt;&lt;li&gt;go really fast!&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;How does Irmin help achieve these goals?&lt;/p&gt;
&lt;h3&gt;Restarting after crashes&lt;/h3&gt;

&lt;p&gt;The Xenstore service is a reliable component and very rarely crashes. However,
if a crash does occur, the impact is severe on currently running virtual
machines. There is no protocol for a running VM to close its connection to a
Xenstore and open a new one, so if Xenstore crashes then running VMs are simply
left orphaned. VMs in this state are impossible to manage properly: there is no
way to shut them down cleanly, to suspend/resume or migrate, or to configure
any disk or network interfaces. If Xenstore crashes, the host must be rebooted
shortly after.&lt;/p&gt;
&lt;p&gt;Irmin helps make Xenstore recoverable after a crash, by providing a library
that applications can use to persist and synchronise distributed data
structures on disk and in memory. By using Irmin to persist all our state
somewhere sensible and taking care to manage our I/O carefully, then the server
process becomes stateless and can be restarted at will.&lt;/p&gt;
&lt;p&gt;To make Xenstore use Irmin,
the first task is to enumerate all the different kinds of state in the running process.
This includes the obvious key-value pairs used for VM configuration
as well as data currently hidden away in the OCaml heap:
the addresses in memory of established communication rings,
per-domain quotas, pending watch events and watch registrations etc etc. 
Once the state has been enumerated it must be mapped onto key-value pairs which can
be stored in Irmin. Rather than using ad-hoc mappings everywhere, the Mirage Irmin
server has
&lt;a href=&quot;https://github.com/mirage/ocaml-xenstore-server/blob/blog/introducing-irmin-in-xenstore/server/pMap.mli&quot;&gt;persistent Maps&lt;/a&gt;,
&lt;a href=&quot;https://github.com/mirage/ocaml-xenstore-server/blob/blog/introducing-irmin-in-xenstore/server/pSet.ml&quot;&gt;persistent Sets&lt;/a&gt;,
&lt;a href=&quot;https://github.com/mirage/ocaml-xenstore-server/blob/blog/introducing-irmin-in-xenstore/server/pQueue.ml&quot;&gt;persistent Queues&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/mirage/ocaml-xenstore-server/blob/blog/introducing-irmin-in-xenstore/server/pRef.ml&quot;&gt;persistent reference cells&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Irmin applications are naturally written as functors, with the details of the persistence kept
abstract.
The following &lt;a href=&quot;https://github.com/mirage/irmin/blob/0.8.3/lib/core/irminView.mli&quot;&gt;Irmin-inspired&lt;/a&gt; signature represents what Xenstore needs
from Irmin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module type VIEW = sig
  type t

  val create: unit -&amp;gt; t Lwt.t
  (** Create a fresh VIEW from the current state of the store.
      A VIEW tracks state queries and updates and acts like a branch
      which has an explicit [merge]. *)

  val read: t -&amp;gt; Protocol.Path.t -&amp;gt; 
    [ `Ok of Node.contents | `Enoent of Protocol.Path.t ] Lwt.t
  (** Read a single key *)

  val list: t -&amp;gt; Protocol.Path.t -&amp;gt; 
    [ `Ok of string list | `Enoent of Protocol.Path.t ] Lwt.t
  (** List all the children of a key *)

  val write: t -&amp;gt; Protocol.Path.t -&amp;gt; Node.contents -&amp;gt; 
    [ `Ok of unit ] Lwt.t
  (** Update a single key *)

  val mem: t -&amp;gt; Protocol.Path.t -&amp;gt; bool Lwt.t
  (** Check whether a key exists *)

  val rm: t -&amp;gt; Protocol.Path.t -&amp;gt; [ `Ok of unit ] Lwt.t
  (** Remove a key *)

  val merge: t -&amp;gt; string -&amp;gt; bool Lwt.t
  (** Merge this VIEW into the current state of the store *)
end&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The main 'business logic' of Xenstore can then be functorised over this signature relatively easily.
All we need is to instantiate the functor using Irmin to persist the data somewhere sensible.
Eventually we will need two instantiations: one which runs as a userspace application and which
writes to the filesystem; and a second which will run as a
native Xen kernel (known as a &lt;a href=&quot;http://openmirage.org/blog/xenstore-stub.md&quot;&gt;xenstore stub domain&lt;/a&gt;)
and which will write to a fixed memory region (like a ramdisk).
The choice of which to use is left to the system administrator. Currently most (if not all)
distribution packagers choose to run Xenstore in userspace. Administrators who wish to
further secure their hosts are encouraged to run the kernelspace version to isolate Xenstore
from other processes (where a VM offers more isolation than a container, which offers more
isolation than a chroot). Note this choice is invisible to the guest VMs.&lt;/p&gt;
&lt;p&gt;So far in the Irmin Xenstore integration only the userspace instantiation has been implemented.
One of the most significant user-visible features is that all of the operations done through
Irmin can be inspected using the standard &lt;code&gt;git&lt;/code&gt; command line tool.
The runes to configure Irmin to write
&lt;a href=&quot;http://git-scm.com&quot;&gt;git&lt;/a&gt; format data to the filesystem are as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    let open Irmin_unix in
    let module Git = IrminGit.FS(struct
      let root = Some filename
      let bare = true
    end) in
    let module DB = Git.Make(IrminKey.SHA1)(IrminContents.String)(IrminTag.String) in
    DB.create () &amp;gt;&amp;gt;= fun db -&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where keys and values will be mapped into OCaml &lt;code&gt;strings&lt;/code&gt;, and our
&lt;code&gt;VIEW.t&lt;/code&gt; is simply an Irmin &lt;code&gt;DB.View.t&lt;/code&gt;. All that remains is to implement
&lt;code&gt;read&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt; by&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;mapping Xenstore &lt;code&gt;Protocol.Path.t&lt;/code&gt; values onto Irmin keys; and&lt;/li&gt;&lt;li&gt;mapping Xenstore &lt;code&gt;Node.contents&lt;/code&gt; records onto Irmin values.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;As it happens Xenstore and Irmin have similar notions of &amp;quot;paths&amp;quot; so the first mapping is
easy. We currently use &lt;a href=&quot;https://github.com/janestreet/sexplib&quot;&gt;sexplib&lt;/a&gt; to map Node.contents
values onto strings for Irmin.&lt;/p&gt;
&lt;p&gt;The resulting &lt;a href=&quot;https://github.com/mirage/ocaml-xenstore-server/blob/blog/introducing-irmin-in-xenstore/userspace/main.ml#L101&quot;&gt;Irmin glue module&lt;/a&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    let module V = struct
      type t = DB.View.t
      let create = DB.View.create
      let write t path contents =
        DB.View.update t (value_of_filename path) (Sexp.to_string (Node.sexp_of_contents contents))
      (* omit read,list,write,rm for brevity *)
      let merge t origin =
        let origin = IrminOrigin.create &amp;quot;%s&amp;quot; origin in
        DB.View.merge_path ~origin db [] t &amp;gt;&amp;gt;= function
        | `Ok () -&amp;gt; return true
        | `Conflict msg -&amp;gt;
          info &amp;quot;Conflict while merging database view: %s&amp;quot; msg;
          return false
    end in&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;write&lt;/code&gt; function simply calls through to Irmin's &lt;code&gt;update&lt;/code&gt; function, while the &lt;code&gt;merge&lt;/code&gt; function
calls Irmin's &lt;code&gt;merge_path&lt;/code&gt;. If Irmin cannot merge the transaction then our &lt;code&gt;merge&lt;/code&gt; function will
return &lt;code&gt;false&lt;/code&gt; and this will be signalled to the client, which is expected to retry the high-level
operation (e.g. hotplugging or unplugging a device).&lt;/p&gt;
&lt;p&gt;Now all that remains is to carefully adjust the I/O code so that effects (reading and writing packets
along the persistent connections) are interleaved properly with persisted state changes and
voil&amp;agrave;, we now have a xenstore which can recover after a restart.&lt;/p&gt;
&lt;h3&gt;Easy system debugging with Git&lt;/h3&gt;

&lt;p&gt;When something goes wrong on a Xen system it's standard procedure to&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;take a snapshot of the current state of Xenstore; and&lt;/li&gt;&lt;li&gt;examine the log files for signs of trouble.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;Unfortunately by the
time this is done, interesting Xenstore state has usually been deleted. Unfortunately the first task
of the human operator is to evaluate by-hand the logged actions in reverse to figure out what the state
actually was when the problem happened. Obviously this is tedious, error-prone and not always
possible since the log statements are ad-hoc and don't always include the data you need to know.&lt;/p&gt;
&lt;p&gt;In the new Irmin-powered Xenstore the history is preserved in a git-format repository, and can
be explored using your favourite git viewing tool. Each store
update has a compact one-line summary, a more verbose multi-line explanation and (of course)
the full state change is available on demand.&lt;/p&gt;
&lt;p&gt;For example you can view the history in a highly-summarised form with:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ git log --pretty=oneline --abbrev-commit --graph
* 2578013 Closing connection -1 to domain 0
* d4728ba Domain 0: rm /bench/local/domain/0/backend/vbd/10 = ()
* 4b55c99 Domain 0: directory /bench/local/domain/0/backend = [ vbd ]
* a71a903 Domain 0: rm /bench/local/domain/10 = ()
* f267b31 Domain 0: rm /bench/vss/uuid-10 = ()
* 94df8ce Domain 0: rm /bench/vm/uuid-10 = ()
* 0abe6b0 Domain 0: directory /bench/vm/uuid-10/domains = [  ]
* 06ddd3b Domain 0: rm /bench/vm/uuid-10/domains/10 = ()
* 1be2633 Domain 0: read /bench/local/domain/10/vss = /bench/vss/uuid-10
* 237a8e4 Domain 0: read /bench/local/domain/10/vm = /bench/vm/uuid-10
* 49d70f6 Domain 0: directory /bench/local/domain/10/device = [  ]
*   ebf4935 Merge view to /
|\
| * e9afd9f Domain 0: read /bench/local/domain/10 =
* | c4e0fa6 Domain 0: merging transaction 375
|/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The summarised form shows both individual operations as well as isolated transactions which
are represented as git branches.
You can then 'zoom in' and show the exact state change with commands like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git show bd44e03
commit bd44e0388696380cafd048eac49474f68d41bd3a
Author: 448 &amp;lt;irminsule@openmirage.org&amp;gt;
Date:   Thu Jan 1 00:09:26 1970 +0000

    Domain 0: merging transaction 363

diff --git a/*0/bench.dir/local.dir/domain.dir/7.dir/control.dir/shutdown.value b/*0/bench.dir/local.dir/domain.dir/7.dir/control.dir/shutdown.value
new file mode 100644
index 0000000..aa38106
--- /dev/null
+++ b/*0/bench.dir/local.dir/domain.dir/7.dir/control.dir/shutdown.value
@@ -0,0 +1 @@
+((creator 0)(perms((owner 7)(other NONE)(acl())))(value halt))&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Last but not least, you can &lt;code&gt;git checkout&lt;/code&gt; to the exact time the problem occurred and examine
the state of the store.&lt;/p&gt;
&lt;h3&gt;Going really fast&lt;/h3&gt;

&lt;p&gt;Xenstore is part of the control-plane of a Xen system and is most heavily stressed when lots
of VMs are being started in parallel. Each VM has multiple devices and each device is added in a
separate transaction. These transactions remain open for multiple client-server round-trips, as
each individual operation is sent to Xenstore as a separate RPC. 
To provide isolation, each Xenstore transaction is represented by an Irmin &lt;code&gt;VIEW.t&lt;/code&gt; which
is persisted on disk as a git branch.
When starting lots of VMs in
parallel, lots of branches are created and must be merged back together. If a branch cannot
be merged then an abort signal is sent to the client and it must retry.&lt;/p&gt;
&lt;p&gt;Earlier versions of Xenstore had naive transaction merging algorithms
which aborted many of these transactions, causing the clients to re-issue them.This led to a live-lock
where clients were constantly reissuing the same transactions again and again.&lt;/p&gt;
&lt;p&gt;Happily Irmin's default merging strategy is much better: by default Irmin
records the results of every operation and replays the operations on merge
(similar to &lt;code&gt;git rebase&lt;/code&gt;). Irmin will only generate a &lt;code&gt;Conflict&lt;/code&gt; and signal an
abort if the client would now see different results to those it has already
received (imagine reading a key twice within an isolated transaction and seeing
two different values). In the case of parallel VM starts, the keys are disjoint
by construction so all transactions are merged trivially; clients never receive
abort signals; and therefore the system makes steady, predictable progress
starting the VMs.&lt;/p&gt;
&lt;h3&gt;Trying it out&lt;/h3&gt;

&lt;p&gt;The Irmin Xenstore is under &lt;a href=&quot;https://github.com/mirage/ocaml-xenstore-server&quot;&gt;active development&lt;/a&gt;
but you can try it by:&lt;/p&gt;
&lt;p&gt;Install basic development tools along with the xen headers and xenstore tools (NB you don't
actually have to run Xen):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  sudo apt-get install libxen-dev xenstore-utils opam build-essential m4&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Initialise opam (if you haven't already). Make sure you have OCaml 4.01:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  opam init
  opam update
  opam switch 4.01.0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install the OCaml build dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  opam install lwt irmin git sexplib cstruct uri sexplib cmdliner xen-evtchn shared-memory-ring io-page ounit&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Clone the code and build it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  git clone git://github.com/mirage/ocaml-xenstore-server
  cd ocaml-xenstore-server
  make&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run a server (as a regular user):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ./main.native --database /tmp/db --enable-unix --path /tmp/xenstored&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In a separate terminal, perform some operations:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  export XENSTORED_PATH=/tmp/xenstored
  xenstore-write -s /one/two/three 4 /five/six/seven 8
  xenstore-ls -s /&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next check out the git repo generated by Irmin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd /tmp/db
  git log&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comments and/or contributions are welcome: join the &lt;a href=&quot;http://lists.xenproject.org/cgi-bin/mailman/listinfo/mirageos-devel&quot;&gt;Mirage email list&lt;/a&gt; and say hi!&lt;/p&gt;

   </content><id>https://mirage.io/blog/introducing-irmin-in-xenstore</id><title type="text">Using Irmin to add fault-tolerance to the Xenstore database</title><updated>2014-07-21T11:00:00+00:00</updated><author><email></email><name>Dave Scott</name></author></entry><entry><link href="https://mirage.io/blog/introducing-irmin" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;blockquote&gt;&lt;p&gt;This is the first post in a series which will describe &lt;a href=&quot;https://github.com/mirage/irmin&quot;&gt;Irmin&lt;/a&gt;,
 the new Git-like storage layer for Mirage OS 2.0. This post gives a
 high-level description on Irmin and its overall architecture, and
 later posts will detail how to use Irmin in real systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mirage/irmin&quot;&gt;Irmin&lt;/a&gt; is a library to persist and synchronize distributed
data structures both on-disk and in-memory. It enables a style of
programming very similar to the &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; workflow, where
distributed nodes fork, fetch, merge and push data between
each other. The general idea is that you want every active node to
get a local (partial) copy of a global database and always be very
explicit about how and when data is shared and migrated.&lt;/p&gt;
&lt;p&gt;Irmin is &lt;em&gt;not&lt;/em&gt;, strictly speaking, a full database engine. It
is, as are all other components of Mirage OS, a collection of
libraries designed to solve different flavours of the challenges raised
by the &lt;a href=&quot;http://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;CAP theorem&lt;/a&gt;. Each application can select the right
combination of libraries to solve its particular distributed problem. More
precisely, Irmin consists of a core of well-defined low-level
data structures that specify how data should be persisted
and be shared across nodes. It defines algorithms for efficient
synchronization of those distributed low-level constructs. It also
builds a collection of higher-level data structures, like persistent
&lt;a href=&quot;https://github.com/mirage/merge-queues&quot;&gt;mergeable queues&lt;/a&gt;, that can be used by developers without
having to know precisely how Irmin works underneath.&lt;/p&gt;
&lt;p&gt;Since it's a part of Mirage OS, Irmin does not make strong assumptions about the
OS environment that it runs in. This makes the system very portable, and the
details below hold for in-memory databases as well as for slower persistent
serialization such as SSDs, hard drives, web browser local storage, or even
the Git file format.&lt;/p&gt;
&lt;h3&gt;Persistent Data Structures&lt;/h3&gt;

&lt;p&gt;Persistent data structures are well known and used pervasively in many
different areas. The programming language community has
investigated the concepts &lt;a href=&quot;https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf&quot;&gt;widely&lt;/a&gt; (and this is &lt;a href=&quot;http://en.wikipedia.org/wiki/Object_copy&quot;&gt;not
limited&lt;/a&gt; to functional programming), and in the meantime,
the systems community experimented with various persistent
strategies such as &lt;a href=&quot;http://en.wikipedia.org/wiki/Copy-on-write&quot;&gt;copy-on-write&lt;/a&gt; filesystems. In most of these
systems, the main concern is how to optimize the space complexity by
maximizing the sharing of immutable sub-structures.&lt;/p&gt;
&lt;p&gt;The Irmin design ideas share roots with previous works on persistent data
structures, as it provides an efficient way to &lt;em&gt;fork&lt;/em&gt; data structures,
but it also explores new strategies and mechanisms to be able to
efficiently &lt;em&gt;merge&lt;/em&gt; back these forked structures. This offers
programming constructs very similar to the Git workflow.&lt;/p&gt;
&lt;p&gt;Irmin focuses on two main aspects:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Semantics&lt;/strong&gt;: what properties the resulting merged objects should
verify.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Complexity&lt;/strong&gt;: how to design efficient merge and synchronization
primitives, taking advantage of the immutable nature of the underlying
objects.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Although it is pervasively used, &lt;em&gt;data persistence&lt;/em&gt; has a very broad and
fuzzy meaning. In this blog post, I will refer to data persistence as
a way for:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;a single process to lazily populate a process memory on startup.
 You need this when you want the process to be able to resume while
 holding part of its previous state if it crashes&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;concurrent processes to share references between objects living in
 a global pool of data. Sharing references, as opposed to sharing
 values, reduces memory copies and allow different processes to
 concurrently update a shared store.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;In both cases, you need a global pool of data (the Irmin &lt;em&gt;block store&lt;/em&gt;)
and a way to name values in that pool (the Irmin &lt;em&gt;tag store&lt;/em&gt;).&lt;/p&gt;
&lt;h3&gt;The Block Store: a Virtual Heap&lt;/h3&gt;

&lt;p&gt;Even high-level data structures need to be allocated in memory, and it
is the purpose of the runtime to map such high-level constructs into
low-level memory graph blocks. One of the strengths of &lt;a href=&quot;http://ocaml.org&quot;&gt;OCaml&lt;/a&gt;
is the very simple and deterministic mapping from high-level data
structures to low-level block representations (the &lt;em&gt;heap&lt;/em&gt;): see for
instance, the excellent series of blog posts on &lt;a href=&quot;http://rwmj.wordpress.com/2009/08/04/ocaml-internals/&quot;&gt;OCaml
internals&lt;/a&gt; by Richard W. Jones, or
&lt;a href=&quot;https://realworldocaml.org/v1/en/html/memory-representation-of-values.html&quot;&gt;Chapter 20: Memory Representation of Values&lt;/a&gt; in
&lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An Irmin &lt;em&gt;block store&lt;/em&gt; can be seen as a virtual OCaml heap that uses a more
abstract way of connecting heap blocks. Instead of using the concrete physical
memory addresses of blocks, Irmin uses the hash of the block contents as an
address. As for any &lt;a href=&quot;http://en.wikipedia.org/wiki/Content-addressable_storage&quot;&gt;content-addressable storage&lt;/a&gt;, this gives Irmin
block stores a lot of nice properties and greatly simplifies the way distributed
stores can be synchronized.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Persistent&lt;/em&gt; data structures are immutable, and once a block is created in
the block store, its contents will never change again.
Updating an immutable data structure means returning a completely new
structure, while trying to share common sub-parts to avoid the cost of
making new allocations as much as possible. For instance, modifying a
value in a persistent tree means creating a chain of new blocks, from
the root of the tree to the modified leaf.
For convenience, Irmin only considers acyclic block graphs --
it is difficult in a non-lazy pure language to generate complex cyclic
values with reasonable space usage.&lt;/p&gt;
&lt;p&gt;Conceptually, an Irmin block store has the following signature:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;type t
(** The type for Irmin block store. *)

type key
(** The type for Irmin pointers *)

type value = ...
(** The type for Irmin blocks *)

val read: t -&amp;gt; key -&amp;gt; value option
(** [read t k] is the block stored at the location [k] of the
store. It is [None] if no block is available at that location. *)

val add: t -&amp;gt; key -&amp;gt; value -&amp;gt; t
(** [add t k v] is the *new* store storing the block [v] at the
location [k]. *)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Persistent data structures are very efficient to store in memory and on
disk as you do not need &lt;a href=&quot;http://en.wikipedia.org/wiki/Write_barrier&quot;&gt;write barriers&lt;/a&gt;, and updates
can be written &lt;a href=&quot;http://en.wikipedia.org/wiki/Write_amplification#Sequential_writes&quot;&gt;sequentially&lt;/a&gt; instead of requiring random
access into the data structure.&lt;/p&gt;
&lt;h3&gt;The Tag Store: Controlled Mutability and Concurrency&lt;/h3&gt;

&lt;p&gt;So far, we have only discussed purely functional data structures,
where updating a structure means returning a pointer to a new
structure in the heap that shares most of its contents with the previous
one. This style of programming is appealing when implementing
&lt;a href=&quot;http://openmirage.org/blog/ocaml-tls-api-internals-attacks-mitigation&quot;&gt;complex protocols&lt;/a&gt; as it leads to better compositional properties.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://openmirage.org/graphics/irmin-stores.png&quot; width=&quot;250px&quot; style=&quot;float:right; border: 5px&quot; alt=&quot;Irmin Stores&quot;/&gt;&lt;/p&gt;
&lt;p&gt;However, this makes sharing information between processes much more
difficult, as you need a way to &amp;quot;inject&amp;quot; the state of one structure into another process's memory. In order to do so, Irmin borrows the concept of
&lt;em&gt;branches&lt;/em&gt; from Git by relating every operation to a branch name, and
modifying the tip of the branch if it has side-effects.
The Irmin &lt;em&gt;tag store&lt;/em&gt; is the only mutable part of the whole system and
is responsible for mapping some global (branch) names to blocks in the
block store. These tag names can then be used to pass block references between
different processes.&lt;/p&gt;
&lt;p&gt;A block store and a tag store can be combined to build
a higher-level store (the Irmin store) with fine concurrency control
and atomicity guarantees. As mutation happens only in the tag store,
we can ensure that as long a given tag is not updated, no change made
in the block store will be visible by anyone. This also gives a nice
story for concurrency: as in Git, creating a concurrent view of the
store is the straightforward operation of creating a new tag that
denotes a new branch. All concurrent operations can then happen on
different branches:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;type t
(** The type for Irmin store. *)

type tag
(** Mutable tags *)

type key = ...
(** The type for user-defined keys (for instance a list of strings) *)

type value = ...
(** The type for user-defined values *)

val read: t -&amp;gt; ?branch:tag -&amp;gt; key -&amp;gt; value option
(** [read t ?branch k] reads the contents of the key [k] in the branch
[branch] of the store [t]. If no branch is specified, then use the
[&amp;quot;HEAD&amp;quot;] one. *)

val update: t -&amp;gt; ?branch:tag -&amp;gt; key -&amp;gt; value -&amp;gt; unit
(** [update t ?branch k v] *updates* the branch [branch] of the store
[t] the association of the key [key] to the value [value]. *)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interactions between concurrent processes are completely explicit and
need to happen via synchronization points and merge events (more on
this below). It is also possible to emulate the behaviour of
transactions by recording the sequence of operations (&lt;code&gt;read&lt;/code&gt; and
&lt;code&gt;update&lt;/code&gt;) on a given branch -- that sequence is used before a merge
to check that all the operations are valid (i.e. that all reads in the
transaction still return the same result on the current tip of the
store) and it can be discarded after the merge takes place.&lt;/p&gt;
&lt;h3&gt;Merging Data Structures&lt;/h3&gt;

&lt;p&gt;To merge two data structures in a consistent way, one has to compute
the sequence of operations which leads, from an initial common state, to two
diverging states (the ones that you want to merge). Once these two
sequences of operations have been found, they must be combined (if
possible) in a sensible way and then applied again back on the initial
state, in order to get the new merged state. This mechanism sounds
nice, but in practice it has two major drawbacks:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It does not specify how we find the initial state from two diverging
 states -- this is generally not possible (think of diverging
 counters); and&lt;/li&gt;&lt;li&gt;It means we need to compute the sequence of &lt;code&gt;update&lt;/code&gt; operations
 that leads from one state to an other.  This is easier than finding
 the common initial state between two branches, but is still generally
 not very efficient.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;In Irmin, we solve these problems using two mechanisms.&lt;/p&gt;
&lt;p&gt;First of all, an interesting observation is that that we can model the
sequence of store tips as a purely functional data-structure. We model
the partial order of tips as a directed acyclic graph where nodes are
the tips, and there is an edge between two tips if either &lt;em&gt;(i)&lt;/em&gt; one is
the result of applying a sequence of &lt;code&gt;update&lt;/code&gt;s to the other, or &lt;em&gt;(ii)&lt;/em&gt;
one is the result of a merge operation between the other and some
other tips. Practically speaking, that means that every tip should
contains the list of its predecessors as well as the actual data it
associated to. As it is purely functional, we can (and we do) store
that graph in an Irmin block store.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://openmirage.org/graphics/irmin-merge.png&quot; width=&quot;150px&quot; style=&quot;float:right; border:5px&quot; alt=&quot;Finding a common ancestor&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Having a persistent and immutable history is good for various obvious
reasons, such as access to a forensics if an error occurs or
snapshot and rollback features for free. But another less obvious
useful property is that we can now find the greatest common
ancestors of two data structures without an expensive global search.&lt;/p&gt;
&lt;p&gt;The second mechanism is that we require the data structures used in
Irmin to be equipped with a well-defined 3-way merge operation, which
takes two diverging states, the corresponding initial state (computed
using the previous mechanism) and that return either a new state or a
conflict (similar to the &lt;code&gt;EAGAIN&lt;/code&gt; exception that you get when you try
to commit a conflicting transaction in more traditional transactional
databases). Having access to the common ancestors makes a great
difference when designing new merge functions, as usually no
modification is required to the data-structure itself. In contrast,
the conventional approach is more invasive as it requires the data
structure to carry more information about the operation history
(for instance &lt;a href=&quot;http://hal.upmc.fr/docs/00/55/55/88/PDF/techreport.pdf&quot;&gt;conflict-free replicated
datatypes&lt;/a&gt;, which relies on unbounded vector clocks).&lt;/p&gt;
&lt;p&gt;We have thus been designing interesting data structure equipped with a 3-way
merge, such as counters, &lt;a href=&quot;https://github.com/mirage/merge-queues&quot;&gt;queues&lt;/a&gt; and ropes.&lt;/p&gt;
&lt;p&gt;This is what the implementation of distributed and mergeable counters
looks like:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;type t = int
(** distributed counters are just normal integers! *)

let merge ~old t1 t2 = old + (t1-old) + (t2-old)
(** Merging counters means:
   - computing the increments of the two states [t1] and [t2]
     relatively to the initial state [old]; and
   - and add these two increments to [old]. *)&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Next steps, how to git at your data&lt;/h3&gt;

&lt;p&gt;From a design perspective, having access to the history makes it easier to
design complex data structures with good compositional properties to use in
unikernels. Moreover, as we made few assumptions on how the substrate of the
low-level constructs need to be implemented, the Irmin engine can be be ported
to many exotic backends such as JavaScript or anywhere else that Mirage OS
runs: this is just a matter of implementing a rather trivial
&lt;a href=&quot;https://github.com/mirage/irmin/blob/4b06467ddee1e20c35bad64812769587fb9fa8a4/lib/core/irminStore.mli#L61&quot;&gt;signature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From a developer perspective, this means that the full history of operations is
available to inspect, and that the history model is very similar to the Git
workflow that is increasingly familiar. So similar, in fact, that we've
developed a bidirectional mapping between Irmin data structures and the Git
format to permit the &lt;code&gt;git&lt;/code&gt; command-line to interact with.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://openmirage.org/blog/introducing-irmin-in-xenstore&quot;&gt;next post in our series&lt;/a&gt; explains what &lt;a href=&quot;http://dave.recoil.org/&quot;&gt;Dave Scott&lt;/a&gt; has been doing
with the new version of the &lt;a href=&quot;http://wiki.xen.org/wiki/XenStoreReference&quot;&gt;Xenstore&lt;/a&gt; database that powers every Xen host,
where the entire database is stored in a prefix-tree Irmin data-structure and exposed
as a Git repository which is live-updated!  Here's a sneak preview...&lt;/p&gt;
&lt;div class=&quot;flex-video&quot;&gt;
  &lt;iframe allowfullscreen=&quot;1&quot; frameborder=&quot;0&quot; src=&quot;//www.youtube-nocookie.com/embed/DSzvFwIVm5s&quot; height=&quot;360&quot; width=&quot;480&quot;&gt; &amp;nbsp; &lt;/iframe&gt;
&lt;/div&gt;


   </content><id>https://mirage.io/blog/introducing-irmin</id><title type="text">Introducing Irmin: Git-like distributed, branchable storage</title><updated>2014-07-18T13:00:00+00:00</updated><author><email></email><name>Thomas Gazagnaire</name></author></entry><entry><link href="https://mirage.io/blog/intro-tcpip" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;A critical part of any unikernel is its network stack -- it's difficult to
think of a project that needs a cloud platform or runs on a set-top box with no
network communications.&lt;/p&gt;
&lt;p&gt;Mirage provides a number of &lt;a href=&quot;https://github.com/mirage/mirage/tree/master/types&quot;&gt;module
types&lt;/a&gt; that abstract
interfaces at different layers of the network stack, allowing unikernels to
customise their own stack based on their deployment needs. Depending on the
abstractions your unikernel uses, you can fulfill these abstract interfaces
with implementations ranging from the venerable and much-imitated Unix sockets
API to a clean-slate Mirage &lt;a href=&quot;https://github.com/mirage/mirage-tcpip&quot;&gt;TCP/IP
stack&lt;/a&gt; written from the ground up in
pure OCaml!&lt;/p&gt;
&lt;p&gt;A Mirage unikernel will not use &lt;em&gt;all&lt;/em&gt; these interfaces, but will pick those that
are appropriate for the particular application at hand. If your unikernel just
needs a standard TCP/IP stack, the &lt;code&gt;STACKV4&lt;/code&gt; abstraction will be sufficient.
However, if you want more control over the implementation of the different
layers in the stack or you don't need TCP support, you might construct your
stack by hand using just the &lt;a href=&quot;https://github.com/mirage/mirage/blob/8b59fbf0b223b3c5c70d4939b5674ecdd7521804/types/V1.mli#L263&quot;&gt;NETWORK&lt;/a&gt;, &lt;a href=&quot;https://github.com/mirage/mirage/blob/8b59fbf0b223b3c5c70d4939b5674ecdd7521804/types/V1.mli#L316&quot;&gt;ETHIF&lt;/a&gt;, &lt;a href=&quot;https://github.com/mirage/mirage/blob/8b59fbf0b223b3c5c70d4939b5674ecdd7521804/types/V1.mli#L368&quot;&gt;IPV4&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirage/mirage/blob/8b59fbf0b223b3c5c70d4939b5674ecdd7521804/types/V1.mli#L457&quot;&gt;UDPV4&lt;/a&gt; interfaces.&lt;/p&gt;
&lt;h2&gt;How a Stack Looks to a Mirage Application&lt;/h2&gt;

&lt;p&gt;Mirage provides a high-level interface to a TCP/IP network stack through the module type
&lt;a href=&quot;https://github.com/mirage/mirage/blob/8b59fbf0b223b3c5c70d4939b5674ecdd7521804/types/V1.mli#L581&quot;&gt;STACKV4&lt;/a&gt;.
(Currently this can be included with &lt;code&gt;open V1_LWT&lt;/code&gt;, but soon &lt;code&gt;open
V2_LWT&lt;/code&gt; will also bring this module type into scope as well when Mirage 2.0 is released.)&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;(** Single network stack *)                                                     
module type STACKV4 = STACKV4                                                   
  with type 'a io = 'a Lwt.t                                                    
   and type ('a,'b,'c) config = ('a,'b,'c) stackv4_config                       
   and type ipv4addr = Ipaddr.V4.t                                              
   and type buffer = Cstruct.t &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;STACKV4&lt;/code&gt; has useful high-level functions, a subset of which are reproduced below:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;    val listen_udpv4 : t -&amp;gt; port:int -&amp;gt; UDPV4.callback -&amp;gt; unit
    val listen_tcpv4 : t -&amp;gt; port:int -&amp;gt; TCPV4.callback -&amp;gt; unit
    val listen : t -&amp;gt; unit io&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as well as submodules that include functions for data transmission:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;    module UDPV4 :
      sig
        type callback =
            src:ipv4addr -&amp;gt; dst:ipv4addr -&amp;gt; src_port:int -&amp;gt; buffer -&amp;gt; unit io
        val input :
          listeners:(dst_port:int -&amp;gt; callback option) -&amp;gt; t -&amp;gt; ipv4input
        val write :
          ?source_port:int -&amp;gt;
          dest_ip:ipv4addr -&amp;gt; dest_port:int -&amp;gt; t -&amp;gt; buffer -&amp;gt; unit io&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;    module TCPV4 :
      sig
        type flow
        type callback = flow -&amp;gt; unit io
        val read : flow -&amp;gt; [ `Eof | `Error of error | `Ok of buffer ] io
        val write : flow -&amp;gt; buffer -&amp;gt; unit io
        val close : flow -&amp;gt; unit io
        val create_connection :
          t -&amp;gt; ipv4addr * int -&amp;gt; [ `Error of error | `Ok of flow ] io
        val input : t -&amp;gt; listeners:(int -&amp;gt; callback option) -&amp;gt; ipv4input&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These should look rather familiar if you've used the Unix sockets
API before, with one notable difference: the stack accepts functional
callbacks to react to events such as a new connection request.  This
permits callers of the library to define the precise datastructures that
are used to store intermediate state (such as active connections).
This becomes important when building very scalable systems that have
to deal with &lt;a href=&quot;https://en.wikipedia.org/wiki/C10k_problem&quot;&gt;lots of concurrent connections&lt;/a&gt;
efficiently.&lt;/p&gt;
&lt;h2&gt;Configuring a Stack&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;STACKV4&lt;/code&gt; signature shown so far is just a module signature, and you
need to find a concrete module that satisfies that signature.  The known
implementations of a module can be found in the &lt;code&gt;mirage&lt;/code&gt; CLI frontend,
which provids the &lt;a href=&quot;https://github.com/mirage/mirage/blob/8b59fbf0b223b3c5c70d4939b5674ecdd7521804/lib/mirage.mli#L266&quot;&gt;configuration API&lt;/a&gt; for unikernels.&lt;br/&gt;There are currently two implementations for &lt;code&gt;STACKV4&lt;/code&gt;: &lt;code&gt;direct&lt;/code&gt; and &lt;code&gt;socket&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;module STACKV4_direct: CONFIGURABLE with                                        
  type t = console impl * network impl * [`DHCP | `IPV4 of ipv4_config]         
                                                                                
module STACKV4_socket: CONFIGURABLE with                                        
  type t = console impl * Ipaddr.V4.t list  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;socket&lt;/code&gt; implementations rely on an underlying OS kernel to provide the
transport, network, and data link layers, and therefore can't be used for a Xen
guest VM deployment.  Currently, the only way to use &lt;code&gt;socket&lt;/code&gt; is by configuring
your Mirage project for Unix with &lt;code&gt;mirage configure --unix&lt;/code&gt;.  This is the mode
you will most often use when developing high-level application logic that doesn't
need to delve into the innards of the network stack (e.g. a REST website).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;direct&lt;/code&gt; implementations use the &lt;a href=&quot;https://github.com/mirage/mirage-tcpip&quot;&gt;mirage-tcpip&lt;/a&gt; implementations of the
transport, network, and data link layers.  When you use this stack, all the network
traffic from the Ethernet level up will be handled in pure OCaml.  This means that the
&lt;code&gt;direct&lt;/code&gt; stack will work with either a Xen
guest VM (provided there's a valid network configuration for the unikernel's
running environment of course), or a Unix program if there's a valid &lt;a href=&quot;https://en.wikipedia.org/wiki/TUN/TAP&quot;&gt;tuntap&lt;/a&gt; interface.
&lt;code&gt;direct&lt;/code&gt; this works with both &lt;code&gt;mirage configure --xen&lt;/code&gt; and &lt;code&gt;mirage configure --unix&lt;/code&gt;
as long as there is a corresponding available device when the unikernel is run.&lt;/p&gt;
&lt;p&gt;There are a few Mirage functions that provide IPv4 (and UDP/TCP) stack
implementations (of type &lt;code&gt;stackv4 impl&lt;/code&gt;), usable from your application code.
The &lt;code&gt;stackv4 impl&lt;/code&gt; is generated in &lt;code&gt;config.ml&lt;/code&gt; by some logic set when the
program is &lt;code&gt;mirage configure&lt;/code&gt;'d - often by matching an environment variable.
This means it's easy to flip between different stack implementations when
developing an application just be recompiling the application.  The &lt;code&gt;config.ml&lt;/code&gt;
below allows the developer to build socket code with &lt;code&gt;NET=socket make&lt;/code&gt; and
direct code with &lt;code&gt;NET=direct make&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;let main = foreign &amp;quot;Services.Main&amp;quot; (console @-&amp;gt; stackv4 @-&amp;gt; job)

let net =
  try match Sys.getenv &amp;quot;NET&amp;quot; with
    | &amp;quot;direct&amp;quot; -&amp;gt; `Direct
    | &amp;quot;socket&amp;quot; -&amp;gt; `Socket
    | _        -&amp;gt; `Direct
  with Not_found -&amp;gt; `Direct

let dhcp =
  try match Sys.getenv &amp;quot;ADDR&amp;quot; with
    | &amp;quot;dhcp&amp;quot;   -&amp;gt; `Dhcp
    | &amp;quot;static&amp;quot; -&amp;gt; `Static
    | _ -&amp;gt; `Dhcp
  with Not_found -&amp;gt; `Dhcp

let stack console =
  match net, dhcp with
  | `Direct, `Dhcp   -&amp;gt; direct_stackv4_with_dhcp console tap0
  | `Direct, `Static -&amp;gt; direct_stackv4_with_default_ipv4 console tap0
  | `Socket, _       -&amp;gt; socket_stackv4 console [Ipaddr.V4.any]

let () =
  register &amp;quot;services&amp;quot; [
    main $ default_console $ stack default_console
  ]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moreover, it's possible to configure multiple stacks individually for use in
the same program, and to &lt;code&gt;register&lt;/code&gt; multiple modules from the same &lt;code&gt;config.ml&lt;/code&gt;.
This means functions can be written such that they're aware of the network
stack they ought to be using, and no other - a far cry from developing network
code over most socket interfaces, where it can be quite difficult to separate
concerns nicely.&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;let client = foreign &amp;quot;Unikernel.Client&amp;quot; (console @-&amp;gt; stackv4 @-&amp;gt; job)
let server = foreign &amp;quot;Unikernel.Server&amp;quot; (console @-&amp;gt; stackv4 @-&amp;gt; job) 

let client_netif = (netif &amp;quot;0&amp;quot;)
let server_netif = (netif &amp;quot;1&amp;quot;) 

let client_stack = direct_stackv4_with_dhcp default_console client_netif
let server_stack = direct_stackv4_with_dhcp default_console server_netif

let () = 
  register &amp;quot;unikernel&amp;quot; [
    main $ default_console $ client_stack;
    server $ default_console $ server_stack 
  ]

&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Acting on Stacks&lt;/h2&gt;

&lt;p&gt;Most network applications will either want to listen for incoming connections
and respond to that traffic with information, or to connect to some remote
host, execute a query, and receive information.  &lt;code&gt;STACKV4&lt;/code&gt; offers simple ways
to define functions implementing either of these patterns.&lt;/p&gt;
&lt;h3&gt;Establishing and Communicating Across Connections&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;STACKV4&lt;/code&gt; offers &lt;code&gt;listen_tcpv4&lt;/code&gt; and &lt;code&gt;listen_udpv4&lt;/code&gt; functions for establishing
listeners on specific ports.  Both take a &lt;code&gt;stack impl&lt;/code&gt;, a named &lt;code&gt;port&lt;/code&gt;, and a
&lt;code&gt;callback&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;For UDP listeners, which are datagram-based rather than connection-based,
&lt;code&gt;callback&lt;/code&gt; is a function of the source IP, destination IP, source port, and the
&lt;code&gt;Cstruct.t&lt;/code&gt; that contains the payload data.  Applications that wish to respond
to incoming UDP packets with their own UDP responses (e.g., DNS servers) can
use this information to construct reply packets and send them with
&lt;code&gt;UDPV4.write&lt;/code&gt; from within the callback function.&lt;/p&gt;
&lt;p&gt;For TCP listeners, &lt;code&gt;callback&lt;/code&gt; is a function of &lt;code&gt;TCPV4.flow -&amp;gt; unit Lwt.t&lt;/code&gt;.  &lt;code&gt;STACKV4.TCPV4&lt;/code&gt; offers &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, and &lt;code&gt;close&lt;/code&gt; on &lt;code&gt;flow&lt;/code&gt;s for application writers to build higher-level protocols on top of.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TCPV4&lt;/code&gt; also offers &lt;code&gt;create_connection&lt;/code&gt;, which allows client application code to establish TCP connections with remote servers.  In success cases, &lt;code&gt;create_connection&lt;/code&gt; returns a &lt;code&gt;TCPV4.flow&lt;/code&gt;, which can be acted on just as the data in a &lt;code&gt;callback&lt;/code&gt; above.  There's also a polymorphic variant for error conditions, such as an unreachable remote server.&lt;/p&gt;
&lt;h3&gt;A Simple Example&lt;/h3&gt;

&lt;p&gt;Some very simple examples of user-level TCP code are included in &lt;a href=&quot;https://github.com/mirage/mirage-tcpip/tree/master/examples&quot;&gt;mirage-tcpip/examples&lt;/a&gt;.  &lt;code&gt;config.ml&lt;/code&gt; is identical to the first configuration example above, and will build a &lt;code&gt;direct&lt;/code&gt; stack by default.&lt;/p&gt;
&lt;p&gt;Imagine a very simple application - one which simply repeats any data back to the sender, until the sender gets bored and wanders off (&lt;a href=&quot;https://en.wikipedia.org/wiki/Echo_Protocol&quot;&gt;RFC 862&lt;/a&gt;, for the curious).&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;open Lwt
open V1_LWT

module Main (C: V1_LWT.CONSOLE) (S: V1_LWT.STACKV4) = struct
  let report_and_close c flow message =
    C.log c message;
    S.TCPV4.close flow

  let rec echo c flow =
    S.TCPV4.read flow &amp;gt;&amp;gt;= fun result -&amp;gt; (
      match result with  
        | `Eof -&amp;gt; report_and_close c flow &amp;quot;Echo connection closure initiated.&amp;quot;
        | `Error e -&amp;gt; 
          let message = 
          match e with 
            | `Timeout -&amp;gt; &amp;quot;Echo connection timed out; closing.\n&amp;quot;
            | `Refused -&amp;gt; &amp;quot;Echo connection refused; closing.\n&amp;quot;
            | `Unknown s -&amp;gt; (Printf.sprintf &amp;quot;Echo connection error: %s\n&amp;quot; s)
             in
          report_and_close c flow message
        | `Ok buf -&amp;gt;
            S.TCPV4.write flow buf &amp;gt;&amp;gt;= fun () -&amp;gt; echo c flow
        ) 

  let start c s = 
    S.listen_tcpv4 s ~port:7 (echo c);
    S.listen s

end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the application programmer needs to do is define functionality in relation to &lt;code&gt;flow&lt;/code&gt; for sending and receiving data, establish this function as a callback with &lt;code&gt;listen_tcpv4&lt;/code&gt;, and start a listening thread with &lt;code&gt;listen&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;More Complex Uses&lt;/h2&gt;

&lt;p&gt;An OCaml HTTP server, &lt;a href=&quot;http://www.github.com/mirage/ocaml-cohttp&quot;&gt;Cohttp&lt;/a&gt;, is currently powering this very blog.  A simple static webserver using Cohttp &lt;a href=&quot;https://github.com/mirage/mirage-skeleton/tree/master/static_website&quot;&gt;is included in &lt;code&gt;mirage-skeleton&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tls.openmirage.org/&quot;&gt;The OCaml-TLS demonstration server&lt;/a&gt; announced here &lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;just a few days ago&lt;/a&gt; is also running atop Cohttp - &lt;a href=&quot;https://github.com/mirleft/tls-demo-server&quot;&gt;source is available on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The future&lt;/h2&gt;

&lt;p&gt;Mirage's TCP/IP stack is under active development!  &lt;a href=&quot;https://github.com/mirage/mirage-tcpip/search?q=TODO&amp;amp;ref=cmdform&quot;&gt;Some low-level details&lt;/a&gt; are still stubbed out, and we're working on implementing some of the trickier corners of TCP, as well as &lt;a href=&quot;http://somerandomidiot.com/blog/2014/05/22/throwing-some-fuzzy-dice/&quot;&gt;doing automated testing&lt;/a&gt; on the stack.  We welcome testing tools, bug reports, bug fixes, and new protocol implementations!&lt;/p&gt;

   </content><id>https://mirage.io/blog/intro-tcpip</id><title type="text">Fitting the modular MirageOS TCP/IP stack together</title><updated>2014-07-17T13:00:00+00:00</updated><author><email></email><name>Mindy Preston</name></author></entry><entry><link href="https://mirage.io/blog/update-on-vchan" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;em&gt;Today's post is an update to &lt;a href=&quot;https://github.com/vbmithr&quot;&gt;Vincent Bernardoff's&lt;/a&gt;
&lt;a href=&quot;http://openmirage.org/blog/introducing-vchan&quot;&gt;introducing vchan&lt;/a&gt; blog
post, updated to use the modern build scheme for Mirage.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Unless you are familiar with Xen's source code, there is little chance
that you've ever heard of the &lt;em&gt;vchan&lt;/em&gt; library or
protocol. Documentation about it is very scarce: a description can be
found on vchan's
&lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git%3Ba=blob%3Bf=xen/include/public/io/libxenvchan.h%3Bhb=HEAD&quot;&gt;public header file&lt;/a&gt;,
that I quote here for convenience:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Originally borrowed from the
&lt;a href=&quot;http://www.qubes-os.org&quot;&gt;Qubes OS Project&lt;/a&gt;, this code (i.e. libvchan)
has been substantially rewritten [...]
This is a library for inter-domain communication.  A standard Xen ring
buffer is used, with a datagram-based interface built on top.  The
grant reference and event channels are shared in XenStore under a
user-specified path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This protocol uses shared memory for inter-domain communication,
i.e. between two VMs residing in the same Xen host, and uses Xen's
mechanisms -- more specifically,
&lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=1160234&amp;amp;seqNum=3&quot;&gt;ring buffers&lt;/a&gt;
and
&lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git%3Ba=blob%3Bf=tools/libxc/xenctrl.h%3Bh=f2cebafc9ddd4815ffc73fcf9e0d292b1d4c91ff%3Bhb=HEAD#l934&quot;&gt;event channels&lt;/a&gt;
-- in order to achieve its aims. The term &lt;em&gt;datagram-based interface&lt;/em&gt; simply
means that the
&lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git%3Ba=blob%3Bf=tools/libvchan/libxenvchan.h%3Bh=6365d36a06f8c8f56454724cefc4c2f1d39beba2%3Bhb=HEAD&quot;&gt;interface&lt;/a&gt;
resembles UDP, although there is support for stream based communication (like
TCP) as well.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;vchan&lt;/code&gt; protocol is an important feature in MirageOS 2.0 since it
forms the foundational communication mechanism for &lt;strong&gt;building distributed
clusters of unikernels&lt;/strong&gt; that cooperate to solve problems that are beyond
the power of a single node.  Instead of forcing communication between
nodes via a conventional wire protocol like TCP, it permits highly efficient
low-overhead communication to nodes that are colocated on the same Xen
host machine.&lt;/p&gt;
&lt;p&gt;Before diving into vchan, I thought I'd also take the opportunity to describe the
&lt;a href=&quot;http://releases.ubuntu.com/14.04/&quot;&gt;Ubuntu-Trusty&lt;/a&gt; environment for developing
and running &lt;a href=&quot;http://www.xenproject.org/&quot;&gt;Xen&lt;/a&gt; unikernels.&lt;/p&gt;
&lt;h3&gt;Installing Xen on Ubuntu&lt;/h3&gt;

&lt;p&gt;Ubuntu 14.04 has good support for running Xen 4.4, the most recent release (at time of writing).
For running VMs it's a good idea to install Ubuntu on an LVM volume rather than directly on a
partition, which allows the use of LVs as the virtual disks for your VMs. On my system I have
a 40 Gig partition for '/', an 8 Gig swap partition and the rest is free for my VMs:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo lvs
   LV     VG      Attr      LSize  Pool Origin Data%  Move Log Copy%  Convert
   root   st28-vg -wi-ao--- 37.25g
   swap_1 st28-vg -wi-ao---  7.99g&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this particular walkthough I won't be using disks, but later posts will.
Install Xen via the meta-package. This brings in all you will need to run VMs:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo apt-get install xen-system-amd64&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It used to be necessary to reorder the grub entries to make sure Xen was started
by default, but this is no longer necessary. Once the machine has rebooted, you
should be able to verify you're running virtualized by invoking 'xl':&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo xl list
Name                                        ID   Mem VCPUs      State   Time(s)
Domain-0                                     0  7958     6     r-----       9.7&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My machine has 8 Gigs of memory, and this list shows that it's all being used by
my dom0, so I'll need to either balloon down dom0 or reboot with a lower maximum
memory. Ballooning is the most straightfoward:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo xenstore-write /local/domain/0/memory/target 4096000
$ sudo xl list
Name                                        ID   Mem VCPUs      State   Time(s)
Domain-0                                     0  4000     6     r-----      12.2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is handy for quick testing, but is &lt;a href=&quot;http://wiki.xenproject.org/wiki/Xen_Project_Best_Practices&quot;&gt;discouraged&lt;/a&gt; by the Xen folks. So alternatively, change the xen command line by
editing &lt;code&gt;/etc/default/grub&lt;/code&gt; and add the line:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;GRUB_CMDLINE_XEN_DEFAULT=&amp;quot;dom0_mem=4096M,max:4096M&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, update-grub and reboot.&lt;/p&gt;
&lt;h3&gt;Mirage&lt;/h3&gt;

&lt;p&gt;Now lets get Mirage up and running. Install ocaml, opam and set up the opam environment:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo apt-get install ocaml opam ocaml-native-compilers camlp4-extra
...
$ opam init
...
$ eval `opam config env`&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don't forget the &lt;code&gt;ocaml-native-compilers&lt;/code&gt;, as without this we can't
compile the unikernels. Now we are almost ready to install Mirage; we
need two more dependencies, and then we're good to go.&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo apt-get install m4 libxen-dev
$ opam install mirage mirage-xen mirage-unix vchan&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;m4&lt;/code&gt; is for ocamlfind, and &lt;code&gt;libxen-dev&lt;/code&gt; is required to compile the
unix variants of the &lt;code&gt;xen-evtchn&lt;/code&gt; and &lt;code&gt;xen-gnt&lt;/code&gt; libraries. Without these
installing vchan will complain that there is no &lt;code&gt;xen-evtchn.lwt&lt;/code&gt;
library installed.&lt;/p&gt;
&lt;p&gt;This second line installs the various Mirage and vchan libraries, but
doesn't build the demo unikernel and Unix CLI.  To get them, clone
the ocaml-vchan repository:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ git clone https://github.com/mirage/ocaml-vchan&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The demo unikernel is a very straightforward capitalizing echo server.
The &lt;a href=&quot;https://github.com/mirage/ocaml-vchan/blob/master/test/echo.ml#L13&quot;&gt;main function&lt;/a&gt; simply consists of&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;let (&amp;gt;&amp;gt;=) = Lwt.bind

let (&amp;gt;&amp;gt;|=) m f = m &amp;gt;&amp;gt;= function
| `Ok x -&amp;gt; f x
| `Eof -&amp;gt; Lwt.fail (Failure &amp;quot;End of file&amp;quot;)
| `Error (`Not_connected state) -&amp;gt;
    Lwt.fail (Failure (Printf.sprintf &amp;quot;Not in a connected state: %s&amp;quot;
      (Sexplib.Sexp.to_string (Node.V.sexp_of_state state))))

let rec echo vch =
  Node.V.read vch &amp;gt;&amp;gt;|= fun input_line -&amp;gt;
  let line = String.uppercase (Cstruct.to_string input_line) in
  let buf = Cstruct.create (String.length line) in
  Cstruct.blit_from_string line 0 buf 0 (String.length line);
  Node.V.write vch buf &amp;gt;&amp;gt;|= fun () -&amp;gt;
  echo vch&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where we've defined an error-handling monadic bind (&lt;code&gt;&amp;gt;&amp;gt;|=&lt;/code&gt;) which
is then used to sequence the read and write operations.&lt;/p&gt;
&lt;p&gt;Building the CLI is done simply via &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ make
...
$ ls -l node_cli.native
lrwxrwxrwx 1 jludlam jludlam 52 Jul 14 14:56 node_cli.native -&amp;gt; /home/jludlam/ocaml-vchan/_build/cli/node_cli.native&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Building the unikernel is done via the &lt;code&gt;mirage&lt;/code&gt; tool:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ cd test
$ mirage configure --xen
...
$ make depend
...
$ make
...
$ ls -l mir-echo.xen echo.xl
-rw-rw-r-- 1 jludlam jludlam     596 Jul 14 14:58 echo.xl
-rwxrwxr-x 1 jludlam jludlam 3803982 Jul 14 14:59 mir-echo.xen&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This make both the unikernel binary (the mir-echo.xen file) and a convenient
xl script to run it. To run, we use the xl tool, passing '-c' to connect
directly to the console so we can see what's going on:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo xl create -c echo.xl
Parsing config from echo.xl
kernel.c: Mirage OS!
kernel.c:   start_info: 0x11cd000(VA)
kernel.c:     nr_pages: 0x10000
kernel.c:   shared_inf: 0xdf2f6000(MA)
kernel.c:      pt_base: 0x11d0000(VA)
kernel.c: nr_pt_frames: 0xd
kernel.c:     mfn_list: 0x114d000(VA)
kernel.c:    mod_start: 0x0(VA)
kernel.c:      mod_len: 0
kernel.c:        flags: 0x0
kernel.c:     cmd_line:
x86_setup.c:   stack:      0x144f40-0x944f40
mm.c: MM: Init
x86_mm.c:       _text: 0x0(VA)
x86_mm.c:      _etext: 0xb8eec(VA)
x86_mm.c:    _erodata: 0xde000(VA)
x86_mm.c:      _edata: 0x1336f0(VA)
x86_mm.c: stack start: 0x144f40(VA)
x86_mm.c:        _end: 0x114d000(VA)
x86_mm.c:   start_pfn: 11e0
x86_mm.c:     max_pfn: 10000
x86_mm.c: Mapping memory range 0x1400000 - 0x10000000
x86_mm.c: setting 0x0-0xde000 readonly
x86_mm.c: skipped 0x1000
mm.c: MM: Initialise page allocator for 0x1256000 -&amp;gt; 0x10000000
mm.c: MM: done
x86_mm.c: Pages to allocate for p2m map: 2
x86_mm.c: Used 2 pages for map
x86_mm.c: Demand map pfns at 10001000-2010001000.
Initialising timer interface
Initializing Server domid=0 xs_path=data/vchan
gnttab_stubs.c: gnttab_table mapped at 0x10001000
Server: right_order = 13, left_order = 13
allocate_buffer_locations: gntref = 9
allocate_buffer_locations: gntref = 10
allocate_buffer_locations: gntref = 11
allocate_buffer_locations: gntref = 12
Writing config into the XenStore
Shared page is:

00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0d 00 0d 00 02 01 01 00 09 00 00 00 0a 00 00 00
0b 00 00 00 0c 00 00 00
Initialization done!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vchan is domain-to-domain communication, and relies on Xen's grant
tables to share the memory. The entries in the grant tables have
domain-level access control, so we need to know the domain ID of the
client and server in order to set up the communications. The test
unikernel server is hard-coded to talk to domain 0, so we only need to
know the domain ID of our echo server. In another terminal,&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo xl list
Name                                        ID   Mem VCPUs      State   Time(s)
Domain-0                                     0  4095     6     r-----    1602.9
echo                                         2   256     1     -b----       0.0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the domain ID is 2, so we invoke the CLI as follows:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo ./node_cli.native 2
Client initializing: Received gntref = 8, evtchn = 4
Mapped the ring shared page:

00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0d 00 0d 00 02 01 01 00 09 00 00 00 0a 00 00 00
0b 00 00 00 0c 00 00 00
Correctly bound evtchn number 71&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We're now connected via vchan to the Mirage domain. The test server
is simply a capitalisation service:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;hello from dom0
HELLO FROM DOM0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ctrl-C to get out of the CLI, and destroy the domain with an &lt;code&gt;xl destroy&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;console&quot;&gt;&lt;code class=&quot;console&quot;&gt;$ sudo xl destroy test&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vchan&lt;/code&gt; is a very low-level communication mechanism, and so our next post on
this topic will address how to use it in combination with a name resolver
to intelligently map connection requests to use &lt;code&gt;vchan&lt;/code&gt; if available, and
otherwise fall back to normal TCP or TCP+TLS.&lt;/p&gt;

   </content><id>https://mirage.io/blog/update-on-vchan</id><title type="text">Vchan: Low-latency inter-VM communication channels</title><updated>2014-07-16T12:00:00+00:00</updated><author><email></email><name>Jon Ludlam</name></author></entry><entry><link href="https://mirage.io/blog/modular-foreign-function-bindings" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;One of the most frequent questions about MirageOS from developers is
&amp;quot;do I really need to write all my code in OCaml&amp;quot;?  There are, of
course, very good reasons to build the core system in pure OCaml: the
module system permits reusing algorithmic abstractions at scale, and
OCaml's static type checking makes it possible to enforce lightweight
invariants across interfaces.  However, it's ultimately necessary to
support interfacing to existing code, and this blog post will describe
what we're doing to make this possible this without sacrificing the
security benefits afforded by unikernels.&lt;/p&gt;
&lt;p&gt;A MirageOS application works by abstracting the &lt;em&gt;logic&lt;/em&gt; of the
application from the details of &lt;em&gt;platform&lt;/em&gt; that it is compiled for.
The &lt;code&gt;mirage&lt;/code&gt; CLI tool parses a configuration file that represents the
desired hardware target, which can be a Unix binary or a specialized
Xen guest OS.  Our foreign function interface design elaborates on
these design principles by separating the &lt;em&gt;description&lt;/em&gt; of the C
foreign functions from how we &lt;em&gt;link&lt;/em&gt; to that code.  For instance, a
Unix unikernel could use the normal &lt;code&gt;ld.so&lt;/code&gt; to connect to a shared
library, while in Xen we would need to interface to that C library
through some other mechanism (for instance, a separate VM could be
spawned to run the untrusted OpenSSL code).  If you're curious about
how this works, this blog post is for you!&lt;/p&gt;
&lt;h3&gt;Introducing ctypes&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes&quot;&gt;ocaml-ctypes&lt;/a&gt; (&amp;quot;ctypes&amp;quot; for short) is a library for
gluing together OCaml code and C code without writing any C.  This
post introduces the ctypes library with a couple of simple examples,
and outlines how OCaml's module system makes it possible to write
high-level bindings to C that are independent of any particular
linking mechanism.&lt;/p&gt;
&lt;h3&gt;Hello, C&lt;/h3&gt;

&lt;p&gt;Binding a C function using ctypes involves two steps.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;First, construct an OCaml value that represents the type of the function&lt;/li&gt;&lt;li&gt;Second, use the type representation and the function name to resolve and bind the function&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;For example, here's a binding to C's &lt;code&gt;puts&lt;/code&gt; function, which prints a string to
standard output and returns the number of characters written:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;let puts = foreign &amp;quot;puts&amp;quot; (string @-&amp;gt; returning int)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the call to &lt;code&gt;foreign&lt;/code&gt; the bound function is available to OCaml
immediately.  Here's a call to &lt;code&gt;puts&lt;/code&gt; from the interactive top level:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;# puts &amp;quot;Hello, world&amp;quot;;;
Hello, world
- : int = 13&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;&amp;lt;Hello-C/&amp;gt;&lt;/h3&gt;

&lt;p&gt;Now that we've had a taste of ctypes, let's look at a more realistic
example: a program that defines bindings to the &lt;a href=&quot;http://www.libexpat.org/&quot;&gt;expat&lt;/a&gt; XML
parsing library, then uses them to display the structure of an XML
document.&lt;/p&gt;
&lt;p&gt;We'll start by describing the types used by expat.  Since ctypes
represents C types as OCaml values, each of the types we need becomes
a value binding in our OCaml program.  The parser object involves an
incomplete (abstract) struct definition and a typedef for a pointer to
a struct:&lt;/p&gt;
&lt;pre class=&quot;C&quot;&gt;&lt;code class=&quot;C&quot;&gt;struct xml_ParserStruct;
typedef xml_ParserStruct *xml_Parser;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In ctypes these become calls to the &lt;code&gt;structure&lt;/code&gt; and &lt;code&gt;ptr&lt;/code&gt; functions:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;let parser_struct : [`XML_ParserStruct] structure typ = structure &amp;quot;xml_ParserStruct&amp;quot;
let xml_Parser = ptr parser_struct&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we'll use the type representations to bind some functions.  The
&lt;a href=&quot;http://www.xml.com/pub/a/1999/09/expat/reference.html#parsercreate&quot;&gt;&lt;code&gt;XML_ParserCreate&lt;/code&gt;&lt;/a&gt;
and
&lt;a href=&quot;http://www.xml.com/pub/a/1999/09/expat/reference.html#parserfree&quot;&gt;&lt;code&gt;XML_ParserFree&lt;/code&gt;&lt;/a&gt;
functions construct and destroy parser objects.  As with &lt;code&gt;puts&lt;/code&gt;, each
function binding involves a simple call to &lt;code&gt;foreign&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;let parser_create = foreign &amp;quot;XML_ParserCreate&amp;quot;
  (ptr void @-&amp;gt; returning xml_Parser)
let parser_free = foreign &amp;quot;XML_ParserFree&amp;quot;
  (xml_Parser @-&amp;gt; returning void)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Expat operates primarily through callbacks: when start and end elements are
encountered the parser invokes user-registered functions, passing the tag names
and attributes (along with a piece of user data):&lt;/p&gt;
&lt;pre class=&quot;C&quot;&gt;&lt;code class=&quot;C&quot;&gt;typedef void (*start_handler)(void *, char *, char **);
typedef void (*end_handler)(void *, char *);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In ctypes function pointer types are built using the &lt;code&gt;funptr&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;let start_handler =
  funptr (ptr void @-&amp;gt; string @-&amp;gt; ptr string @-&amp;gt; returning void)
let end_handler =
  funptr (ptr void @-&amp;gt; string @-&amp;gt; returning void)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use the &lt;code&gt;start_handler&lt;/code&gt; and &lt;code&gt;end_handler&lt;/code&gt; type representations to bind
&lt;a href=&quot;http://www.xml.com/pub/a/1999/09/expat/reference.html#elementhandler&quot;&gt;&lt;code&gt;XML_SetElementHandler&lt;/code&gt;&lt;/a&gt;, the callback-registration function:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;let set_element_handler = foreign &amp;quot;XML_SetElementHandler&amp;quot;
  (xml_Parser @-&amp;gt; start_handler @-&amp;gt; end_handler @-&amp;gt; returning void)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The type that OCaml infers for &lt;code&gt;set_element_handler&lt;/code&gt; reveals that the function
accepts regular OCaml functions as arguments, since the argument types are
normal OCaml function types:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;val set_element_handler :
  [ `XML_ParserStruct ] structure ptr -&amp;gt;
  (unit ptr -&amp;gt; string -&amp;gt; string ptr -&amp;gt; unit) -&amp;gt;
  (unit ptr -&amp;gt; string -&amp;gt; unit) -&amp;gt; unit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's one remaining function to bind, then we're ready to use the
library.  The
&lt;a href=&quot;http://www.xml.com/pub/a/1999/09/expat/reference.html#parse&quot;&gt;&lt;code&gt;XML_Parse&lt;/code&gt;&lt;/a&gt;
function performs the actual parsing, invoking the callbacks when tags
are encountered:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;let parse = foreign &amp;quot;XML_Parse&amp;quot;
  (xml_Parser @-&amp;gt; string @-&amp;gt; int @-&amp;gt; int @-&amp;gt; returning int)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before, all the functions that we've bound are available for use
immediately.  We'll start by using them to define a more idiomatic OCaml entry
point to the library.  The &lt;code&gt;parse_string&lt;/code&gt; function accepts the start and end
callbacks as labelled arguments, along with a string to parse:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;let parse_string ~start_handler ~end_handler s =
  let p = parser_create null in
  let () = set_element_handler p start_handler end_handler in
  let _ = parse p s (String.length s) 1 in
  parser_free p&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;parse_string&lt;/code&gt; we can write a program that prints out the names of each
element in an XML document, indented according to nesting depth:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;let depth = ref 0

let start_handler _ name _ =
  Printf.printf &amp;quot;%*s%s\n&amp;quot; (!depth * 3) &amp;quot;&amp;quot; name;
  incr depth

let end_handler _ _ =
  decr depth

let () =
  parse_string ~start_handler ~end_handler (In_channel.input_all stdin)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full source of the program is &lt;a href=&quot;https://github.com/yallop/ocaml-ctypes-expat-example&quot;&gt;available on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's the program in action:&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;&lt;code class=&quot;bash&quot;&gt;$ ocamlfind opt -thread -package core,ctypes.foreign expat_example.ml \
   -linkpkg -cclib -lexpat -o expat_example
$ wget -q http://openmirage.org/blog/atom.xml -O /dev/stdout \
  | ./expat_example
feed
   id
   title
   subtitle
   rights
   updated
   link
   link
   contributor
      email
      uri
      name
[...]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this is just a high-level overview we've passed over a number of
details.  The interested reader can find a more comprehensive introduction to
using ctypes in &lt;a href=&quot;https://realworldocaml.org/v1/en/html/foreign-function-interface.html&quot;&gt;Chapter 19: Foreign Function Interface&lt;/a&gt; of &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Dynamic vs static&lt;/h3&gt;

&lt;p&gt;Up to this point we've been using a single function, &lt;code&gt;foreign&lt;/code&gt;, to
make C functions available to OCaml.  Although &lt;code&gt;foreign&lt;/code&gt; is simple to
use, there's quite a lot going on behind the scenes.  The two
arguments to &lt;code&gt;foreign&lt;/code&gt; are used to dynamically construct an OCaml
function value that wraps the C function: the name is used to resolve
the code for the C function, and the type representation is used to
construct a call frame appropriate to the C types invovled and to the
underlying platform.&lt;/p&gt;
&lt;p&gt;The dynamic nature of &lt;code&gt;foreign&lt;/code&gt; that makes it convenient for
interactive use, also makes it unsuitable for some environments.
There are three main drawbacks:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;Binding functions dynamically involves a certain loss of &lt;em&gt;safety&lt;/em&gt;:
 since C libraries typically don't maintain information about the
 types of the functions they contain, there's no way to check whether
 the type representation passed to &lt;code&gt;foreign&lt;/code&gt; matches the actual type of
 the C function.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Dynamically constructing calls introduces a certain &lt;em&gt;interpretative
 overhead&lt;/em&gt;.  In mitigation, this overhead is much less than might be supposed,
 since much of the work can be done when the function is bound rather than
 when the call is made, and &lt;code&gt;foreign&lt;/code&gt; has been used to bind C functions in
 &lt;a href=&quot;http://erratique.ch/software/tgls&quot;&gt;performance-sensitive applications&lt;/a&gt; without problems.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;The implementation of &lt;code&gt;foreign&lt;/code&gt; uses a low-level library, &lt;a href=&quot;https://sourceware.org/libffi/&quot;&gt;libffi&lt;/a&gt;,
 to deal with calling conventions across platforms.  While libffi is mature
 and widely supported, it's not appropriate for use in every environment.
 For example, introducing such a (relatively) large and complex library into
 Mirage would compromise many of the benefits of writing the rest of the
 system in OCaml.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Happily, there's a solution at hand.  As the introduction hints, &lt;code&gt;foreign&lt;/code&gt; is
one of a number of binding strategies, and OCaml's module system makes it easy
to defer the choice of which strategy to use when writing the actual code.
Placing the &lt;code&gt;expat&lt;/code&gt; bindings in a functor (parameterised module) makes it
possible to abstract over the linking strategy:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;module Bindings(F : FOREIGN) =
struct
  let parser_create = F.foreign &amp;quot;XML_ParserCreate&amp;quot;
    (ptr void @-&amp;gt; returning xml_Parser)
  let parser_free = F.foreign &amp;quot;XML_ParserFree&amp;quot;
    (xml_Parser @-&amp;gt; returning void)
  let set_element_handler = F.foreign &amp;quot;XML_SetElementHandler&amp;quot;
    (xml_Parser @-&amp;gt; start_handler @-&amp;gt; end_handler @-&amp;gt; returning void)
  let parse = F.foreign &amp;quot;XML_Parse&amp;quot;
    (xml_Parser @-&amp;gt; string @-&amp;gt; int @-&amp;gt; int @-&amp;gt; returning int)
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Bindings&lt;/code&gt; module accepts a single parameter of type &lt;code&gt;FOREIGN&lt;/code&gt;, which
encodes the binding strategy to use.  Instantiating &lt;code&gt;Bindings&lt;/code&gt; with a module
containing the &lt;code&gt;foreign&lt;/code&gt; function used above recovers the
dynamically-constructed bindings that we've been using so far.  However, there
are now other possibilities available.  In particular, we can instantiate
&lt;code&gt;Bindings&lt;/code&gt; with code generators that output code to expose the bound functions
to OCaml.  The actual instantiation is hidden behind a couple of convenient
functions, &lt;code&gt;write_c&lt;/code&gt; and &lt;code&gt;write_ml&lt;/code&gt;, which accept &lt;code&gt;Bindings&lt;/code&gt; as a parameter
and write to a &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Format.html#TYPEformatter&quot;&gt;formatter&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;Cstubs.write_c formatter ~prefix:&amp;quot;expat&amp;quot; ~bindings:(module Bindings)
Cstubs.write_ml formatter ~prefix:&amp;quot;expat&amp;quot; ~bindings:(module Bindings)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generating code in this way eliminates the concerns associated with
constructing calls dynamically:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;The C compiler checks the types of the generated calls against the C
 headers (the API), so the safety concerns associated with linking
 directly against the C library binaries (the ABI) don't apply.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;There's no interpretative overhead, since the generated code is
 (statically) compiled.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;The dependency on libffi disappears altogether.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;How easy is it in practice to switch between dynamic and static
binding strategies?  It turns out that it's quite straightforward,
even for code that was originally written without parameterisation.
Bindings written using early releases of ctypes used the dynamic
strategy exclusively, since dynamic binding was then the only option
available.  The commit logs for projects that switched over to static
generation and linking (e.g. &lt;a href=&quot;https://github.com/whitequark/ocaml-lz4/commit/acc257ea1&quot;&gt;ocaml-lz4&lt;/a&gt; and
&lt;a href=&quot;https://github.com/janestreet/async_ssl/commit/ab5ea6f55e&quot;&gt;async-ssl&lt;/a&gt;) when it became available show that
moving to the new approach involved only straightforward and localised
changes.&lt;/p&gt;
&lt;h3&gt;Local vs remote&lt;/h3&gt;

&lt;p&gt;Generating code is safer than constructing calls dynamically, since it
allows the C compiler to check the types of function calls against
declarations.  However, there are some safety problems that even C's
type checking doesn't detect.  For instance, the following call is
type correct (given suitable definitions of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;), but is
likely to misbehave at run time:&lt;/p&gt;
&lt;pre class=&quot;C&quot;&gt;&lt;code class=&quot;C&quot;&gt;memcpy(p, q, SIZE_MAX)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In contrast, code written purely in OCaml detects and prevents
attempts to write beyond the bounds of allocated objects:&lt;/p&gt;
&lt;pre class=&quot;ocaml&quot;&gt;&lt;code class=&quot;ocaml&quot;&gt;# StringLabels.blit ~src ~dst ~src_pos:0 ~dst_pos:0 ~len:max_int;;
Exception: Invalid_argument &amp;quot;String.blit&amp;quot;.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems a shame to weaken OCaml's safety guarantees by linking in C
code that can potentially write to any region of memory, but what is
the alternative?&lt;/p&gt;
&lt;p&gt;One possibility is to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Privilege_separation&quot;&gt;privilege separation&lt;/a&gt; to separate
trusted OCaml code from untrusted C functions.  The modular design of
ctypes means that privilege separation can be treated as one more
linking strategy: we can run C code in an entirely separate process
(or for Mirage/Xen, in a separate virtual machine), and instantiate
&lt;code&gt;Bindings&lt;/code&gt; with a strategy that forwards calls to the process using
standard inter-process communication.  The remote calling strategy is
not supported in the &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/releases/tag/0.3.2&quot;&gt;current release&lt;/a&gt; of ctypes, but
it's scheduled for a future version.  As with the switch from dynamic
to static bindings, we anticipate that updating existing bindings to
use cross-process calls will be straightforward.&lt;/p&gt;
&lt;p&gt;This introductory post should give you a sense of the power of the unikernel
approach in Mirage.  By turning the FFI into just another library (for the C
interface description) and protocol (for the linkage model), we can use code
generation to map application logic onto the privilege model most suitable for
the target hardware platform.  This starts with Unix processes, continues onto Xen
paravirtualization, and could even extend into &lt;a href=&quot;http://www.cl.cam.ac.uk/research/security/ctsrd/cheri/&quot;&gt;CHERI&lt;/a&gt; fine-grained
compartmentalization.&lt;/p&gt;
&lt;h3&gt;Further examples&lt;/h3&gt;

&lt;p&gt;Although ctypes is a fairly new library, it's already in use in a
number of projects across a variety of domains: &lt;a href=&quot;http://erratique.ch/software/tgls&quot;&gt;graphics&lt;/a&gt;,
&lt;a href=&quot;http://erratique.ch/software/tsdl&quot;&gt;multimedia&lt;/a&gt;, &lt;a href=&quot;https://github.com/whitequark/ocaml-lz4&quot;&gt;compression&lt;/a&gt;, &lt;a href=&quot;https://github.com/dsheets/ocaml-sodium&quot;&gt;cryptography&lt;/a&gt;,
&lt;a href=&quot;https://github.com/nojb/ocaml-gsasl&quot;&gt;security&lt;/a&gt;, &lt;a href=&quot;https://github.com/hcarty/ocaml-gdal&quot;&gt;geospatial data&lt;/a&gt;, &lt;a href=&quot;http://github.com/rgrinberg/onanomsg&quot;&gt;communication&lt;/a&gt;,
and many others.  Further resources (documentation, forums, etc.) are
available via the &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes&quot;&gt;home page&lt;/a&gt;.&lt;/p&gt;

   </content><id>https://mirage.io/blog/modular-foreign-function-bindings</id><title type="text">Modular foreign function bindings</title><updated>2014-07-15T12:00:00+00:00</updated><author><email></email><name>Jeremy Yallop</name></author></entry><entry><link href="https://mirage.io/blog/ocaml-tls-api-internals-attacks-mitigation" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;em&gt;This is the fifth in a series of posts that introduce new libraries for a pure OCaml implementation of TLS.
You might like to begin with the &lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;introduction&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;ocaml-tls&lt;/a&gt; is the new, clean-slate implementation of TLS in OCaml
that we've been working on for the past six months. In this post we
try to document some of its internal design, the reasons for the
decisions we made, and the current security status of that work. Try
our &lt;a href=&quot;https://tls.openmirage.org&quot;&gt;live interactive demonstration server&lt;/a&gt; which visualises TLS
sessions.&lt;/p&gt;
&lt;h3&gt;The OCaml-TLS architecture&lt;/h3&gt;

&lt;p&gt;The OCaml ecosystem has several distinct ways of interacting with the outside world
(and the network in particular): straightforward &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html&quot;&gt;unix&lt;/a&gt; interfaces
and the asynchronous programming libraries &lt;a href=&quot;http://ocsigen.org/lwt/&quot;&gt;lwt&lt;/a&gt; and &lt;a href=&quot;https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html&quot;&gt;async&lt;/a&gt;. One of the
early considerations was not to restrict ourselves to any of those -- we wanted
to support them all.&lt;/p&gt;
&lt;p&gt;There were also two distinct basic &amp;quot;platforms&amp;quot; we wanted to target from the
outset: the case of a simple executable, and the case of &lt;code&gt;Mirage&lt;/code&gt; unikernels.&lt;/p&gt;
&lt;p&gt;So one of the first questions we faced was deciding how to represent
interactions with the network in a portable way. This can be done by
systematically abstracting out the API boundary which gives access to network
operations, but we had a third thing in mind as well: we wanted to exploit the
functional nature of OCaml to its fullest extent!&lt;/p&gt;
&lt;p&gt;Our various prior experiences with Haskell and Idris convinced us to adopt
what is called &amp;quot;purely functional&amp;quot; technique. We believe it to be an approach
which first forces the programmer to give principled answers to all the
difficult design questions (errors and global data-flow) &lt;em&gt;in advance&lt;/em&gt;, and then
leads to far cleaner and composable code later on. A purely functional system
has all the data paths made completely explicit in the form of function
arguments and results. There are no unaccounted-for interactions between
components mediated by shared state, and all the activity of the parts of the
system is exposed through types since, after all, it's only about computing
values from values.&lt;/p&gt;
&lt;p&gt;For these reasons, the library is split into two parts: the directory &lt;code&gt;/lib&lt;/code&gt;
(and the corresponding findlib package &lt;code&gt;tls&lt;/code&gt;) contains the core TLS logic, and
&lt;code&gt;/mirage&lt;/code&gt; and &lt;code&gt;/lwt&lt;/code&gt; (packaged as &lt;code&gt;tls.mirage&lt;/code&gt; and &lt;code&gt;tls.lwt&lt;/code&gt; respectively)
contain front-ends that tie the core to &lt;code&gt;Mirage&lt;/code&gt; and &lt;code&gt;Lwt_unix&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Core&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.mli&quot;&gt;core&lt;/a&gt; library is purely functional. A TLS session is represented by the
abstract type &lt;code&gt;Tls.Engine.state&lt;/code&gt;, and various functions consume this session
type together with raw bytes (&lt;code&gt;Cstruct.t&lt;/code&gt; -- which is by itself mutable, but
&lt;code&gt;ocaml-tls&lt;/code&gt; eschews this) and produce new session values and resulting buffers.&lt;/p&gt;
&lt;p&gt;The central entry point is &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.ml#L321&quot;&gt;handle_tls&lt;/a&gt;, which transforms an input state and a
buffer to an output state, a (possibly empty) buffer to send to the
communication partner, and an optional buffer of data intended to be received by
the application:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;type state

type ret = [
  | `Ok of [ `Ok of state | `Eof | `Alert of alert ] *
      [ `Response of Cstruct.t ] * [ `Data of Cstruct.t option ]
  | `Fail of alert * [ `Response of Cstruct.t ]
]

val handle_tls : state -&amp;gt; Cstruct.t -&amp;gt; ret&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the signature shows, errors are signalled through the &lt;code&gt;ret&lt;/code&gt; type, which is a &lt;a href=&quot;https://realworldocaml.org/v1/en/html/variants.html#polymorphic-variants&quot;&gt;polymorphic variant&lt;/a&gt;. This
reflects the actual internal structure: all the errors are represented as
values, and operations are composed using an error &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/control.ml&quot;&gt;monad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other entry points share the same basic behaviour: they transform the prior
state and input bytes into the later state and output bytes.&lt;/p&gt;
&lt;p&gt;Here's a rough outline of what happens in &lt;code&gt;handle_tls&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;TLS packets consist of a header, which contains the protocol
 version, length, and content type, and the payload of the given
 content type. Once inside our &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.ml#L321&quot;&gt;main handler&lt;/a&gt;, we
 &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.ml#L150&quot;&gt;separate&lt;/a&gt; the buffer into TLS records, and
 &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.ml#L275&quot;&gt;process&lt;/a&gt; each individually. We first check that
 the version number is correct, then &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.ml#L95&quot;&gt;decrypt&lt;/a&gt;, and &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.ml#L85&quot;&gt;verify
  the mac&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Decrypted data is then &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.ml#L240&quot;&gt;dispatched&lt;/a&gt; to one of four
 sub-protocol handlers (Handshake, Change Cipher Spec, Alert and
 Application Data). Each handler can &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/state.ml#L109&quot;&gt;return&lt;/a&gt; a new
 handshake state, outgoing data, application data, the new decryption
 state or an error (with the outgoing data being an interleaved list
 of buffers and new encryption states).&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;The outgoing buffers and the encryption states are
 &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.ml#L48&quot;&gt;traversed&lt;/a&gt; to produce the final output to be sent to the
 communication partner, and the final encryption, decryption and
 handshake states are combined into a new overall state which is
 returned to the caller.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Handshake is (by far) the most complex TLS sub-protocol, with an elaborate state
machine. Our &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/handshake_client.ml#L285&quot;&gt;client&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/handshake_server.ml#L247&quot;&gt;server&lt;/a&gt; encode
this state as a &amp;quot;flat&amp;quot; &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/state.ml#L61&quot;&gt;sum type&lt;/a&gt;, with exactly one incoming
message allowed per state. The handlers first &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/reader.ml#L361&quot;&gt;parse&lt;/a&gt; the
handshake packet (which fails in case of malformed or unknown data) and then
dispatch it to the handling function. The &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/state.ml#L92&quot;&gt;handshake state&lt;/a&gt; is
carried around and a fresh one is returned from the handler in case it needs
updates. It consists of a protocol version, the handshake state, configuration,
renegotiation data, and possibly a handshake fragment.&lt;/p&gt;
&lt;p&gt;Logic of both handshake handlers is very localised, and does not mutate any
global data structures.&lt;/p&gt;
&lt;h3&gt;Core API&lt;/h3&gt;

&lt;p&gt;OCaml permits the implementation a module to be exported via a more
abstract &lt;em&gt;signature&lt;/em&gt; that hides the internal representation
details. Our public API for the core library consists of the
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/engine.mli&quot;&gt;Tls.Engine&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/config.mli&quot;&gt;Tls.Config&lt;/a&gt; modules.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tls.Engine&lt;/code&gt; contains the basic reactive function &lt;code&gt;handle_tls&lt;/code&gt;, mentioned above,
which processes incoming data and optionally produces a response, together with
several operations that allow one to initiate message transfer like
&lt;code&gt;send_application_data&lt;/code&gt; (which processes application-level messages for
sending), &lt;code&gt;send_close_notify&lt;/code&gt; (for sending the ending message) and &lt;code&gt;reneg&lt;/code&gt;
(which initiates full TLS renegotiation).&lt;/p&gt;
&lt;p&gt;The module also contains the only two ways to obtain the initial state:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;val client : Config.client -&amp;gt; (state * Cstruct.t)
val server : Config.server -&amp;gt; state&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, one needs a configuration value to create it. The &lt;code&gt;Cstruct.t&lt;/code&gt;
that &lt;code&gt;client&lt;/code&gt; emits is the initial Client Hello since in TLS,
the client starts the session.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tls.Config&lt;/code&gt; synthesizes configurations, separately for client and server
endpoints, through the functions &lt;code&gt;client_exn&lt;/code&gt; and &lt;code&gt;server_exn&lt;/code&gt;. They take a
number of parameters that define a TLS session, check them for consistency, and
return the sanitized &lt;code&gt;config&lt;/code&gt; value which can be used to create a &lt;code&gt;state&lt;/code&gt; and,
thus, a session. If the check fails, they raise an exception.&lt;/p&gt;
&lt;p&gt;The parameters include the pair of a certificate and its private key for the
server, and an &lt;code&gt;X509.Authenticator.t&lt;/code&gt; for the client, both produced by our
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509&quot;&gt;ocaml-x509&lt;/a&gt; library and described in a &lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;previous article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This design reflects our attempts to make the API as close to &amp;quot;fire and forget&amp;quot;
as we could, given the complexity of TLS: we wanted the library to be relatively
straightforward to use, have a minimal API footprint and, above all, fail very
early and very loudly when misconfigured.&lt;/p&gt;
&lt;h3&gt;Effectful front-ends&lt;/h3&gt;

&lt;p&gt;Clearly, reading and writing network data &lt;em&gt;does&lt;/em&gt; change the state of the world.
Having a pure value describing the state of a TLS session is not really useful
once we write something onto the network; it is certainly not the case that we
can use more than one distinct &lt;code&gt;state&lt;/code&gt; to process further data, as only one
value is in sync with the other endpoint at any given time.&lt;/p&gt;
&lt;p&gt;Therefore we wrap the core types into stateful structures loosely inspired by
sockets and provide IO operations on those. The structures of &lt;code&gt;mirage&lt;/code&gt; and &lt;code&gt;lwt&lt;/code&gt;
front-ends mirror one another.&lt;/p&gt;
&lt;p&gt;In both cases, the structure is pull-based in the sense that no processing is
done until the client requires a read, as opposed to a callback-driven design
where the client registers a callback and the library starts spinning in a
listening loop and invoking it as soon as there is data to be processed. We do
this because in an asynchronous context, it is easy to create a callback-driven
interface from a demand-driven one, but the opposite is possible only with
unbounded buffering of incoming data.&lt;/p&gt;
&lt;p&gt;One exception to demand-driven design is the initial session creation: the
library will only yield the connection after the first handshake is over,
ensuring the invariant that it is impossible to interact with a connection if it
hasn't already been fully established.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mirage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Mirage&lt;/code&gt; &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/mirage/tls_mirage_types.mli&quot;&gt;interface&lt;/a&gt; matches the &lt;a href=&quot;https://github.com/mirage/mirage/blob/ae3c966f8d726dc97208595b8005e02e39478cb1/types/V1.mli#L136&quot;&gt;FLOW&lt;/a&gt;
signature (with additional TLS-specific operations). We provide a functor that
needs to be applied to an underlying TCP module, to obtain a TLS transport on
top. For example:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;module Server (Stack: STACKV4) (Entropy: ENTROPY) (KV: KV_RO) =
struct

  module TLS  = Tls_mirage.Make (Stack.TCPV4) (Entropy)
  module X509 = Tls_mirage.X509 (KV) (Clock)

  let accept conf flow =
    TLS.server_of_tcp_flow conf flow &amp;gt;&amp;gt;= function
    | `Ok tls -&amp;gt;
      TLS.read tls &amp;gt;&amp;gt;= function
      | `Ok buf -&amp;gt;
        TLS.write tls buf &amp;gt;&amp;gt;= fun () -&amp;gt; TLS.close buf

  let start stack e kv =
    TLS.attach_entropy e &amp;gt;&amp;gt;= fun () -&amp;gt;
    lwt authenticator = X509.authenticator kv `Default in
    let conf          = Tls.Config.server_exn ~authenticator () in
    Stack.listen_tcpv4 stack 4433 (accept conf) ;
    Stack.listen stack

end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Lwt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;lwt&lt;/code&gt; interface has &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lwt/tls_lwt.mli&quot;&gt;two layers&lt;/a&gt;. &lt;code&gt;Tls_lwt.Unix&lt;/code&gt; is loosely based
on read/write operations from &lt;code&gt;Lwt_unix&lt;/code&gt; and provides in-place update of
buffers. &lt;code&gt;read&lt;/code&gt;, for example, takes a &lt;code&gt;Cstruct.t&lt;/code&gt; to write into and returns the
number of bytes read. The surrounding module, &lt;code&gt;Tls_lwt&lt;/code&gt;, provides a simpler,
&lt;code&gt;Lwt_io&lt;/code&gt;-compatible API built on top:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;let main host port =
  Tls_lwt.rng_init () &amp;gt;&amp;gt;= fun () -&amp;gt;
  lwt authenticator = X509_lwt.authenticator (`Ca_dir nss_trusted_ca_dir) in
  lwt (ic, oc)      = Tls_lwt.connect ~authenticator (host, port) in
  let req = String.concat &amp;quot;\r\n&amp;quot; [
    &amp;quot;GET / HTTP/1.1&amp;quot; ; &amp;quot;Host: &amp;quot; ^ host ; &amp;quot;Connection: close&amp;quot; ; &amp;quot;&amp;quot; ; &amp;quot;&amp;quot;
  ] in
  Lwt_io.(write oc req &amp;gt;&amp;gt;= fun () -&amp;gt; read ic &amp;gt;&amp;gt;= print)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have further plans to provide wrappers for &lt;a href=&quot;https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html&quot;&gt;`Async`&lt;/a&gt; and plain &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html&quot;&gt;`Unix`&lt;/a&gt; in a
similar vein.&lt;/p&gt;
&lt;h3&gt;Attacks on TLS&lt;/h3&gt;

&lt;p&gt;TLS the most widely deployed security protocol on the Internet and, at
over 15 years, is also showing its age. As such, a flaw is a valuable
commodity due to the commercially sensitive nature of data that is
encrypted with TLS. Various vulnerabilities on different layers of TLS
have been found - &lt;a href=&quot;https://en.wikipedia.org/wiki/Heartbleed&quot;&gt;heartbleed&lt;/a&gt; and others are implementation
specific, advancements in cryptanalysis such as &lt;a href=&quot;http://eprint.iacr.org/2005/067&quot;&gt;collisions of
MD5&lt;/a&gt; lead to vulnerabilities, and even others are due
to incorrect usage of TLS (&lt;a href=&quot;http://www.theregister.co.uk/2013/08/01/gmail_hotmail_hijacking/&quot;&gt;truncation attack&lt;/a&gt; or
&lt;a href=&quot;http://breachattack.com/&quot;&gt;BREACH&lt;/a&gt;). Finally, some weaknesses are in the protocol
itself. Extensive &lt;a href=&quot;http://eprint.iacr.org/2013/049.pdf&quot;&gt;overviews&lt;/a&gt; of &lt;a href=&quot;http://www.mitls.org/wsgi/tls-attacks&quot;&gt;attacks on
TLS&lt;/a&gt; are available.&lt;/p&gt;
&lt;p&gt;We look at protocol level attacks of TLS and how &lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;ocaml-tls&lt;/a&gt;
implements mitigations against these.  &lt;a href=&quot;https://tools.ietf.org/html/rfc5246#appendix-D.4&quot;&gt;TLS 1.2 RFC&lt;/a&gt; provides an
overview of attacks and mitigations, and we &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues/31&quot;&gt;track&lt;/a&gt; our progress in
covering them. This is slightly out of date as the RFC is roughly six years old and
in the meantime more attacks have been published, such as the &lt;a href=&quot;http://www.educatedguesswork.org/2009/11/understanding_the_tls_renegoti.html&quot;&gt;renegotiation
flaw&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As &lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;already mentioned&lt;/a&gt;, we track all our
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues?labels=security%20concern&amp;amp;page=1&amp;amp;state=closed&quot;&gt;mitigated&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues?labels=security%20concern&amp;amp;page=1&amp;amp;state=open&quot;&gt;open&lt;/a&gt; security issues on our GitHub
issue tracker.&lt;/p&gt;
&lt;p&gt;Due to the choice of using OCaml, a memory managed programming
language, we obstruct entire bug classes, namely temporal and spatial
memory safety.&lt;/p&gt;
&lt;p&gt;Cryptanalysis and improvement of computational power weaken some
ciphers, such as RC4 and 3DES (see &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues/8&quot;&gt;issue 8&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues/10&quot;&gt;issue
10&lt;/a&gt;). If we phase these two ciphers out, there wouldn't be
any matching ciphersuite left to communicate with some compliant TLS-1.0
implementations, such as Windows XP, that do not support AES.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timing attacks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the timing characteristics between the common case and the error
case are different, this might potentially leak confidential
information. Timing is a very prominent side-channel and there are a huge
variety of timing attacks on different layers, which are observable by
different attackers. Small differences in timing behaviour might
initially be exploitable only by a local attacker, but advancements to
the attack (e.g. increasing the number of tests) might allow a 
remote attacker to filter the noise and exploit the different timing
behaviour.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timing of cryptographic primitives&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We &lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;already mentioned&lt;/a&gt; &lt;a href=&quot;http://www.cs.tau.ac.il/~tromer/papers/cache.pdf&quot;&gt;cache&lt;/a&gt; &lt;a href=&quot;http://cr.yp.to/antiforgery/cachetiming-20050414.pdf&quot;&gt;timing&lt;/a&gt;
attacks on our AES implementation, and that we use &lt;a href=&quot;https://en.wikipedia.org/wiki/Blinding_(cryptography)&quot;&gt;blinding&lt;/a&gt;
techniques to mitigate RSA timing attacks.&lt;/p&gt;
&lt;p&gt;By using a memory managed programming language, we open the attack
vector of garbage collector (GC) timing attacks (also mentioned &lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;in
our nocrypto introduction&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Furthermore, research has been done on virtual machine side channels
(&lt;a href=&quot;http://eprint.iacr.org/2013/448.pdf&quot;&gt;l3&lt;/a&gt;, &lt;a href=&quot;http://www.cs.unc.edu/~reiter/papers/2012/CCS.pdf&quot;&gt;cross vm&lt;/a&gt; and &lt;a href=&quot;http://fc12.ifca.ai/pre-proceedings/paper_70.pdf&quot;&gt;cache timing&lt;/a&gt;), which we
will need to study and mitigate appropriately.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For the time being we suggest to not use the stack on a multi-tenant
shared host or on a shared host which malicious users might have
access to.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bleichenbacher&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In 1998, Daniel Bleichenbacher discovered a &lt;a href=&quot;http://archiv.infsec.ethz.ch/education/fs08/secsem/Bleichenbacher98.pdf&quot;&gt;timing flaw in the
PKCS1&lt;/a&gt; encoding of the premaster secret: the TLS server
failed faster when the padding was wrong than when the decryption
failed. Using this timing, an attacker can run an adaptive chosen
ciphertext attack and find out the plain text of a PKCS1 encrypted
message. In TLS, when RSA is used as the key exchange method, this
leads to discovery of the premaster secret, which is used to derive the
keys for the current session.&lt;/p&gt;
&lt;p&gt;The mitigation is to have both padding and decryption failures use the
exact same amount of time, thus there should not be any data-dependent
branches or different memory access patterns in the code. We
implemented this mitigation in &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/c06cbaaffe49024d8570916b70f7839603a54692/lib/handshake_server.ml#L45&quot;&gt;Handshake_server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Padding oracle and CBC timing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.iacr.org/archive/eurocrypt2002/23320530/cbc02_e02d.pdf&quot;&gt;Vaudenay&lt;/a&gt; discovered a vulnerability involving block ciphers: if an
attacker can distinguish between bad mac and bad padding, recovery of
the plaintext is possible (within an adaptive chosen ciphertext
attack). Another approach using the same issue is to use
&lt;a href=&quot;http://lasecwww.epfl.ch/memo/memo_ssl.shtml&quot;&gt;timing&lt;/a&gt; information instead of separate error messages.
Further details are described &lt;a href=&quot;https://www.openssl.org/~bodo/tls-cbc.txt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The countermeasure, which we implement &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/c06cbaaffe49024d8570916b70f7839603a54692/lib/engine.ml#L100&quot;&gt;here&lt;/a&gt;, is to continue
with the mac computation even though the padding is
incorrect. Furthermore, we send the same alert (&lt;code&gt;bad_record_mac&lt;/code&gt;)
independent of whether the padding is malformed or the mac is
incorrect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lucky 13&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An advancement of the CBC timing attack was discovered in 2013, named
&lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/Lucky13.html&quot;&gt;Lucky 13&lt;/a&gt;. Due to the fact that the mac is computed over the
plaintext without padding, there is a slight (but measurable)
difference in timing between computing the mac of the plaintext and
computing the fake mac of the ciphertext. This leaks information. We
do not have proper mitigation against Lucky 13 in place yet.  You can
find further discussion in &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues/7&quot;&gt;issue 7&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/pull/49&quot;&gt;pull request
49&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Renegotiation not authenticated&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In 2009, Marsh Ray published a vulnerability of the TLS protocol which
lets an attacker prepend arbitrary data to a session due to
&lt;a href=&quot;http://www.educatedguesswork.org/2009/11/understanding_the_tls_renegoti.html&quot;&gt;unauthenticated renegotiation&lt;/a&gt;. The attack
exploits the fact that a renegotiation of ciphers and key material is
possible within a session, and this renegotiated handshake is not
authenticated by the previous handshake. A man in the middle can
initiate a session with a server, send some data, and hand over the
session to a client. Neither the client nor the server can detect the
man in the middle.&lt;/p&gt;
&lt;p&gt;A fix for this issue is the &lt;a href=&quot;https://tools.ietf.org/html/rfc5746&quot;&gt;secure renegotiation extension&lt;/a&gt;,
which embeds authenticated data of the previous handshake into the
client and server hello messages. Now, if a man in the middle
initiates a renegotiation, the server will not complete it due to
missing authentication data (the client believes this is the first
handshake).&lt;/p&gt;
&lt;p&gt;We implement and require the secure renegotiation extension by
default, but it is possible to configure &lt;code&gt;ocaml-tls&lt;/code&gt; to not require
it -- to be able to communicate with servers and
clients which do not support this extension.&lt;/p&gt;
&lt;p&gt;Implementation of the mitigation is on the server side in
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/c06cbaaffe49024d8570916b70f7839603a54692/lib/handshake_server.ml#L85&quot;&gt;ensure_reneg&lt;/a&gt; and on the client side in &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/c06cbaaffe49024d8570916b70f7839603a54692/lib/handshake_client.ml#L50&quot;&gt;validate_reneg&lt;/a&gt;. The
data required for the secure renegotiation is stored in
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/c06cbaaffe49024d8570916b70f7839603a54692/lib/state.ml#L97&quot;&gt;`handshake_state`&lt;/a&gt; while sending and receiving Finished
messages. You can find further discussion in &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues/3&quot;&gt;issue 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLS 1.0 and known-plaintext (BEAST)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TLS 1.0 reuses the last ciphertext block as IV in CBC mode. If an attacker
has a (partially) known plaintext, she can find the remaining plaintext.
This is known as the &lt;a href=&quot;http://vnhacker.blogspot.co.uk/2011/09/beast.html&quot;&gt;BEAST&lt;/a&gt; attack and there is a &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=665814&quot;&gt;long discussion&lt;/a&gt;
about mitigations. Our mitigation is to prepend each TLS-1.0
application data fragment with an empty fragment to randomize the IV.
We do this exactly &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/c06cbaaffe49024d8570916b70f7839603a54692/lib/engine.ml#L375&quot;&gt;here&lt;/a&gt;. There is further discussion in
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues/2&quot;&gt;issue 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our mitigation is slightly different from the 1/n-1 splitting proposed
&lt;a href=&quot;https://community.qualys.com/blogs/securitylabs/2013/09/10/is-beast-still-a-threat&quot;&gt;here&lt;/a&gt;: we split every application data frame into a 0 byte
and n byte frame, whereas they split into a 1 byte and a n-1 byte
frame.&lt;/p&gt;
&lt;p&gt;Researchers have exploited this vulnerability in 2011, although it was
known since &lt;a href=&quot;http://eprint.iacr.org/2006/136&quot;&gt;2006&lt;/a&gt;. TLS versions 1.1 and 1.2 use an explicit IV,
instead of reusing the last cipher block on the wire.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compression and information leakage (CRIME)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When using compression on a chosen-plaintext, encrypting this can leak
information, known as &lt;a href=&quot;http://arstechnica.com/security/2012/09/crime-hijacks-https-sessions/&quot;&gt;CRIME&lt;/a&gt;. &lt;a href=&quot;http://breachattack.com/&quot;&gt;BREACH&lt;/a&gt; furthermore
exploits application layer compression, such as HTTP compression. We
mitigate CRIME by not providing any TLS compression support, while we
cannot do anything to mitigate BREACH.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Traffic analysis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Due to limited amount of padding data, the actual size of transmitted
data can be recovered. The mitigation is to implement &lt;a href=&quot;http://tools.ietf.org/html/draft-pironti-tls-length-hiding-02&quot;&gt;length hiding
policies&lt;/a&gt;. This is tracked as &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues/162&quot;&gt;issue 162&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version rollback&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SSL-2.0 is insecure, a man in the middle can downgrade the version to
SSL-2.0. The mitigation we implement is that we do not support
SSL-2.0, and thus cannot be downgraded. Also, we check that the
version of the client hello matches the first two bytes in the
premaster secret &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/c06cbaaffe49024d8570916b70f7839603a54692/lib/handshake_server.ml#L55&quot;&gt;here&lt;/a&gt;. You can find further discussion in
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues/5&quot;&gt;issue 5&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Triple handshake&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A vulnerability including session resumption and renegotiation was
discovered by the &lt;a href=&quot;http://www.mitls.org&quot;&gt;miTLS team&lt;/a&gt;, named &lt;a href=&quot;https://secure-resumption.com/&quot;&gt;triple
handshake&lt;/a&gt;.  Mitigations include disallowing renegotiation,
disallowing modification of the certificate during renegotiation, or
a hello extension. Since we do not support session resumption yet, we
have not yet implemented any of the mentioned mitigations. There is
further discussion in &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues/9&quot;&gt;issue 9&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alert attack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;http://www.mitls.org/wsgi/alert-attack&quot;&gt;fragment of an alert&lt;/a&gt; can be sent by a man in the
middle during the initial handshake. If the fragment is not cleared
once the handshake is finished, the authentication of alerts is
broken. This was discovered in 2012; our mitigation is to discard
fragmented alerts.&lt;/p&gt;
&lt;h3&gt;EOF.&lt;/h3&gt;

&lt;p&gt;Within six months, two hackers managed to develop a clean-slate TLS
stack, together with required crypto primitives, ASN.1, and X.509
handling, in a high-level pure language. We interoperate with widely
deployed TLS stacks, as shown by our &lt;a href=&quot;https://tls.openmirage.org&quot;&gt;demo server&lt;/a&gt;.  The code
size is nearly two orders of magnitude smaller than OpenSSL, the most
widely used open source library (written in C, which a lot of
programming languages wrap instead of providing their own TLS
implementation). Our code base seems to be robust -- the &lt;a href=&quot;https://tls.openmirage.org&quot;&gt;demo
server&lt;/a&gt; successfully finished over 22500 sessions in less than a
week, with only 11 failing traces.&lt;/p&gt;
&lt;p&gt;There is a huge need for high quality TLS implementations, because
several TLS implementations suffered this year from severe security
problems, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Heartbleed&quot;&gt;heartbleed&lt;/a&gt;, &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1266&quot;&gt;goto fail&lt;/a&gt;, &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3466&quot;&gt;session
id&lt;/a&gt;, &lt;a href=&quot;http://armoredbarista.blogspot.de/2014/04/easter-hack-even-more-critical-bugs-in.html&quot;&gt;Bleichenbacher&lt;/a&gt;, &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224&quot;&gt;change cipher
suite&lt;/a&gt; and &lt;a href=&quot;https://polarssl.org/tech-updates/security-advisories/polarssl-security-advisory-2014-02&quot;&gt;GCM DoS&lt;/a&gt;. The main cause is
implementation complexity due to lack of abstraction, and memory
safety issues.&lt;/p&gt;
&lt;p&gt;We still need to address some security issues, and improve our performance. We
invite people to do rigorous code audits (both manual and automated) and try
testing our code in their services.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please be aware that this release is a &lt;em&gt;beta&lt;/em&gt; and is missing external code audits.
It is not yet intended for use in any security critical applications.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Acknowledgements&lt;/h3&gt;

&lt;p&gt;Since this is the final post in our series, we would like to thank all
people who reported issues so far: &lt;a href=&quot;http://anil.recoil.org/&quot;&gt;Anil Madhavapeddy&lt;/a&gt;, &lt;a href=&quot;https://github.com/edwintorok&quot;&gt;T&amp;ouml;r&amp;ouml;k
Edwin&lt;/a&gt;, &lt;a href=&quot;http://erratique.ch/&quot;&gt;Daniel B&amp;uuml;nzli&lt;/a&gt;, &lt;a href=&quot;http://blog.andreas.org/&quot;&gt;Andreas Bogk&lt;/a&gt;, &lt;a href=&quot;http://gregorkopf.de/blog/&quot;&gt;Gregor Kopf&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/graham_steel&quot;&gt;Graham
Steel&lt;/a&gt;, &lt;a href=&quot;https://github.com/vouillon&quot;&gt;Jerome Vouillon&lt;/a&gt;, &lt;a href=&quot;http://amirchaudhry.com/&quot;&gt;Amir Chaudhry&lt;/a&gt;,
&lt;a href=&quot;http://ashishagarwal.org&quot;&gt;Ashish Agarwal&lt;/a&gt;. Additionally, we want to thank the
&lt;a href=&quot;http://www.mitls.org&quot;&gt;miTLS&lt;/a&gt; team (especially Cedric and Karthikeyan) for fruitful
discussions, as well as the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/&quot;&gt;OCaml Labs&lt;/a&gt; and
&lt;a href=&quot;http://www.openmirage.org&quot;&gt;Mirage&lt;/a&gt; teams. And thanks to &lt;a href=&quot;http://www.cl.cam.ac.uk/~pes20/&quot;&gt;Peter Sewell&lt;/a&gt; and
&lt;a href=&quot;http://www.cs.nott.ac.uk/~rmm/&quot;&gt;Richard Mortier&lt;/a&gt; for funding within the &lt;a href=&quot;http://rems.io&quot;&gt;REMS&lt;/a&gt;, &lt;a href=&quot;http://usercentricnetworking.eu/&quot;&gt;UCN&lt;/a&gt;, and &lt;a href=&quot;http://www.horizon.ac.uk&quot;&gt;Horizon&lt;/a&gt;
projects. The software was started in &lt;a href=&quot;http://www.aftasmirleft.com/&quot;&gt;Aftas beach house&lt;/a&gt; in
Mirleft, Morocco.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://openmirage.org/graphics/aftas-mirleft.jpg&quot; alt=&quot;Aftas Beach&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;Posts in this TLS series:
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;Introducing transport layer security (TLS) in pure OCaml&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;OCaml-TLS: building the nocrypto library core&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;OCaml-TLS: adventures in X.509 certificate parsing and validation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-asn1&quot;&gt;OCaml-TLS: ASN.1 and notation embedding&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/ocaml-tls-api-internals-attacks-mitigation&quot;&gt;OCaml-TLS: the protocol implementation and mitigations to known attacks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;


   </content><id>https://mirage.io/blog/ocaml-tls-api-internals-attacks-mitigation</id><title type="text">OCaml-TLS: the protocol implementation and mitigations to known attacks</title><updated>2014-07-14T12:00:00+00:00</updated><author><email></email><name>David Kaloper</name></author></entry><entry><link href="https://mirage.io/blog/introducing-asn1" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;em&gt;This is the fourth in a series of posts that introduce new libraries for a pure OCaml implementation of TLS.
You might like to begin with the &lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;introduction&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mirleft/ocaml-asn1-combinators&quot;&gt;asn1-combinators&lt;/a&gt; is a library that allows one to express
&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&quot;&gt;ASN.1&lt;/a&gt; grammars directly in OCaml, manipulate them as first-class entities,
combine them with one of several ASN encoding rules and use the result to parse
or serialize values.&lt;/p&gt;
&lt;p&gt;It is the parsing and serialization backend for our &lt;a href=&quot;https://github.com/mirleft/ocaml-x509&quot;&gt;X.509&lt;/a&gt;
certificate library, which in turn provides certificate handling for
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;ocaml-tls&lt;/a&gt;.
We wrote about the X.509 certificate handling &lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;yesterday&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What is ASN.1, really?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&quot;&gt;ASN.1&lt;/a&gt; (Abstract Syntax Notation, version one) is a way to describe
on-the-wire representation of messages. It is split into two components: a way
to describe the content of a message, i.e. a notation for its abstract syntax,
and a series of standard encoding rules that define the exact byte
representations of those syntaxes. It is defined in ITU-T standards X.680-X.683
and X.690-X.695.&lt;/p&gt;
&lt;p&gt;The notation itself contains primitive grammar elements, such as &lt;code&gt;BIT STRING&lt;/code&gt; or
&lt;code&gt;GeneralizedTime&lt;/code&gt;, and constructs that allow for creation of compound grammars
from other grammars, like &lt;code&gt;SEQUENCE&lt;/code&gt;. The notation is probably best introduced
through a real-world example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- Simple name bindings
UniqueIdentifier ::= BIT STRING

-- Products
Validity ::= SEQUENCE {
  notBefore Time,
  notAfter  Time
}

-- Sums
Time ::= CHOICE {
  utcTime     UTCTime,
  generalTime GeneralizedTime
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Example from &lt;a href=&quot;http://tools.ietf.org/html/rfc5280#appendix-A.2&quot;&gt;RFC 5280&lt;/a&gt;, the RFC that describes X.509
certificates which heavily rely on ASN.)&lt;/p&gt;
&lt;p&gt;The first definition shows that we can introduce an alias for any existing ASN
grammar fragment, in this case the primitive &lt;code&gt;BIT STRING&lt;/code&gt;. The second and third
definitions are, at least morally, a product and a sum.&lt;/p&gt;
&lt;p&gt;At their very core, ASN grammars look roughly like algebraic data types, with a
range of pre-defined primitive grammar fragments like &lt;code&gt;BIT STRING&lt;/code&gt;, &lt;code&gt;INTEGER&lt;/code&gt;,
&lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;BOOLEAN&lt;/code&gt; or even &lt;code&gt;GeneralizedTime&lt;/code&gt;, and a number of combining
constructs that can be understood as denoting sums and products.&lt;/p&gt;
&lt;p&gt;Definitions such as the above are arranged into named modules. The standard even
provides for some abstractive capabilities: initially just a macro facility, and
later a form of parameterized interfaces.&lt;/p&gt;
&lt;p&gt;To facilitate actual message transfer, a grammar needs to be coupled with an
encoding. By far the most relevant ones are Basic Encoding Rules (BER) and
Distinguished Encoding Rules (DER), although other encodings exist.&lt;/p&gt;
&lt;p&gt;BER and DER are tag-length-value (TLV) encodings, meaning that every value is
encoded as a triplet containing a tag that gives the interpretation of its
contents, a length field, and the actual contents which can in turn contain
other TLV triplets.&lt;/p&gt;
&lt;p&gt;Let's drop the time from the example above, as time encoding is a little
involved, and assume a simpler version for a moment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pair ::= SEQUENCE {
  car Value,
  cdr Value
}

Value ::= CHOICE {
  v_str UTF8String,
  v_int INTEGER
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then two possible BER encodings of a &lt;code&gt;Pair&lt;/code&gt; &lt;code&gt;(&amp;quot;foo&amp;quot;, 42)&lt;/code&gt; are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  30         - SEQUENCE            30         - SEQUENCE
  08         - length              0c         - length
  [ 0c       - UTF8String          [ 2c       - UTF8String, compound
    03       - length                07       - length
    [ 66     - 'f'                   [ 0c     - UTF8String
      6f     - 'o'                     01     - length
      6f ]   - 'o'                     [ 66 ] - 'f'
    02       - INTEGER                 0c     - UTF8String
    01       - length                  02     - length
    [ 2a ] ] - 42                      [ 6f   - 'o'
                                         6f ] - 'o'
                                     02       - INTEGER
                                     01       - length
                                     [ 2a ] ] - 42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The left one is also the only valid DER encoding of this value: BER allows
certain freedoms in encoding, while DER is just a BER subset without those
freedoms. The property of DER that any value has exactly one encoding is useful,
for example, when trying to digitally sign a value.&lt;/p&gt;
&lt;p&gt;If this piqued your curiosity about ASN, you might want to take a detour and
check out this &lt;a href=&quot;http://luca.ntop.org/Teaching/Appunti/asn1.html&quot;&gt;excellent writeup&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;A bit of history&lt;/h3&gt;

&lt;p&gt;The description above paints a picture of a technology a little like &lt;a href=&quot;https://code.google.com/p/protobuf/&quot;&gt;Google's
Protocol Buffers&lt;/a&gt; or &lt;a href=&quot;https://thrift.apache.org/&quot;&gt;Apache Thrift&lt;/a&gt;: a way to declaratively
specify the structure of a set of values and derive parsers and serializers,
with the addition of multiple concrete representations.&lt;/p&gt;
&lt;p&gt;But the devil is in the detail. For instance, the examples above intentionally
gloss over the fact that often concrete tag values &lt;a href=&quot;http://tools.ietf.org/html/rfc5280#page-128&quot;&gt;leak&lt;/a&gt; into
the grammar specifications for various disambiguation reasons. And ASN has more
than 10 different &lt;a href=&quot;http://www.obj-sys.com/asn1tutorial/node128.html&quot;&gt;string types&lt;/a&gt;, most of which use
long-obsolete character encodings. Not to mention that the full standard is
close to 200 pages of relatively dense language and quite difficult to
follow. In general, ASN seems to have too many features for the relatively
simple task it is solving, and its specification has evolved over decades, apparently
trying to address various other semi-related problems, such as providing a
general &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_Object_Class_(ASN.1)&quot;&gt;Interface Description Language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Which is to say, ASN is &lt;em&gt;probably&lt;/em&gt; not what you are looking for. So why
implement it?&lt;/p&gt;
&lt;p&gt;Developed in the context of the telecom industry around 30 years ago, modified
several times after that and apparently suffering from a lack of a coherent
goal, by the early 90s ASN was still probably the only universal, machine- and
architecture-independent external data representation.&lt;/p&gt;
&lt;p&gt;So it came easily to hand around the time RSA Security started publishing its
series of &lt;a href=&quot;https://en.wikipedia.org/wiki/PKCS&quot;&gt;PKCS&lt;/a&gt; standards, aimed at the standardization of
cryptographic material exchange. RSA keys and digital signatures are often
exchanged ASN-encoded.&lt;/p&gt;
&lt;p&gt;At roughly the same time, ITU-T started publishing the &lt;a href=&quot;https://en.wikipedia.org/wiki/X.500&quot;&gt;X.500&lt;/a&gt; series
of standards which aimed to provide a comprehensive directory service. Much of
this work ended up as LDAP, but one little bit stands out in particular: the
&lt;a href=&quot;https://en.wikipedia.org/wiki/X.509&quot;&gt;X.509&lt;/a&gt; PKI certificate.&lt;/p&gt;
&lt;p&gt;So a few years later, when Netscape tried to build an authenticated and
confidential layer to tunnel HTTP through, they based it on -- amongst other
things -- X.509 certificates. Their work went through several revisions as SSL
and was finally standardized as TLS. Modern TLS still requires X.509.&lt;/p&gt;
&lt;p&gt;Thus, even though TLS uses ASN only for encoding certificates (and the odd PKCS1
signature), every implementation needs to know how to deal with ASN. In fact,
many other general cryptographic libraries also need to deal with ASN, as various PKCS
standards mandate ASN as the encoding for exchange of cryptographic material.&lt;/p&gt;
&lt;h3&gt;The grammar of the grammar&lt;/h3&gt;

&lt;p&gt;As its name implies, ASN was meant to be used with a specialized compiler. ASN
is really a standard for &lt;em&gt;writing down&lt;/em&gt; abstract syntaxes, and ASN compilers
provided with the target encoding will generate code in your programming
language of choice that, when invoked, parses to or serializes from ASN.&lt;/p&gt;
&lt;p&gt;As long as your programming language of choice is C, C++, Java or C#, obviously
-- there doesn't seem to be one freely available that targets OCaml. In any case, generating code for such a high-level language feels wrong somehow. In
its effort to be language-neutral, ASN needs to deal with things like modules,
abstraction and composition. At this point, most functional programmers reading
this are screaming: &amp;quot;I &lt;em&gt;already&lt;/em&gt; have a language that can deal with modules,
abstraction and composition perfectly well!&amp;quot;&lt;/p&gt;
&lt;p&gt;So we're left with implementing ASN in OCaml.&lt;/p&gt;
&lt;p&gt;One strategy is to provide utility functions for parsing elements of ASN and
simply invoke them in the appropriate order, as imposed by the target grammar.
This amounts to hand-writing the parser and is what TLS libraries in C
typically do.&lt;/p&gt;
&lt;p&gt;As of release 1.3.7, &lt;a href=&quot;https://github.com/polarssl/polarssl/tree/development/library&quot;&gt;PolarSSL&lt;/a&gt; includes ~7,500 lines of rather
beautifully written C, that implement a specialized parser for dealing with
X.509. OpenSSL's &lt;a href=&quot;https://github.com/openssl/openssl&quot;&gt;libcrypto&lt;/a&gt; contains ~50,000 lines of C in its
&lt;a href=&quot;https://github.com/openssl/openssl/tree/e3ba6a5f834f24aa5ffe9bc1849e3410c87388d5/crypto/asn1&quot;&gt;'asn1'&lt;/a&gt;, &lt;a href=&quot;https://github.com/openssl/openssl/tree/e3ba6a5f834f24aa5ffe9bc1849e3410c87388d5/crypto/x509&quot;&gt;'x509'&lt;/a&gt; and
&lt;a href=&quot;https://github.com/openssl/openssl/tree/e3ba6a5f834f24aa5ffe9bc1849e3410c87388d5/crypto/x509v3&quot;&gt;'x509v3'&lt;/a&gt; directories, and primarily deals with X.509
specifically as required by TLS.&lt;/p&gt;
&lt;p&gt;In both cases, low-level control flow is intertwined with the parsing logic and,
above the ASN parsing level, the code that deals with interpreting the ASN
structure is not particularly concise.
It is certainly a far cry from the (relatively)
simple grammar description ASN itself provides.&lt;/p&gt;
&lt;p&gt;Since in BER every value fully describes itself, another strategy is to parse
the input stream without reference to the grammar. This produces a value that
belongs to the general type of all ASN-encoded trees, after which we need to
process the &lt;em&gt;structure&lt;/em&gt; according to the grammar. This is similar to a common
treatment of JSON or XML, where one decouples parsing of bytes from the
higher-level concerns about the actual structure contained therein. The problem
here is that either the downstream client of such a parser needs to constantly
re-check whether the parts of the structure it's interacting with are really
formed according to the grammar (probably leading to a tedium of
pattern-matches), or we have to turn around and solve the parsing problem
&lt;em&gt;again&lt;/em&gt;, mapping the uni-typed contents of a message to the actual, statically
known structure we require the message to have.&lt;/p&gt;
&lt;p&gt;Surely we can do better?&lt;/p&gt;
&lt;h3&gt;LAMBDA: The Ultimate Declarative&lt;/h3&gt;

&lt;p&gt;Again, ASN is a language with a number of built-in primitives, a few combining
constructs, (recursive) name-binding and a module system. Our target language is
a language with a perfectly good module system and it can certainly express
combining constructs. It includes an abstraction mechanism arguably far simpler
and easier to use than those of ASN, namely, functions. And the OCaml compilers
can already parse OCaml sources. So why not just reuse this machinery?&lt;/p&gt;
&lt;p&gt;The idea is familiar. Creating embedded languages for highly declarative
descriptions within narrowly defined problem spaces is the staple of functional
programming. In particular, combinatory parsing has been known, studied and
used for &lt;a href=&quot;http://comjnl.oxfordjournals.org/content/32/2/108.short&quot;&gt;decades&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, we also have to diverge from traditional parser combinators in two major ways.
Firstly, a single grammar expression needs to be able to generate
different concrete parsers, corresponding to different ASN encodings. More
importantly, we desire our grammar descriptions to act &lt;strong&gt;bidirectionally&lt;/strong&gt;,
producing both parsers and complementary deserializers.&lt;/p&gt;
&lt;p&gt;The second point severely restricts the signatures we can support. The usual
monadic parsers are off the table because the expression such as:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;( (pa : a t) &amp;gt;&amp;gt;= fun (a : a) -&amp;gt;
  (pb : b t) &amp;gt;&amp;gt;= fun (b : b) -&amp;gt;
  return (b, b, a) ) : (b * b * a) t&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;... &amp;quot;hides&amp;quot; parts of the parser inside the closures, especially the method of
mapping the parsed values into the output values, and can not be run &amp;quot;in
reverse&amp;quot; [&lt;a href=&quot;http://openmirage.org/blog/atom.xml#footnote-1&quot;&gt;1&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;We have a similar problem with &lt;a href=&quot;http://www.soi.city.ac.uk/~ross/papers/Applicative.html&quot;&gt;applicative functors&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;( (fun a b -&amp;gt; (b, b, a))
  &amp;lt;$&amp;gt; (pa : a t)
  &amp;lt;*&amp;gt; (pb : b t) ) : (b * b * a) t&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Given the usual &lt;code&gt;&amp;lt;$&amp;gt; : ('a -&amp;gt; 'b) -&amp;gt; 'a t -&amp;gt; 'b t&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt; : ('a -&amp;gt; 'b) t -&amp;gt;
'a t -&amp;gt; 'b t&lt;/code&gt;.) Although the elements of ASN syntax are now exposed, the process
of going from intermediate parsing results to the result of the whole is still
not accessible.&lt;/p&gt;
&lt;p&gt;Fortunately, due to the regular structure of ASN, we don't really &lt;em&gt;need&lt;/em&gt; the
full expressive power of monadic parsing. The only occurrence of sequential
parsing is within &lt;code&gt;SEQUENCE&lt;/code&gt; and related constructs, and we don't need
look-ahead. All we need to do is provide a few specialized combinators to handle
those cases -- combinators the likes of which would be derived in a
more typical setting.&lt;/p&gt;
&lt;p&gt;So if we imagine we had a few values, like:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;val gen_time : gen_time t
val utc_time : utc_time t
val choice   : 'a t -&amp;gt; 'b t -&amp;gt; ('a, 'b) choice t
val sequence : 'a t -&amp;gt; 'b t -&amp;gt; ('a * 'b) t&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming appropriate OCaml types &lt;code&gt;gen_time&lt;/code&gt; and &lt;code&gt;utc_time&lt;/code&gt; that reflect their
ASN counterparts, and a simple sum type &lt;code&gt;choice&lt;/code&gt;, we could express the
&lt;code&gt;Validity&lt;/code&gt; grammar above using:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;type time = (gen_time, utc_time) choice
let time     : time t          = choice gen_time utc_time
let validity : (time * time) t = sequence time time&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, ASN maps quite well to algebraic data types. Its &lt;code&gt;SEQUENCE&lt;/code&gt; corresponds
to n-ary products and &lt;code&gt;CHOICE&lt;/code&gt; to sums. ASN &lt;code&gt;SET&lt;/code&gt; is a lot like &lt;code&gt;SEQUENCE&lt;/code&gt;,
except the elements can come in any order; and &lt;code&gt;SEQUENCE_OF&lt;/code&gt; and &lt;code&gt;SET_OF&lt;/code&gt; are
just lifting an &lt;code&gt;'a&lt;/code&gt;-grammar into an &lt;code&gt;'a list&lt;/code&gt;-grammar.&lt;/p&gt;
&lt;p&gt;A small wrinkle is that &lt;code&gt;SEQUENCE&lt;/code&gt; allows for more contextual information on its
components (so does &lt;code&gt;CHOICE&lt;/code&gt; in reality, but we ignore that): elements can carry
labels (which are not used for parsing) and can be marked as optional. So
instead of working directly on the grammars, our &lt;code&gt;sequence&lt;/code&gt; must work on their
annotated versions. A second wrinkle is the arity of the &lt;code&gt;sequence&lt;/code&gt; combinator.&lt;/p&gt;
&lt;p&gt;Thus we introduce the type of annotated grammars, &lt;code&gt;'a element&lt;/code&gt;, which
corresponds to one &lt;code&gt;,&lt;/code&gt;-delimited syntactic element in ASN's own &lt;code&gt;SEQUENCE&lt;/code&gt;
grammar, and the type &lt;code&gt;'a sequence&lt;/code&gt;, which describes the entire contents (&lt;code&gt;{ ...
}&lt;/code&gt;) of a &lt;code&gt;SEQUENCE&lt;/code&gt; definition:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;val required : 'a t -&amp;gt; 'a element
val optional : 'a t -&amp;gt; 'a option element
val ( -@ )   : 'a element -&amp;gt; 'b element -&amp;gt; ('a * 'b) sequence
val ( @ )    : 'a element -&amp;gt; 'a sequence -&amp;gt; ('a * 'b) sequence
val sequence : 'a sequence -&amp;gt; 'a t&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following are then equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Triple ::= SEQUENCE {
  a INTEGER,
  b BOOLEAN,
  c BOOLEAN OPTIONAL
}&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;let triple : (int * (bool * bool option)) t =
  sequence (
      required int
    @ required bool
   -@ optional bool
  )&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also re-introduce functions, but in a controlled manner:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;val map : ('a -&amp;gt; 'b) -&amp;gt; ('b -&amp;gt; 'a) -&amp;gt; 'a t -&amp;gt; 'b t&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keeping in line with the general theme of bidirectionality, we require functions
to come in pairs. The deceptively called &lt;code&gt;map&lt;/code&gt; could also be called &lt;code&gt;iso&lt;/code&gt;, and
comes with a nice property: if the two functions are truly inverses,
the serialization process is fully reversible, and so is parsing, under
single-representation encodings (DER)!&lt;/p&gt;
&lt;h3&gt;ASTs of ASNs&lt;/h3&gt;

&lt;p&gt;To go that last mile, we should probably also &lt;em&gt;implement&lt;/em&gt; what we discussed.&lt;/p&gt;
&lt;p&gt;Traditional parser combinators look a little like this:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;type 'a p = string -&amp;gt; 'a * string

let bool : bool p = fun str -&amp;gt; (s.[0] &amp;lt;&amp;gt; &amp;quot;\000&amp;quot;, tail_of_string str)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually, the values inhabiting the parser type are the actual parsing functions,
and their composition directly produces larger parsing functions. We would
probably need to represent them with &lt;code&gt;'a p * 'a s&lt;/code&gt;, pairs of a parser and its
inverse, but the same general idea applies.&lt;/p&gt;
&lt;p&gt;Nevertheless, we don't want to do this.
The grammars need to support more than one concrete
parser/serializer, and composing what is common between them and extracting out
what is not would probably turn into a tangled mess. That is one reason. The other is that if we encode the grammar purely as
(non-function) value, we can traverse it for various other purposes.&lt;/p&gt;
&lt;p&gt;So we turn from what is sometimes called &amp;quot;shallow embedding&amp;quot; to &amp;quot;deep
embedding&amp;quot; and try to represent the grammar purely as an algebraic data type.&lt;/p&gt;
&lt;p&gt;Let's try to encode the parser for bools, &lt;code&gt;boolean : bool t&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;type 'a t =
  | Bool
  ...

let boolean : bool t = Bool&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately our constructor is fully polymorphic, of type &lt;code&gt;'a. 'a t&lt;/code&gt;. We can
constrain it for the users, but once we traverse it there is nothing left to
prove its intended association with booleans!&lt;/p&gt;
&lt;p&gt;Fortunately, starting with the release of &lt;a href=&quot;http://ocaml.org/releases/4.00.1.html&quot;&gt;OCaml 4.00.0&lt;/a&gt;,
OCaml joined the ranks of
languages equipped with what is probably the supreme tool of deep embedding,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Generalized_algebraic_data_type&quot;&gt;GADTs&lt;/a&gt;. Using them, we can do things like:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;type _ t =
  | Bool   : bool t
  | Pair   : ('a t * 'b t) -&amp;gt; ('a * 'b) t
  | Choice : ('a t * 'b t) -&amp;gt; ('a, 'b) choice t
  ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, this is very close to how the library is &lt;a href=&quot;https://github.com/mirleft/ocaml-asn1-combinators/blob/4328bf5ee6f20ad25ff7971ee8013f79e5bfb036/src/core.ml#L19&quot;&gt;actually&lt;/a&gt;
implemented.&lt;/p&gt;
&lt;p&gt;There is only one thing left to worry about: ASN definitions can be recursive.
We might try something like:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;let rec list = choice null (pair int list)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this won't work. Being just trees of applications, our definitions never
contain &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-400/manual021.html#toc70&quot;&gt;statically constructive&lt;/a&gt; parts -- this expression could never
terminate in a strict language.&lt;/p&gt;
&lt;p&gt;We can get around that by wrapping grammars in &lt;code&gt;Lazy.t&lt;/code&gt; (or just closures), but
this would be too awkward to use. Like many other similar libraries, we need to
provide a fixpoint combinator:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;val fix : ('a t -&amp;gt; 'a t) -&amp;gt; 'a t&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And get to write:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;let list = fix @@ fun list -&amp;gt; choice null (pair int list)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This introduces a small problem. So far we simply reused binding inherited
from OCaml without ever worrying about identifiers and references, but with a
fixpoint, the grammar encodings need to be able to somehow express a cycle.&lt;/p&gt;
&lt;p&gt;Borrowing an idea from higher-order abstract syntax, we can represent the entire
fixpoint node using exactly the function provided to define it, re-using OCaml's
own binding and identifier resolution:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;type _ t =
  | Fix : ('a t -&amp;gt; 'a t) -&amp;gt; 'a t
  ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This treatment completely sidesteps the problems with variables. We need no
binding environments or De Brujin indices, and need not care about the desired
scoping semantics. A little trade-off is that with this simple encoding it
becomes more difficult to track cycles (when traversing the AST, if we keep
applying a &lt;code&gt;Fix&lt;/code&gt; node to itself while descending into it, it looks like an
infinite tree), but with a little opportunistic caching it all plays out well
[&lt;a href=&quot;http://openmirage.org/blog/atom.xml#footnote-2&quot;&gt;2&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/mirleft/ocaml-asn1-combinators/blob/4328bf5ee6f20ad25ff7971ee8013f79e5bfb036/src/ber_der.ml#L49&quot;&gt;parser&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirleft/ocaml-asn1-combinators/blob/4328bf5ee6f20ad25ff7971ee8013f79e5bfb036/src/ber_der.ml#L432&quot;&gt;serializer&lt;/a&gt; proper then emerge as interpreters for
this little language of typed trees, traversing them with an input string, and
parsing it in a fully type-safe manner.&lt;/p&gt;
&lt;h3&gt;How does it play out?&lt;/h3&gt;

&lt;p&gt;The entire ASN library comes down to ~1,700 lines of OCaml, with around ~1,100
more in tests, giving a mostly-complete treatment of BER and DER.&lt;/p&gt;
&lt;p&gt;Its main use so far is in the context of the &lt;code&gt;X.509&lt;/code&gt; library
(discussed &lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;yesterday&lt;/a&gt;). It allowed the
grammar of certificates and RSA keys, together with a number of transformations
from the raw types to more pleasant, externally facing ones, to be written in
~900 &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/6c96f11a2c7911ae0b308af9b328aee38f48b270/lib/asn_grammars.ml&quot;&gt;lines&lt;/a&gt; of OCaml. And the code looks a lot like the
actual standards the grammars were taken from -- the fragment from the beginning
of this article becomes:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;let unique_identifier = bit_string_cs

let time =
  map (function `C1 t -&amp;gt; t | `C2 t -&amp;gt; t) (fun t -&amp;gt; `C2 t)
      (choice2 utc_time generalized_time)

let validity =
  sequence2
    (required ~label:&amp;quot;not before&amp;quot; time)
    (required ~label:&amp;quot;not after&amp;quot;  time)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We added &lt;code&gt;~label&lt;/code&gt; to &lt;code&gt;'a element&lt;/code&gt;-forming injections, and have:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;val choice2 : 'a t -&amp;gt; 'b t -&amp;gt; [ `C1 of 'a | `C2 of 'b ] t&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get a sense of how the resulting system eases the translation of standardized
ASN grammars into working code, it is particularly instructive to compare
&lt;a href=&quot;https://github.com/polarssl/polarssl/blob/b9e4e2c97a2e448090ff3fcc0f99b8f6dbc08897/library/x509_crt.c#L531&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/asn_grammars.ml#L772&quot;&gt;two&lt;/a&gt; definitions.&lt;/p&gt;
&lt;p&gt;Reversibility was a major simplifying factor during development. Since the
grammars are traversable, it is easy to generate their &lt;a href=&quot;https://github.com/mirleft/ocaml-asn1-combinators/blob/cf1a1ffb4a31d02979a6a0bca8fe58856f8907bf/src/asn_random.ml&quot;&gt;random&lt;/a&gt;
inhabitants, encode them, parse the result and verify the reversibility still
&lt;a href=&quot;https://github.com/mirleft/ocaml-asn1-combinators/blob/cf1a1ffb4a31d02979a6a0bca8fe58856f8907bf/tests/testlib.ml#L83&quot;&gt;holds&lt;/a&gt;. This can't help convince us the parsing/serializing pair
is actually correct with respect to ASN, but it gives a simple tool to generate
large amounts of test cases and convince us that that pair is &lt;em&gt;equivalent&lt;/em&gt;. A
number of hand-written cases then check the conformance to the actual ASN.&lt;/p&gt;
&lt;p&gt;As for security, there were two concerns we were aware of. There is a history of
catastrophic &lt;a href=&quot;https://technet.microsoft.com/en-us/library/security/ms04-007.aspx&quot;&gt;buffer overruns&lt;/a&gt; in some ASN.1 implementations,
but -- assuming our compiler and runtime system are correct -- we are immune to
these as we are subject to bounds-checking. And
there are some documented &lt;a href=&quot;https://www.viathinksoft.de/~daniel-marschall/asn.1/oid_facts.html&quot;&gt;problems&lt;/a&gt; with security of X.509
certificate verification due to overflows of numbers in ASN OID types, which we
explicitly guard against.&lt;/p&gt;
&lt;p&gt;You can check our security status on our &lt;a href=&quot;https://github.com/mirleft/ocaml-asn1-combinators/issues?state=open&quot;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Footnotes&lt;/h4&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;a name=&quot;footnote-1&quot;&gt; &lt;/a&gt; In fact, the problem with embedding functions in
 combinator languages, and the fact that in a functional language it is not
 possible to extract information from a function other than by applying it,
 was discussed more than a decade ago. Such discussions led to the development of
 &lt;a href=&quot;http://www.haskell.org/arrows/biblio.html#Hug00&quot;&gt;Arrows&lt;/a&gt;, amongst other things.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a name=&quot;footnote-2&quot;&gt; &lt;/a&gt; Actually, a version of the library used the more
 &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1411226&quot;&gt;proper&lt;/a&gt; encoding to be able to inject results of reducing
 referred-to parts of the AST into the referring sites directly, roughly
 like &lt;code&gt;Fix : ('r -&amp;gt; ('a, 'r) t) -&amp;gt; ('a, 'r) t&lt;/code&gt;. This approach was abandoned because terms need to be polymorphic in &lt;code&gt;'r&lt;/code&gt;, and this becomes
 impossible to hide from the user of the library, creating unwelcome noise.&lt;/p&gt;
&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;Posts in this TLS series:
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;Introducing transport layer security (TLS) in pure OCaml&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;OCaml-TLS: building the nocrypto library core&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;OCaml-TLS: adventures in X.509 certificate parsing and validation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-asn1&quot;&gt;OCaml-TLS: ASN.1 and notation embedding&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/ocaml-tls-api-internals-attacks-mitigation&quot;&gt;OCaml-TLS: the protocol implementation and mitigations to known attacks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;


   </content><id>https://mirage.io/blog/introducing-asn1</id><title type="text">OCaml-TLS: ASN.1 and notation embedding</title><updated>2014-07-11T12:00:00+00:00</updated><author><email></email><name>David Kaloper</name></author></entry><entry><link href="https://mirage.io/blog/introducing-x509" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;em&gt;This is the third in a series of posts that introduce new libraries for a pure OCaml implementation of TLS.
You might like to begin with the &lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;introduction&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;The problem of authentication&lt;/h3&gt;

&lt;p&gt;The authenticity of the remote server needs to be verified while
establishing a secure connection to it, or else an
attacker (&lt;a href=&quot;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&quot;&gt;MITM&lt;/a&gt;) between the client and the server can eavesdrop on
the transmitted data. To the best of our knowledge, authentication
cannot be done solely in-band, but needs external
infrastructure. The most common methods used in practice rely on
public key encryption.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Web of trust&lt;/em&gt; (used by &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenPGP&quot;&gt;OpenPGP&lt;/a&gt;) is a decentralised public key
infrastructure. It relies on out-of-band verification of public keys
and transitivity of trust. If Bob signed Alice's public key, and
Charlie trusts Bob (and signed his public key), then Charlie can trust
that Alice's public key is hers.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Public key infrastructure&lt;/em&gt; (used by &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;TLS&lt;/a&gt;) relies on trust
anchors which are communicated out-of-band (e.g. distributed with the
client software). In order to authenticate a server, a chain of trust
between a trust anchor and the server certificate (public key) is
established. Only those clients which have the trust anchor deployed
can verify the authenticity of the server.&lt;/p&gt;
&lt;h3&gt;X.509 public key infrastructure&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/X.509&quot;&gt;X.509&lt;/a&gt; is an ITU standard for a public key infrastructure,
developed in 1988. Amongst other things, it specifies the format of
certificates, their attributes, revocation lists, and a path
validation algorithm. X.509 certificates are encoded using abstract
syntax notation one (ASN.1).&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;certificate&lt;/em&gt; contains a public key, a subject (server name), a
validity period, a purpose (i.e. key usage), an issuer, and
possibly other extensions. All components mentioned in the certificate
are signed by an issuer.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;certificate authority&lt;/em&gt; (CA) receives a certificate signing request
from a server operator. It verifies that this signing request is
legitimate (e.g. requested server name is owned by the server
operator) and signs the request. The CA certificate must be trusted by
all potential clients. A CA can also issue intermediate CA
certificates, which are allowed to sign certificates.&lt;/p&gt;
&lt;p&gt;When a server certificate or intermediate CA certificate is
compromised, the CA publishes this certificate in its certificate
revocation list (CRL), which each client should poll periodically.&lt;/p&gt;
&lt;p&gt;The following certificates are exchanged before a TLS session:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CA -&amp;gt; Client: CA certificate, installed as trust anchor on the client&lt;/li&gt;&lt;li&gt;Server -&amp;gt; CA: certificate request, to be signed by the CA&lt;/li&gt;&lt;li&gt;CA -&amp;gt; Server: signed server certificate&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;During the TLS handshake the server sends the certificate chain to the
client. When a client wants to verify a certificate, it has to verify
the signatures of the entire chain, and find a trust anchor which
signed the outermost certificate. Further constraints, such as the
maximum chain length and the validity period, are checked as
well. Finally, the server name in the server certificate is checked to
match the expected identity.
For an example, you can see the sequence diagram of the TLS handshake your browser makes when you visit our &lt;a href=&quot;https://tls.openmirage.org&quot;&gt;demonstration server&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Example code for verification&lt;/h3&gt;

&lt;p&gt;OpenSSL implements &lt;a href=&quot;https://tools.ietf.org/html/rfc5280&quot;&gt;RFC5280&lt;/a&gt; path validation, but there is no
implementation to validate the identity of a certificate. This has to
be implemented by each client, which is rather complex (e.g. in
&lt;a href=&quot;https://github.com/freebsd/freebsd/blob/bf1a15b165af779577b0278b3d47151edb0d47f9/lib/libfetch/common.c#L326-665&quot;&gt;libfetch&lt;/a&gt; it spans over more than 300 lines). A client of the
&lt;code&gt;ocaml-x509&lt;/code&gt; library (such as our &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lwt/examples/http_client.ml&quot;&gt;http-client&lt;/a&gt;) has to
write only two lines of code:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;lwt authenticator = X509_lwt.authenticator (`Ca_dir ca_cert_dir) in
lwt (ic, oc) =
  Tls_lwt.connect_ext
    (Tls.Config.client_exn ~authenticator ())
    (host, port)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The authenticator uses the default directory where trust anchors are
stored (&lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lwt/examples/ex_common.ml#L6&quot;&gt;'ca_cert_dir'&lt;/a&gt;), and this authenticator is
passed to the &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lwt/tls_lwt.ml#L227&quot;&gt;'connect_ext'&lt;/a&gt; function. This initiates
the TLS handshake, and passes the trust anchors and the hostname to
the TLS library.&lt;/p&gt;
&lt;p&gt;During the client handshake when the certificate chain is received by
the server, the given authenticator and hostname are used to
authenticate the certificate chain (in &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/blob/6dc9258a38489665abf2bd6cdbed8a1ba544d522/lib/handshake_client.ml#L84&quot;&gt;'validate_chain'&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;match
 X509.Authenticator.authenticate ?host:server_name authenticator stack
with
 | `Fail SelfSigned         -&amp;gt; fail Packet.UNKNOWN_CA
 | `Fail NoTrustAnchor      -&amp;gt; fail Packet.UNKNOWN_CA
 | `Fail CertificateExpired -&amp;gt; fail Packet.CERTIFICATE_EXPIRED
 | `Fail _                  -&amp;gt; fail Packet.BAD_CERTIFICATE
 | `Ok                      -&amp;gt; return server_cert&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Internally, &lt;code&gt;ocaml-x509&lt;/code&gt; extracts the hostname list from a
certificate in &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L134-144&quot;&gt;'cert_hostnames'&lt;/a&gt;, and the
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L325-L346&quot;&gt;wildcard or strict matcher&lt;/a&gt; compares it to the input.
In total, this is less than 50 lines of pure OCaml code.&lt;/p&gt;
&lt;h3&gt;Problems in X.509 verification&lt;/h3&gt;

&lt;p&gt;Several weaknesses in the verification of X.509 certificates have been
discovered, ranging from cryptographic attacks due to
&lt;a href=&quot;http://www.win.tue.nl/~bdeweger/CollidingCertificates/ddl-full.pdf&quot;&gt;collisions in hash algorithms&lt;/a&gt; (&lt;a href=&quot;http://www.win.tue.nl/hashclash/rogue-ca/&quot;&gt;practical&lt;/a&gt;) over
&lt;a href=&quot;http://www.blackhat.com/presentations/bh-usa-09/MARLINSPIKE/BHUSA09-Marlinspike-DefeatSSL-SLIDES.pdf&quot;&gt;misinterpretation of the name&lt;/a&gt; in the certificate (a C
string is terminated by a null byte), and treating X.509 version 1
certificates always as a &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0092&quot;&gt;trust anchor in GnuTLS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An &lt;a href=&quot;https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html&quot;&gt;empirical study of software that does certificate
verification&lt;/a&gt; showed that badly designed APIs are the
root cause of vulnerabilities in this area. They tested various
implementations by using a list of certificates, which did not form a
chain, and would not authenticate due to being self-signed, or
carrying a different server name.&lt;/p&gt;
&lt;p&gt;Another recent empirical study (&lt;a href=&quot;http://www.cs.utexas.edu/~suman/publications/frankencert.pdf&quot;&gt;Frankencert&lt;/a&gt;) generated random
certificates and validated these with various stacks. They found lots
of small issues in nearly all certificate verification stacks.&lt;/p&gt;
&lt;p&gt;Our implementation mitigates against some of the known attacks: we
require a complete valid chain, check the extensions of a certificate,
and implement hostname checking as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc6125&quot;&gt;RFC6125&lt;/a&gt;. We have a
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/tree/master/tests&quot;&gt;test suite&lt;/a&gt; with over 3200 tests and multiple CAs. We do not yet discard
certificates which use MD5 as hash algorithm. Our TLS stack
requires certificates to have at least 1024 bit RSA keys.&lt;/p&gt;
&lt;h3&gt;X.509 library internals&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;x509&lt;/code&gt; library uses &lt;a href=&quot;https://github.com/mirleft/ocaml-asn-combinators&quot;&gt;asn-combinators&lt;/a&gt; to parse X.509 certificates and
the &lt;a href=&quot;https://github.com/mirleft/ocaml-nocrypto&quot;&gt;nocrypto&lt;/a&gt; library for signature verification
(which we wrote about &lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;previously&lt;/a&gt;).
At the moment we do not yet
expose certificate builders from the library, but focus on certificate parsing
and certificate authentication.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/x509.ml&quot;&gt;x509&lt;/a&gt; module provides modules which parse
PEM-encoded (&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/x509.ml#L18&quot;&gt;pem&lt;/a&gt;) certificates (&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/x509.ml#L85&quot;&gt;Cert&lt;/a&gt;)
and private keys
(&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/x509.ml#L105&quot;&gt;Pk&lt;/a&gt;), and an authenticator module
(&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/x509.ml#L123&quot;&gt;Authenticators&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So far we have two authenticators implemented:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/x509.ml#L137&quot;&gt;'chain_of_trust'&lt;/a&gt;, which implements the basic path
 validation algorithm from &lt;a href=&quot;https://tools.ietf.org/html/rfc5280&quot;&gt;RFC5280&lt;/a&gt; (section 6) and the hostname
 validation from &lt;a href=&quot;https://tools.ietf.org/html/rfc6125&quot;&gt;RFC6125&lt;/a&gt;. To construct such an authenticator, a
 timestamp and a list of trust anchors is needed.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/x509.ml#L142&quot;&gt;'null'&lt;/a&gt;, which always returns success.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The method &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/x509.mli#L42&quot;&gt;'authenticate'&lt;/a&gt;, to be called when a
certificate stack should be verified, receives an authenticator, a
hostname and the certificate stack. It returns either &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Fail&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/asn_grammars.ml#L734&quot;&gt;certificate type&lt;/a&gt; is very similar to the described structure in the RFC:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;type tBSCertificate = {
  version    : [ `V1 | `V2 | `V3 ] ;
  serial     : Z.t ;
  signature  : Algorithm.t ;
  issuer     : Name.dn ;
  validity   : Time.t * Time.t ;
  subject    : Name.dn ;
  pk_info    : PK.t ;
  issuer_id  : Cstruct.t option ;
  subject_id : Cstruct.t option ;
  extensions : (bool * Extension.t) list
}

type certificate = {
  tbs_cert       : tBSCertificate ;
  signature_algo : Algorithm.t ;
  signature_val  : Cstruct.t
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The certificate itself wraps the to be signed part (&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/asn_grammars.ml#L734&quot;&gt;'tBSCertificate'&lt;/a&gt;),
the used signature algorithm, and the actual signature. It consists of
a version, serial number, issuer, validity, subject, public key
information, optional issuer and subject identifiers, and a list of
extensions -- only version 3 certificates may have extensions.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/certificate.mli&quot;&gt;'certificate'&lt;/a&gt; module implements the actual
authentication of certificates, and provides some useful getters such
as &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/certificate.ml#L91&quot;&gt;'cert_type'&lt;/a&gt;, &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/certificate.ml#L95&quot;&gt;'cert_usage'&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/certificate.ml#L100&quot;&gt;'cert_extended_usage'&lt;/a&gt;. The main entry for
authentication is &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L419&quot;&gt;'verify_chain_of_trust'&lt;/a&gt;,
which checks correct signatures of the chain, extensions and validity
of each certificate, and the hostname of the server certificate.&lt;/p&gt;
&lt;p&gt;The grammar of X.509 certificates is developed in the
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/asn_grammars.ml&quot;&gt;'asn_grammars'&lt;/a&gt; module, and the object
identifiers are gathered in the &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/cdea2b1ae222e88a403f2d8f954a6aa31c984941/lib/registry.ml&quot;&gt;'registry'&lt;/a&gt; module.&lt;/p&gt;
&lt;h3&gt;Implementation of certificate verification&lt;/h3&gt;

&lt;p&gt;We provide the function &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L438&quot;&gt;'valid_cas'&lt;/a&gt;, which takes a
timestamp and a list of certificate authorities. Each certificate
authority is checked to be &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L282&quot;&gt;valid&lt;/a&gt;, self-signed,
correctly signed, and having 
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L277&quot;&gt;proper X.509 v3 extensions&lt;/a&gt;.
As mentioned above, version 1 and version 2
certificates do not contain extensions. For a version 3 certificate,
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L206&quot;&gt;'validate_ca_extensions'&lt;/a&gt; is called: The
basic constraints extensions must be present, and its value must be
true. Also, key usage must be present and the certificate must be
allowed to sign certificates. Finally, we reject the certificate if
there is any extension marked critical, apart from the two mentioned
above.&lt;/p&gt;
&lt;p&gt;When we have a list of validated CA certificates, we can use these to
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L419&quot;&gt;verify the chain of trust&lt;/a&gt;, which gets a
hostname, a timestamp, a list of trust anchors and a certificate chain
as input. It first checks that the &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L384&quot;&gt;server certificate is
valid&lt;/a&gt;, the &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L264&quot;&gt;validity of the intermediate
certificates&lt;/a&gt;, and that the &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L421&quot;&gt;chain is complete&lt;/a&gt;
(the pathlen constraint is not validated) and rooted in a trust
anchor. A server certificate is valid if the validity period matches
the current timestamp, the given hostname &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml#L333&quot;&gt;matches&lt;/a&gt;
its subject alternative name extension or common name (might be
wildcard or strict matching, &lt;a href=&quot;https://tools.ietf.org/html/rfc6125&quot;&gt;RFC6125&lt;/a&gt;), and it does not have a
basic constraints extension which value is true.&lt;/p&gt;
&lt;h3&gt;Current status of ocaml-x509&lt;/h3&gt;

&lt;p&gt;We currently support only RSA certificates. We do not check revocation
lists or use the online certificate status protocol (&lt;a href=&quot;http://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol&quot;&gt;OCSP&lt;/a&gt;). Our
implementation does not handle name constraints and policies. However, if
any of these extensions is marked critical, we refuse to validate the
chain. To keep our main authentication free of side-effects, it currently uses
the timestamp when the authenticator was created rather than when it is used
(this isn't a problem if lifetime of the OCaml-TLS process is comparatively
short, as in the worst case the lifetime of the certificates can be extended by
the lifetime of the process).&lt;/p&gt;
&lt;p&gt;We invite people to read through the
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/certificate.ml&quot;&gt;certificate verification&lt;/a&gt; and the
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509/blob/7bd25d152445263d7659c653e4a761222f43c75b/lib/asn_grammars.ml&quot;&gt;ASN.1 parsing&lt;/a&gt;. We welcome discussion on the
&lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/&quot;&gt;mirage-devel mailing list&lt;/a&gt; and bug reports
on the &lt;a href=&quot;https://github.com/mirleft/ocaml-x509/issues&quot;&gt;GitHub issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;Posts in this TLS series:
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;Introducing transport layer security (TLS) in pure OCaml&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;OCaml-TLS: building the nocrypto library core&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;OCaml-TLS: adventures in X.509 certificate parsing and validation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-asn1&quot;&gt;OCaml-TLS: ASN.1 and notation embedding&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/ocaml-tls-api-internals-attacks-mitigation&quot;&gt;OCaml-TLS: the protocol implementation and mitigations to known attacks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;


   </content><id>https://mirage.io/blog/introducing-x509</id><title type="text">OCaml-TLS: Adventures in X.509 certificate parsing and validation</title><updated>2014-07-10T13:00:00+00:00</updated><author><email></email><name>Hannes Mehnert</name></author></entry><entry><link href="https://mirage.io/blog/introducing-nocrypto" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;em&gt;This is the second in a series of posts that introduce new libraries for a pure OCaml implementation of TLS.
You might like to begin with the &lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;introduction&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;What is nocrypto?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mirleft/ocaml-nocrypto&quot;&gt;nocrypto&lt;/a&gt; is the small cryptographic library behind the
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;ocaml-tls&lt;/a&gt; project. It is built to be straightforward to use, adhere to
functional programming principles and able to run in a Xen-based unikernel.
Its major use-case is &lt;code&gt;ocaml-tls&lt;/code&gt;, which we &lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;announced yesterday&lt;/a&gt;, but we do intend to provide
sufficient features for it to be more widely applicable.&lt;/p&gt;
&lt;p&gt;&amp;quot;Wait, you mean you wrote your own &lt;em&gt;crypto library&lt;/em&gt;?&amp;quot;&lt;/p&gt;
&lt;h3&gt;&amp;quot;Never write your own crypto&amp;quot;&lt;/h3&gt;

&lt;p&gt;Everybody seems to recognize that cryptography is horribly difficult. Building
cryptography, it is all too easy to fall off the deep end and end up needing to
make decisions only a few, select specialists can make. Worse, any mistake is
difficult to uncover but completely compromises the security of the system. Or
in Bruce Schneier's &lt;a href=&quot;https://www.schneier.com/essays/archives/1998/01/security_pitfalls_in.html&quot;&gt;words&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Building a secure cryptographic system is easy to do badly, and very difficult
to do well. Unfortunately, most people can't tell the difference. In other
areas of computer science, functionality serves to differentiate the good from
the bad: a good compression algorithm will work better than a bad one; a bad
compression program will look worse in feature-comparison charts. Cryptography
is different. Just because an encryption program works doesn't mean it is
secure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Obviously, it would be far wiser not to attempt to do this and instead reuse
good, proven work done by others. And with the wealth of free cryptographic
libraries around, one gets to take their pick.&lt;/p&gt;
&lt;p&gt;So to begin with, we turned to &lt;a href=&quot;https://forge.ocamlcore.org/projects/cryptokit/&quot;&gt;cryptokit&lt;/a&gt;, the more-or-less
standard cryptographic library in the OCaml world. It has a decent coverage of
the basics: some stream ciphers (ARC4), some block ciphers (AES, 3DES and
Blowfish) the core hashes (MD5, SHA, the SHA2 family and RIPEMD) and the
public-key primitives (Diffie-Hellman and RSA). It is also designed with
composability in mind, exposing various elements as stream-transforming objects
that can be combined on top of one another.&lt;/p&gt;
&lt;p&gt;Unfortunately, its API was a little difficult to use. Suppose you have a secret
key, an IV and want to use AES-128 in CBC mode to encrypt a bit of data. You do
it like this:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;let key = &amp;quot;abcd1234abcd1234&amp;quot;
and iv  = &amp;quot;1234abcd1234abcd&amp;quot;
and msg = &amp;quot;fire the missile&amp;quot;

let aes     = new Cryptokit.Block.aes_encrypt key
let aes_cbc = new Cryptokit.Block.cbc_encrypt ~iv aes

let cip =
  let size =
    int_of_float (ceil (float String.(length msg) /. 16.) *. 16.) in
  String.create size

let () = aes_cbc#transform msg 0 cip 0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, &lt;code&gt;cip&lt;/code&gt; contains our secret message. This being CBC, both &lt;code&gt;msg&lt;/code&gt; and
the string the output will be written into (&lt;code&gt;cip&lt;/code&gt;) need to have a size that is a
multiple of the underlying block size. If they do not, bad things will
happen -- silently.&lt;/p&gt;
&lt;p&gt;There is also the curious case of hashing-object states:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;let md5 = Cryptokit.Hash.md5 ()

let s1 = Cryptokit.hash_string md5 &amp;quot;bacon&amp;quot;
let s2 = Cryptokit.hash_string md5 &amp;quot;bacon&amp;quot;
let s3 = Cryptokit.hash_string md5 &amp;quot;bacon&amp;quot;

(*
  s1 = &amp;quot;x\019%\142\248\198\1822\221\232\204\128\246\189\166/&amp;quot;
  s2 = &amp;quot;'\\F\017\234\172\196\024\142\255\161\145o\142\128\197&amp;quot;
  s3 = &amp;quot;'\\F\017\234\172\196\024\142\255\161\145o\142\128\197&amp;quot;
*)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error here is to try and carry a single instantiated hashing object around,
while trying to get hashes of distinct strings. But with the convergence after
the second step, the semantics of the hashing object still remains unclear to
us.&lt;/p&gt;
&lt;p&gt;One can fairly easily overcome the API style mismatches by making a few
specialized wrappers, of course, except for two major problems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;Cryptokit is pervasively stateful. While this is almost certainly a result of
 performance considerations combined with its goals of ease of
 compositionality, it directly clashes with the fundamental design property of
 the TLS library we wanted to use it in: our &lt;code&gt;ocaml-tls&lt;/code&gt; library is stateless. We need to
 be able to represent the state the encryption engine is in as a value.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Cryptokit operates on strings. As a primary target of &lt;code&gt;ocaml-tls&lt;/code&gt; was
 &lt;a href=&quot;http://openmirage.org/&quot;&gt;Mirage&lt;/a&gt;, and Mirage uses separate, non-managed regions of memory to
 store network data in, we need to be able to handle foreign-allocated
 storage. This means &lt;code&gt;Bigarray&lt;/code&gt; (as exposed by &lt;code&gt;Cstruct&lt;/code&gt;), and it seems just
 plain wrong to negate all the careful zero-copy architecture of the stack
 below by copying everything into and out of strings.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;There are further problems. For example, Cryptokit makes no attempts to combat
well-known timing vulnerabilities. It has no support for elliptic curves. And it
depends on the system-provided random number generator, which does not exist
when running in the context of a unikernel.&lt;/p&gt;
&lt;p&gt;At this point, with the &lt;em&gt;de facto&lt;/em&gt; choice off the table, it's probably worth
thinking about writing OCaml bindings to a rock-solid cryptographic library
written in C.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://nacl.cr.yp.to/&quot;&gt;NaCl&lt;/a&gt; is a modern, well-regarded crypto implementation, created by a
group of pretty famous and equally well-regarded cryptographers, and was the
first choice. Or at least its more approachable and packageable &lt;a href=&quot;http://labs.opendns.com/2013/03/06/announcing-sodium-a-new-cryptographic-library/&quot;&gt;fork&lt;/a&gt;
was, which already had &lt;a href=&quot;https://github.com/dsheets/ocaml-sodium&quot;&gt;OCaml bindings&lt;/a&gt;. Unfortunately, &lt;code&gt;NaCl&lt;/code&gt;
provides a narrow selection of implementations of various cryptographic
primitives, the ones its authors thought were best-of-breed (for example, the
only symmetric ciphers it implements are (X-)Salsa and AES in CTR mode). And
they are probably right (in some aspects they are &lt;em&gt;certainly&lt;/em&gt; right), but NaCl
is best used for implementations of newly-designed security protocols. It is
simply too opinionated to support an old, standardized behemoth like TLS.&lt;/p&gt;
&lt;p&gt;Then there is &lt;a href=&quot;https://www.openssl.org/docs/crypto/crypto.html&quot;&gt;crypto&lt;/a&gt;, the library OpenSSL is built on top of. It
is quite famous and provides optimized implementations of a wide range of
cryptographic algorithms. It also contains upwards of 200,000 lines of C and a
very large API footprint, and it's unclear whether it would be possible to run
it in the unikernel context. Recently, the parent project it is embedded in has
become highly suspect, with one high-profile vulnerability piling on top of
another and at least &lt;a href=&quot;http://www.libressl.org/&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;https://boringssl.googlesource.com/boringssl/&quot;&gt;forks&lt;/a&gt; so far attempting to
clean the code base. It just didn't feel like a healthy code base to build
a new project on.&lt;/p&gt;
&lt;p&gt;There are other free cryptographic libraries in C one could try to bind, but at
a certain point we faced the question: is the work required to become intimately
familiar with the nuances and the API of an existing code base, and create
bindings for it in OCaml, really that much smaller than writing one from
scratch? When using a full library one commits to its security decisions and
starts depending on its authors' time to keep it up to date -- maybe this
effort is better spent in writing one in the first place.&lt;/p&gt;
&lt;p&gt;Tantalizingly, the length of the single OCaml source file in &lt;code&gt;Cryptokit&lt;/code&gt; is
2260 lines.&lt;/p&gt;
&lt;p&gt;Maybe if we made &lt;strong&gt;zero&lt;/strong&gt; decisions ourselves, informed all our work by published
literature and research, and wrote the bare minimum of code needed, it might not
even be dead-wrong to do it ourselves?&lt;/p&gt;
&lt;p&gt;And that is the basic design principle. Do nothing fancy. Do only documented
things. Don't write too much code. Keep up to date with security research. Open
up and ask people.&lt;/p&gt;
&lt;h3&gt;The anatomy of a simple crypto library&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nocrypto&lt;/code&gt; uses bits of C, similarly to other cryptographic libraries written in
high-level languages.&lt;/p&gt;
&lt;p&gt;This was actually less of a performance concern, and more of a security one: for
the low-level primitives which are tricky to implement and for which known,
compact and widely used code already exists, the implementation is probably
better reused. The major pitfall we hoped to avoid that way are side-channel
attacks.&lt;/p&gt;
&lt;p&gt;We use public domain (or BSD licenced) &lt;a href=&quot;https://github.com/mirleft/ocaml-nocrypto/tree/master/src/native&quot;&gt;C sources&lt;/a&gt; for the
simple cores of AES, 3DES, MD5, SHA and SHA2. The impact of errors in this code
is constrained: they contain no recursion, and they perform no allocation,
simply filling in caller-supplied fixed-size buffer by appropriate bytes.&lt;/p&gt;
&lt;p&gt;The block implementations in C have a simple API that requires us to provide the
input and output buffers and a key, writing the single encrypted (or decrypted)
block of data into the buffer. Like this:&lt;/p&gt;
&lt;pre class=&quot;C&quot;&gt;&lt;code class=&quot;C&quot;&gt;void rijndaelEncrypt(const unsigned long *rk, int nrounds,
  const unsigned char plaintext[16], unsigned char ciphertext[16]);

void rijndaelDecrypt(const unsigned long *rk, int nrounds,
  const unsigned char ciphertext[16], unsigned char plaintext[16]);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hashes can initialize a provided buffer to serve as an empty accumulator,
hash a single chunk of data into that buffer and convert its contents into a
digest, which is written into a provided fixed buffer.&lt;/p&gt;
&lt;p&gt;In other words, all the memory management happens exclusively in OCaml and all
the buffers passed into the C layer are tracked by the garbage collector (GC).&lt;/p&gt;
&lt;h3&gt;Symmetric ciphers&lt;/h3&gt;

&lt;p&gt;So far, the only provided ciphers are AES, 3DES and ARC4, with ARC4 implemented
purely in OCaml (and provided only for TLS compatibility and for testing).&lt;/p&gt;
&lt;p&gt;AES and 3DES are based on core C code, on top of which we built some standard
&lt;a href=&quot;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation&quot;&gt;modes of operation&lt;/a&gt; in OCaml. At the moment we support ECB, CBC
and CTR. There is also a nascent &lt;a href=&quot;https://en.wikipedia.org/wiki/Galois/Counter_Mode&quot;&gt;GCM&lt;/a&gt; implementation which is, at the time
of writing, known not to be optimal and possibly prone to timing attacks, and
which we are still working on.&lt;/p&gt;
&lt;p&gt;The exposed API strives to be simple and value-oriented. Each mode of each
cipher is packaged up as a module with a similar signature, with a pair of
functions for encryption and decryption. Each of those essentially takes a key
and a byte buffer and yields the resulting byte buffer, minimising hassle.&lt;/p&gt;
&lt;p&gt;This is how you encrypt a message:&lt;/p&gt;
&lt;pre class=&quot;OCaml&quot;&gt;&lt;code class=&quot;OCaml&quot;&gt;open Nocrypto.Block

let key = AES.CBC.of_secret Cstruct.(of_string &amp;quot;abcd1234abcd1234&amp;quot;)
and iv  = Cstruct.of_string &amp;quot;1234abcd1234abcd&amp;quot;
and msg = Cstruct.of_string &amp;quot;fire the missile&amp;quot;

let { AES.CBC.message ; iv } = AES.CBC.encrypt ~key ~iv msg&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hashes implemented are just MD5, SHA and the SHA2 family. Mirroring the
block ciphers, they are based on C cores, with the HMAC construction provided in
OCaml. The API is similarly simple: each hash is a separate module with the same
signature, providing a function that takes a byte buffer to its digest, together
with several stateful operations for incremental computation of digests.&lt;/p&gt;
&lt;p&gt;Of special note is that our current set of C sources will probably soon be
replaced. AES uses code that is vulnerable to a &lt;a href=&quot;http://cr.yp.to/antiforgery/cachetiming-20050414.pdf&quot;&gt;timing attack&lt;/a&gt;,
stemming from the fact that substitution tables are loaded into the CPU cache
as-needed. The code does not take advantage of the &lt;a href=&quot;https://en.wikipedia.org/wiki/AES_instruction_set&quot;&gt;AES-NI&lt;/a&gt;
instructions present in modern CPUs that allow AES to be hardware-assisted. SHA
and SHA2 cores turned out to be (comparatively) ill-performing, and static
analysis already uncovered some potential memory issues, so we are looking for
better implementations.&lt;/p&gt;
&lt;h3&gt;Public-key cryptography&lt;/h3&gt;

&lt;p&gt;Bignum arithmetic is provided by the excellent &lt;a href=&quot;https://forge.ocamlcore.org/projects/zarith&quot;&gt;zarith&lt;/a&gt; library, which
in turn uses &lt;a href=&quot;https://gmplib.org/&quot;&gt;GMP&lt;/a&gt;. This might create some portability problems later on,
but as GMP is widely used and well rounded code base which also includes some of
the needed auxiliary number-theoretical functions (its slightly extended
Miller-Rabin probabilistic primality test and the fast next-prime-scanning
function), it seemed like a much saner choice than redoing it from scratch.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/mirleft/ocaml-nocrypto/blob/a52bba2dcaf1c5fd45249588254dff2722e9f960/src/rsa.mli&quot;&gt;RSA&lt;/a&gt; module provides the basics: raw encryption and decryption,
&lt;a href=&quot;https://en.wikipedia.org/wiki/PKCS_1&quot;&gt;PKCS1&lt;/a&gt;-padded versions of the same operations, and PKCS1 signing and
signature verification. It can generate RSA keys, which it does simply by
finding two large primes, in line with &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.310.4183&quot;&gt;Rivest's&lt;/a&gt; own
recommendation.&lt;/p&gt;
&lt;p&gt;Notably, RSA implements the standard &lt;a href=&quot;https://en.wikipedia.org/wiki/Blinding_(cryptography)&quot;&gt;blinding&lt;/a&gt; technique which can mitigate
some side-channel attacks, such as timing or &lt;a href=&quot;http://www.cs.tau.ac.il/~tromer/acoustic/&quot;&gt;acoustic&lt;/a&gt;
cryptanalysis. It seems to foil even stronger, &lt;a href=&quot;http://eprint.iacr.org/2013/448.pdf&quot;&gt;cache eviction&lt;/a&gt;
based attacks, but as of now, we are not yet completely sure.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/mirleft/ocaml-nocrypto/blob/a52bba2dcaf1c5fd45249588254dff2722e9f960/src/dh.mli&quot;&gt;Diffie-Hellman&lt;/a&gt; module is also relatively basic. We implement some
&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.56.1921&quot;&gt;widely&lt;/a&gt; &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.21.639&quot;&gt;recommended&lt;/a&gt; checks on the incoming public key to
mitigate some possible MITM attacks, the module can generate strong DH groups
(using safe primes) with guaranteed large prime-order subgroup, and we provide
a catalogue of published DH groups ready for use.&lt;/p&gt;
&lt;h3&gt;Randomness&lt;/h3&gt;

&lt;p&gt;Random number generation used to be a chronically overlooked part of
cryptographic libraries, so much so that nowadays one of the first questions
about a crypto library is, indeed, &amp;quot;Where does it get randomness from?&amp;quot;&lt;/p&gt;
&lt;p&gt;It's an important question. A cryptographic system needs unpredictability in
many places, and violating this causes catastrophic &lt;a href=&quot;https://www.debian.org/security/2008/dsa-1571&quot;&gt;failures&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nocrypto&lt;/code&gt; contains its own implementation of &lt;a href=&quot;https://www.schneier.com/fortuna.html&quot;&gt;Fortuna&lt;/a&gt;. Like
&lt;a href=&quot;https://www.schneier.com/yarrow.html&quot;&gt;Yarrow&lt;/a&gt;, Fortuna uses a strong block cipher in CTR mode (AES in our
case) to produce the pseudo-random stream, a technique that is considered as
unbreakable as the underlying cipher.&lt;/p&gt;
&lt;p&gt;The stream is both self-rekeyed, and rekeyed with the entropy gathered into its
accumulator pool. Unlike the earlier designs, however, Fortuna is built without
entropy estimators, which usually help the PRNG decide when to actually convert
the contents of an entropy pool into the new internal state. Instead, Fortuna
uses a design where the pools are fed round-robin, but activated with an
exponential backoff. There is &lt;a href=&quot;https://eprint.iacr.org/2014/167&quot;&gt;recent research&lt;/a&gt; showing this
design is essentially sound: after a state compromise, Fortuna wastes no more
than a constant factor of incoming entropy -- whatever the amount of entropy is
-- before coming back to an unpredictable state. The resulting design is both
simple, and robust in terms of its usage of environmental entropy.&lt;/p&gt;
&lt;p&gt;The above paper also suggests a slight improvement to the accumulator regime,
yielding a factor-of-2 improvement in entropy usage over the original. We still
haven't implemented this, but certainly intend to.&lt;/p&gt;
&lt;p&gt;A PRNG needs to be fed with some actual entropy to be able to produce
unpredictable streams. The library itself contains no provisions for doing this
and its PRNG needs to be fed by the user before any output can be produced. We
are &lt;a href=&quot;https://github.com/mirage/mirage-entropy&quot;&gt;working with the Mirage team&lt;/a&gt; on exposing environmental
entropy sources and connecting them to our implementation of Fortuna.&lt;/p&gt;
&lt;h3&gt;Above &amp;amp; beyond&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nocrypto&lt;/code&gt; is still very small, providing the bare minimum cryptographic
services to support TLS and related X.509 certificate operations. One of the
goals is to flesh it out a bit, adding some more widely deployed algorithms, in
hopes of making it more broadly usable.&lt;/p&gt;
&lt;p&gt;There are several specific problems with the library at this stage:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C code&lt;/strong&gt; - As mentioned, we are seeking to replace some of the C code we use. The hash
cores are underperforming by about a factor of 2 compared to some other
implementations. AES implementation is on one hand vulnerable to a timing attack
and, on the other hand, we'd like to make use of hardware acceleration for this
workhorse primitive -- without it we lose about an order of magnitude of
performance.&lt;/p&gt;
&lt;p&gt;Several options were explored, ranging from looking into the murky waters of
OpenSSL and trying to exploit their heavily optimized primitives, to bringing
AES-NI into OCaml and redoing AES in OCaml. At this point, it is not clear which
path we'll take.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ECC&lt;/strong&gt; - Looking further, the library still lacks support for elliptic curve cryptography
and we have several options for solving this. Since it is used by TLS, ECC is
probably the missing feature we will concentrate on first.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Entropy on Xen&lt;/strong&gt; - The entropy gathering on Xen is incomplete. The current prototype uses current
time as the random seed and the effort to expose noisier sources like interrupt
timings and the RNG from dom0's kernel is still ongoing.  Dave Scott, for example, has
&lt;a href=&quot;http://lists.xen.org/archives/html/xen-devel/2014-06/msg01492.html&quot;&gt;submitted patches&lt;/a&gt; to upstream Xen to make it easier to establish low-bandwidth
channels to supplies guest VMs with strong entropy from a privileged domain
that has access to physical devices and hence high-quality entropy sources.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GC timing attacks?&lt;/strong&gt; - There is the question of GC and timing attacks: whether doing
cryptography in a high-level language opens up a completely new surface for
timing attacks, given that GC runs are very visible in the timing profile. The
basic approach is to leave the core routines which we know are potentially
timing-sensitive (like AES) and for which we don't have explicit timing
mitigations (like RSA) to C, and invoke them atomically from the perspective of
the GC. So far, it's an open question whether the constructions built on top
of them expose further side-channels.&lt;/p&gt;
&lt;p&gt;Still, we believe that the whole package is a pleasant library to work with. Its
simplicity contributes to the comparative simplicity of the entire TLS library,
and we are actively seeking input on areas that need further improvement.
Although we are obviously biased, we believe it is the best cryptographic base
library available for this project, and it might be equally suited for your next
project too!&lt;/p&gt;
&lt;p&gt;We are striving to be open about the current security status of our code. You
are free to check out our &lt;a href=&quot;https://github.com/mirleft/ocaml-nocrypto/issues?state=open&quot;&gt;issue tracker&lt;/a&gt; and invited to contribute
comments, ideas, and especially audits and code.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;Posts in this TLS series:
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;Introducing transport layer security (TLS) in pure OCaml&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;OCaml-TLS: building the nocrypto library core&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;OCaml-TLS: adventures in X.509 certificate parsing and validation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-asn1&quot;&gt;OCaml-TLS: ASN.1 and notation embedding&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/ocaml-tls-api-internals-attacks-mitigation&quot;&gt;OCaml-TLS: the protocol implementation and mitigations to known attacks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;


   </content><id>https://mirage.io/blog/introducing-nocrypto</id><title type="text">OCaml-TLS: building the nocrypto library core</title><updated>2014-07-09T16:00:00+00:00</updated><author><email></email><name>David Kaloper</name></author></entry><entry><link href="https://mirage.io/blog/introducing-ocaml-tls" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;We announce a &lt;strong&gt;beta&lt;/strong&gt; release of &lt;code&gt;ocaml-tls&lt;/code&gt;, a clean-slate implementation of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;Transport Layer Security&lt;/a&gt; (TLS) in
OCaml.&lt;/p&gt;
&lt;h3&gt;What is TLS?&lt;/h3&gt;

&lt;p&gt;Transport Layer Security (TLS) is probably the most widely deployed
security protocol on the Internet. It provides communication privacy
to prevent eavesdropping, tampering, and message forgery. Furthermore,
it optionally provides authentication of the involved endpoints. TLS
is commonly deployed for securing web services (&lt;a href=&quot;http://tools.ietf.org/html/rfc2818&quot;&gt;HTTPS&lt;/a&gt;), emails,
virtual private networks, and wireless networks.&lt;/p&gt;
&lt;p&gt;TLS uses asymmetric cryptography to exchange a symmetric key, and
optionally authenticate (using X.509) either or both endpoints. It
provides algorithmic agility, which means that the key exchange
method, symmetric encryption algorithm, and hash algorithm are
negotiated.&lt;/p&gt;
&lt;h3&gt;TLS in OCaml&lt;/h3&gt;

&lt;p&gt;Our implementation &lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;ocaml-tls&lt;/a&gt; is already able to interoperate with
existing TLS implementations, and supports several important TLS extensions
such as server name indication (&lt;a href=&quot;https://tools.ietf.org/html/rfc4366&quot;&gt;RFC4366&lt;/a&gt;, enabling virtual hosting)
and secure renegotiation (&lt;a href=&quot;https://tools.ietf.org/html/rfc5746&quot;&gt;RFC5746&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Our &lt;a href=&quot;https://tls.openmirage.org/&quot;&gt;demonstration server&lt;/a&gt; runs &lt;code&gt;ocaml-tls&lt;/code&gt; and renders exchanged
TLS messages in nearly real time by receiving a trace of the TLS
session setup. If you encounter any problems, please give us &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues&quot;&gt;feedback&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ocaml-tls&lt;/code&gt; and all dependent libraries are available via &lt;a href=&quot;https://opam.ocaml.org/packages/tls/tls.0.1.0/&quot;&gt;OPAM&lt;/a&gt; (&lt;code&gt;opam install tls&lt;/code&gt;). The &lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;source is available&lt;/a&gt;
under a BSD license. We are primarily working towards completeness of
protocol features, such as client authentication, session resumption, elliptic curve and GCM
cipher suites, and have not yet optimised for performance.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ocaml-tls&lt;/code&gt; depends on the following independent libraries: &lt;a href=&quot;https://github.com/mirleft/ocaml-nocrypto&quot;&gt;ocaml-nocrypto&lt;/a&gt; implements the
cryptographic primitives, &lt;a href=&quot;https://github.com/mirleft/ocaml-asn1-combinators&quot;&gt;ocaml-asn1-combinators&lt;/a&gt; provides ASN.1 parsers/unparsers, and
&lt;a href=&quot;https://github.com/mirleft/ocaml-x509&quot;&gt;ocaml-x509&lt;/a&gt; implements the X509 grammar and certificate validation (&lt;a href=&quot;https://tools.ietf.org/html/rfc5280&quot;&gt;RFC5280&lt;/a&gt;). &lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;ocaml-tls&lt;/a&gt; implements TLS (1.0, 1.1 and 1.2; &lt;a href=&quot;https://tools.ietf.org/html/rfc2246&quot;&gt;RFC2246&lt;/a&gt;,
&lt;a href=&quot;https://tools.ietf.org/html/rfc4346&quot;&gt;RFC4346&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/rfc5246&quot;&gt;RFC5246&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We invite the community to audit and run our code, and we are particularly interested in discussion of our APIs.
Please use the &lt;a href=&quot;http://lists.xenproject.org/archives/html/mirageos-devel/&quot;&gt;mirage-devel mailing list&lt;/a&gt; for discussions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please be aware that this release is a &lt;em&gt;beta&lt;/em&gt; and is missing external code audits.
It is not yet intended for use in any security critical applications.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues&quot;&gt;issue tracker&lt;/a&gt; we transparently document known attacks against TLS and our mitigations
(&lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues?labels=security%20concern&amp;amp;page=1&amp;amp;state=open&quot;&gt;checked&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirleft/ocaml-tls/issues?labels=security%20concern&amp;amp;page=1&amp;amp;state=closed&quot;&gt;unchecked&lt;/a&gt;).
We have not yet implemented mitigations against either the
&lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/Lucky13.html&quot;&gt;Lucky13&lt;/a&gt; timing attack or traffic analysis (e.g. &lt;a href=&quot;http://tools.ietf.org/html/draft-pironti-tls-length-hiding-02&quot;&gt;length-hiding padding&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Trusted code base&lt;/h3&gt;

&lt;p&gt;Designed to run on Mirage, the trusted code base of &lt;code&gt;ocaml-tls&lt;/code&gt; is small. It includes the libraries already mentioned,
&lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;`ocaml-tls`&lt;/a&gt;, &lt;a href=&quot;https://github.com/mirleft/ocaml-asn1-combinators&quot;&gt;`ocaml-asn-combinators`&lt;/a&gt;, &lt;a href=&quot;https://github.com/mirleft/ocaml-x509&quot;&gt;`ocaml-x509`&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/mirleft/ocaml-nocrypto&quot;&gt;`ocaml-nocrypto`&lt;/a&gt; (which uses C implementations of block
ciphers and hash algorithms). For arbitrary precision integers needed in 
asymmetric cryptography, we rely on &lt;a href=&quot;https://forge.ocamlcore.org/projects/zarith&quot;&gt;`zarith`&lt;/a&gt;, which wraps
&lt;a href=&quot;https://gmplib.org/&quot;&gt;`libgmp`&lt;/a&gt;. As underlying byte array structure we use
&lt;a href=&quot;https://github.com/mirage/ocaml-cstruct&quot;&gt;`cstruct`&lt;/a&gt; (which uses OCaml &lt;code&gt;Bigarray&lt;/code&gt; as storage).&lt;/p&gt;
&lt;p&gt;We should also mention the OCaml runtime, the OCaml compiler, the
operating system on which the source is compiled and the binary is executed, as
well as the underlying hardware. Two effectful frontends for
the pure TLS core are implemented, dealing
with side-effects such as reading and writing from the network: &lt;a href=&quot;http://ocsigen.org/lwt/api/Lwt_unix&quot;&gt;Lwt_unix&lt;/a&gt; and
Mirage, so applications can run directly as a Xen unikernel.&lt;/p&gt;
&lt;h3&gt;Why a new TLS implementation?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;
Thanks to &lt;a href=&quot;http://frama-c.com/&quot;&gt;Frama-C&lt;/a&gt; guys for &lt;a href=&quot;https://twitter.com/spun_off/status/486535304426188800&quot;&gt;pointing&lt;/a&gt; &lt;a href=&quot;https://twitter.com/spun_off/status/486536572792090626&quot;&gt;out&lt;/a&gt;
that &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1266&quot;&gt;CVE-2014-1266&lt;/a&gt; and &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224&quot;&gt;CVE-2014-0224&lt;/a&gt; are &lt;em&gt;not&lt;/em&gt; memory safety issues, but
logic errors. This article previously stated otherwise.&lt;/p&gt;
&lt;p&gt;There are only a few TLS implementations publicly available and most
programming languages bind to OpenSSL, an open source implementation written
in C. There are valid reasons to interface with an existing TLS library,
rather than developing one from scratch, including protocol complexity and
compatibility with different TLS versions and implementations. But from our
perspective the disadvantage of most existing libraries is that they
are written in C, leading to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Memory safety issues, as recently observed by &lt;a href=&quot;https://en.wikipedia.org/wiki/Heartbleed&quot;&gt;Heartbleed&lt;/a&gt; and GnuTLS
 session identifier memory corruption (&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3466&quot;&gt;CVE-2014-3466&lt;/a&gt;) bugs;&lt;/li&gt;&lt;li&gt;Control flow complexity (Apple's goto fail, &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1266&quot;&gt;CVE-2014-1266&lt;/a&gt;);&lt;/li&gt;&lt;li&gt;And difficulty in encoding state machines (OpenSSL change cipher suite
 attack, &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224&quot;&gt;CVE-2014-0224&lt;/a&gt;).&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Our main reasons for &lt;code&gt;ocaml-tls&lt;/code&gt; are that OCaml is a modern functional
language, which allows concise and declarative descriptions of the
complex protocol logic and provides type safety and memory safety to help
guard against programming errors. Its functional nature is extensively
employed in our code: the core of the protocol is written in purely
functional style, without any side effects.&lt;/p&gt;
&lt;p&gt;Subsequent blog posts &lt;a href=&quot;https://github.com/mirage/mirage/issues/257&quot;&gt;over the coming
days&lt;/a&gt; will examine in more detail
the design and implementation of the four libraries, as well as the security
trade-offs and some TLS attacks and our mitigations against them.  For now
though, we invite you to try out our &lt;strong&gt;&lt;a href=&quot;https://tls.openmirage.org/&quot;&gt;demonstration server&lt;/a&gt;&lt;/strong&gt;
running our stack over HTTPS.  We're particularly interested in feedback on our &lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;issue tracker&lt;/a&gt; about
clients that fail to connect, and any queries from anyone reviewing the &lt;a href=&quot;https://github.com/mirleft/&quot;&gt;source code&lt;/a&gt;
of the constituent libraries.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;Posts in this TLS series:
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-ocaml-tls&quot;&gt;Introducing transport layer security (TLS) in pure OCaml&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-nocrypto&quot;&gt;OCaml-TLS: building the nocrypto library core&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-x509&quot;&gt;OCaml-TLS: adventures in X.509 certificate parsing and validation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/introducing-asn1&quot;&gt;OCaml-TLS: ASN.1 and notation embedding&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/blog/ocaml-tls-api-internals-attacks-mitigation&quot;&gt;OCaml-TLS: the protocol implementation and mitigations to known attacks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;


   </content><id>https://mirage.io/blog/introducing-ocaml-tls</id><title type="text">Introducing transport layer security (TLS) in pure OCaml</title><updated>2014-07-08T15:00:00+00:00</updated><author><email></email><name>Hannes Mehnert</name></author></entry><entry><link href="https://mirage.io/blog/mirage-1.2-released" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;Summer is in full swing here in MirageOS HQ with torrential rainstorms, searing
sunshine, and our &lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/detail/35024&quot;&gt;OSCON 2014&lt;/a&gt; talk
rapidly approaching in just a few weeks.  We've been steadily releasing point releases
since the &lt;a href=&quot;http://openmirage.org/blog/mirage-1.1-released&quot;&gt;first release&lt;/a&gt; back in December, and today's &lt;a href=&quot;https://github.com/mirage/mirage/releases/tag/v1.2.0&quot;&gt;MirageOS
1.2.0&lt;/a&gt; is the last of the &lt;code&gt;1.x&lt;/code&gt; series.
The main improvements are usability-oriented:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;The Mirage frontend tool now generates a &lt;code&gt;Makefile&lt;/code&gt; with a &lt;code&gt;make depend&lt;/code&gt;
 target, instead of directly invoking OPAM as part of &lt;code&gt;mirage configure&lt;/code&gt;.
 This greatly improves usability on slow platforms such as ARM, since the
 output of OPAM as it builds can be inspected more easily. Users will now
 need to run &lt;code&gt;make depend&lt;/code&gt; to ensure they have the latest package set
 before building their unikernel.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Improve formatting of the &lt;code&gt;mirage&lt;/code&gt; output, including pretty colours!
 This makes it easier to distinguish complex unikernel configurations
 that have lots of deployment options.  The generated files are built
 more verbosely by default to facilitate debugging, and with debug
 symbols and backtraces enabled by default.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Added several &lt;a href=&quot;https://github.com/mirage/mirage/tree/master/types&quot;&gt;device module types&lt;/a&gt;, including &lt;code&gt;ENTROPY&lt;/code&gt; for random
 noise, &lt;code&gt;FLOW&lt;/code&gt; for stream-oriented connections, and exposed the &lt;code&gt;IPV4&lt;/code&gt;
 device in the &lt;code&gt;STACKV4&lt;/code&gt; TCP/IP stack type.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Significant bugfixes in supporting libraries such as the TCP/IP
 stack (primarily thanks to &lt;a href=&quot;http://www.somerandomidiot.com/&quot;&gt;Mindy Preston&lt;/a&gt; fuzz testing
 and finding some good &lt;a href=&quot;https://github.com/mirage/mirage-tcpip/issues/56&quot;&gt;zingers&lt;/a&gt;).  There are too many
 library releases to list individually here, but you can &lt;a href=&quot;http://openmirage.org/releases&quot;&gt;browse the changelog&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;h4&gt;&amp;nbsp;Towards MirageOS 2.0&lt;/h4&gt;

&lt;p&gt;We've also been working hard on the &lt;strong&gt;MirageOS 2.x series&lt;/strong&gt;, which introduces
a number of new features and usability improvements that emerged from actually
using the tools in practical projects.  Since there have been so many &lt;a href=&quot;http://openmirage.org/blog/welcome-to-our-summer-hackers&quot;&gt;new
contributors&lt;/a&gt; recently,
&lt;a href=&quot;http://amirchaudhry.com&quot;&gt;Amir Chaudhry&lt;/a&gt; is coordinating a &lt;a href=&quot;https://github.com/mirage/mirage/issues/257&quot;&gt;series of blog
posts&lt;/a&gt; in the runup to
&lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/detail/35024&quot;&gt;OSCON&lt;/a&gt; that
explains the new work in depth.  Once the release rush has subsided, we'll
be working on integrating these posts into our &lt;a href=&quot;http://openmirage.org/docs&quot;&gt;documentation&lt;/a&gt;
properly.&lt;/p&gt;
&lt;p&gt;The new 2.0 features include the &lt;a href=&quot;https://github.com/mirage/irmin&quot;&gt;Irmin&lt;/a&gt; branch-consistent distributed storage
library, the pure OCaml &lt;a href=&quot;https://github.com/mirleft/&quot;&gt;TLS stack&lt;/a&gt;, &lt;a href=&quot;https://github.com/mirage/mirage-platform/pull/93&quot;&gt;Xen/ARM support&lt;/a&gt; and the Conduit I/O
subsystem for &lt;a href=&quot;http://anil.recoil.org/papers/2012-resolve-fable.pdf&quot;&gt;mapping names to connections&lt;/a&gt;.  Also included in the blog series
are some sample usecases on how these tie together for real applications (as a
teaser, here's a video of &lt;a href=&quot;https://www.youtube.com/watch?v=DSzvFwIVm5s&quot;&gt;Xen VMs booting using
Irmin&lt;/a&gt; thanks to &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave
Scott&lt;/a&gt; and &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt;!)&lt;/p&gt;
&lt;h4&gt;Upcoming talks and tutorials&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://mort.io&quot;&gt;Richard Mortier&lt;/a&gt; and myself will be gallivanting around the world
to deliver a few talks this summer:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The week of &lt;a href=&quot;http://www.oscon.com/oscon2014&quot;&gt;OSCON&lt;/a&gt; on July 20th-24th.  Please get in touch via the conference website or a direct e-mail, or &lt;a href=&quot;http://www.oscon.com/oscon2014/public/schedule/detail/35024&quot;&gt;attend our talk&lt;/a&gt; on Thursday morning.
There's a &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; book signing on Tuesday morning for the super keen as well.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;http://ecoop14.it.uu.se/programme/ecoop-school.php&quot;&gt;ECOOP summer school&lt;/a&gt; in beautiful Uppsala in Sweden on Weds 30th July. &lt;/li&gt;&lt;li&gt;I'll be presenting the Irmin and Xen integration at &lt;a href=&quot;http://events.linuxfoundation.org/events/xen-project-developer-summit&quot;&gt;Xen Project Developer Summit&lt;/a&gt; in
 Chicago on Aug 18th (as part of LinuxCon North America).  &lt;a href=&quot;http://mort.io&quot;&gt;Mort&lt;/a&gt; and &lt;a href=&quot;http://somerandomidiot.com&quot;&gt;Mindy&lt;/a&gt; (no jokes please) will be
 joining the community panel about &lt;a href=&quot;http://openmirage.org/blog/applying-for-gsoc2014&quot;&gt;GSoC/OPW&lt;/a&gt; participation.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;As always, if there are any particular topics you would like to see more
on, then please comment on the &lt;a href=&quot;https://github.com/mirage/mirage/issues/257&quot;&gt;tracking issue&lt;/a&gt;
or &lt;a href=&quot;http://openmirage.org/community&quot;&gt;get in touch directly&lt;/a&gt;.  There will be a lot of releases coming out
in the next few weeks (including a beta of the new version of &lt;a href=&quot;http://opam.ocaml.org&quot;&gt;OPAM&lt;/a&gt;,
so &lt;a href=&quot;https://github.com/mirage/mirage/issues&quot;&gt;bug reports&lt;/a&gt; are very much appreciated for those
things that slip past &lt;a href=&quot;http://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt;!&lt;/p&gt;

   </content><id>https://mirage.io/blog/mirage-1.2-released</id><title type="text">MirageOS 1.2 released and the 2.0 runup begins</title><updated>2014-07-08T11:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2014/06/24/highlights-from-recent-sessions" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;h2&gt;Highlights from recent sessions&lt;/h2&gt;

&lt;p&gt;With the &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/2014/06/20/sixth-compiler-hacking-session.html&quot;&gt;next compiler hacking meeting&lt;/a&gt; due to take place in a couple of days it's time for a look back at some results from our last couple of sessions.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;the-front-end&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;The front end&lt;/h3&gt;

&lt;figure style=&quot;float: right; padding: 15px; width: 350px&quot;&gt;
&lt;img src=&quot;https://farm3.staticflickr.com/2756/4150220583_57a993cc61_z_d.jpg&quot; style=&quot;width: 350px&quot; alt=&quot;Camel front end&quot;/&gt;&lt;br/&gt;
&lt;figcaption&gt;&lt;center&gt;&lt;small&gt;(&lt;a href=&quot;https://www.flickr.com/photos/paperpariah/4150220583&quot;&gt;&lt;i&gt;today I stared a camel in the face&lt;/i&gt;&lt;/a&gt; by &lt;a href=&quot;https://www.flickr.com/photos/paperpariah/&quot;&gt;Adam Foster&lt;/a&gt;)&lt;/small&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The front end (i.e. &lt;a href=&quot;https://realworldocaml.org/v1/en/html/the-compiler-frontend-parsing-and-type-checking.html&quot;&gt;the parser and type checker&lt;/a&gt;) saw a number of enhancements.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;succinct-functor-syntax&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Succinct functor syntax&lt;/h4&gt;

&lt;p&gt;Syntax tweaks are always popular, if &lt;a href=&quot;http://www.haskell.org/haskellwiki/Wadler's_Law&quot;&gt;often contentious&lt;/a&gt;.   However, reaching agreement is significantly easier when adding syntax is a simple matter of extending an existing correspondence between two parts of the language.  For example, it was clear which syntax to use when adding support for &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-400/manual021.html#toc73&quot;&gt;lazy patterns&lt;/a&gt;: since patterns generally mirror the syntax for the values they match, patterns for destructing lazy values should use the same &lt;code&gt;lazy&lt;/code&gt; keyword as the expressions which construct them.&lt;/p&gt;

&lt;p&gt;A second correspondence in OCaml's syntax relates modules and values.  Module names and variables are both bound with &lt;code&gt;=&lt;/code&gt;; module signatures and types are both ascribed with &lt;code&gt;:&lt;/code&gt;; module fields and record fields are both projected with &lt;code&gt;.&lt;/code&gt;.  The syntax for functors and functions is also similar, but the latter offers a number of shortcuts not available in the module language; you can write&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;instead of the more prolix equivalent:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but multi-argument functors must be written out in full:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In February's meeting, &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas&lt;/a&gt; wrote a &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/16&quot;&gt;patch&lt;/a&gt; that adds an analogue of the shorter syntax to the module language, allowing the repeated &lt;code&gt;functor&lt;/code&gt; to be left out:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The patch also adds support for a corresponding abbreviation at the module type level.  Defining the type of a multi-argument functor currently involves writing a rather clunky sequence of &lt;code&gt;functor&lt;/code&gt; abstractions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;U&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With Thomas's patch all but the first occurrence of &lt;code&gt;functor&lt;/code&gt; disappear:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;functor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;U&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since Thomas's patch has been merged into trunk, you can try out the new syntax using the &lt;a href=&quot;http://alan.petitepomme.net/cwn/2014.05.27.html#2&quot;&gt;4.02.0 beta&lt;/a&gt;, which is available as a compiler switch in the OPAM repository:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;opam switch 4.02.0+trunk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next step is to find out whether the verbose syntax was a symptom or a cause of the infrequency of higher-order functors in OCaml code.  Will we see a surge in the popularity of higher-order modules as the syntax becomes more accommodating?&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;integer-ranges&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Integer ranges&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/dsheets&quot;&gt;David&lt;/a&gt; started work on extending OCaml's range patterns, which currently support only characters, to support &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on#wiki-integer-range-patterns&quot;&gt;integer ranges&lt;/a&gt;.  For example, consider the following &lt;a href=&quot;https://github.com/ygrek/mldonkey/blob/03896bfc/src/utils/ocamlrss/rss_date.ml#L195-L202&quot;&gt;code from MLDonkey&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mdn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;                            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;                              &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although this is fairly clear, it could be made even clearer if we had a &lt;a href=&quot;http://en.wikipedia.org/wiki/Rule_of_least_power&quot;&gt;&lt;em&gt;less&lt;/em&gt; powerful language&lt;/a&gt; for expressing the tests involving &lt;code&gt;h&lt;/code&gt;.  Since the whole OCaml language is available in the &lt;code&gt;when&lt;/code&gt; guard of a case, the reader has to examine the code carefully before concluding that the tests are all simple range checks.  Perhaps worse, using guards inhibits the useful checks that the OCaml compiler performs to determine whether patterns are exhaustive or redundant.  David's patch makes it possible to rewrite the tests without guards, making the simple nature of the tests on &lt;code&gt;h&lt;/code&gt; clear at a glance (and making it possible once again to check exhaustiveness and redundancy):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mdn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The work on range patterns led to a robust exchange of views about which other types should be supported -- should we support any enumerable type (e.g. variants with nullary constructors)? or perhaps even any ordered type (e.g. floats or strings)?  For the moment, there seems to be a much clearer consensus in favour of supporting integer types than there is for generalising range patterns any further.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;extensible-variants&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Extensible variants&lt;/h4&gt;

&lt;p&gt;Since the compiler hacking group only meets for an evening every couple of months or so, most of the &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;projects we work on&lt;/a&gt; are designed so that it's possible to implement them in a few hours.  &lt;a href=&quot;http://www.lpw25.net/&quot;&gt;Leo&lt;/a&gt;'s proposal for extensible variants is a notable exception, &lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2012-01/msg00050.html&quot;&gt;predating&lt;/a&gt; both the &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/2013/09/17/compiler-hacking-july-2013.html&quot;&gt;compiler hacking group&lt;/a&gt; and &lt;a href=&quot;http://anil.recoil.org/2012/10/19/announcing-ocaml-labs.html&quot;&gt;OCaml Labs&lt;/a&gt; itself.&lt;/p&gt;

&lt;p&gt;Extensible variants generalise exceptions: with Leo's patch the exception type &lt;code&gt;exn&lt;/code&gt; becomes a particular instance of a class of types that can be defined by the user rather than a special builtin provided by the compiler:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Define an extensible variant type *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Extend the type with a constructor *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Extend the type with another constructor *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Invalid_argument&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even better, extensible variants come with all the power of regular variant types: they can take type parameters, and even support GADT definitions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Define a parameterised extensible variant type *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Extend the type with a constructor *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;(* Extend the type with a GADT constructor *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the evening of the last compiler hacking meeting, Leo &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5584#c11335&quot;&gt;completed&lt;/a&gt; the patch; shortly afterwards it was &lt;a href=&quot;https://github.com/ocaml/ocaml/commit/b56dc4b3df8d022b54f40682a9d5d4168c690413&quot;&gt;merged to trunk&lt;/a&gt;, ready for inclusion in &lt;a href=&quot;http://alan.petitepomme.net/cwn/2014.05.27.html#2&quot;&gt;OCaml 4.02&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Extensible variants are a significant addition to the language, and there's more to them than these simple examples show.  A forthcoming post from Leo will describe the new feature in more detail.  In the meantime, since they've been merged into the 4.02 release candidate, you can try them out with OPAM:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;opam switch 4.02.0+trunk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;lazy-record-fields&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Lazy record fields&lt;/h4&gt;

&lt;p&gt;Not everything we work on makes is destined to make it upstream.  A few years ago, &lt;a href=&quot;http://alain.frisch.fr/&quot;&gt;Alain Frisch&lt;/a&gt; &lt;a href=&quot;http://www.lexifi.com/blog/ocaml-extensions-lexifi-semi-implicit-laziness&quot;&gt;described&lt;/a&gt; an OCaml extension in use at &lt;a href=&quot;http://lexifi.com/&quot;&gt;Lexifi&lt;/a&gt; for marking record fields lazy, making it possible to delay the evaluation of initializing expressions without writing the &lt;code&gt;lazy&lt;/code&gt; keyword every time a record is constructed.  Alain's post was received enthusiastically, and lazy record fields seemed like an obvious candidate for inclusion upstream, so in April's meeting Thomas put together a &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/48&quot;&gt;patch&lt;/a&gt; implementing the design.  Although the OCaml team decided not to merge the patch, it led to an enlightening &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/48#issuecomment-41758626&quot;&gt;discussion&lt;/a&gt; with comments from several core developers, including Alain, who described &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/48#issuecomment-41758626&quot;&gt;subsequent, less positive, experience with the feature at Lexifi&lt;/a&gt;, and Xavier, who explained the &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/48#issuecomment-41779525&quot;&gt;rationale underlying the current design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;back-end&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;The back end&lt;/h3&gt;

&lt;figure style=&quot;float: right; padding: 15px; width: 350px&quot;&gt;
&lt;img src=&quot;http://farm4.staticflickr.com/3157/2877029132_b34943c8d7_z_d.jpg&quot; style=&quot;width: 350px&quot; alt=&quot;Camel back end&quot;/&gt;&lt;br/&gt;
&lt;figcaption&gt;&lt;center&gt;&lt;small&gt;(&lt;a href=&quot;http://www.flickr.com/photos/16230215@N08/2877029132&quot;&gt;&lt;i&gt;Relief&lt;/i&gt;&lt;/a&gt;
by &lt;a href=&quot;http://www.flickr.com/photos/h-k-d/&quot;&gt;Hartwig HKD&lt;/a&gt;)&lt;/small&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The OCaml back end (i.e. the &lt;a href=&quot;https://realworldocaml.org/v1/en/html/the-compiler-backend-byte-code-and-native-code.html&quot;&gt;code generation portion of the compiler&lt;/a&gt;) also saw a proposed enhancement.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;constant-arithmetic-optimization&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Constant arithmetic optimization&lt;/h4&gt;

&lt;p&gt;Stephen submitted a &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/17&quot;&gt;patch&lt;/a&gt; improving the generated code for functions that perform constant arithmetic on integers.&lt;/p&gt;

&lt;p&gt;In OCaml, integers and characters are &lt;a href=&quot;https://realworldocaml.org/v1/en/html/memory-representation-of-values.html#table20-1_ocaml&quot;&gt;represented as shifted immediate values&lt;/a&gt;, with the least significant bit set to distinguish them from pointers.  This makes some arithmetic operations &lt;a href=&quot;https://realworldocaml.org/v1/en/html/memory-representation-of-values.html#idm181610127856&quot;&gt;a little more expensive&lt;/a&gt;.  For example, consider a function that &lt;code&gt;int_of_digits&lt;/code&gt; that builds an integer from three character digits:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;n&quot;&gt;int_of_digits&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'3'&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'4'&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'5'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;345&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We might define &lt;code&gt;int_of_digits&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_of_digits&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
   &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Passing the &lt;code&gt;-dcmm&lt;/code&gt; flag to ocamlopt shows the results of compiling the function to the &lt;a href=&quot;https://github.com/ocaml/ocaml/blob/trunk/asmcomp/cmm.mli&quot;&gt;C-- intermediate language&lt;/a&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ocamlopt -dcmm int_of_digits.ml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The generated code has the following form (reformatted for readability):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The right shifts convert the tagged representation into native integers, and the final &lt;code&gt;+ 1&lt;/code&gt; converts the result back to a tagged integer.&lt;/p&gt;

&lt;p&gt;Stephen's patch floats the arithmetic operations that involve constant operands outwards, eliminating most of the tag-munging code in favour of a final correcting addition:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10766&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although these changes are not yet merged, you can easily try them out, thanks to Anil's script that &lt;a href=&quot;http://anil.recoil.org/2014/03/25/ocaml-github-and-opam.html&quot;&gt;makes compiler pull requests available as OPAM switches&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;opam switch 4.03.0+pr17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&quot;standard-library&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Standard library and beyond&lt;/h3&gt;

&lt;figure style=&quot;float: right; padding: 15px; width: 350px&quot;&gt;
&lt;img src=&quot;http://i.imgur.com/KKsM0tu.jpg&quot; style=&quot;width: 350px&quot; alt=&quot;Camel library&quot;/&gt;&lt;br/&gt;
&lt;figcaption&gt;&lt;center&gt;&lt;small&gt;(Literary advocate &lt;a href=&quot;http://www.papertigers.org/wordpress/interview-with-dashdondog-jamba-mongolian-author-and-literacy-advocate/&quot;&gt;Dashdondog Jamba&lt;/a&gt;, and his mobile library, described in &lt;a href=&quot;http://www.bookdepository.com/My-Librarian-Is-a-Camel-Margriet-Ruurs/9781590780930&quot;&gt;&lt;i&gt;My librarian is a camel&lt;/i&gt;&lt;/a&gt;)&lt;/small&gt;&lt;/center&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Our compiler hacking group defines &amp;quot;compiler&amp;quot; rather broadly.  As a result people often work on improving the standard library and tools as well as the compiler proper.  For example, in recent sessions, David added a small patch to &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6105&quot;&gt;expose the is_inet6_addr&lt;/a&gt; function, and &lt;a href=&quot;http://philippewang.info/&quot;&gt;Philippe&lt;/a&gt; proposed &lt;a href=&quot;https://github.com/ocaml/ocaml/pull/15&quot;&gt;a patch that eliminates unnecessary bounds checking&lt;/a&gt; in the buffer module.  The last session also saw &lt;a href=&quot;http://www.cl.cam.ac.uk/~rp452/&quot;&gt;Rapha&amp;euml;l&lt;/a&gt; and Simon push a &lt;a href=&quot;https://github.com/ocaml/opam-repository/pull/1961&quot;&gt;number&lt;/a&gt; &lt;a href=&quot;https://github.com/ocaml/opam-repository/pull/1968&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://github.com/ocaml/opam-repository/pull/1972&quot;&gt;patches&lt;/a&gt; for integrating &lt;a href=&quot;https://github.com/the-lambda-church/merlin&quot;&gt;merlin&lt;/a&gt; with the &lt;a href=&quot;http://en.wikipedia.org/wiki/Acme_(text_editor)&quot;&gt;acme&lt;/a&gt; editor to OPAM, improving OCaml support in Plan 9.&lt;/p&gt;

&lt;h2&gt;Next session&lt;/h2&gt;

&lt;p&gt;The compiler hacking group is open to anyone with an interest in contributing to the OCaml compiler.  If you're local to Cambridge, you're welcome to join us at the &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/2014/06/20/sixth-compiler-hacking-session.html&quot;&gt;next session&lt;/a&gt;!&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2014/06/24/highlights-from-recent-sessions</id><title type="text">Highlights from recent sessions</title><updated>2014-06-24T04:00:00+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2014/06/20/sixth-compiler-hacking-session" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;(Update (2014-06-24): Stephen Dolan will be giving a demo of multicore OCaml!)&lt;/p&gt;

&lt;p&gt;It's time for the sixth Cambridge OCaml compiler-hacking session!  We'll be meeting in the &lt;a href=&quot;http://www.cl.cam.ac.uk/&quot;&gt;Computer Lab&lt;/a&gt; again next Wednesday evening (25th June).&lt;/p&gt;

&lt;p&gt;If you're planning to come along, it'd be helpful if you could &lt;a href=&quot;http://doodle.com/2ps9gunbkiy3tp6i&quot;&gt;&lt;em&gt;indicate interest via Doodle&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;http://lists.ocaml.org/listinfo/cam-compiler-hacking&quot;&gt;&lt;em&gt;sign up to the mailing list&lt;/em&gt;&lt;/a&gt; to receive updates:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Where&lt;/em&gt;: Room &lt;a href=&quot;http://www.cl.cam.ac.uk/research/dtg/openroommap/static/?s=FW11&amp;amp;amp%3Blabels=1&quot;&gt;FW11&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/directions/&quot;&gt;Computer Laboratory, Madingley Road&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When&lt;/em&gt;: 6.30pm, Wednesday 25th June&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Who&lt;/em&gt;: anyone interested in improving OCaml. Knowledge of OCaml programming will obviously be helpful, but prior experience of working on OCaml internals isn't necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What&lt;/em&gt;: fixing bugs, implementing new features, learning about OCaml internals&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wiki&lt;/em&gt;: &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki&quot;&gt;https://github.com/ocamllabs/compiler-hacking/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're defining &amp;quot;compiler&amp;quot; pretty broadly, to include anything that's part of the standard distribution, which means at least the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/libref/index.html&quot;&gt;standard library&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual024.html&quot;&gt;runtime&lt;/a&gt;, tools (&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/depend.html&quot;&gt;ocamldep&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc105&quot;&gt;ocamllex&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc107&quot;&gt;ocamlyacc&lt;/a&gt;, etc.), &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual032.html&quot;&gt;ocamlbuild&lt;/a&gt;, the &lt;a href=&quot;http://caml.inria.fr/resources/doc/index.en.html&quot;&gt;documentation&lt;/a&gt;, and the compiler itself. We'll have suggestions for &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;mini-projects&lt;/a&gt; for various levels of experience (see also some &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-previously-worked-on&quot;&gt;things we've worked on in previous sessions&lt;/a&gt;), but feel free to come along and work on whatever you fancy.&lt;/p&gt;

&lt;p&gt;We'll also be ordering pizza, so if you want to be counted for food you should aim to arrive by 6.45pm.&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2014/06/20/sixth-compiler-hacking-session</id><title type="text">Sixth OCaml compiler hacking session</title><updated>2014-06-20T20:50:00+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2014/06/06/python-to-ocaml-retrospective/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;In 2013, I spent 6 months converting 0install&amp;rsquo;s 29,215 lines of Python to OCaml (learning OCaml along the way).
In this post, I&amp;rsquo;ll describe the approach I took and how it went. There will be graphs.
If you don&amp;rsquo;t want to read the whole thing, the take-away is this:
The new code is a similar length (slightly shorter), runs around 10x faster, and is statically type checked.&lt;/p&gt;



&lt;p&gt;( This post also appeared on &lt;a href=&quot;https://news.ycombinator.com/item?id=7858276&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;http://www.reddit.com/r/programming/comments/27h2q5/python_to_ocaml_retrospective/&quot;&gt;Reddit&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#ocaml-migration-overview&quot;&gt;OCaml migration overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#code-size&quot;&gt;Code size&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#porting-method&quot;&gt;Porting method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#binary-size&quot;&gt;Binary size&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#build-time&quot;&gt;Build time&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#speed&quot;&gt;Speed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#epilogue&quot;&gt;Epilogue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Background&lt;/h2&gt;

&lt;p&gt;Several readers said they&amp;rsquo;ve been following this blog without knowing what 0install actually is. So, a quick summary!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://0install.net/&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/0install-site.png&quot; class=&quot;border center&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since 2003, &lt;a href=&quot;http://0install.net&quot;&gt;0install&lt;/a&gt;&amp;rsquo;s goal has been to provide secure, cross-platform, decentralised software installation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secure&lt;/strong&gt; means that 0install doesn&amp;rsquo;t grant the software root access when you install it (like most package managers do), and doesn&amp;rsquo;t allow packages to conflict with each other (each version of each package goes in its own directory). It should always be safe to &amp;ldquo;install&amp;rdquo; a program with 0install, though ideally you&amp;rsquo;d use a sandbox to actually run it (we&amp;rsquo;re still waiting for a decent sandbox to turn up).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt; means it works on Linux (it&amp;rsquo;s available from the repositories of all the major Linux distributions), Unix, OS X and Windows (the Windows version is a compatible reimplementation in C#, though it does run some of the original code in a subprocess).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decentralised&lt;/strong&gt; means that upstream projects publish their software on their own web-sites. They still get automatic dependency handling (including dependencies on other sites), GPG signatures, automatic updates, roll-back, and support for binary and source packages.
0install can work with the native package manager (e.g. rpm or dpkg) to satisfy dependencies, in addition to downloading them as 0install packages itself.&lt;/p&gt;

&lt;p&gt;0install was originally written in C as a Linux kernel module and user-space helper.
It made other software easy to install, but getting 0install itself was rather tricky.
My naive hope was that distributions would include it by default, but needless to say that didn&amp;rsquo;t happen.
In 2005, it was redesigned and reimplemented in Python to simplify distribution.&lt;/p&gt;

&lt;h2&gt;OCaml migration overview&lt;/h2&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/&quot;&gt;Replacing Python&lt;/a&gt; (Jun 2013)&lt;/dt&gt;
  &lt;dd&gt;The subject of rewriting 0install in a compiled language had come up a few times, but in 2013 I had just left my job to take a year off and finally had the time for it. I didn&amp;rsquo;t have any idea what language to use so I collected suggestions and tried them all. My test-case was to read the tutorial for each language and reimplement one trivial (4 line) function of 0install in each one. I looked at various factors, including start-up time, binary size, binary compatibility, safety features, diagnostics, ease of writing, support for shared libraries, and static checking.

    &lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/#speed-and-size&quot;&gt;&lt;span class=&quot;caption-wrapper&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/langspeed.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;Speed and binary size for the launch helper (dominated by start-up time).&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Speed and binary size for the launch helper (dominated by start-up time).&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;There was no very clear conclusion. Rust seemed very promising in the long term, but it was years from being ready. ATS was the fastest and smallest, but too difficult to use. Python and C# were too slow (0install needs fast start-up time). Go did poorly in almost every area I tested. But Haskell and OCaml did surprisingly well.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/20/replacing-python-round-2/&quot;&gt;Replacing Python: second round&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;I tried Haskell and OCaml on a larger sample, converting 576 lines of Python and comparing the code.
They both did well, especially for detecting problems at compile time, but I found OCaml considerably easier to use. It also ran twice as fast.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/07/07/ocaml-binary-compatibility/&quot;&gt;OCaml binary compatibility&lt;/a&gt; (Jul)&lt;/dt&gt;
  &lt;dd&gt;OCaml can compile to bytecode or to native code. I&amp;rsquo;d hoped that the bytecode would allow us to distribute a single binary that would work everywhere (as with Java). In this post I did some experiments to check this. It almost worked, but in the end I gave up; we now build separate binaries for each platform.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/08/31/option-handling-with-ocaml-polymorphic-variants/&quot;&gt;Option handling with OCaml polymorphic variants&lt;/a&gt; (Aug)&lt;/dt&gt;
  &lt;dd&gt;Polymorphic Variants are an unusual and very powerful feature of OCaml&amp;rsquo;s type system. I found I was able to take advantage of them to check statically that all of 0install&amp;rsquo;s sub-commands handle all their options.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/09/28/ocaml-objects/&quot;&gt;Experiences with OCaml objects&lt;/a&gt; (Sep)&lt;/dt&gt;
  &lt;dd&gt;Even though OCaml programmers rarely use objects, the language&amp;rsquo;s support for object-oriented programming was a big help in converting the existing Python code. This post looks at OO programming in OCaml and describes the things that confused me at first.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/10/13/ocaml-tips/&quot;&gt;OCaml tips&lt;/a&gt; (Oct)&lt;/dt&gt;
  &lt;dd&gt;I go back over my first OCaml code from June, pointing out better ways to do things.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/11/28/asynchronous-python-vs-ocaml/&quot;&gt;Asynchronous Python vs OCaml&lt;/a&gt; (Nov)&lt;/dt&gt;
  &lt;dd&gt;I add support for downloads to the OCaml, which requires using OCaml&amp;rsquo;s support for asynchronous code. I compare it with Python&amp;rsquo;s new asyncio system.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/12/20/polymorphism-for-beginners/&quot;&gt;Polymorphism for beginners&lt;/a&gt; (Dec)&lt;/dt&gt;
  &lt;dd&gt;OCaml code is often written without explicit types, letting the compiler infer everything.
However, it&amp;rsquo;s helpful to understand the details of the type system when it comes to writing interface files (describing a restricted public interface to a module) and when trying to understand compiler error messages. After muddling through for a while, I decided it was time to understand how it actually worked.

    &lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/12/20/polymorphism-for-beginners/#subtyping&quot;&gt;&lt;span class=&quot;caption-wrapper&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/lattice.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;A lattice showing the subtype relationship.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;A lattice showing the subtype relationship.&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2014/01/07/ocaml-the-bugs-so-far/&quot;&gt;OCaml: the bugs so far&lt;/a&gt; (Jan)&lt;/dt&gt;
  &lt;dd&gt;I&amp;rsquo;ve found OCaml to be very good at detecting problems at compile time and the code has been very reliable. Still, some bugs slip though. In this post, I go over each discovered bug that made it into a Git commit and try to work out why it happened and whether it could have been prevented.

    &lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2014/01/07/ocaml-the-bugs-so-far/#summary&quot;&gt;&lt;span class=&quot;caption-wrapper&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/bugs.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;Bugs found by type.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Bugs found by type.&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2014/02/13/ocaml-what-you-gain/&quot;&gt;OCaml: what you gain&lt;/a&gt; (Feb)&lt;/dt&gt;
  &lt;dd&gt;When I first looked at OCaml, I was mainly focused on making sure the things I needed were still available.
With the port complete, I summarise the things you &lt;em&gt;gain&lt;/em&gt; from using OCaml.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Code size&lt;/h2&gt;

&lt;p&gt;The final OCaml code was remarkably similar in length to the original Python:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;caption-wrapper&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/retro/0install-loc.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;Lines of code, before and after.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Lines of code, before and after.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The main code is slightly shorter, while the unit-tests are slightly longer (probably because I added some extra ones).
The functionality is the same, except that the OCaml adds the &amp;ldquo;0install slave&amp;rdquo; command (325 lines of OCaml) and uses Lwt
rather than its own asynchronous framework (483 lines of Python).&lt;/p&gt;

&lt;p&gt;The Python code also included some XML files for the GTK user interface (shown in orange). In the OCaml, building the widgets
is instead done directly in the code. The OCaml version includes some module interface files (the &lt;code&gt;mli&lt;/code&gt; files, shown in green).
These are used to control how much of a module&amp;rsquo;s implementation is visible to other modules. They make the code easier to understand,
but they&amp;rsquo;re mostly optional.&lt;/p&gt;

&lt;h2&gt;Porting method&lt;/h2&gt;

&lt;p&gt;I wanted to avoid having two separate forks of 0install (Python and OCaml).
Then most people would continue using the Python version until the OCaml version was finished, resulting in a sudden switch over and the risk of some major flaw in the whole idea going undiscovered until the end.
Also, it would encourage people to submit bug fixes and features to the Python fork, creating extra porting work for me.
Instead, I used a mix of both languages, slowly migrating functions from Python to OCaml.
The two parts communicated using JSON.&lt;/p&gt;

&lt;p&gt;I made sure the complete set of unit-tests passed for every commit and that the software remained fully functional throughout the whole process. The graph below shows the amount of Python and OCaml code over time:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;caption-wrapper&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/retro/0install-loc-time.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;Lines of code over time.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Lines of code over time.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;For the first couple of months I was just adding OCaml code, duplicating lots of common helper code. For example, the OCaml version needs to be able to parse the XML selections documents, so that code is ported, but parts of the Python still need that code too, so it can&amp;rsquo;t be deleted yet. Once I start deleting Python code, progress is fairly steady until it&amp;rsquo;s all gone. A nice benefit of this approach is that you can see clearly where you are in the process.&lt;/p&gt;

&lt;p&gt;Initially, I tried doing clean implementations of the code from the specifications. However, the existing code has a lot of special cases for weird systems and backwards-compatibility hacks, and not all of them were unit-tested. Soon, I switched to translating more literally from the Python and then cleaning it up once it was in OCaml. I kept the basic structure of the Python in most places (e.g. the same classes with the same methods). That made things much easier. Once the port was complete, I did some larger refactoring (such as making the XML type immutable). I think this worked well - refactoring is very pleasant in OCaml.&lt;/p&gt;

&lt;h2&gt;Binary size&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;caption-wrapper&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/retro/binary-size.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;Executable image size over time.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Executable image size over time.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The binary ended up a bit bigger than I&amp;rsquo;d like. Adding the GTK and OBus libraries in particular added a lot to the size (though they are optional). The main problem with GTK is that it has to be compiled as a plugin, because we don&amp;rsquo;t know if the target system will have libgtk. If we used a single binary and the library wasn&amp;rsquo;t present, it would refuse to start. By having it in a plugin we can try to load it, but fall back to console mode if that fails. However, compiling for plugins prevents OCaml from optimising the binary by removing unused library functions, since it doesn&amp;rsquo;t know which ones might be needed by the plugins.&lt;/p&gt;

&lt;p&gt;The binary is compiled with debug symbols, but compiling without has almost no effect (binary becomes 1.5% smaller).&lt;/p&gt;

&lt;h2&gt;Build time&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;caption-wrapper&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/retro/build-time.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;Build time changes over time.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Build time changes over time.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A full build takes nearly a minute, which isn&amp;rsquo;t too bad. The &lt;code&gt;ocamlbuild&lt;/code&gt; command automatically discovers dependencies and rebuilds only what is needed, so incremental builds are usually fast and are generally reliable (the exception is that it doesn&amp;rsquo;t notice if you remove or rename a file, but you always get an error message in that case rather than an incorrect build).&lt;/p&gt;

&lt;p&gt;Most errors are picked up by the type checker immediately at the start of the build, rather than by the unit-tests at the end. That saves a lot of time.&lt;/p&gt;

&lt;p&gt;Two things did speed it up slightly: building the tests and the main binary with a single invocation (saves having to run the dependency checker twice) and turning on parallel builds. Parallel builds didn&amp;rsquo;t help as much as I&amp;rsquo;d hoped however.&lt;/p&gt;

&lt;p&gt;Update: edwintorok &lt;a href=&quot;https://news.ycombinator.com/item?id=7860192&quot;&gt;profiled the build&lt;/a&gt; and noticed that 25.5% of the time is spent running a bytecode version of the camlp4 pre-processor (which we use for the Lwt syntax extension and for conditional compilation) and 10.5% is spent on a bytecode version of ocamlfind (looks like an ocamlbuild bug). 
&lt;a href=&quot;http://gallium.inria.fr/blog/ocamlbuild-parallelization/&quot;&gt;Why ocamlbuild&amp;rsquo;s parallelization is often disappointing today&lt;/a&gt; looks interesting too.&lt;/p&gt;

&lt;p&gt;Update 2: I noticed that building while the computer is busy doing something else is much faster! Looks like this is the Linux scaling governor being strange. Echoing &amp;ldquo;performance&amp;rdquo; to &lt;code&gt;/sys/devices/system/cpu/cpu[0-3]/cpufreq/scaling_governor&lt;/code&gt; takes the build time (on my new laptop) down from 45s to 23s!&lt;/p&gt;

&lt;p&gt;There are some changes (module aliases) coming in OCaml 4.02 which should help. Currently, if I change one of the files in the &lt;code&gt;Support&lt;/code&gt; module (e.g. &lt;code&gt;Support.Sat&lt;/code&gt;) then it first rebuilds &lt;code&gt;Sat&lt;/code&gt;, then rebuilds &lt;code&gt;Support&lt;/code&gt; with the new &lt;code&gt;Sat&lt;/code&gt; module, then rebuilds everything that uses &lt;code&gt;Support&lt;/code&gt; (which is everything). In reality, it only needs to rebuild &lt;code&gt;Zeroinstall.Solver&lt;/code&gt; when &lt;code&gt;Sat&lt;/code&gt; changes.&lt;/p&gt;

&lt;p&gt;If you do need to modify one of the early modules and run the unit tests quickly, a good trick is to compile to byte-code rather than to native. The byte-code compiler doesn&amp;rsquo;t do cross-module inlining optimisations, which means that as long as a module&amp;rsquo;s interface doesn&amp;rsquo;t change, it doesn&amp;rsquo;t need to recompile the things that depend on it.&lt;/p&gt;

&lt;p&gt;One interesting feature of the graph is that during December the build time increased faster in proportion to the lines of code added.
This corresponds to the time I was implementing the GTK GUI, so it looks like GUI code takes longer to compile than normal code of the same length.&lt;/p&gt;

&lt;h2&gt;Speed&lt;/h2&gt;

&lt;p&gt;And the final result: running various operations with the old and new versions:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Test&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Python 3&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;OCaml&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Speed-up&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;0install --help&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;103 ms&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8 ms&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;0install select 0repo&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;322 ms&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;38 ms&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;0install run -w echo armagetron&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;120 ms&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15 ms&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;0install run armagetron --version&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;153 ms&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;45 ms&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The first (&lt;code&gt;--help&lt;/code&gt;) shows the overhead of running 0install and producing some simple output.
The extra speed here really helps with tab-completion!
The second test (&lt;code&gt;select&lt;/code&gt;) shows 0install running its SAT solver to select a compatible set of libraries to run the &amp;ldquo;0repo&amp;rdquo; application.
The third shows 0install setting up the environment to run Armagetron (&lt;code&gt;-w echo&lt;/code&gt; echos the executable path rather than actually running it) and the fourth shows it actually running the program.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;caption-wrapper&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/retro/times.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;Speed of 0install in Python vs OCaml.&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Speed of 0install in Python vs OCaml.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;One other nice win is the time taken to run the unit-tests, which has dropped considerably:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;caption-wrapper&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/retro/0install-test-times.png&quot; class=&quot;caption&quot; width=&quot;&quot; height=&quot;&quot; title=&quot;Time to run the unit tests (in seconds).&quot;/&gt;&lt;span class=&quot;caption-text&quot;&gt;Time to run the unit tests (in seconds).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The spike in the middle is the effect of the JSON bridge, where many tests involved communication between the Python and OCaml parts.&lt;/p&gt;

&lt;p&gt;In theory, OUnit should be able to run the tests in parallel on multi-core systems, which would make it even faster, but a &lt;a href=&quot;https://forge.ocamlcore.org/tracker/index.php?func=detail&amp;amp;aid=1363&amp;amp;group_id=162&amp;amp;atid=730&quot;&gt;bug in OUnit&lt;/a&gt; means it doesn&amp;rsquo;t work.&lt;/p&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s surprising to me how reliable the initial tests were.
Even though I only converted 4 lines of Python, the tests uncovered pretty much all of OCaml&amp;rsquo;s weaker aspects (non-portable bytecode, lack of support for shared libraries, relatively large binary size, and somewhat terse error messages from the standard library), meaning there were no nasty surprises during the migration.&lt;/p&gt;

&lt;p&gt;However, the testing was less successful at uncovering the benefits (excellent type checking, reliability, exhaustive pattern matching, polymorphic variants, abstract types, easy GTK bindings, and API stability).&lt;/p&gt;

&lt;p&gt;Blogging about the whole process was extremely useful, attracting many helpful comments, suggestions and corrections from experienced OCaml users.&lt;/p&gt;

&lt;h2&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;The blog attracted the attention of the OCaml folks at Cambridge University, who do all kinds of &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Dec%202013&quot;&gt;interesting OCaml things&lt;/a&gt;.
As a result, I&amp;rsquo;m now working there, adding ARM support to the &lt;a href=&quot;http://openmirage.org/&quot;&gt;Mirage unikernel&lt;/a&gt; - an operating system written in OCaml (the Mirage web-site is all implemented in OCaml, down to and including the TCP/IP stack!).
That will have to be the subject for another blog post though&amp;hellip;&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2014/06/06/python-to-ocaml-retrospective/</id><title type="text">Python to OCaml: retrospective</title><updated>2014-06-06T11:00:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="https://mirage.io/blog/welcome-to-our-summer-hackers" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;Following our participation in the &lt;a href=&quot;http://openmirage.org/blog/applying-for-gsoc2014&quot;&gt;Google Summer of Code&lt;/a&gt; program, we've now finalised selections.  We've also got a number of other visitors joining us to hack on Mirage over the summer time, so here are introductions!&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;SSL support&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hannesm&quot;&gt;Hannes Mehnert&lt;/a&gt; and &lt;a href=&quot;https://github.com/pqwy&quot;&gt;David Kaloper&lt;/a&gt; have been working hard on a safe &lt;a href=&quot;https://github.com/mirleft/ocaml-tls&quot;&gt;OCaml TLS&lt;/a&gt; implementation. They're going to hack on &lt;a href=&quot;https://github.com/mirage/mirage/issues/242&quot;&gt;integrating it all&lt;/a&gt; into working under Xen so we can make HTTPS requests (and our Twitter bot will finally be able to tweet!).  Both are also interested in formal verification of the result, and several loooong conversations with &lt;a href=&quot;http://www.cl.cam.ac.uk/~pes20/&quot;&gt;Peter Sewell&lt;/a&gt; will magically transform into machine specifications by summer's end, I'm reliably informed.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cloud APIs&lt;/strong&gt;: &lt;a href=&quot;http://1000hippos.wordpress.com/&quot;&gt;Jyotsna Prakash&lt;/a&gt; will spend her summer break as part of &lt;a href=&quot;http://www.google-melange.com/gsoc/org2/google/gsoc2014/xen_project&quot;&gt;Google Summer of Code&lt;/a&gt; working on improving cloud provider APIs in OCaml (modelled from her notes on how the &lt;a href=&quot;https://github.com/avsm/ocaml-github&quot;&gt;GitHub&lt;/a&gt; bindings &lt;a href=&quot;http://1000hippos.wordpress.com/2014/04/24/ocaml-github/&quot;&gt;are built&lt;/a&gt;).  This will let the &lt;code&gt;mirage&lt;/code&gt; command-line tool have much more natural integration with remote cloud providers for executing the unikernels straight from a command-line.  If you see Jyotsna wandering around aimlessly muttering darkly about HTTP, JSON and REST, then the project is going well.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Network Stack fuzzing&lt;/strong&gt;: &lt;a href=&quot;http://www.somerandomidiot.com/&quot;&gt;Mindy Preston&lt;/a&gt; joins us for the summer after her &lt;a href=&quot;https://www.hackerschool.com/&quot;&gt;Hacker School&lt;/a&gt; stay, courtesy of the &lt;a href=&quot;https://opw.gnome.org&quot;&gt;OPW&lt;/a&gt; program.  She's been delving into the network stack running on EC2 and figuring out how to debug issues when the unikernel is running a cloud far, far away (see the post series here: &lt;a href=&quot;http://www.somerandomidiot.com/blog/2014/03/14/its-a-mirage/&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://www.somerandomidiot.com/blog/2014/03/24/advancing-toward-the-mirage/&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://www.somerandomidiot.com/blog/2014/04/02/tying-the-knot/&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;http://www.somerandomidiot.com/blog/2014/03/24/arriving-at-the-mirage/&quot;&gt;4&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Visualization&lt;/strong&gt;: &lt;a href=&quot;http://erratique.ch/contact.en&quot;&gt;Daniel Buenzli&lt;/a&gt; returns to Cambridge this summer to continue his work on extremely succinctly named graphics libaries.  His &lt;a href=&quot;https://github.com/dbuenzli/vz&quot;&gt;Vz&lt;/a&gt;, &lt;a href=&quot;https://github.com/dbuenzli/vg&quot;&gt;Vg&lt;/a&gt; and &lt;a href=&quot;https://github.com/dbuenzli/gg&quot;&gt;Gg&lt;/a&gt; libaries build a set of primitives for 2D graphics programming.  Since the libraries compile to JavaScript, we're planning to use this as the basis for &lt;a href=&quot;http://erratique.ch/software/vg/demos/rhtmlc&quot;&gt;visualization&lt;/a&gt; of Mirage applications via a built-in webserver.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Modular implicits&lt;/strong&gt;: &lt;a href=&quot;https://github.com/def-lkb&quot;&gt;Frederic Bour&lt;/a&gt;, author of the popular &lt;a href=&quot;https://github.com/the-lambda-church/merlin&quot;&gt;Merlin&lt;/a&gt; IDE tool is also in Cambridge this summer working on adding modular implicits to the core OCaml language. Taking inspiration from &lt;a href=&quot;http://www.mpi-sws.org/~dreyer/papers/mtc/main-long.pdf&quot;&gt;Modular Type-classes&lt;/a&gt; and Scala's &lt;a href=&quot;http://twitter.github.io/scala_school/advanced-types.html&quot;&gt;implicits&lt;/a&gt;,  modular implcits allow functions to take implicit module arguments which will be filled-in by the compiler by searching the environment for a module with the appropriate type. This enables ad-hoc polymorphism in a very similar way to Haskell's type classes.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Irmin storage algorithms&lt;/strong&gt;: Benjamin Farinier (from &lt;a href=&quot;http://www.ens-lyon.eu/&quot;&gt;ENS Lyon&lt;/a&gt;) and Matthieu Journault (from &lt;a href=&quot;http://www.ens-cachan.fr/&quot;&gt;ENS Cachan&lt;/a&gt;) will work on datastructures for the &lt;a href=&quot;https://github.com/mirage/irmin/wiki/Getting-Started&quot;&gt;Irmin&lt;/a&gt; storage system that the next version of Mirage will use.  They'll be grabbing copies of the &lt;a href=&quot;http://www.amazon.co.uk/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504&quot;&gt;Okasaki&lt;/a&gt; classic text and porting some of them into a branch-consistent form.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Of course, work continues apace by the rest of the team as usual, with a &lt;a href=&quot;http://www.openmirage.org/releases&quot;&gt;steady stream of releases&lt;/a&gt; that are building up to some exciting new features.  We'll be blogging about ARM support, PVHVM, Irmin storage and SSL integration just as soon as they're pushed into the stable branches.  As always, &lt;a href=&quot;http://www.openmirage.org/community/&quot;&gt;get in touch&lt;/a&gt; via the IRC channel (&lt;code&gt;#mirage&lt;/code&gt; on Freenode) or the mailing lists with questions.&lt;/p&gt;

   </content><id>https://mirage.io/blog/welcome-to-our-summer-hackers</id><title type="text">Welcome to the summer MirageOS hackers</title><updated>2014-05-08T18:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://amirchaudhry.com/writing-planet-in-pure-ocaml" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;I&amp;rsquo;ve been learning OCaml for some time now but not really had a problem that
I wanted to solve. As such, my progress has been rather slow and sporadic
and I only make time for exercises when I&amp;rsquo;m travelling. In order to focus my
learning, I have to identify and tackle something specific. That&amp;rsquo;s usually
the best way to advance and I recently found something I can work on.&lt;/p&gt;

&lt;p&gt;As I&amp;rsquo;ve been trying to write more blog posts, I want to be able to keep as
much content on my own site as possible and syndicate my posts out to other
sites I run. Put simply, I want to be able to take multiple feeds from
different sources and merge them into one feed, which will be served from
some other site. In addition, I also want to render that feed as HTML on a
webpage. All of this has to remain within the OCaml toolchain so it can be
used as part of &lt;a href=&quot;http://openmirage.org/&quot;&gt;Mirage&lt;/a&gt; (i.e. I can use it when
&lt;a href=&quot;http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines&quot;&gt;building unikernels&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;What I&amp;rsquo;m describing might sound familiar and there&amp;rsquo;s a well-known tool that
does this called &lt;a href=&quot;http://en.wikipedia.org/wiki/Planet_(software)&quot;&gt;Planet&lt;/a&gt;. It&amp;rsquo;s a &amp;lsquo;river of news&amp;rsquo; feed reader, which
aggregates feeds and can display posts on webpages and you can find the
&lt;a href=&quot;http://www.planetplanet.org&quot;&gt;original Planet&lt;/a&gt; and it&amp;rsquo;s successor &lt;a href=&quot;http://intertwingly.net/code/venus/docs/index.html&quot;&gt;Venus&lt;/a&gt;, both written in Python.
However, Venus seems to be unmaintained as there are a number of
&lt;a href=&quot;https://github.com/rubys/venus/issues&quot;&gt;unresolved issues and pull requests&lt;/a&gt;, which have been
languishing for quite some time with no discussion. There does appear to be
a more active Ruby implementation called &lt;a href=&quot;http://feedreader.github.io/&quot;&gt;Pluto&lt;/a&gt;, with recent commits and
no reported issues.&lt;/p&gt;



&lt;h3&gt;Benefits of a Planet in pure OCaml&lt;/h3&gt;

&lt;p&gt;Although I could use the one of the above options, it would be much more
useful to keep everything within the OCaml ecosystem.  This way I can make
the best use of the &lt;a href=&quot;https://queue.acm.org/detail.cfm?id=2566628&quot;&gt;unikernel approach&lt;/a&gt; with Mirage (i.e lean,
single-purpose appliances). Obviously, the existing options don&amp;rsquo;t lend
themselves to this approach and there are &lt;a href=&quot;https://forge.ocamlcore.org/tracker/index.php?func=detail&amp;amp;aid=1349&amp;amp;group_id=1&amp;amp;atid=101&quot;&gt;known bugs&lt;/a&gt; as a lot has
changed on the web since Planet Venus (e.g the adoption of HTML5).
Having said that, I can learn a lot from the existing implementations and
I&amp;rsquo;m glad I&amp;rsquo;m not embarking into completely uncharted territory.&lt;/p&gt;

&lt;p&gt;In addition, the OCaml version doesn&amp;rsquo;t need to (and &lt;em&gt;shouldn&amp;rsquo;t&lt;/em&gt;) be written
as one monolithic library.  Instead, pulling together a collection of
smaller, reusable libraries that present clear interfaces to each other
would make things much more maintainable. This would bring substantially
greater benefits to everyone and &lt;a href=&quot;https://opam.ocaml.org/&quot;&gt;OPAM&lt;/a&gt; can manage the dependencies. &lt;/p&gt;



&lt;h3&gt;Breaking down the problem&lt;/h3&gt;

&lt;p&gt;The first cut is somewhat straightforward as we have a piece that deals with
the consumption and manipulation of feeds and another that takes the result
and emits HTML. This is also how the original Planet is put together, with a
library called &lt;a href=&quot;https://pypi.python.org/pypi/feedparser/&quot;&gt;feedparser&lt;/a&gt; and another for templating pages.  &lt;/p&gt;

&lt;p&gt;For the feed-parsing aspect, I can break it down further by considering Atom
and RSS feeds separately and then even further by thinking about how to (1)
consume such feeds and (2) output them. Then there is the HTML component,
where it may be necessary to consider existing representations of HTML. These
are not new ideas and since I&amp;rsquo;m claiming that individual pieces might be
useful then it&amp;rsquo;s worth finding out which ones are already available.&lt;/p&gt;

&lt;h4&gt;Existing components&lt;/h4&gt;

&lt;p&gt;The easiest way to find existing libraries is via the
&lt;a href=&quot;http://opam.ocaml.org/packages&quot;&gt;OPAM package list&lt;/a&gt;. Some quick searches for &lt;code&gt;RSS&lt;/code&gt;, &lt;code&gt;XML&lt;/code&gt;, &lt;code&gt;HTML&lt;/code&gt;
and &lt;code&gt;net&lt;/code&gt; bring up a lot of packages. The most relevant of these seem to be
&lt;a href=&quot;https://opam.ocaml.org/packages/xmlm/xmlm.1.2.0/&quot;&gt;xmlm&lt;/a&gt;, &lt;a href=&quot;https://opam.ocaml.org/packages/ocamlrss/ocamlrss.2.2.2/&quot;&gt;ocamlrss&lt;/a&gt;, &lt;a href=&quot;https://opam.ocaml.org/packages/cow/cow.0.9.1/&quot;&gt;cow&lt;/a&gt; and maybe &lt;a href=&quot;http://opam.ocaml.org/packages/xmldiff/xmldiff.0.1/&quot;&gt;xmldiff&lt;/a&gt;. I noticed that
nothing appears, when searching for &lt;code&gt;Atom&lt;/code&gt;, but I do know that &lt;code&gt;cow&lt;/code&gt; has an
Atom module for creating feeds. In terms of turning feeds into pages and
HTML, I&amp;rsquo;m aware of &lt;a href=&quot;https://github.com/ocaml/ocaml.org/blob/master/script/rss2html.ml&quot;&gt;rss2html&lt;/a&gt; used on the &lt;a href=&quot;http://ocaml.org&quot;&gt;OCaml&lt;/a&gt; website and parts of
&lt;a href=&quot;http://opam.ocaml.org/packages/ocamlnet/ocamlnet.3.7.3/&quot;&gt;ocamlnet&lt;/a&gt; that may be relevant (e.g &lt;code&gt;nethtml&lt;/code&gt; and &lt;code&gt;netstring&lt;/code&gt;) as well as
&lt;code&gt;cow&lt;/code&gt;.  There is likely to be other code I&amp;rsquo;m missing but this is useful as a
first pass. &lt;/p&gt;

&lt;p&gt;Overall, a number of components are already out there but it&amp;rsquo;s not obvious
if they&amp;rsquo;re compatible (e.g html) and there are still gaps (e.g atom). Since
I also want to minimise dependencies, I&amp;rsquo;ll try and use whatever works but
may ultimately have to roll my own. Either way, I can learn from what
already exists. Perhaps I&amp;rsquo;m being overconfident but if I can break things
down sensibly and keep the scope constrained then this should be an
achievable project. &lt;/p&gt;

&lt;h3&gt;The first (baby) steps - an Atom parser&lt;/h3&gt;

&lt;p&gt;As this is an exercise for me to learn OCaml by solving a problem, I need to
break it down into bite-size pieces and take each one at a time. Practically
speaking, this means limiting the scope to be as narrow as possible while
still producing a useful result &lt;em&gt;for me&lt;/em&gt;.  That last part is important as I
have specific needs and it&amp;rsquo;s likely that the first thing I make won&amp;rsquo;t be
particularly interesting for many others. &lt;/p&gt;

&lt;p&gt;For my specific use-case, I&amp;rsquo;m only interested in dealing with Atom feeds as
that&amp;rsquo;s what I use on my site and others I&amp;rsquo;m involved with. Initial feedback
is that creating an Atom parser will be the bulk of the work and I should
start by defining the types. To keep this manageable, I&amp;rsquo;m only going to deal
with my own feeds instead of attempting a fully compliant parser (in other
words, I&amp;rsquo;ll only consider the subset of &lt;a href=&quot;https://tools.ietf.org/html/rfc4287&quot;&gt;RFC4287&lt;/a&gt; that&amp;rsquo;s relevant to me).
Once I can parse, merge and write such feeds I should be able to iterate
from there. &lt;/p&gt;

&lt;p&gt;To make my requirements more concrete:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only consider &lt;em&gt;my own&lt;/em&gt; Atom feeds for now&lt;/li&gt;
  &lt;li&gt;Initially, be able to parse and emit just one Atom feed&lt;/li&gt;
  &lt;li&gt;Then be able to merge 2+ feeds, specifically:
    &lt;ul&gt;
      &lt;li&gt;Use tag-based feeds from my personal site as starting points&lt;/li&gt;
      &lt;li&gt;Be able to de-dupe content&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;No database or storage (construct it afresh every time)&lt;/li&gt;
  &lt;li&gt;Minimise library dependencies&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;Timeframes and workflow&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve honestly no idea how long this might take and I&amp;rsquo;m treating it as a
side-project. I know there are many people out there who could produce a
working version of everything in a week or two but I&amp;rsquo;m not one of them (yet).
There are also &lt;em&gt;a lot&lt;/em&gt; of ancillary things I need to learn on the way, like
packaging, improving my knowledge of Git and dealing with build systems. If
I had to put a vague time frame on this, I&amp;rsquo;d be thinking in months rather
than weeks.  It might even be the case that others start work on parts of
this and ship things sooner but that&amp;rsquo;s great as I&amp;rsquo;ll probably be able to use
whatever they create and move further along the chain.&lt;/p&gt;

&lt;p&gt;In terms of workflow, everything will be done in the open, warts and all, and
I expect to make embarrassing mistakes as I go. You can follow along on my
freshly created &lt;a href=&quot;https://github.com/amirmc/ocamlatom&quot;&gt;OCaml Atom&lt;/a&gt; repo, and I&amp;rsquo;ll be using the issue tracker as
the main way of dealing with bugs and features. Let the fun begin.&lt;/p&gt;



&lt;hr/&gt;

&lt;p&gt;&lt;em&gt;Acknowledgements:&lt;/em&gt; Thanks to &lt;a href=&quot;http://erratique.ch&quot;&gt;Daniel&lt;/a&gt;, &lt;a href=&quot;http://ashishagarwal.org&quot;&gt;Ashish&lt;/a&gt;, &lt;a href=&quot;https://github.com/Chris00&quot;&gt;Christophe&lt;/a&gt;,
&lt;a href=&quot;http://philippewang.info/&quot;&gt;Philippe&lt;/a&gt; and &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas&lt;/a&gt; for discussions on an earlier draft of this post
and providing feedback on my approach.&lt;/p&gt;



</content><id>http://amirchaudhry.com/writing-planet-in-pure-ocaml</id><title type="text">Writing Planet in pure OCaml</title><updated>2014-04-29T09:30:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2014/04/24/fifth-compiler-hacking-session" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;It's time for the fifth Cambridge OCaml compiler-hacking session!  We'll be meeting in the &lt;a href=&quot;http://www.cl.cam.ac.uk/&quot;&gt;Computer Lab&lt;/a&gt; again next Tuesday evening.&lt;/p&gt;

&lt;p&gt;If you're planning to come along, it'd be helpful if you could &lt;a href=&quot;http://doodle.com/iapgw89dvmxhnb4e&quot;&gt;&lt;em&gt;indicate interest via Doodle&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;http://lists.ocaml.org/listinfo/cam-compiler-hacking&quot;&gt;&lt;em&gt;sign up to the mailing list&lt;/em&gt;&lt;/a&gt; to receive updates:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Where&lt;/em&gt;: Room &lt;a href=&quot;http://www.cl.cam.ac.uk/research/dtg/openroommap/static/?s=FW11&amp;amp;amp%3Blabels=1&quot;&gt;FW11&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/directions/&quot;&gt;Computer Laboratory, Madingley Road&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When&lt;/em&gt;: 6pm, Tuesday 29th April&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Who&lt;/em&gt;: anyone interested in improving OCaml. Knowledge of OCaml programming will obviously be helpful, but prior experience of working on OCaml internals isn't necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What&lt;/em&gt;: fixing bugs, implementing new features, learning about OCaml internals&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wiki&lt;/em&gt;: &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki&quot;&gt;https://github.com/ocamllabs/compiler-hacking/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're defining &amp;quot;compiler&amp;quot; pretty broadly, to include anything that's part of the standard distribution, which means at least the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/libref/index.html&quot;&gt;standard library&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual024.html&quot;&gt;runtime&lt;/a&gt;, tools (&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/depend.html&quot;&gt;ocamldep&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc105&quot;&gt;ocamllex&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc107&quot;&gt;ocamlyacc&lt;/a&gt;, etc.), &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual032.html&quot;&gt;ocamlbuild&lt;/a&gt;, the &lt;a href=&quot;http://caml.inria.fr/resources/doc/index.en.html&quot;&gt;documentation&lt;/a&gt;, and the compiler itself. We'll have suggestions for &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;mini-projects&lt;/a&gt; for various levels of experience (see also some &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-previously-worked-on&quot;&gt;things we've worked on in previous sessions&lt;/a&gt;), but feel free to come along and work on whatever you fancy.&lt;/p&gt;

&lt;p&gt;We'll also be ordering pizza, so if you want to be counted for food you should aim to arrive by 6.30pm.&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2014/04/24/fifth-compiler-hacking-session</id><title type="text">Fifth OCaml compiler hacking session</title><updated>2014-04-24T02:16:01+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;&lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage&lt;/a&gt; has reached a point where it&amp;rsquo;s possible to easily set up
end-to-end toolchains to build &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2566628&quot;&gt;unikernels&lt;/a&gt;! 
My first use-case is to be able to generate a unikernel which can serve my
personal static site but to do it with as much automation as possible. It
turns out this is possible with less than 50 lines of code.&lt;/p&gt;

&lt;p&gt;I use Jekyll and GitHub Pages at the moment so I wanted a workflow that&amp;rsquo;s as
easy to use, though I&amp;rsquo;m happy to spend some time up front to set up and
configure things.
The tools for achieving what I want are in good shape so
this post takes the example of a Jekyll site (i.e this one) and goes through
the steps to produce a unikernel on
&lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; (a continuous integration service) which can later be
deployed.  Many of these instructions already exist in various forms but
they&amp;rsquo;re collated here to aid this use-case.  &lt;/p&gt;

&lt;p&gt;I will take you, dear reader, through the process and when we&amp;rsquo;re finished,
the workflow will be as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You&amp;rsquo;ll write your posts on your local machine as normal&lt;/li&gt;
  &lt;li&gt;A push to GitHub will trigger a unikernel build for each commit&lt;/li&gt;
  &lt;li&gt;The Xen unikernel will be pushed to a repo for deployment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To achieve this, we&amp;rsquo;ll first check that we can build a unikernel VM locally,
then we&amp;rsquo;ll set up a continuous integration service to automatically build
them for us and finally we&amp;rsquo;ll adapt the CI service to also deploy the built
VM.  Although the amount of code required is small, each of these steps is
covered below in some detail.
For simplicity, I&amp;rsquo;ll assume you already have OCaml and Opam
installed &amp;ndash; if not, you can find out how via the
&lt;a href=&quot;http://realworldocaml.org/install&quot;&gt;Real Word OCaml install instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Building locally&lt;/h2&gt;

&lt;p&gt;To ensure that the build actually works, you should run things locally at
least once before pushing to Travis.  It&amp;rsquo;s worth noting that the
&lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton&lt;/a&gt; repo contains a lot of useful, public domain examples
and helpfully, the specific code we need is in
&lt;a href=&quot;https://github.com/mirage/mirage-skeleton/tree/master/static_website&quot;&gt;mirage-skeleton/static_website&lt;/a&gt;.  Copy both the &lt;code&gt;config.ml&lt;/code&gt;
and &lt;code&gt;dispatch.ml&lt;/code&gt; files from that folder into a new &lt;code&gt;_mirage&lt;/code&gt; folder in your
jekyll repository.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;config.ml&lt;/code&gt; so that the two mentions of &lt;code&gt;./htdocs&lt;/code&gt; are replaced with
&lt;code&gt;../_site&lt;/code&gt;.  This is the only change you&amp;rsquo;ll need to make and you should now
be able to build the unikernel with the unix backend.  Make sure you have
the mirage package installed by running &lt;code&gt;$ opam install mirage&lt;/code&gt; and then run:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(edit: If you already have &lt;code&gt;mirage&lt;/code&gt;, remember to &lt;code&gt;opam update&lt;/code&gt; to make sure you&amp;rsquo;ve got the latest packages.)&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_mirage
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mirage configure --unix
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make depend         &lt;span class=&quot;c&quot;&gt;# needed as of mirage 1.2 onward&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mirage build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s all it takes!  In a few minutes there will be a unikernel built on
your system (symlinked as &lt;code&gt;_mirage/mir-www&lt;/code&gt;).  If there are any errors, make
sure that Opam is up to date and that you have the latest version of the
static_website files from &lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;Serving the site locally&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;d like to see this site locally, you can do so from within the
&lt;code&gt;_mirage&lt;/code&gt; folder by running unikernel you just built.  There&amp;rsquo;s more
information about the details of this on the &lt;a href=&quot;http://openmirage.org/wiki/mirage-www&quot;&gt;Mirage docs site&lt;/a&gt;
but the quick instructions are:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_mirage
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mirage run

&lt;span class=&quot;c&quot;&gt;# in another terminal window&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo ifconfig tap0 10.0.0.1 255.255.255.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can now point your browser at http://10.0.0.2/ and see your site!
Once you&amp;rsquo;re finished browsing, &lt;code&gt;$ mirage clean&lt;/code&gt; will clear up all the
generated files. &lt;/p&gt;

&lt;p&gt;Since the build is working locally, we can set up a continuous integration
system to perform the builds for us.&lt;/p&gt;

&lt;h2&gt;Setting up Travis CI&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://amirchaudhry.com/images/jekyll-unikernel/travis.png&quot; style=&quot;float: right; margin-left: 10px&quot;/&gt;&amp;lt;/img&amp;gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll be using the &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; service, which is free for open-source
projects (so this assumes you&amp;rsquo;re using a public repo).  The benefit of using
Travis is that you can build a unikernel &lt;em&gt;without&lt;/em&gt; needing a local OCaml
environment, but it&amp;rsquo;s always quicker to debug things locally.&lt;/p&gt;

&lt;p&gt;Log in to Travis using your GitHub ID which will then trigger a scan of your
repositories.  When this is complete, go to your Travis accounts page and
find the repo you&amp;rsquo;ll be building the unikernel from.  Switch it &amp;lsquo;on&amp;rsquo; and
Travis will automatically set your GitHub post-commit hook and token for you.
That&amp;rsquo;s all you need to do on the website.&lt;/p&gt;

&lt;p&gt;When you next make a push to your repository, GitHub will inform Travis,
which will then look for a YAML file in the root of the repo called
&lt;code&gt;.travis.yml&lt;/code&gt;.  That file describes what Travis should do and what the build
matrix is.  Since OCaml is not one of the supported languages, we&amp;rsquo;ll be
writing our build script manually (this is actually easier than it sounds).
First, let&amp;rsquo;s set up the YAML file and then we&amp;rsquo;ll examine the build script.&lt;/p&gt;

&lt;h3&gt;The Travis YAML file - .travis.yml&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://docs.travis-ci.com/user/ci-environment/#CI-environment-OS&quot;&gt;Travis CI environment&lt;/a&gt; is based on Ubuntu 12.04, with a
number of things pre-installed (e.g Git, networking tools etc).  Travis
doesn&amp;rsquo;t support OCaml (yet) so we&amp;rsquo;ll use the &lt;code&gt;c&lt;/code&gt; environment to get the
packages we need, specifically, the OCaml compiler, Opam and Mirage. Once
those are set up, our build should run pretty much the same as it did locally.&lt;/p&gt;

&lt;p&gt;For now, let&amp;rsquo;s keep things simple and only focus on the latest releases
(OCaml 4.01.0 and Opam 1.1.1), which means our build matrix is very simple.
The build instructions will be in the file &lt;code&gt;_mirage/travis.sh&lt;/code&gt;, which we
will move to and trigger from the &lt;code&gt;.travis.yml&lt;/code&gt; file.  This means our YAML
file should look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cd _mirage&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bash -ex travis.sh&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MIRAGE_BACKEND=xen DEPLOY=0&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MIRAGE_BACKEND=unix&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The matrix enables us to have parallel builds for different environments and
this one is very simple as it&amp;rsquo;s only building two unikernels. One worker
will build for the Xen backend and another worker will build for the Unix
backend. The &lt;code&gt;_mirage/travis.sh&lt;/code&gt; script will clarify what each of these
environments translates to.  We&amp;rsquo;ll come back to the &lt;code&gt;DEPLOY&lt;/code&gt; flag later on
(it&amp;rsquo;s not necessary yet).  Now that this file is set up, we can work on the
build script itself.&lt;/p&gt;

&lt;h3&gt;The build script - travis.sh&lt;/h3&gt;

&lt;p&gt;To save time, we&amp;rsquo;ll be using an Ubuntu PPA to quickly get
&lt;a href=&quot;https://launchpad.net/~avsm&quot;&gt;pre-packaged versions of the OCaml compiler and Opam&lt;/a&gt;, so the
first thing to do is define which PPAs each line of the build matrix
corresponds to.  Since we&amp;rsquo;re keeping things simple, we only need one PPA
that has the most recent releases of OCaml and Opam.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ppa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;avsm/ocaml41+opam11
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sudo add-apt-repository ppa:&lt;span class=&quot;nv&quot;&gt;$ppa&lt;/span&gt;
sudo apt-get update -qq
sudo apt-get install -qq ocaml ocaml-native-compilers camlp4-extra opam&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;[NB: There are many &lt;a href=&quot;https://launchpad.net/~avsm&quot;&gt;other PPAs&lt;/a&gt; for different combinations of
OCaml/Opam which are useful for testing].  Once the appropriate PPAs have
been set up it&amp;rsquo;s time to initialise Opam and install Mirage. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPAMYES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
opam init
opam install mirage
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;opam config env&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We set &lt;code&gt;OPAMYES=1&lt;/code&gt; to get non-interactive use of Opam (it defaults to &amp;lsquo;yes&amp;rsquo;
for any user input) and if we want full build logs, we could also set
&lt;code&gt;OPAMVERBOSE=1&lt;/code&gt; (I haven&amp;rsquo;t in this example).
The rest should be straight-forward and you&amp;rsquo;ll end up with an
Ubuntu machine with OCaml, Opam and the Mirage package installed.  It&amp;rsquo;s now
trivial to do the next step of actually building the unikernel!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mirage configure --&lt;span class=&quot;nv&quot;&gt;$MIRAGE_BACKEND&lt;/span&gt;
mirage build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see how we&amp;rsquo;ve used the environment variable from the Travis file and
this is where our two parallel builds begin to diverge.  When you&amp;rsquo;ve saved
this file, you&amp;rsquo;ll need to change permissions to make it executable by doing
&lt;code&gt;$ chmod +x _mirage/travis.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all you need to build the unikernel on Travis!  You should now commit
both the YAML file and the build script to the repo and push the changes to
GitHub.  Travis should automatically start your first build and you can
watch the console output online to check that both the Xen and Unix backends
complete properly.  If you notice any errors, you should go back over your
build script and fix it before the next step.&lt;/p&gt;

&lt;h2&gt;Deploying your unikernel&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://amirchaudhry.com/images/jekyll-unikernel/octocat.png&quot; style=&quot;float: right; margin-left: 10px&quot;/&gt;&amp;lt;/img&amp;gt;&lt;/p&gt;

&lt;p&gt;When Travis has finished its builds it will simply destroy the worker and
all its contents, including the unikernels we just built.  This is perfectly
fine for testing but if we want to also &lt;em&gt;deploy&lt;/em&gt; a unikernel, we need to get
it out of the Travis worker after it&amp;rsquo;s built. In this case, we want to
extract the Xen-based unikernel so that we can later start it on a Xen-based
machine (e.g Amazon, Rackspace or - in our case - a machine on &lt;a href=&quot;http://www.bytemark.co.uk&quot;&gt;Bytemark&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Since the unikernel VMs are small (only tens of MB), our method for
exporting will be to commit the Xen unikernel into a repository on GitHub.
It can be retrieved and started later on and keeping the VMs in version
control gives us very effective snapshots (we can roll back the site without
having to rebuild).  This is something that would be much more challenging
if we were using the &amp;lsquo;standard&amp;rsquo; web toolstack.&lt;/p&gt;

&lt;p&gt;The deployment step is a little more complex as we have to send the
Travis worker a private SSH key, which will give it push access to a GitHub
repository.  Of course, we don&amp;rsquo;t want to expose that key by simply adding it
to the Travis file so we have to encrypt it somehow. &lt;/p&gt;

&lt;h3&gt;Sending Travis a private SSH key&lt;/h3&gt;

&lt;p&gt;Travis supports &lt;a href=&quot;http://docs.travis-ci.com/user/encryption-keys/&quot;&gt;encrypted environment variables&lt;/a&gt;. Each
repository has its own public key and the &lt;a href=&quot;http://rubygems.org/gems/travis&quot;&gt;Travis gem&lt;/a&gt; uses
this public key to encrypt data, which you then add to your &lt;code&gt;.travis.yml&lt;/code&gt;
file for decryption by the worker.  This is meant for sending things like
private API tokens and other small amounts of data. Trying to encrypt an SSH
key isn&amp;rsquo;t going to work as it&amp;rsquo;s too large.  Instead we&amp;rsquo;ll use
&lt;a href=&quot;https://github.com/avsm/travis-senv&quot;&gt;travis-senv&lt;/a&gt;, which encodes, encrypts and chunks up the key into smaller
pieces and then reassembles those pieces on the Travis worker.  We still use
the Travis gem to encrypt the pieces to add them to the &lt;code&gt;.travis.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;While you could give Travis a key that accesses your whole GitHub account, my
preference is to create a &lt;em&gt;new&lt;/em&gt; deploy key, which will only be used for
&lt;a href=&quot;https://help.github.com/articles/managing-deploy-keys#deploy-keys&quot;&gt;deployment to one repository&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# make a key pair on your local machine&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.ssh/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen -t dsa -C &lt;span class=&quot;s2&quot;&gt;&amp;quot;travis.deploy&amp;quot;&lt;/span&gt; -f travis-deploy_dsa
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; -&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this is a 1024 bit key so if you decide to use a 2048 bit key,
then be aware that Travis &lt;a href=&quot;https://github.com/avsm/travis-senv/issues/1&quot;&gt;sometimes has issues&lt;/a&gt;. Now that we have
a key, we can encrypt it and add it to the Travis file. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# on your local machine&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# install the necessary components&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install travis
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam install travis-senv

&lt;span class=&quot;c&quot;&gt;# chunk the key, add to yml file and rm the intermediate&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;travis-senv encrypt ~/.ssh/travis-deploy_dsa _travis_env
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat _travis_env &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; travis encrypt -ps --add
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm _travis_env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;travis-senv&lt;/code&gt; encrypts and chunks the key locally on your machine, placing
its output in a file you decide (&lt;code&gt;_travis_env&lt;/code&gt;).  We then take that output
file and pipe it to the &lt;code&gt;travis&lt;/code&gt; ruby gem, asking it to encrypt the input,
treating each line as separate and to be appended (&lt;code&gt;-ps&lt;/code&gt;) and then actually
adding that to the Travis file (&lt;code&gt;--add&lt;/code&gt;).  You can run &lt;code&gt;$ travis encrypt -h&lt;/code&gt;
to understand these options.  Once you&amp;rsquo;ve run the above commands,
&lt;code&gt;.travis.yml&lt;/code&gt; will look as follows.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cd _mirage&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bash -ex travis.sh&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MIRAGE_BACKEND=xen DEPLOY=0&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;MIRAGE_BACKEND=unix&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;....&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;....&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;....&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;....&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;....&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;....&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The number of secure variables added depends on the type and size of the key
you had to chunk, so it could vary from 8 up to 29. We&amp;rsquo;ll commit
these additions later on, alongside additions to the build script.&lt;/p&gt;

&lt;p&gt;At this point, we also need to make a repository on GitHub
and add the public deploy key so
that Travis can push to it.  Once you&amp;rsquo;ve created your repo and added a
README, follow GitHub&amp;rsquo;s instructions on &lt;a href=&quot;https://help.github.com/articles/managing-deploy-keys#deploy-keys&quot;&gt;adding deploy keys&lt;/a&gt;
and paste in the public key (i.e. the content of &lt;code&gt;travis-deploy_dsa.pub&lt;/code&gt;).  &lt;/p&gt;

&lt;p&gt;Now that we can securely pass a private SSH key to the worker
and have a repo that the worker can push to, we need to
make additions to the build script.&lt;/p&gt;

&lt;h3&gt;Committing the unikernel to a repository&lt;/h3&gt;

&lt;p&gt;Since we can set &lt;code&gt;DEPLOY=1&lt;/code&gt; in the YAML file we only need to make
additions to the build script.  Specifically, we want to assure that: only
the Xen backend is deployed; only &lt;em&gt;pushes&lt;/em&gt; to the repo result in
deployments, not pull requests (we do still want &lt;em&gt;builds&lt;/em&gt; for pull requests).&lt;/p&gt;

&lt;p&gt;In the build script (&lt;code&gt;_mirage/travis.sh&lt;/code&gt;), which is being run by the worker,
we&amp;rsquo;ll have to reconstruct the SSH key and configure Git.  In addition,
Travis gives us a set of useful &lt;a href=&quot;http://docs.travis-ci.com/user/ci-environment/#Environment-variables&quot;&gt;environment variables&lt;/a&gt; so we&amp;rsquo;ll
use the latest commit hash (&lt;code&gt;$TRAVIS_COMMIT&lt;/code&gt;) to name the the VM (which also
helps us trace which commit it was built from).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easier to consider this section of code at once so I&amp;rsquo;ve explained the
details in the comments. This section is what you need to add at the end of
your existing build script (i.e straight after &lt;code&gt;mirage build&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Only deploy if the following conditions are met.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$MIRAGE_BACKEND&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xen&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;$DEPLOY&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TRAVIS_PULL_REQUEST&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# The Travis worker will already have access to the chunks&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# passed in via the yaml file. Now we need to reconstruct &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# the GitHub SSH key from those and set up the config file.&lt;/span&gt;
    opam install travis-senv
    mkdir -p ~/.ssh
    travis-senv decrypt &amp;gt; ~/.ssh/id_dsa &lt;span class=&quot;c&quot;&gt;# This doesn't expose it&lt;/span&gt;
    chmod &lt;span class=&quot;m&quot;&gt;600&lt;/span&gt; ~/.ssh/id_dsa             &lt;span class=&quot;c&quot;&gt;# Owner can read and write&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Host some_user github.com&amp;quot;&lt;/span&gt;   &amp;gt;&amp;gt; ~/.ssh/config
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;  Hostname github.com&amp;quot;&lt;/span&gt;          &amp;gt;&amp;gt; ~/.ssh/config
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;  StrictHostKeyChecking no&amp;quot;&lt;/span&gt;     &amp;gt;&amp;gt; ~/.ssh/config
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;  CheckHostIP no&amp;quot;&lt;/span&gt;               &amp;gt;&amp;gt; ~/.ssh/config
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;  UserKnownHostsFile=/dev/null&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/config

    &lt;span class=&quot;c&quot;&gt;# Configure the worker's git details&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# otherwise git actions will fail.&lt;/span&gt;
    git config --global user.email &lt;span class=&quot;s2&quot;&gt;&amp;quot;user@example.com&amp;quot;&lt;/span&gt;
    git config --global user.name &lt;span class=&quot;s2&quot;&gt;&amp;quot;Travis Build Bot&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Do the actual work for deployment.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Clone the deployment repo. Notice the user,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# which is the same as in the ~/.ssh/config file.&lt;/span&gt;
    git clone git@some_user:amirmc/www-test-deploy
    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;www-test-deploy

    &lt;span class=&quot;c&quot;&gt;# Make a folder named for the commit. &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# If we're rebuiling a VM from a previous&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# commit, then we need to clear the old one.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Then copy in both the config file and VM.&lt;/span&gt;
    rm -rf &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;
    mkdir -p &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;
    cp ../mir-www.xen ../config.ml &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Compress the VM and add a text file to note&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# the commit of the most recently built VM.&lt;/span&gt;
    bzip2 -9 &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;/mir-www.xen
    git pull --rebase
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt; &amp;gt; latest    &lt;span class=&quot;c&quot;&gt;# update ref to most recent&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Add, commit and push the changes!&lt;/span&gt;
    git add &lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt; latest
    git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;adding $TRAVIS_COMMIT built for $MIRAGE_BACKEND&amp;quot;&lt;/span&gt;
    git push origin master
    &lt;span class=&quot;c&quot;&gt;# Go out and enjoy the Sun!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you should commit the changes to &lt;code&gt;./travis.yml&lt;/code&gt; (don&amp;rsquo;t forget
the deploy flag) and &lt;code&gt;_mirage/travis.sh&lt;/code&gt; and push the changes to GitHub.
Everything else will take place automatically and in a few minutes you will
have a unikernel ready to deploy on top of Xen! &lt;/p&gt;

&lt;p&gt;You can see both the complete YAML file and build script in use on my
&lt;a href=&quot;https://github.com/amirmc/www-test&quot;&gt;test repo&lt;/a&gt;, as well as the &lt;a href=&quot;https://travis-ci.org/amirmc/www-test&quot;&gt;build logs&lt;/a&gt; for that repo
and the &lt;a href=&quot;https://github.com/amirmc/www-test-deploy&quot;&gt;deploy repo&lt;/a&gt; with a VM.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Pro-tip: If you add *&lt;code&gt;[skip ci]&lt;/code&gt;&lt;/em&gt; anywhere in your
commit message, Travis will skip the build for that commit.
This is very useful if you&amp;rsquo;re making minor changes, like updating a
README.]*&lt;/p&gt;

&lt;h2&gt;Finishing up&lt;/h2&gt;

&lt;p&gt;Since I&amp;rsquo;m still using Jekyll for my website, I made a short script in my
jekyll repository (&lt;code&gt;_deploy-unikernel.sh&lt;/code&gt;) that builds the site, commits the
contents of &lt;code&gt;_site&lt;/code&gt; and pushes to GitHub. I simply run this after I&amp;rsquo;ve
committed a new blog post and the rest takes care of itself.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
jekyll build
git add _site
git commit -m &lt;span class=&quot;s1&quot;&gt;'update _site'&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Congratulations! You now have an end-to-end workflow that will produce a
unikernel VM from your Jekyll-based site and push it to a repo.  If you
strip out all the comments, you&amp;rsquo;ll see that we&amp;rsquo;ve written less than 50 lines
of code! Admittedly, I&amp;rsquo;m not counting the 80 or so lines that came for free
in the &lt;code&gt;*.ml&lt;/code&gt; files but that&amp;rsquo;s still pretty impressive.&lt;/p&gt;

&lt;p&gt;Of course, we still need a machine to take that VM and run it but that&amp;rsquo;s a
topic for another post.  For the time-being, I&amp;rsquo;m still using GitHub Pages
but once the VM is hosted somewhere, I will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Turn off GitHub Pages and serve from the VM &amp;ndash; but still using Jekyll in
the workflow.&lt;/li&gt;
  &lt;li&gt;Replace Jekyll with OCaml-based static-site generation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although all the tools already exist to switch now, I&amp;rsquo;m taking my time so
that I can easily maintain the code I end up using.&lt;/p&gt;

&lt;h2&gt;Expanding the script for testing&lt;/h2&gt;

&lt;p&gt;You may have noticed that the examples here are not very flexible or
extensible but that was a deliberate choice to keep them readable.  It&amp;rsquo;s
possible to do much more with the build matrix and script, as you can see
from the Travis files on my &lt;a href=&quot;https://github.com/amirmc/amirmc.github.com/tree/master/_mirage&quot;&gt;website repo&lt;/a&gt;, which were based on
those of the &lt;a href=&quot;https://github.com/mirage/mirage-www&quot;&gt;Mirage site&lt;/a&gt; and &lt;a href=&quot;https://github.com/mor1/mort-www&quot;&gt;Mort&amp;rsquo;s site&lt;/a&gt;.
Specifically, you can note the use of more environment variables and case
statements to decide which PPAs to grab.  Once you&amp;rsquo;ve got your builds
working, it&amp;rsquo;s worth improving your scripts to make them more maintainable
and cover the test cases you feel are important.&lt;/p&gt;

&lt;h3&gt;Not just for static sites (surprise!)&lt;/h3&gt;

&lt;p&gt;You might have noticed that in very few places in the toolchain above have I
mentioned anything specific to static sites per se.  The workflow is simply
(1) do some stuff locally, (2) push to a continuous integration service
which then (3) builds and deploys a Xen-based unikernel.  Apart from the
convenient folder structure, the specific work to treat this as a static
site lives in the &lt;code&gt;*.ml&lt;/code&gt; files, which I&amp;rsquo;ve skipped over for this post.  &lt;/p&gt;

&lt;p&gt;As such, the GitHub+Travis workflow we&amp;rsquo;ve developed here is quite general
and will apply to almost &lt;em&gt;any&lt;/em&gt; unikernels that we may want to construct.
I encourage you to explore the examples in the &lt;a href=&quot;https://github.com/mirage/mirage-skeleton&quot;&gt;mirage-skeleton&lt;/a&gt; repo and
keep your build script maintainable.  We&amp;rsquo;ll be using it again the next time
we build unikernel devices.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;em&gt;Acknowledgements:&lt;/em&gt; There were lots of things I read over while writing this
post but there were a few particularly useful things that you should look up.
Anil&amp;rsquo;s posts on &lt;a href=&quot;http://anil.recoil.org/2013/09/30/travis-and-ocaml.html&quot;&gt;Testing with Travis&lt;/a&gt; and
&lt;a href=&quot;http://anil.recoil.org/2013/10/06/travis-secure-ssh-integration.html&quot;&gt;Travis for secure deployments&lt;/a&gt; are quite succinct (and
were themselves prompted by &lt;a href=&quot;http://blog.mlin.net/2013/02/testing-ocaml-projects-on-travis-ci.html&quot;&gt;Mike Lin&amp;rsquo;s Travis post&lt;/a&gt; several
months earlier). Looking over Mort&amp;rsquo;s &lt;a href=&quot;https://github.com/mor1/mort-www/blob/master/.travis-build.sh&quot;&gt;build script&lt;/a&gt; and that of
&lt;a href=&quot;https://github.com/mirage/mirage-www/blob/master/.travis-ci.sh&quot;&gt;mirage-www&lt;/a&gt; helped me figure out the deployment steps as well as improve
my own script. Special thanks also to &lt;a href=&quot;http://erratique.ch&quot;&gt;Daniel&lt;/a&gt;, &lt;a href=&quot;http://www.lpw25.net&quot;&gt;Leo&lt;/a&gt; and &lt;a href=&quot;http://anil.recoil.org&quot;&gt;Anil&lt;/a&gt; for
commenting on an earlier draft of this post.&lt;/p&gt;

</content><id>http://amirchaudhry.com/from-jekyll-to-unikernel-in-fifty-lines</id><title type="text">From Jekyll site to Unikernel in fifty lines of code.</title><updated>2014-03-10T18:30:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="https://mirage.io/blog/applying-for-gsoc2014" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;MirageOS will part of the &lt;a href=&quot;https://www.google-melange.com/gsoc/homepage/google/gsoc2014&quot;&gt;Google Summer of Code&lt;/a&gt; 2014
program, thanks to the Xen Project's participation!  It's been a few years
since I've mentored for GSoc, but I still have fond memories of some great
projects in the past (such as the legendary &lt;a href=&quot;http://vmgl.sourceforge.net/&quot;&gt;Quake testing&lt;/a&gt;
we were forced to do for hours on end).  I've already received a number of
queries about this year's program from potential students, so here's a few
things to note to become a successful applicant.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;Students still need to apply and be accepted. Your chances of being
 selected are much higher if you demonstrate some participation and
 code contributions (even minor) &lt;em&gt;before&lt;/em&gt; submitting an application.
 Thus, even if you don't have a copy of Xen around, roll up your sleeves
 and head over to the &lt;a href=&quot;http://openmirage.org/wiki/install&quot;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Contributions do not have to be just code.  They can be documentation,
 help with packaging, wiki posts about a particular use, or test cases
 to improve code coverage.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;It's unlikely that we'll get students who are very familiar with both
 OCaml and Xen (if you are, definitely get in touch with us!).  You should
 therefore look over the &lt;a href=&quot;http://wiki.xen.org/wiki/GSoc_2014#Mirage_OS&quot;&gt;project ideas&lt;/a&gt;
 as a set of guidelines and not firm suggestions.  If you have a particular
 thing you'd like to do with Mirage (for example, work on the JavaScript
 backend, an &lt;a href=&quot;https://github.com/andrewray/iocamljs&quot;&gt;IPython interface&lt;/a&gt; or
 a particular protocol implementation such as XMPP, then that's fine.  Just
 get in touch with us on the &lt;a href=&quot;http://openmirage.org/community&quot;&gt;mailing lists&lt;/a&gt; or directly via
 e-mail, and we can work through them.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Under some circumstances, we can provide resources such as a login to
 a Xen machine, or delegated credits on a cloud provider.  Don't let that
 stop you from applying for a project idea.  In general though, it's best
 to only depend on your own computer resources if practical to do so.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;
   </content><id>https://mirage.io/blog/applying-for-gsoc2014</id><title type="text">MirageOS is in Google Summer of Code 2014</title><updated>2014-02-25T18:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2014/02/13/ocaml-what-you-gain/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;Way back in June, in &lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/20/replacing-python-round-2/&quot;&gt;Replacing Python: second round&lt;/a&gt;, I wrote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The big surprise for me in these tests was how little you lose going from Python to OCaml.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, I was mainly focused on making sure the things I needed were still available. With the port now complete (&lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/7310&quot;&gt;0install 2.6 has been released&lt;/a&gt;, and contains no Python code), here&amp;rsquo;s a summary of the main things you &lt;em&gt;gain&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#functional-programming&quot;&gt;Functional programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#type-checking&quot;&gt;Type-checking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#data-type-definitions&quot;&gt;Data type definitions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#polymorphic-variants&quot;&gt;Polymorphic variants&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#immutability&quot;&gt;Immutability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#abstraction&quot;&gt;Abstraction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#speed&quot;&gt;Speed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#no-dependency-cycles&quot;&gt;No dependency cycles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#gui-code&quot;&gt;GUI code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#api-stability&quot;&gt;API stability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post also appeared on &lt;a href=&quot;https://news.ycombinator.com/item?id=7234855&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;http://www.reddit.com/r/programming/comments/1xtohg/ocaml_replacing_python_what_you_gain/&quot;&gt;Reddit&lt;/a&gt;, where there are more comments.&lt;/p&gt;

&lt;p&gt;( This post is part of a series in which I
&lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install&quot;&gt;converted 0install from Python to OCaml&lt;/a&gt;, learning OCaml in the process. The full code is at &lt;a href=&quot;https://github.com/0install/0install&quot;&gt;GitHub/0install&lt;/a&gt;. )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A note on bias&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I started these blog posts unemployed (taking a career break), with no particular connection to any of the languages, and motivated to make a good choice since I&amp;rsquo;d be using it a lot. I wasn&amp;rsquo;t biased towards OCaml; it wasn&amp;rsquo;t even on my list of candidates until a complete stranger &lt;a href=&quot;http://article.gmane.org/gmane.comp.file-systems.zero-install.devel/6914/match=ocaml&quot;&gt;suggested it on the mailing list&lt;/a&gt;.
But I must now disclose that, since my last blog post, I&amp;rsquo;m now getting paid for writing OCaml.&lt;/p&gt;

&lt;h2&gt;Functional programming&lt;/h2&gt;

&lt;p&gt;Some people commented it was good to see more projects moving to functional programming. So, what&amp;rsquo;s it like doing functional programming after Python? To be honest, not much has changed. According to OCaml&amp;rsquo;s &lt;a href=&quot;http://ocaml.org/learn/tutorials/functional_programming.html&quot;&gt;What is functional programming?&lt;/a&gt;, &amp;ldquo;In a functional language, functions are first-class citizens&amp;rdquo; and &amp;ldquo;The fact is that Perl is actually quite a good functional language&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;So, if you&amp;rsquo;ve ever used Python&amp;rsquo;s (built-in) &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; functions, ever written or used a &lt;a href=&quot;http://www.python.org/dev/peps/pep-0318/&quot;&gt;decorator&lt;/a&gt; or ever passed a function as an argument to another function, you&amp;rsquo;re already doing functional programming as far as OCaml is concerned. By contrast, &amp;ldquo;&lt;em&gt;pure&lt;/em&gt; functional programming&amp;rdquo; (as in Haskell) would be a major change.&lt;/p&gt;

&lt;p&gt;OCaml does make partially applying functions easier, which is sometimes convenient, and it supports &lt;a href=&quot;http://en.wikipedia.org/wiki/Tail_call&quot;&gt;tail recursion&lt;/a&gt;. Tail recursion allows you to write loops in a functional style (without needing &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; or mutable state). That can make it easier to reason about loops, but I couldn&amp;rsquo;t find any examples in 0install where this style was clearly better than a plain Python loop.&lt;/p&gt;

&lt;h2&gt;Type-checking&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve used statically-typed languages before (I used to program in Java for my day job). That can catch many errors that Python would miss, but OCaml&amp;rsquo;s type system is far more useful than Java&amp;rsquo;s. Here&amp;rsquo;s an example, where we want to display an icon for some program in the GUI:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;get_icon&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_icon&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* Error! *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;Error: This expression has type Icon.t -&amp;gt; unit
       but an expression was expected of type Icon.t option -&amp;gt; 'a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oops. The program might not have an icon (icons are optional). We&amp;rsquo;ll need to use a default one in that case:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;get_icon&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generic_program_icon&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_icon&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Downloading some data:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network_failure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show_error_dialog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Error! *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
`aborted_by_user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oops. The user might click the &amp;ldquo;Cancel&amp;rdquo; button - we need to handle that too:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network_failure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show_error_dialog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aborted_by_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;When registering an extra feed to an interface we want to download it first to check it exists:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;download_feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* Error! *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;register_feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;Error: This expression has type feed_url
       but an expression was expected of type [&amp;lt; `remote_feed of url ]
       The second variant type does not allow tag(s) `local_feed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oops. The user might specify a local file too:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote_feed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_file_exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;register_feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Java makes you do all the work for static type checking, but manages to miss many of the benefits.
No matter how much care you take with your Java types, there&amp;rsquo;s always a good chance you&amp;rsquo;re going to crash with a NullPointerException.
By requiring correct handling of &lt;code&gt;None&lt;/code&gt; (&lt;code&gt;null&lt;/code&gt;) and ensuring pattern matching is exhaustive, OCaml&amp;rsquo;s type checking is far more useful. As with Haskell, when a piece of OCaml code compiles successfully, there&amp;rsquo;s a very good chance it will work first time.&lt;/p&gt;

&lt;p&gt;And, of course, static checking makes refactoring much easier than in Python. For example, if you remove or rename something, the compiler will always find every place you need to update.&lt;/p&gt;

&lt;h2&gt;Data type definitions&lt;/h2&gt;

&lt;p&gt;OCaml makes it really easy to define new data types as you need them. The types are always easy to see, and you know that OCaml will enforce them (unlike comments in Python, which may be incorrect). Here&amp;rsquo;s a record type for the configuration settings for an interface (an optional stability level and a list of extra feeds):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;stability_policy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stability_level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;extra_feeds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed_import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;And here&amp;rsquo;s a variant (enum / tagged union / sum) type for the result of a download:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aborted_by_user&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network_failure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Polymorphic variants&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://ocaml.org/learn/tutorials/labels.html#Morevariantspolymorphicvariants&quot;&gt;OCaml labels tutorial&lt;/a&gt; describes polymorphic variants as a way to use the same name (e.g. &lt;code&gt;Open&lt;/code&gt;) for different things (e.g. opening a door vs opening a lock) and says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;ldquo;Because of the reduction in type safety, it is recommended that you don&amp;rsquo;t use these in your code&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is quite misleading (and I was &lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/6975/focus=6977&quot;&gt;quickly corrected&lt;/a&gt; when I repeated it).
Their real purpose is to support subsets and supersets, which are useful all over the place. Some examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &amp;ldquo;0install&amp;rdquo; command-line parser accepts a large number of options. The &amp;ldquo;0install run&amp;rdquo; subcommand accepts a subset of these. That subset can be further subdivided into common options (present in all commands, such as &lt;code&gt;--verbose&lt;/code&gt;), options common to selection commands (e.g. &lt;code&gt;--before=VERSION&lt;/code&gt;) and those specific to &amp;ldquo;0install run&amp;rdquo; (e.g. &lt;code&gt;--wrapper=COMMAND&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The GUI code that handles dialog responses (&lt;code&gt;OK&lt;/code&gt;, &lt;code&gt;Cancel&lt;/code&gt;, etc) must handle the union of all the action button responses it added and the always-present window close icon.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The download code only handles the subset of feed URLs that represent remote resources.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Users can only register local and remote feeds to an interface, not distribution-provided virtual feeds.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cached feeds contain only remote implementations, local feeds contain local and remote implementations, and distribution feeds contain only distribution implementations. All three types get combined together and passed to the solver.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s an example, showing the &lt;code&gt;run&lt;/code&gt; command dividing its options into sub-groups, with the compiler checking that every option will be handled in all cases:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Argparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;common_option&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Common_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_common_option&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Refresh&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_opts&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Wrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MainExecutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Without polymorphic variants, OCaml&amp;rsquo;s exhaustive matching requirements mean you&amp;rsquo;d have to provide code to handle cases that (you think) can&amp;rsquo;t happen. That&amp;rsquo;s tedious and your program will crash if you get it wrong. Polymorphic variants mean you can prove to the compiler that only the correct subset needs to be handled at each point in the code. This is fantastic, and I can&amp;rsquo;t think of any other major language that does this (though I&amp;rsquo;m sure people will suggest some in the comments).&lt;/p&gt;

&lt;h2&gt;Immutability&lt;/h2&gt;

&lt;p&gt;In OCaml, all variables and record fields are immutable by default. This is far saner than Java (where the default is mutable and you must use &lt;code&gt;final&lt;/code&gt; everywhere to override it). Immutable is a better default because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Typically, you want most things to be immutable (in any language).&lt;/li&gt;
  &lt;li&gt;If you forget to mark something as mutable, the compiler will quickly let you know, whereas forgetting to mark something as immutable would be missed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With mutable structures, you are always worrying about whether one piece of code will mutate a structure that another is relying on. For example, I originally made the XML element type mutable, but I found I was writing comments like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(** Note: this returns the actual internal XML; don't modify it *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;After removing the &lt;code&gt;mutable&lt;/code&gt; annotations from the &lt;code&gt;element&lt;/code&gt; declaration, the compiler showed me each piece of code I needed to modify to make it work again. Then, I was able to remove those notes.&lt;/p&gt;

&lt;p&gt;[ The main difficulty in this conversion was handling XML namespace prefixes. Previously, each element had a reference to its owning document, which held a shared (mutable) pool of prefix bindings. Now, each namespaced item holds its preferred prefix, and the output code builds up a set of bindings before writing out the tree. ]&lt;/p&gt;

&lt;p&gt;There is one case where Python and Java do better than OCaml: OCaml strings are mutable! The convention is to treat them as immutable, though.&lt;/p&gt;

&lt;p&gt;Update: OCaml 4.02 has an option for immutable strings, with a separate &lt;code&gt;Bytes.t&lt;/code&gt; for mutable byte arrays.&lt;/p&gt;

&lt;h2&gt;Abstraction&lt;/h2&gt;

&lt;p&gt;OCaml makes it very easy to hide a module&amp;rsquo;s implementation details from its users using &lt;em&gt;abstract types&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I gave one example in the &lt;a href=&quot;http://roscidus.com/blog/blog/2014/01/07/ocaml-the-bugs-so-far/#sorted-treeview-iter-mix-up&quot;&gt;bugs post&lt;/a&gt;, where hiding the fact that a sorted tree is really the same type as an unsorted one prevents bugs due to mixing them up.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s another example. In the Python code, we would parse a selections XML document into a &lt;code&gt;Selections&lt;/code&gt; object, like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Selections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I found all this parsing and serialising complicated things and so in the OCaml rewrite I decided to use the plain XML element type everywhere.
That did simplify things, but it also removed some safety and clarity from the APIs.
Consider the &lt;code&gt;Selections.create&lt;/code&gt; function (which now does nothing unless the document is in an old format and needs to be upgraded):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_tag&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;selections&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_latest_format&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_to_latest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s nice and simple, but it just returns an &lt;code&gt;element&lt;/code&gt;. It would be easy to pass some other XML element to a function that only works on selection documents (or to pass a document that&amp;rsquo;s still in the old format).
We can solve this simply by declaring an abstract type for selection documents in the interface file (&lt;code&gt;selections.mli&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;(note: it&amp;rsquo;s an OCaml convention for a module&amp;rsquo;s main type to be called &lt;code&gt;t&lt;/code&gt;; other modules will refer to this type as &lt;code&gt;Selections.t&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;I think this gets the best of both worlds. Internally, a selections object is just the XML root element, which is simple and efficient, but code using it can&amp;rsquo;t mix up the types. And, of course, we can change the internal type later if needed without breaking anything.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t a particularly novel idea (you can do something similar in C). However, Python and Java would require you to write a wrapper object around the object you want to hide, and Python makes it easy for users of the API to access the internal representation even then. If you&amp;rsquo;re writing a library, OCaml (like C) makes it clear when you&amp;rsquo;re changing the module&amp;rsquo;s interface vs merely changing its implementation.&lt;/p&gt;

&lt;p&gt;( There is another interesting feature, which I haven&amp;rsquo;t used yet: you can use the &amp;ldquo;private&amp;rdquo; modifier to say that users of the module can see the structure of the type but can&amp;rsquo;t create their own instances of it. For example, saying &lt;code&gt;type t = private element&lt;/code&gt; would allow users to cast a selections value to an XML element, but not to treat any old XML as a selections value. )&lt;/p&gt;

&lt;p&gt;I did experience one case where abstraction didn&amp;rsquo;t work as intended. In the SAT solver, I declared the type of a literal abstractly as &lt;code&gt;type lit&lt;/code&gt; and, internally, I used &lt;code&gt;type lit = int&lt;/code&gt; (an array index). That worked fine. Later, I changed the internal representation from an int to a record. Ideally, that would have no effect on users of the module, but OCaml allows testing abstract types for equality, which resulted in each comparison recursively exploring the whole SAT problem. It can also cause runtime crashes if it encounters a function in this traversal. Haskell&amp;rsquo;s type classes avoid this problem by letting you control which types can be compared and how the comparison should be done.&lt;/p&gt;

&lt;h2&gt;Speed&lt;/h2&gt;

&lt;p&gt;Python is well known for being slow, but much of what real programs do is simply calling C libraries.
For example, when calculating a SHA256 digest, C does all the heavy lifting.&lt;/p&gt;

&lt;p&gt;Despite this, I&amp;rsquo;ve found OCaml to be fairly consistently 10 times faster in macro benchmarks (measuring a complete run of 0install from start to finish). Also, although I&amp;rsquo;ve added a lot of code and dependencies since the initial benchmarks, it still runs almost as quickly.
&lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/20/replacing-python-round-2/#speed&quot;&gt;The 0release benchmark&lt;/a&gt; took 8ms with June&amp;rsquo;s minimal version, compared to 10ms with the final version.&lt;/p&gt;

&lt;p&gt;When doing pure calculations (e.g. a tight loop adding integers), OCaml is typically more than 100x faster than Python.&lt;/p&gt;

&lt;p&gt;Even so, OCaml is probably not a great choice for CPU-intensive programs. Like Python, it has a global lock, so you can&amp;rsquo;t have multiple threads all using the CPU at once. But if you&amp;rsquo;re writing small utilities that need to run quickly, it&amp;rsquo;s perfect.&lt;/p&gt;

&lt;p&gt;Update: There is a &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Multicore-OCaml&quot;&gt;multicore&lt;/a&gt; OCaml branch under development which removes the global lock.&lt;/p&gt;

&lt;h2&gt;No dependency cycles&lt;/h2&gt;

&lt;p&gt;Perhaps I&amp;rsquo;m making a virtue of a flaw here, but I like the fact that OCaml doesn&amp;rsquo;t allow cyclic dependencies between source files.
I think this leads to cleaner code (back when I was writing Java, I wrote a script to extract all module dependencies and graph them so I could find and eliminate cycles).&lt;/p&gt;

&lt;p&gt;What this means is that in any OCaml code-base, no matter how complex, there&amp;rsquo;s always at least one module that doesn&amp;rsquo;t depend on any of the others and which you can therefore read first.
Then there&amp;rsquo;s a second module that only depends on the first one, etc.
For example, here are the modules that make up 0install&amp;rsquo;s GTK plugin (note the lack of cycles):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/guideps.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Cycles can be a problem when converting existing code to OCaml, though. For example, the Python had a &lt;code&gt;helpers.py&lt;/code&gt; module containing various high-level helper functions (e.g. &lt;code&gt;get_selections_gui&lt;/code&gt; to run the GUI and return the user&amp;rsquo;s selections, and &lt;code&gt;ensure_cached&lt;/code&gt; to make sure some selections are cached and download them if not). That doesn&amp;rsquo;t work in OCaml, because the helpers module depends on the GUI, but the GUI also depends on the helpers (the GUI sometimes needs to ensure things are cached). The result is that I had to move each helper function to the module it uses, but I don&amp;rsquo;t mind because the result is a clearer API.&lt;/p&gt;

&lt;p&gt;Another example is the &lt;code&gt;Config&lt;/code&gt; object. When I started the Python code back in 2005, I was very excited about using the idea of &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection&lt;/a&gt; for connecting together software modules (this is the basis of how 0install runs programs). Yet, for some reason I can&amp;rsquo;t explain, it didn&amp;rsquo;t occur to me to use a dependency injection style &lt;em&gt;within&lt;/em&gt; the code. Instead, I made a load of singleton objects. Later, in an attempt to make things more testable, I moved all the singletons to a &lt;code&gt;Config&lt;/code&gt; object and passed that around everywhere. I wasn&amp;rsquo;t proud of this design even at the time, but it was the simplest way forward. It looked like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_fetcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;zeroinstall.injector&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_fetcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fetcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_fetcher&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trust_mgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_trust_mgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;zeroinstall.injector&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trust&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_trust_mgr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trust&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrustMgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_trust_mgr&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;OCaml really didn&amp;rsquo;t like this design! &lt;code&gt;config.py&lt;/code&gt; depends on all the other modules because it calls their constructors, while they all depend on it to get their dependencies.&lt;/p&gt;

&lt;p&gt;Note that this design isn&amp;rsquo;t very safe: &lt;code&gt;Fetcher&lt;/code&gt;&amp;rsquo;s constructor could ask for &lt;code&gt;config.trust_mgr&lt;/code&gt;, and &lt;code&gt;TrustMgr&lt;/code&gt;&amp;rsquo;s constructor could ask for &lt;code&gt;config.fetcher&lt;/code&gt;. In Python, we have to remember not to do that, but in OCaml we&amp;rsquo;d like the type checker to prove it can&amp;rsquo;t happen.&lt;/p&gt;

&lt;p&gt;In most places, I fixed this by passing to each constructor just the objects it actually needs, which is cleaner.&lt;/p&gt;

&lt;p&gt;Another approach, which I used when lots of objects were needed, is that instead of requiring a &lt;code&gt;config&lt;/code&gt; object, a class can take simply &amp;ldquo;an object with at least &lt;code&gt;fetcher&lt;/code&gt; and &lt;code&gt;trust_mgr&lt;/code&gt; methods&amp;rdquo;.
Then we know statically that it will only call those methods, even though we actually give it the full config object.&lt;/p&gt;

&lt;p&gt;The result of all this is that you can look at e.g. the &lt;code&gt;fetch.mli&lt;/code&gt; interface file and see exactly which other modules it depends on, none of which will depend on it.&lt;/p&gt;

&lt;h2&gt;GUI code&lt;/h2&gt;

&lt;p&gt;Converting the GTK GUI to OCaml (using the &lt;a href=&quot;http://lablgtk.forge.ocamlcore.org/&quot;&gt;LablGtk&lt;/a&gt; bindings), I replaced &lt;strong&gt;5166&lt;/strong&gt; lines of Python (&lt;strong&gt;plus 1736&lt;/strong&gt; lines of GtkBuilder XML) with &lt;strong&gt;4017&lt;/strong&gt; lines of OCaml (and no XML). I&amp;rsquo;m not sure why, but writing GTK code in OCaml just seems to be much easier than with Python.&lt;/p&gt;

&lt;p&gt;I used GtkBuilder in the Python code in the hope that it would make it easier to modify the layouts, and to improve reliability (since the XML should always be valid, whereas Python code might not be). However, it actually made things harder because Glade (the editor) is constantly trying to force you to upgrade to the latest (incompatible) XML syntax, and I ended up having to run an old OS in a VM any time I wanted to edit things.&lt;/p&gt;

&lt;p&gt;In the OCaml, the static type checking gives us similar confidence that the layout code won&amp;rsquo;t crash. Also, with GtkBuilder you name each widget in the XML and then search for these names in the code. If they don&amp;rsquo;t match, it will fail at runtime. Having everything in OCaml meant that couldn&amp;rsquo;t happen. [ Note: I later discovered that LablGtk doesn&amp;rsquo;t support GtkBuilder anyway. ]&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of some OCaml GTK code and the corresponding Python code. This shows how to build and display a menu (simplified to have just one item):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;OCaml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu_item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Explain this decision&amp;quot;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show_explanation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Python &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;# Fix GC problem with PyGObject&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gtk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gtk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Explain this decision'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'activate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show_explanation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Some points to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LablGtk allows you to specify many properties at once in the constructor call, whereas in PyGTK we need separate calls for each.&lt;/li&gt;
  &lt;li&gt;The Python API broke between Python 2 and Python 3, so we have to make sure to use the right one. It&amp;rsquo;s not sufficient to test the Python code using only one version of Python!&lt;/li&gt;
  &lt;li&gt;The Python bindings have always suffered from garbage collection bugs. If we don&amp;rsquo;t store &lt;code&gt;menu&lt;/code&gt; in a global variable, it may garbage collect the menu while the user is still choosing - this makes the menu disappear suddenly from the screen!&lt;/li&gt;
  &lt;li&gt;Actually, I see that Python&amp;rsquo;s &lt;code&gt;MenuItem&lt;/code&gt; takes a &lt;code&gt;label&lt;/code&gt; argument, so maybe I could save a line. Or maybe that doesn&amp;rsquo;t work on some older version. It&amp;rsquo;s not worth the risk of changing it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Update: I used the original layout for the OCaml above as I was comparing line counts, but it&amp;rsquo;s a bit wide for this narrow blog and some people are finding it hard to read. Here&amp;rsquo;s an expanded version which uses less special syntax:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu_item&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Explain this decision&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show_explanation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;~&lt;/code&gt; indicates a named argument and &lt;code&gt;#&lt;/code&gt; is a method call. So &lt;code&gt;menu_item ~packing:menu#add ...&lt;/code&gt; is like &lt;code&gt;menu_item(packing = menu.add, ...)&lt;/code&gt; in Python.&lt;/p&gt;

&lt;p&gt;However, I did still have a few problems with the OCaml GTK bindings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There&amp;rsquo;s no support for custom cell renderers. I used three of these in the Python version and had to find alternative UIs for each.&lt;/li&gt;
  &lt;li&gt;Various minor functions aren&amp;rsquo;t included for some reason. The ones I wanted but couldn&amp;rsquo;t find were &lt;code&gt;Dialog.add_action_widget&lt;/code&gt;, &lt;code&gt;Style.paint_arrow&lt;/code&gt;, &lt;code&gt;MessageDialog.BUTTONS_NONE&lt;/code&gt;, &lt;code&gt;Dialog.set_keep_above&lt;/code&gt;, &lt;code&gt;icon_size_lookup&lt;/code&gt; and &lt;code&gt;Selection_data.get_uris&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;I had to work around a &lt;a href=&quot;http://roscidus.com/blog/blog/2014/01/07/ocaml-the-bugs-so-far/#crashes-with-gtkiconview&quot;&gt;bug in the IconView support&lt;/a&gt; (reported &lt;s&gt;but with no response&lt;/s&gt; and fixed immediately, although the bug report wasn&amp;rsquo;t updated).&lt;/li&gt;
  &lt;li&gt;You usually don&amp;rsquo;t need the result of creating a label or attaching a signal so you need to use &lt;code&gt;ignore&lt;/code&gt;, which can cause silent failures if you forgot an argument (it will ignore the partial function rather than the widget or signal result). Probably I should make &lt;code&gt;ignore_signal&lt;/code&gt; and &lt;code&gt;ignore_widget&lt;/code&gt; utility functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Update: I did add &lt;code&gt;ignore_widget&lt;/code&gt;, but for signals I found a better solution: I created a new &lt;code&gt;==&amp;gt;&lt;/code&gt; operator to connect a signal and ignore the resulting signal ID. It&amp;rsquo;s used like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show_explanation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;API stability&lt;/h2&gt;

&lt;p&gt;This is a community thing rather than a language issue, but OCaml and OCaml libraries seem to be very good at maintaining backwards compatibility at the source level. 0install supports the old OCaml 3.12 and libraries in Ubuntu 12.04 up to the latest OCaml 4.01 release without any problems. The only use of conditional compilation for compatibility is that we don&amp;rsquo;t define the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator on 4.01 because it&amp;rsquo;s already a built-in (this avoids a warning).&lt;/p&gt;

&lt;p&gt;On the other hand, binary compatibility is very poor. You can replace the implementation of a module with a newer version as long as the public interface doesn&amp;rsquo;t change (good), but any change at all to the interface requires everything that depends on it to be recompiled, and then everything that depends on them, and so on.&lt;/p&gt;

&lt;p&gt;For example, if the &lt;code&gt;List&lt;/code&gt; module adds a new function then the signature of the &lt;code&gt;List&lt;/code&gt; module changes. Now any program using the new version of the &lt;code&gt;List&lt;/code&gt; module is incompatible with every library binary compiled against the old version. Even if nothing is even using the new function! This means that distributing OCaml libraries in binary form is effectively impossible.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;OCaml&amp;rsquo;s main strengths are correctness and speed. Its type checking is very good at catching errors, and its &amp;ldquo;polymorphic variants&amp;rdquo; are a particularly useful feature, which I haven&amp;rsquo;t seen in other languages. Separate module interface files, abstract types, cycle-free dependencies, and data structures that are immutable by default help to make clean APIs.&lt;/p&gt;

&lt;p&gt;Surprisingly, writing GTK GUI code in OCaml was easier than in Python. The resulting code was significantly shorter and, I suspect, will prove far more reliable. OCaml&amp;rsquo;s type checking is particularly welcome here, as GUI code is often difficult to unit-test.&lt;/p&gt;

&lt;p&gt;The OCaml community is very good at maintaining API stability, allowing the same code to compile on old and new systems and (hopefully) minimising time spent updating it later.&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2014/02/13/ocaml-what-you-gain/</id><title type="text">OCaml: what you gain</title><updated>2014-02-13T11:17:24+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="https://mirage.io/blog/mirage-1.1-released" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;We've just released &lt;a href=&quot;https://github.com/ocaml/opam-repository/pull/1655&quot;&gt;MirageOS 1.1.0&lt;/a&gt; into OPAM.  Once the
live site updates, you should be able to run &lt;code&gt;opam update -u&lt;/code&gt; and get the latest
version.  This release is the &amp;quot;&lt;a href=&quot;http://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot;&gt;eat our own
dogfood&lt;/a&gt;&amp;quot; release; as I
mentioned earlier in January, a number of the MirageOS developers have decided to
shift our own personal homepages onto MirageOS.  There's nothing better than
using our own tools to find all the little annoyances and shortcomings, and so
MirageOS 1.1.0 contains some significant usability and structural improvements
for building unikernels.&lt;/p&gt;
&lt;h4&gt;Functional combinators to build device drivers&lt;/h4&gt;

&lt;p&gt;MirageOS separates the
application logic from the concrete backend in use by writing the application
as an &lt;a href=&quot;https://realworldocaml.org/v1/en/html/functors.html&quot;&gt;OCaml functor&lt;/a&gt;
that is parameterized over module types that represent the device driver
signature.  All of the module types used in MirageOS can be browsed in &lt;a href=&quot;https://github.com/mirage/mirage/blob/1.1.0/types/V1.mli&quot;&gt;one
source file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In MirageOS 1.1.0, &lt;a href=&quot;http://gazagnaire.org/&quot;&gt;Thomas Gazagnaire&lt;/a&gt; implemented a
a &lt;a href=&quot;https://github.com/mirage/mirage/blob/1.1.0/lib/mirage.mli#L28&quot;&gt;combinator library&lt;/a&gt;
that makes it easy to separate the definition of application logic from the details
of the device drivers that actually execute the code (be it a Unix binary or a
dedicated Xen kernel).  It lets us write code of this form
(taken from &lt;a href=&quot;https://github.com/mirage/mirage-skeleton/tree/master/block&quot;&gt;mirage-skeleton/block&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let () =
  let main = foreign &amp;quot;Unikernel.Block_test&amp;quot; (console @-&amp;gt; block @-&amp;gt; job) in
  let img = block_of_file &amp;quot;disk.img&amp;quot; in
  register &amp;quot;block_test&amp;quot; [main $ default_console $ img]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this configuration fragment, our unikernel is defined as a functor over a
console and a block device by using &lt;code&gt;console @-&amp;gt; block @-&amp;gt; job&lt;/code&gt;.  We then
define a concrete version of this job by applying the functor (using the &lt;code&gt;$&lt;/code&gt;
combinator) to a default console and a file-backed disk image.&lt;/p&gt;
&lt;p&gt;The combinator approach lets us express complex assemblies of device driver
graphs by writing normal OCaml code, and the &lt;code&gt;mirage&lt;/code&gt; command line tool
parses this at build-time and generates a &lt;code&gt;main.ml&lt;/code&gt; file that has all the
functors applied to the right device drivers. Any mismatches in module signatures
will result in a build error, thus helping to spot nonsensical combinations
(such as using a Unix network socket in a Xen unikernel).&lt;/p&gt;
&lt;p&gt;This new feature is walked through in the &lt;a href=&quot;http://openmirage.org/docs/hello-world&quot;&gt;tutorial&lt;/a&gt;, which
now walks you through several skeleton examples to explain all the different
deployment scenarios.  It's also followed by the &lt;a href=&quot;http://openmirage.org/docs/mirage-www&quot;&gt;website tutorial&lt;/a&gt;
that explains how this website works, and how our &lt;a href=&quot;http://openmirage.org/docs/deploying-via-ci&quot;&gt;Travis autodeployment&lt;/a&gt;
throws the result onto the public Internet.&lt;/p&gt;
&lt;p&gt;Who will win the race to get our website up and running first?  Sadly for Anil,
&lt;a href=&quot;http://www.cs.nott.ac.uk/~rmm/&quot;&gt;Mort&lt;/a&gt; is currently &lt;a href=&quot;https://github.com/mor1/mort-www&quot;&gt;in the
lead&lt;/a&gt; with an all-singing, all-dancing shiny
new website.  Will he finish in the lead though? Stay tuned!&lt;/p&gt;
&lt;h4&gt;Less magic in the build&lt;/h4&gt;

&lt;p&gt;Something that's more behind-the-scenes, but important for easier development,
is a simplication in how we build libraries.  In MirageOS 1.0, we had several
packages that couldn't be simultaneously installed, as they had to be compiled 
in just the right order to ensure dependencies.&lt;/p&gt;
&lt;p&gt;With MirageOS 1.1.0, this is all a thing of the past.  All the libraries can
be installed fully in parallel, including the network stack.  The 1.1.0
&lt;a href=&quot;https://github.com/mirage/mirage-tcpip&quot;&gt;TCP/IP stack&lt;/a&gt; is now built in the
style of the venerable &lt;a href=&quot;http://www.cs.cmu.edu/~fox/foxnet.html&quot;&gt;FoxNet&lt;/a&gt; network
stack, and is parameterized across its network dependencies.  This means
that once can quickly assemble a custom network stack from modular components,
such as this little fragment below from &lt;a href=&quot;https://github.com/mirage/mirage-skeleton/blob/master/ethifv4/unikernel.ml&quot;&gt;mirage-skeleton/ethifv4/&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module Main (C: CONSOLE) (N: NETWORK) = struct

  module E = Ethif.Make(N)
  module I = Ipv4.Make(E)
  module U = Udpv4.Make(I)
  module T = Tcpv4.Flow.Make(I)(OS.Time)(Clock)(Random)
  module D = Dhcp_clientv4.Make(C)(OS.Time)(Random)(E)(I)(U)
  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This functor stack starts with a &lt;code&gt;NETWORK&lt;/code&gt; (i.e. Ethernet) device, and then applies
functors until it ends up with a UDPv4, TCPv4 and DHCPv4 client.  See the &lt;a href=&quot;https://github.com/mirage/mirage-skeleton/blob/master/ethifv4/unikernel.ml&quot;&gt;full
file&lt;/a&gt;
to see how the rest of the logic works, but this serves to illustrate how
MirageOS makes it possible to build custom network stacks out of modular
components.  The functors also make it easier to embed the network stack in
non-MirageOS applications, and the &lt;code&gt;tcpip&lt;/code&gt; OPAM package installs pre-applied Unix
versions for your toplevel convenience.&lt;/p&gt;
&lt;p&gt;To show just how powerful the functor approach is, the same stack can also
be mapped onto a version that uses kernel sockets simply by abstracting the
lower-level components into an equivalent that uses the Unix kernel to provide
the same functionality.  We explain how to swap between these variants in
the &lt;a href=&quot;http://openmirage.org/wiki/hello-world&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Lots of library releases&lt;/h4&gt;

&lt;p&gt;While doing the 1.1.0 release in January, we've also released quite a few libraries
into &lt;a href=&quot;https://opam.ocaml.org&quot;&gt;OPAM&lt;/a&gt;.  Here are some of the highlights.&lt;/p&gt;
&lt;p&gt;Low-level libraries:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/samoht/ocaml-mstruct/&quot;&gt;mstruct&lt;/a&gt; is a streaming layer for handling lists of memory buffers with a simpler read/write interface.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/xapi-project/nbd/&quot;&gt;nbd&lt;/a&gt; is an implementation of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Network_block_device&quot;&gt;Network Block Device&lt;/a&gt; protocol for block drivers.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Networking and web libraries:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/ocaml-ipaddr&quot;&gt;ipaddr&lt;/a&gt; now has IPv6 parsing support thanks to &lt;a href=&quot;https://github.com/hhugo/&quot;&gt;Hugo Heuzard&lt;/a&gt; and David Sheets.  This is probably the hardest bit of adding IPv6 support to our network stack!&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/cowabloga&quot;&gt;cowabloga&lt;/a&gt; is slowly emerging as a library to handle the details of rendering Zurb Foundation websites.  It's still in active development, but being used for a few of our &lt;a href=&quot;https://github.com/mor1/mort-www&quot;&gt;personal websites&lt;/a&gt; as well as this website.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/avsm/ocaml-cohttp&quot;&gt;cohttp&lt;/a&gt; has had several releases thanks to external contributions, particular from &lt;a href=&quot;https://github.com/rgrinberg&quot;&gt;Rudy Grinberg&lt;/a&gt; who added s-expression support and several &lt;a href=&quot;https://github.com/avsm/ocaml-cohttp/blob/master/CHANGES&quot;&gt;other improvements&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/avsm/ocaml-uri&quot;&gt;uri&lt;/a&gt; features performance improvements and the elimination of Scanf (considered &lt;a href=&quot;http://www.lexifi.com/blog/note-about-performance-printf-and-format&quot;&gt;rather slow&lt;/a&gt; by OCaml standards).&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/ocaml-cow&quot;&gt;cow&lt;/a&gt; continues its impossible push to make coding HTML and CSS a pleasant experience, with better support for Markdown now.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://github.com/avsm/ocaml-github&quot;&gt;github&lt;/a&gt; bindings are now also in use as part of an experiment to make &lt;a href=&quot;http://gallium.inria.fr/blog/patch-review-on-github/&quot;&gt;upstream OCaml development&lt;/a&gt; easier for newcomers, thanks to Gabriel Scherer.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; led the splitting up of several low-level Xen libraries as part of the build simplication.  These now compile on both Xen (using the direct hypercall interface) and Unix (using the dom0 &lt;code&gt;/dev&lt;/code&gt; devices) where possible.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/xapi-project/ocaml-evtchn&quot;&gt;xen-evtchn&lt;/a&gt; for the event notification mechanism. There are a couple of wiki posts that explain how &lt;a href=&quot;http://openmirage.org/wiki/xen-events&quot;&gt;event channels&lt;/a&gt; and &lt;a href=&quot;http://openmirage.org/wiki/xen-suspend&quot;&gt;suspend/resume&lt;/a&gt; work in MirageOS/Xen guests.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/xapi-project/ocaml-gnt&quot;&gt;xen-gnt&lt;/a&gt; for the grant table mechanism that controls inter-process memory.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://github.com/mirage/io-page&quot;&gt;io-page&lt;/a&gt; library no longer needs Unix and Xen variants, as the interface has been standardized to work in both.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;All of Dave's hacking on Xen device drivers is showcased in this &lt;a href=&quot;http://openmirage.org/wiki/xen-synthesize-virtual-disk&quot;&gt;xen-disk wiki post&lt;/a&gt; that 
explains how you can synthesize your own virtual disk backends using MirageOS.  Xen uses a &lt;a href=&quot;https://www.usenix.org/legacy/event/usenix05/tech/general/full_papers/short_papers/warfield/warfield.pdf&quot;&gt;split device&lt;/a&gt; model,
and now MirageOS lets us build &lt;em&gt;backend&lt;/em&gt; device drivers that service VMs as well as the frontends!&lt;/p&gt;
&lt;p&gt;Last, but not least, &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt; has been building a brand new storage system for MirageOS guests that uses git-style branches under the hood to help coordinate clusters of unikernels.  We'll talk about how this works in a future update, but there are some cool libraries and prototypes available on OPAM for the curious.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/samoht/ocaml-lazy-trie/&quot;&gt;lazy-trie&lt;/a&gt; is a lazy version of the Trie data structure, useful for exposing Git graphs.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/samoht/ocaml-git&quot;&gt;git&lt;/a&gt; is a now-fairly complete implementation of the Git protocol in pure OCaml, which can interoperate with normal Git servers via the &lt;code&gt;ogit&lt;/code&gt; command-line tool that it installs.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/irmin&quot;&gt;irmin&lt;/a&gt; is the main library that abstracts Git DAGs into an OCaml programming API.  The homepage has &lt;a href=&quot;https://github.com/mirage/irmin/wiki/Getting-Started&quot;&gt;instructions&lt;/a&gt; on how to play with the command-line frontend to experiment with the database.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/samoht/git2fat&quot;&gt;git2fat&lt;/a&gt; converts a Git checkout into a FAT block image, useful when bundling up unikernels.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;We'd also like to thank several conference organizers for giving us the opportunity to demonstrate MirageOS.  The talk video from &lt;a href=&quot;http://www.infoq.com/presentations/mirage-os&quot;&gt;QCon SF&lt;/a&gt; is now live, and we also had a &lt;em&gt;great&lt;/em&gt; time at &lt;a href=&quot;http://fosdem.org&quot;&gt;FOSDEM&lt;/a&gt; recently (summarized by Amir &lt;a href=&quot;http://nymote.org/blog/2014/fosdem-summary/&quot;&gt;here&lt;/a&gt;). 
So lots of activities, and no doubt little bugs lurking in places (particularly around installation).  As always, please do let us know of any problem by &lt;a href=&quot;https://github.com/mirage/mirage/issues&quot;&gt;reporting bugs&lt;/a&gt;, or feel free to &lt;a href=&quot;http://openmirage.org/community&quot;&gt;contact us&lt;/a&gt; via our e-mail lists or IRC.  Next stop: our unikernel homepages!&lt;/p&gt;

   </content><id>https://mirage.io/blog/mirage-1.1-released</id><title type="text">MirageOS 1.1.0: the eat-your-own-dogfood release</title><updated>2014-02-11T16:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2014/02/11/fourth-compiler-hacking-session" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;It's time for the fourth Cambridge OCaml compiler-hacking session!  We'll be meeting in the &lt;a href=&quot;http://www.cl.cam.ac.uk/&quot;&gt;Computer Lab&lt;/a&gt; again next Tuesday evening.&lt;/p&gt;

&lt;p&gt;If you're planning to come along, it'd be helpful if you could &lt;a href=&quot;http://doodle.com/5tk8rs5k3mh82qqx&quot;&gt;&lt;em&gt;indicate interest via Doodle&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;http://lists.ocaml.org/listinfo/cam-compiler-hacking&quot;&gt;&lt;em&gt;sign up to the mailing list&lt;/em&gt;&lt;/a&gt; to receive updates:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Where&lt;/em&gt;: Room &lt;a href=&quot;http://www.cl.cam.ac.uk/research/dtg/openroommap/static/?s=FW11&amp;amp;amp%3Blabels=1&quot;&gt;FW11&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/directions/&quot;&gt;Computer Laboratory, Madingley Road&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When&lt;/em&gt;: 6pm, Tuesday 18th February&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Who&lt;/em&gt;: anyone interested in improving OCaml. Knowledge of OCaml programming will obviously be helpful, but prior experience of working on OCaml internals isn't necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What&lt;/em&gt;: fixing bugs, implementing new features, learning about OCaml internals&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wiki&lt;/em&gt;: &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki&quot;&gt;https://github.com/ocamllabs/compiler-hacking/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're defining &amp;quot;compiler&amp;quot; pretty broadly, to include anything that's part of the standard distribution, which means at least the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/libref/index.html&quot;&gt;standard library&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual024.html&quot;&gt;runtime&lt;/a&gt;, tools (&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/depend.html&quot;&gt;ocamldep&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc105&quot;&gt;ocamllex&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc107&quot;&gt;ocamlyacc&lt;/a&gt;, etc.), &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual032.html&quot;&gt;ocamlbuild&lt;/a&gt;, the &lt;a href=&quot;http://caml.inria.fr/resources/doc/index.en.html&quot;&gt;documentation&lt;/a&gt;, and the compiler itself. We'll have suggestions for &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;mini-projects&lt;/a&gt; for various levels of experience (see also some &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-previously-worked-on&quot;&gt;things we've worked on in previous sessions&lt;/a&gt;), but feel free to come along and work on whatever you fancy.&lt;/p&gt;

&lt;p&gt;We'll also be ordering pizza, so if you want to be counted for food you should aim to arrive by 6.30pm.&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2014/02/11/fourth-compiler-hacking-session</id><title type="text">Fourth OCaml compiler hacking session</title><updated>2014-02-11T12:10:29+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2014/02/04/handler-case" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;(Update (2014-05-28): Added notes on &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/rss.xml#delimcc&quot;&gt;delimcc&lt;/a&gt; and &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/rss.xml#catch-me&quot;&gt;Catch me if you can&lt;/a&gt; to the &lt;em&gt;Discoveries&lt;/em&gt; section.)&lt;/p&gt;

&lt;p&gt;(Update (2014-05-05): The &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/rss.xml#match-exception&quot;&gt;&lt;code&gt;match/exception&lt;/code&gt;&lt;/a&gt; variant of this proposal has been &lt;a href=&quot;https://github.com/ocaml/ocaml/commit/0f1fb19cbe48918c5d070e475c39052875623a85&quot;&gt;merged into OCaml trunk&lt;/a&gt;, ready for release in 4.02.)&lt;/p&gt;

&lt;p&gt;(Update: there's a &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6318&quot;&gt;Mantis issue open&lt;/a&gt; to discuss this proposal.)&lt;/p&gt;

&lt;p&gt;OCaml's &lt;code&gt;try&lt;/code&gt; construct is good at dealing with exceptions, but not so good at handling the case where no exception is raised.  This post describes a simple extension to &lt;code&gt;try&lt;/code&gt; that adds support for handling the &amp;quot;success&amp;quot; case.&lt;/p&gt;

&lt;p&gt;Here's an example of code that benefits from the extension.  On a recent &lt;a href=&quot;http://caml.inria.fr/resources/forums.en.html&quot;&gt;caml-list&lt;/a&gt; thread, &lt;a href=&quot;http://cedeela.fr/~simon/&quot;&gt;Simon Cruanes&lt;/a&gt; posted &lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2014-01/msg00113.html&quot;&gt;the following function&lt;/a&gt; for iterating over a stream:&lt;/p&gt;

&lt;blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;End_of_stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;For each element of a stream, &lt;code&gt;iter_stream&lt;/code&gt; wraps the element with &lt;code&gt;Some&lt;/code&gt;, then unwraps it again and passes it to &lt;code&gt;f&lt;/code&gt;.  At first glance, wrapping and immediately unwrapping in this way seems like needless obfuscation.  However, moving the last two lines out of the body of the &lt;code&gt;try&lt;/code&gt; in this way serves two essential purposes: it turns the recursive call to &lt;code&gt;iter_stream&lt;/code&gt; into a tail call, and it allows exceptions raised by &lt;code&gt;f&lt;/code&gt; to propagate.  More generally, this use of options makes it easy to specify the &lt;em&gt;success continuation&lt;/em&gt; of a &lt;code&gt;try&lt;/code&gt; expression, i.e. the piece of code that receives the value of the body when no exception is raised.&lt;/p&gt;

&lt;p&gt;As Simon notes, the &lt;code&gt;match (try Some ...)&lt;/code&gt; idiom is widely used in OCaml code.  Examples can be found in the source of &lt;a href=&quot;https://github.com/ocsigen/lwt/blob/b63b2a/src/unix/lwt_unix.ml#L118-L125&quot;&gt;lwt&lt;/a&gt;, &lt;a href=&quot;https://github.com/ocaml-batteries-team/batteries-included/blob/92ea390c/benchsuite/bench_nreplace.ml#L45-L48&quot;&gt;batteries&lt;/a&gt;, &lt;a href=&quot;https://github.com/savonet/liquidsoap/blob/a81cd8b6/src/decoder/metadata_decoder.ml#L53-L55&quot;&gt;liquidsoap&lt;/a&gt;, &lt;a href=&quot;https://github.com/janestreet/sexplib/blob/f9bd413/lib/conv.ml#L256-L259&quot;&gt;sexplib&lt;/a&gt;, &lt;a href=&quot;https://github.com/MLstate/opalang/blob/0802728/compiler/opalang/opaParser.ml#L127-L135&quot;&gt;opa&lt;/a&gt;, &lt;a href=&quot;https://github.com/avsm/ocaml-uri/blob/35af64db/lib/uri.ml#L250-L255&quot;&gt;uri&lt;/a&gt;, &lt;a href=&quot;https://github.com/coq/coq/blob/724c9c9f/tools/coqdoc/tokens.ml#L36-L41&quot;&gt;coq&lt;/a&gt;, &lt;a href=&quot;https://github.com/pascal-bach/Unison/blob/4788644/src/ubase/prefs.ml#L97-L106&quot;&gt;unison&lt;/a&gt;, and many other packages.  &lt;/p&gt;

&lt;p&gt;In response to Simon's message, &lt;a href=&quot;http://okmij.org/ftp&quot;&gt;Oleg&lt;/a&gt; pointed out &lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2014-01/msg00146.html&quot;&gt;a solution&lt;/a&gt;: the 2001 paper &lt;a href=&quot;http://research.microsoft.com/~akenn/sml/exceptionalsyntax.pdf&quot;&gt;Exceptional Syntax&lt;/a&gt;  (&lt;a href=&quot;http://research.microsoft.com/~nick/&quot;&gt;Benton&lt;/a&gt; and &lt;a href=&quot;http://research.microsoft.com/~akenn/&quot;&gt;Kennedy&lt;/a&gt;) extends &lt;code&gt;try&lt;/code&gt; with a &lt;code&gt;let&lt;/code&gt;-like binding construct that supports the success continuation idiom directly without the need for the option value.&lt;/p&gt;



&lt;p&gt;This post describes a patch to OCaml that implements a variant of Benton and Kennedy's design called &lt;em&gt;handler case&lt;/em&gt;.  Like Exceptional Syntax, handler case extends &lt;code&gt;try&lt;/code&gt; with explicit success continuation handling.  However, unlike Exceptional syntax, handler case uses &lt;code&gt;match&lt;/code&gt; binding for both the success continuation and the exception-handling clauses.  Here's the extended &lt;code&gt;try&lt;/code&gt; syntax:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_1&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_n&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_1'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_1'&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_n'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_n'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As in &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/expr.html#@manual.kwd50&quot;&gt;current OCaml&lt;/a&gt;, the clauses &lt;code&gt;pattern_1 -&amp;gt; expr_1&lt;/code&gt; ... &lt;code&gt;pattern_n -&amp;gt; expr_n&lt;/code&gt; handle exceptions raised during the evaluation of &lt;code&gt;expr&lt;/code&gt;.  The clauses  &lt;code&gt;val pattern_1' -&amp;gt; expr_1'&lt;/code&gt; ... &lt;code&gt;val pattern_n' -&amp;gt; expr_n'&lt;/code&gt; handle the case where no exception is raised; in this case the value of &lt;code&gt;expr&lt;/code&gt; is matched against &lt;code&gt;pattern_1'&lt;/code&gt; ... &lt;code&gt;pattern_n'&lt;/code&gt; to select the expression to evaluate to produce the result value.  (The actual syntax is implemented slightly more permissively: it allows value-matching and exception-matching clauses to be freely interleaved.)&lt;/p&gt;

&lt;p&gt;Using handler case we can rewrite &lt;code&gt;iter_stream&lt;/code&gt; to remove the extraneous option value:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;End_of_stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don't need to look far to find other code that benefits from the new construct.  Here's a function from the &lt;a href=&quot;https://github.com/ocaml/ocaml/blob/6a296a02/otherlibs/num/big_int.ml#L323-L328&quot;&gt;Big_int&lt;/a&gt; module in the standard library: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_of_big_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_of_nat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs_value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq_big_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monster_big_int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monster_int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;int_of_big_int&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The core of the function --- the call to &lt;code&gt;int_of_nat&lt;/code&gt; --- is rather buried in the complex control flow.  There are two &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;then&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; constructs, a &lt;code&gt;let&lt;/code&gt; binding, and a &lt;code&gt;try&lt;/code&gt; expression with a complex body.  Using handler case we can disentangle the code to make the four possible outcomes from the call to &lt;code&gt;int_of_nat&lt;/code&gt; explicit:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_of_big_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_of_nat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs_value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq_big_int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monster_big_int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;monster_int&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;int_of_big_int&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's a simpler example from &lt;a href=&quot;https://github.com/ocaml/ocaml/blob/6a296a02/stdlib/string.ml#L195&quot;&gt;the String module&lt;/a&gt;, which also involves code that cannot raise an exception in the body of a &lt;code&gt;try&lt;/code&gt; block:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index_rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using handler case we can separate the code that may raise an exception (the call to &lt;code&gt;index_rec&lt;/code&gt;) from the expression that produces the result:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Trying it out&lt;/h3&gt;

&lt;p&gt;Using &lt;a href=&quot;http://opam.ocaml.org/&quot;&gt;opam&lt;/a&gt; you can install an OCaml compiler extended with handler case as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ opam remote add ocamllabs git@github.com:ocamllabs/opam-repo-dev.git
ocamllabs Fetching git@github.com:ocamllabs/opam-repo-dev.git
[...]
$ opam switch 4.02.0dev+handler-syntax
# To complete the configuration of OPAM, you need to run:
eval `opam config env`
$ eval `opam config env`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;js&lt;em&gt;of&lt;/em&gt;ocaml&lt;/h4&gt;

&lt;p&gt;You can also try out the handler case construct in your browser, using the following modified version of &lt;a href=&quot;http://www.ocamlpro.com/&quot;&gt;OCamlPro&lt;/a&gt;'s &lt;a href=&quot;http://try.ocamlpro.com/&quot;&gt;Try OCaml&lt;/a&gt; application:&lt;/p&gt;

&lt;h3&gt;The discoveries of success continuations&lt;/h3&gt;

&lt;p&gt;As &lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler&quot;&gt;Philip Wadler&lt;/a&gt; &lt;a href=&quot;http://wadler.blogspot.co.uk/2008/02/great-minds-think-alike.html&quot;&gt;notes&lt;/a&gt;, constructs for handling success continuations have been independently discovered multiple times.  In fact, the history goes back even further than described in Wadler's blog; constructs like handler case date back over thirty years and have been introduced, apparently independently, into at least four languages.  Curiously, all the languages use &lt;code&gt;let&lt;/code&gt;-binding for success continuations and &lt;code&gt;match&lt;/code&gt; binding for failure continuations.&lt;/p&gt;

&lt;h4&gt;Lisp&lt;/h4&gt;

&lt;p&gt;In &lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Front/&quot;&gt;Common Lisp&lt;/a&gt; the construct analogous to &lt;code&gt;try&lt;/code&gt; is &lt;a href=&quot;http://clhs.lisp.se/Body/m_hand_1.htm&quot;&gt;&lt;code&gt;handler-case&lt;/code&gt;&lt;/a&gt; (from which the construct discussed here borrows its name).  A &lt;code&gt;handler-case&lt;/code&gt; expression has a body and a sequence of clauses which specify how various conditions (exceptions) should be handled.  The special condition specification &lt;code&gt;:no-error&lt;/code&gt; specifies the code to run when no condition is signalled.  The &lt;code&gt;iter_stream&lt;/code&gt; function might be written as follows in Common Lisp:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-common-lisp&quot; data-lang=&quot;common-lisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iter-stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;handler-case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-stream&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end-of-stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:no-error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;|s'|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iter-stream&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;|s'|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Common Lisp specification was completed in 1994 but the &lt;code&gt;handler-case&lt;/code&gt; construct and its &lt;code&gt;:no-error&lt;/code&gt; clause were present in some of Common Lisp's progenitors.  The construct was apparently introduced to Symbolics Lisp some time around 1982: it appears in the &lt;a href=&quot;http://bitsavers.informatik.uni-stuttgart.de/pdf/mit/cadr/chinual_5thEd_Jan83/chinualJan83_27_Errors.pdf&quot;&gt;5th edition&lt;/a&gt; of the Lisp Machine manual (January 1983) but not the &lt;a href=&quot;http://bitsavers.trailing-edge.com/pdf/mit/cadr/chinual_4thEd_Jul81.pdf&quot;&gt;4th edition&lt;/a&gt; from 18 months earlier (July 1981).&lt;/p&gt;

&lt;h4&gt;Python&lt;/h4&gt;

&lt;p&gt;Python has supported success continuations in exception handlers since May 1994, when the &lt;code&gt;else&lt;/code&gt; clause was added to &lt;code&gt;try&lt;/code&gt; blocks.  The &lt;a href=&quot;http://hg.python.org/cpython/file/36214c861144/Grammar/Grammar#l9&quot;&gt;Changelog in old versions of the Grammar/Grammar file&lt;/a&gt; has an entry&lt;/p&gt;

&lt;blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# 3-May-94:
#Added else clause to try-except
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;introduced in a &lt;a href=&quot;http://hg.python.org/cpython/rev/6c0e11b94009&quot;&gt;commit from August 1994&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;changeset:   1744:6c0e11b94009
branch:      legacy-trunk
user:        Guido van Rossum &amp;lt;guido@python.org&amp;gt;
date:        Mon Aug 01 11:00:20 1994 +0000
summary:     Bring alpha100 revision back to mainline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;Unlike the &lt;code&gt;:no-error&lt;/code&gt; clause in Lisp's &lt;code&gt;handler-case&lt;/code&gt;, Python's &lt;code&gt;else&lt;/code&gt; clause doesn't bind variables.  Since Python variables have function scope, not block scope, bindings in the body of the try block are visible throughout the function.  In Python we might write &lt;code&gt;iter_stream&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iter_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;End_of_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The provenance of the &lt;code&gt;else&lt;/code&gt; clause is unclear, but it doesn't seem to derive from Lisp's &lt;code&gt;handler-case&lt;/code&gt;.  The design of Python's exception handling constructs &lt;a href=&quot;http://docs.python.org/3/faq/general.html#why-was-python-created-in-the-first-place&quot;&gt;comes from Modula-3&lt;/a&gt;, but the exception handling construct described in the &lt;a href=&quot;http://www.hpl.hp.com/techreports/Compaq-DEC/SRC-RR-52.pdf&quot;&gt;Modula-3 report&lt;/a&gt; does not include a way of specifying the success continuation.  The syntax of the Modula-3 &lt;code&gt;TRY&lt;/code&gt;/&lt;code&gt;EXCEPT&lt;/code&gt; statement (found on p21 of the report) does include an &lt;code&gt;ELSE&lt;/code&gt; clause:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;   TRY    
     Body
   EXCEPT
     id1 (v1) =&amp;gt; Handler1
   | ...
   | idn (vn) =&amp;gt; Handlern
   ELSE Handler0
   END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, whereas Python's &lt;code&gt;else&lt;/code&gt; handles the case where no exception is raised, Modula-3's &lt;code&gt;ELSE&lt;/code&gt; handles the case where an exception not named in one of the &lt;code&gt;EXCEPT&lt;/code&gt; clauses is raised: it is equivalent to Python's catch-all &lt;code&gt;except:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Python also adds success handlers to other constructs.  Both the &lt;a href=&quot;http://docs.python.org/2/reference/compound_stmts.html#the-for-statement&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;http://docs.python.org/2/reference/compound_stmts.html#the-while-statement&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; statements have an optional &lt;code&gt;else&lt;/code&gt; clause which is executed unless the loop terminates prematurely with an exception or &lt;code&gt;break&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;exceptional-syntax&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Exceptional Syntax&lt;/h4&gt;

&lt;p&gt;The 2001 paper &lt;a href=&quot;http://research.microsoft.com/~akenn/sml/exceptionalsyntax.pdf&quot;&gt;Exceptional Syntax&lt;/a&gt; (&lt;a href=&quot;http://research.microsoft.com/~nick/&quot;&gt;Benton&lt;/a&gt; and &lt;a href=&quot;http://research.microsoft.com/~akenn/&quot;&gt;Kennedy&lt;/a&gt;) proposed the following construct for handling exceptions in Standard ML:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_1&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_n&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unless&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pattern_1'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_1'&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_n'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_n'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Evaluation of the &lt;code&gt;let&lt;/code&gt; binding proceeds as normal, except that if any of &lt;code&gt;expr_1&lt;/code&gt; to &lt;code&gt;expr_n&lt;/code&gt; raises an exception, control is transferred to the right hand side of the first of the clauses after &lt;code&gt;unless&lt;/code&gt; whose left hand side matches the exception.  The construct is largely similar to our proposed variation, except that the bindings used in the success continuation are based on &lt;code&gt;let&lt;/code&gt;, so scrutinising the values requires a separate &lt;code&gt;case&lt;/code&gt; (i.e. &lt;code&gt;match&lt;/code&gt;) expression.&lt;/p&gt;

&lt;p&gt;Using the Exceptional Syntax construct we might write &lt;code&gt;iter_stream&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;End_of_stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Exceptional Syntax has been implemented in the SML-to-Java compiler &lt;a href=&quot;http://www.dcs.ed.ac.uk/home/mlj/&quot;&gt;MLj&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Erlang&lt;/h4&gt;

&lt;p&gt;The 2004 paper &lt;a href=&quot;http://erlang.se/workshop/2004/exception.pdf&quot;&gt;Erlang's Exception Handling Revisited&lt;/a&gt; (Richard Carlsson, Bj&amp;ouml;rn Gustavsson and Patrik Nyblom) proposed an exception-handling construct for Erlang along the same lines as exceptional syntax, although apparently developed independently.  In the proposed extension to Erlang we might write &lt;code&gt;iter_stream&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erlang&quot; data-lang=&quot;erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;iter_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Mystream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;End_of_stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Eff&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/gdp/&quot;&gt;Plotkin&lt;/a&gt; and &lt;a href=&quot;http://matija.pretnar.info/&quot;&gt;Pretnar&lt;/a&gt;'s work on &lt;a href=&quot;http://matija.pretnar.info/pdf/handling-algebraic-effects.pdf&quot;&gt;handlers for algebraic effects&lt;/a&gt; generalises Exceptional Syntax to support effects other than exceptions.  The programming language &lt;a href=&quot;http://math.andrej.com/eff/&quot;&gt;eff&lt;/a&gt; implements a design based on this work, and supports Exceptional Syntax, again with &lt;code&gt;let&lt;/code&gt; binding for the success continuation.  (Although the success continuation is incorporated into the exception matching construct, only a single success continuation pattern is allowed.)  In eff we might write &lt;code&gt;iter_stream&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_stream_get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_of_stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second argument in the &lt;code&gt;end_of_stream&lt;/code&gt; clauses binds the continuation of the effect, allowing handling strategies other than the usual stack unwinding.  Since we ignore the continuation argument the behaviour is the same as for a regular exception handler.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/matijapretnar/eff/blob/2a9a36cc/src/parser.mly#L4-L7&quot;&gt;eff implementation&lt;/a&gt; uses the term &amp;quot;handler case&amp;quot; for the clauses of the &lt;code&gt;handle&lt;/code&gt; construct.&lt;/p&gt;

&lt;h4&gt;OCaml&lt;/h4&gt;

&lt;p&gt;Several OCaml programmers have proposed or implemented constructs related to handler case.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;delimcc&quot;&gt;&lt;/a&gt;
Oleg's &lt;a href=&quot;http://okmij.org/ftp/continuations/implementations.html&quot;&gt;delimcc&lt;/a&gt; library for delimited continuations provides the operations needed to support the success continuation style.  The programmer can use &lt;code&gt;push_prompt&lt;/code&gt; to establish a context, then call &lt;code&gt;shift&lt;/code&gt; or &lt;code&gt;shift0&lt;/code&gt; to return control to that context later, much as &lt;code&gt;try&lt;/code&gt; establishes a context to which &lt;code&gt;raise&lt;/code&gt; can transfer control.  If &lt;code&gt;shift&lt;/code&gt; is not called then control returns normally from the continuation argument to &lt;code&gt;push_prompt&lt;/code&gt;.  Using delimcc we might implement &lt;code&gt;iter_stream&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_prompt&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push_prompt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_stream_get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;End_of_stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://mjambon.com/&quot;&gt;Martin Jambon&lt;/a&gt; has &lt;a href=&quot;http://mjambon.com/mikmatch-manual.html#htoc16&quot;&gt;implemented&lt;/a&gt; a construct equivalent to Exceptional Syntax for OCaml as part of the &lt;a href=&quot;http://mjambon.com/micmatch.html&quot;&gt;micmatch extension&lt;/a&gt;.  His implementation allows us to write &lt;code&gt;iter_stream&lt;/code&gt; in much the same way as Benton and Kennedy's proposal:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_stream_get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;End_of_stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The details of the implementation are discussed in &lt;a href=&quot;https://twitter.com/jakedonham&quot;&gt;Jake Donham&lt;/a&gt;'s &lt;a href=&quot;http://ambassadortothecomputers.blogspot.co.uk/2010/09/reading-camlp4-part-11-syntax.html&quot;&gt;articles on Camlp4&lt;/a&gt;.  The micmatch implementation has a novel feature: the &lt;code&gt;let&lt;/code&gt; binding associated with the success continuation may be made recursive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://alain.frisch.fr/&quot;&gt;Alain Frisch&lt;/a&gt; has proposed and implemented a more powerful extension to OCaml, &lt;a href=&quot;http://www.lexifi.com/blog/static-exceptions&quot;&gt;Static Exceptions&lt;/a&gt;, which allow transfer of control to lexically-visible handlers (along the lines of Common Lisp's &lt;a href=&quot;http://clhs.lisp.se/Body/s_block.htm#block&quot;&gt;&lt;code&gt;block&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://clhs.lisp.se/Body/s_ret_fr.htm#return-from&quot;&gt;&lt;code&gt;return-from&lt;/code&gt;&lt;/a&gt;).  Static exceptions are based on an equivalent feature in OCaml's intermediate language.&lt;/p&gt;

&lt;p&gt;There is a straightforward translation from OCaml extended with handler case into OCaml extended with static exceptions by wrapping the body of each &lt;code&gt;try&lt;/code&gt; expression in &lt;code&gt;raise (`Val (...))&lt;/code&gt;, and changing the &lt;code&gt;val&lt;/code&gt; keyword in the binding section to &lt;code&gt;`Val&lt;/code&gt;.  For example, &lt;code&gt;iter_stream&lt;/code&gt; can be written using static exceptions as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;End_of_stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, static exceptions allow many other programs to be expressed that are not readily expressible using handler case.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;catch-me&quot;&gt;&lt;/a&gt;
In their 2008 paper &lt;a href=&quot;http://www.univ-orleans.fr/lifo/Members/David.Teller/publications/ml2008.pdf&quot;&gt;Catch me if you can: Towards type-safe, hierarchical, lightweight, polymorphic and efficient error management in OCaml&lt;/a&gt; David Teller Arnaud Spiwack and Till Varoquaux added an &lt;code&gt;attempt&lt;/code&gt; keyword to OCaml that extends &lt;code&gt;match&lt;/code&gt;-style pattern matching with both a single optional value case and an optional &lt;code&gt;finally&lt;/code&gt; clause.&lt;/p&gt;

&lt;p&gt;Finally, I discovered while writing this article that Christophe Raffalli proposed the handler case design fifteen years ago in a &lt;a href=&quot;http://caml.inria.fr/pub/ml-archives/caml-list/1999/12/a6d3ce9671b16a33530035c2b42df011.en.html&quot;&gt;message to caml-list&lt;/a&gt;!  Christophe's proposal wasn't picked up back then, but perhaps the time has now come to give OCaml programmers a way to handle success.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;match-exception&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Postscript: a symmetric extension&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;try&lt;/code&gt; construct in current OCaml supports matching against raised exceptions but not against the value produced when no exception is raised.  Contrariwise, the &lt;code&gt;match&lt;/code&gt; construct supports matching against the value produced when no exception is raised, but does not support matching against raised exceptions.  As implemented, the patch addresses this asymmetry, extending &lt;code&gt;match&lt;/code&gt; with clauses that specify the &amp;quot;failure continuation&amp;quot;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_1&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_n&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_1'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_1'&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_n'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr_n'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this additional extension the choice between &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;try&lt;/code&gt; becomes purely stylistic.  We might optimise for succinctness, and use &lt;code&gt;try&lt;/code&gt; in the case where exceptions are expected (for example, where they're used for control flow), reserving &lt;code&gt;match&lt;/code&gt; for the case where exceptions are truly exceptional.&lt;/p&gt;

&lt;p&gt;For the sake of completeness, here's &lt;code&gt;iter_stream&lt;/code&gt; written with the extended &lt;code&gt;match&lt;/code&gt; construct:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;iter_stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;End_of_stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since both &lt;code&gt;val&lt;/code&gt; and &lt;code&gt;exception&lt;/code&gt; are existing keywords, the extensions to both &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; are fully backwards compatible. &lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2014/02/04/handler-case</id><title type="text">How to handle success</title><updated>2014-02-04T16:05:05+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2014/01/07/ocaml-the-bugs-so-far/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;OCaml&amp;rsquo;s static typing allows it to detect many problems at compile-time. Still, some bugs slip though. In this post, I go over each discovered bug that made it into a Git commit and try to work out why it happened and whether it could have been prevented.&lt;/p&gt;



&lt;p&gt;Note: As this post is entirely about bugs, it may appear rather negative. So let me say first that, overall, I&amp;rsquo;ve been very impressed with the reliability of the OCaml code: I&amp;rsquo;d have expected to find more bugs than this in 27,806 lines of new code!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#methodology&quot;&gt;Methodology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#core-ocaml-issues&quot;&gt;Core OCaml issues&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#out-of-range-integers&quot;&gt;Out-of-range integers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#fails-to-start-on-windows&quot;&gt;Fails to start on Windows&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#spawning-a-daemon-fails-on-windows&quot;&gt;Spawning a daemon fails on Windows&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#install-select-ignores---refresh&quot;&gt;0install select ignores &lt;code&gt;--refresh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#not-found-errors&quot;&gt;Not found errors&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#octal-value&quot;&gt;Octal value&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#parsing-a-path-as-a-url&quot;&gt;Parsing a path as a URL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#interrupted-waitpid&quot;&gt;Interrupted waitpid&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#http-redirects-with-data-cause-corrupted-downloads&quot;&gt;HTTP redirects with data cause corrupted downloads&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#setting-wrong-mtime&quot;&gt;Setting wrong mtime&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#strict-sequences&quot;&gt;Strict sequences&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#lwt-related-bugs&quot;&gt;Lwt-related bugs&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#lwt-process-fails-with-empty-string&quot;&gt;Lwt process fails with empty string&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#epipe-on-windows&quot;&gt;EPIPE on Windows&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#deleting-temporary-files&quot;&gt;Deleting temporary files&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#race-shutting-down-test-http-server&quot;&gt;Race shutting down test HTTP server&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#reactive-event-handler-gets-garbage-collected&quot;&gt;Reactive event handler gets garbage collected&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#stuck-reading-output-from-subprocess&quot;&gt;Stuck reading output from subprocess&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#downloads-never-complete&quot;&gt;Downloads never complete&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#event-loop-doesnt-work-on-os-x&quot;&gt;Event loop doesn&amp;rsquo;t work on OS X&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#curl-related-bugs&quot;&gt;Curl-related bugs&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#failing-to-reset-curl-connections&quot;&gt;Failing to reset Curl connections&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#error-with-cancelled-downloads&quot;&gt;Error with cancelled downloads&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#gtk-bugs&quot;&gt;GTK bugs&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#sorted-treeview-iter-mix-up&quot;&gt;Sorted treeview iter mix-up&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#crashes-with-gtkiconview&quot;&gt;Crashes with GtkIconView&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#logic-errors&quot;&gt;Logic errors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#python-bugs&quot;&gt;Python bugs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;( This post is part of a series in which I am
&lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install&quot;&gt;converting 0install from Python to OCaml&lt;/a&gt;, learning OCaml as I go. The code is at &lt;a href=&quot;https://github.com/0install/0install&quot;&gt;GitHub/0install&lt;/a&gt;. )&lt;/p&gt;

&lt;h2&gt;Methodology&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve gone back through the Git commit log and selected all the ones that say they fix a bug in the comment, starting from when I merged the initial OCaml code to master (on 2013-07-03). It&amp;rsquo;s possible that I sneakily fixed some bugs while making other changes, but this should cover most of them. Any bug that made it into a released version of 0install should certainly have its own commit because it would have to go on the release branch. I also included a few &amp;ldquo;near misses&amp;rdquo; (bugs I spotted before committing, but which I could plausibly have missed).&lt;/p&gt;

&lt;p&gt;In a number of cases, I wrote and committed the new OCaml code first, and then ported the Python unit-tests in a later commit and discovered the bug that way (so some of these could never have made it into an actual release). Compile-time bugs have been ignored (e.g. code that didn&amp;rsquo;t compile on older versions of OCaml); I&amp;rsquo;m only interested in run-time errors here.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve classified each bug as follows:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Inexperience&lt;/dt&gt;
  &lt;dd&gt;This bug was caused by my inexperience with OCaml. Making proper use of OCaml&amp;rsquo;s features would avoid this class of bug entirely.&lt;/dd&gt;
  &lt;dt&gt;Third-party&lt;/dt&gt;
  &lt;dd&gt;Caused by a bug in a library I was using (and hopefully now fixed). Could only have been discovered by testing.&lt;/dd&gt;
  &lt;dt&gt;Poor API&lt;/dt&gt;
  &lt;dd&gt;This bug was my fault, but could have been avoided if the library had a better API.&lt;/dd&gt;
  &lt;dt&gt;Warning needed&lt;/dt&gt;
  &lt;dd&gt;My fault, but the compiler could have detected the problem and issued a warning.&lt;/dd&gt;
  &lt;dt&gt;Testing only&lt;/dt&gt;
  &lt;dd&gt;I only know how to find such bugs through testing. Similar bugs could happen again.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Core OCaml issues&lt;/h2&gt;

&lt;p&gt;Note: I&amp;rsquo;m grouping the bugs by the library the code was interacting with, regardless of whether that library was at fault. This section is for bugs that occurred when just using OCaml itself and its standard library.&lt;/p&gt;

&lt;h3&gt;Out-of-range integers&lt;/h3&gt;

&lt;p&gt;Everything seemed to be working nicely on my Arch system, but the first run on a Debian VM gave this unhelpful error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failure &amp;quot;int_of_string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was trying to store a Unix timestamp in an &lt;code&gt;int&lt;/code&gt;. Unlike Python, OCaml&amp;rsquo;s integers are limited precision, having 1 bit less than the machine word size. The 32-bit VM only had 31-bit integers and the time value was out of range for it.&lt;/p&gt;

&lt;p&gt;This was entirely my fault. OCaml always uses floats to represent times, and they work fine. I was just converting to ints to be consistent with the Python code.&lt;/p&gt;

&lt;p&gt;However, the error message is very poor. I replaced all calls to &lt;code&gt;int_of_string&lt;/code&gt; with my own version, which at least displays the number it was trying to convert. This should make debugging any similar problems easier in future.&lt;/p&gt;

&lt;p&gt;Type: Inexperience&lt;/p&gt;

&lt;h3&gt;Fails to start on Windows&lt;/h3&gt;

&lt;p&gt;Windows kept complaining that my program didn&amp;rsquo;t exist and to check that the path was correct, even when I was double-clicking on the executable in Explorer!
Turns out, Windows refuses to run binaries with certain character sequences in their names (&amp;ldquo;instal&amp;rdquo; being one such sequence). See &lt;a href=&quot;http://social.msdn.microsoft.com/forums/en-US/windowssecurity/thread/73f86e9e-928f-40b7-8dd5-27e40db6997e/&quot;&gt;Vista doesn&amp;rsquo;t start application called &amp;ldquo;install&amp;rdquo; w/o being elevated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Solution: you have to embed an XML &amp;ldquo;manifest&amp;rdquo; in Windows binaries to avoid this behaviour. Would be nice if OCaml did that automatically for you.&lt;/p&gt;

&lt;p&gt;Type: Third-party&lt;/p&gt;

&lt;h3&gt;Spawning a daemon fails on Windows&lt;/h3&gt;

&lt;p&gt;Windows doesn&amp;rsquo;t have &lt;code&gt;fork&lt;/code&gt;, so the usual double-fork trick doesn&amp;rsquo;t work.
Solution: Use &lt;code&gt;create_process&lt;/code&gt; on Windows.&lt;/p&gt;

&lt;p&gt;Would be nice if OCaml grouped all the POSIX-only functions together and made you check which platform you were on. Then you&amp;rsquo;d know when you were using platform-specific functions. e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform_specific_ops&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;POSIX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Windows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Type: Poor API&lt;/p&gt;

&lt;h3&gt;0install select ignores &lt;code&gt;--refresh&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I forget to handle the &lt;code&gt;Refresh&lt;/code&gt; case for the &amp;ldquo;select&amp;rdquo; command.
Different commands need to handle different subsets of the options. I was using a plain variant (enum) type and throwing an exception if I got an option I wasn&amp;rsquo;t expecting:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Argparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShowXML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raise_safe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Unknown option&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;(Note: Several people have asked why I used a default match case here. It&amp;rsquo;s needed because there are many options that don&amp;rsquo;t apply to the &amp;ldquo;select&amp;rdquo; command. The option parser makes sure that each sub-command&amp;rsquo;s handler function is only called with options it claims to support.)&lt;/p&gt;

&lt;p&gt;Solution: I switched from plain variants to polymorphic variants and removed the default case. Now, the type-checker verifies at compile-time that each subcommand handles all its options:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Argparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ShowXML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;See &lt;a href=&quot;http://roscidus.com/blog/blog/2013/08/31/option-handling-with-ocaml-polymorphic-variants/&quot;&gt;Option Handling With OCaml Polymorphic Variants&lt;/a&gt; for a write-up of that.&lt;/p&gt;

&lt;p&gt;Type: Inexperience&lt;/p&gt;

&lt;h3&gt;Not found errors&lt;/h3&gt;

&lt;p&gt;When printing diagnostics about a failed solve, we check each interface to see if it has a replacement that it conflicts with. e.g. the new &amp;ldquo;Java&amp;rdquo; interface replaces (and conflicts with) the old &amp;ldquo;Java 6&amp;rdquo; interface. But if the conflicting interface wasn&amp;rsquo;t used in the solve, we&amp;rsquo;d crash with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Exception: Not_found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use a lot of maps with strings as the keys. I therefore created a &lt;code&gt;StringMap&lt;/code&gt; module in my &lt;code&gt;common.ml&lt;/code&gt; file like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;StringMap.find&lt;/code&gt; raises &lt;code&gt;Not_found&lt;/code&gt; if the key isn&amp;rsquo;t found, which is never what you want. These exceptions are awkward to deal with and it&amp;rsquo;s easy to forget to handle them.&lt;/p&gt;

&lt;p&gt;A nice solution is to replace the definition with:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This redefines the &lt;code&gt;find&lt;/code&gt; method to return an option type. Now you can&amp;rsquo;t do a &lt;code&gt;StringMap.find&lt;/code&gt; without the compiler forcing you to consider the case of the key not being there.&lt;/p&gt;

&lt;p&gt;Would be nice if the OCaml standard library did this. Perhaps providing a &lt;code&gt;Map.get&lt;/code&gt; function with the new behaviour and deprecating &lt;code&gt;Map.find&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Type: Poor API&lt;/p&gt;

&lt;h3&gt;Octal value&lt;/h3&gt;

&lt;p&gt;I used &lt;code&gt;0700&lt;/code&gt; instead of &lt;code&gt;0o700&lt;/code&gt; to set a file mode. Would be nice if OCaml warned about decimals that start with 0, as Python 3 does.&lt;/p&gt;

&lt;p&gt;Type: Warning needed&lt;/p&gt;

&lt;h3&gt;Parsing a path as a URL&lt;/h3&gt;

&lt;p&gt;This didn&amp;rsquo;t actually get committed, but it&amp;rsquo;s interesting anyway. Downloaded feeds are signed with GPG keys, which are trusted only for their particular domains. At one point, I used &lt;code&gt;Trust.domain_from_url feed.url&lt;/code&gt; to get the domain. It was defined as:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain_from_url&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;However, feeds come in different types: there are remote feeds with URLs, and local feeds with local paths (there are also virtual &amp;ldquo;distribution&amp;rdquo; feeds representing the output from the distribution&amp;rsquo;s package manager).&lt;/p&gt;

&lt;p&gt;I was trying to get the trust domain for all feeds, not just remote ones where it makes sense.&lt;/p&gt;

&lt;p&gt;Once again, the solution was to use polymorphic variants. The three different types of feed get three different constructors. A method (such as &lt;code&gt;domain_from_url&lt;/code&gt;) that only works on remote feeds is declared as:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain_from_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remote_feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Then, it&amp;rsquo;s impossible to call it without first ensuring you&amp;rsquo;ve got a remote feed URL.&lt;/p&gt;

&lt;p&gt;This change also improves the type-safety of many other parts of the code (e.g. you can&amp;rsquo;t try to download a local feed now either), and uncovered another bug: you couldn&amp;rsquo;t use the GUI to set the stability rating for a distribution-provided implementation, because one of the functions used only worked for non-distribution feeds.&lt;/p&gt;

&lt;p&gt;Type: Inexperience (x2)&lt;/p&gt;

&lt;h3&gt;Interrupted waitpid&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Unix.waitpid&lt;/code&gt; function can raise &lt;code&gt;EINTR&lt;/code&gt; if the system call is interrupted, although the documentation doesn&amp;rsquo;t mention this. It would be nice if OCaml would automatically restart the call in this case (as Python&amp;rsquo;s &lt;code&gt;subprocess&lt;/code&gt; module does).&lt;/p&gt;

&lt;p&gt;Type: Poor API&lt;/p&gt;

&lt;h3&gt;HTTP redirects with data cause corrupted downloads&lt;/h3&gt;

&lt;p&gt;We download to a temporary file. If we get an HTTP redirect, we truncate the file and try the new address. However, &lt;code&gt;ftruncate&lt;/code&gt; doesn&amp;rsquo;t reset the position in the file. So, if the redirecting site sent any data in its reply, you&amp;rsquo;d get that many zeroes at the start of the download. As with &lt;code&gt;waitpid&lt;/code&gt;, OCaml&amp;rsquo;s behaviour is standard POSIX, but not mentioned in the OCaml documentation.&lt;/p&gt;

&lt;p&gt;Solution: &lt;code&gt;seek_out ch 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, I updated the test server used in the unit-tests to send back some data when doing a redirect.&lt;/p&gt;

&lt;p&gt;Type: Testing only&lt;/p&gt;

&lt;h3&gt;Setting wrong mtime&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Unix.utimes&lt;/code&gt; is supposed to set the mtime and atime of a file to the given values. However, the behaviour is a little odd:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When 1 &amp;lt;= time &amp;lt; infinity, it sets it to the requested time.&lt;/li&gt;
  &lt;li&gt;When 0 &amp;lt;= time &amp;lt; 1 however, it sets it to the current time instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s a problem for us, because we often use &amp;ldquo;0&amp;rdquo; as the time for files which don&amp;rsquo;t have a timestamp, and the time is part of the secure hashes we calculate.&lt;/p&gt;

&lt;p&gt;Solution: I wrote a C function to allow setting the time to whatever value you like.&lt;/p&gt;

&lt;p&gt;This bug didn&amp;rsquo;t make it into a commit because I hit it while writing a test script (I was trying to reset a timestamp file to time zero), and the unit-tests would have caught it if not, but it&amp;rsquo;s still a poor API. Not only does it fail to use a variant type to handle different cases, but it chooses a magic value that&amp;rsquo;s a valid input!&lt;/p&gt;

&lt;p&gt;Or, rather than using a variant type for these two cases, it could just drop the magic current time feature completely - it&amp;rsquo;s easy enough to read the current time and pass it explicitly if you need it. That would make the code clearer too.&lt;/p&gt;

&lt;p&gt;(note: the documentation does say &amp;ldquo;A time of 0.0 is interpreted as the current time&amp;rdquo;, but it&amp;rsquo;s easy to forget this if it wasn&amp;rsquo;t relevant the first time you read the docs)&lt;/p&gt;

&lt;p&gt;Type: Poor API&lt;/p&gt;

&lt;h3&gt;Strict sequences&lt;/h3&gt;

&lt;p&gt;This didn&amp;rsquo;t make it into a commit, but it&amp;rsquo;s interesting anyway. Simplified version of the problem:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;START&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;END&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello %s!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This prints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;START
END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why is there no warning? You might expect OCaml would infer the type of &lt;code&gt;fn&lt;/code&gt; as &lt;code&gt;unit -&amp;gt; unit&lt;/code&gt; and then complain that the function we pass has the wrong type (&lt;code&gt;unit -&amp;gt; string -&amp;gt; unit&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In fact, although OCaml warns if you ignore the result of a function that doesn&amp;rsquo;t return unit, it&amp;rsquo;s not actually an error. So it actually infers the type of &lt;code&gt;fn&lt;/code&gt; as (&lt;code&gt;unit -&amp;gt; 'a&lt;/code&gt;), and it compiles fine.&lt;/p&gt;

&lt;p&gt;Solution: always compile with &lt;code&gt;-strict-sequence&lt;/code&gt; (or put &lt;code&gt;true: strict_sequence&lt;/code&gt; in your &lt;code&gt;_tags&lt;/code&gt; file)&lt;/p&gt;

&lt;p&gt;Type: Inexperience&lt;/p&gt;

&lt;h2&gt;Lwt-related bugs&lt;/h2&gt;

&lt;h3&gt;Lwt process fails with empty string&lt;/h3&gt;

&lt;p&gt;When spawning a process, the Lwt docs say you can pass an empty string as the binary to run and it will search for the first argument in &lt;code&gt;$PATH&lt;/code&gt; for you. However, that behaviour was added only in Lwt 2.4 and using the older version in Debian it failed at runtime with a confusing error.&lt;/p&gt;

&lt;p&gt;Probably I should have been reading the old version of the docs (which the web-site helpfully lets you do).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m classifying this as a poor API because it was caused by using &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; as a magic value, rather than defining a new constructor function.&lt;/p&gt;

&lt;p&gt;Type: Poor API&lt;/p&gt;

&lt;h3&gt;EPIPE on Windows&lt;/h3&gt;

&lt;p&gt;On Windows, we couldn&amp;rsquo;t read the output of GnuPG. This was due to a bug in Lwt, which they quickly fixed:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ocsigen/lwt/issues/20&quot;&gt;Lwt_io.read fails on Windows with EPIPE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type: Third-party&lt;/p&gt;

&lt;h3&gt;Deleting temporary files&lt;/h3&gt;

&lt;p&gt;We download various files to a temporary directory. In some cases, they weren&amp;rsquo;t being deleted afterwards.&lt;/p&gt;

&lt;p&gt;Solution: the downloader now takes a mandatory Lwt switch and deletes the file when the switch is turned off. Callers just have to wrap the download call in a &lt;code&gt;try ... finally&lt;/code&gt; block, like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;try_lwt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match_lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downloader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network_failure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raise_safe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aborted_by_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Aborted&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;import_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Lwt_switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turn_off&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;To make this completely foolproof, you&amp;rsquo;d need something like the linear types from Rust or ATS, but this is good enough for me.&lt;/p&gt;

&lt;p&gt;Type: Inexperience&lt;/p&gt;

&lt;h3&gt;Race shutting down test HTTP server&lt;/h3&gt;

&lt;p&gt;Some of the unit tests run a simple HTTP server. When the test is over, they use &lt;code&gt;Lwt.cancel&lt;/code&gt; to kill it. However, it appears that this call is unreliable: depending on exactly what the server is doing at the time it might just ignore it and continue.&lt;/p&gt;

&lt;p&gt;Solution: we both cancel the task &lt;em&gt;and&lt;/em&gt; set a boolean flag, which we test just before calling &lt;code&gt;accept&lt;/code&gt;. If we&amp;rsquo;re in &lt;code&gt;accept&lt;/code&gt; at the time of the cancel, the thread will abort correctly. If it&amp;rsquo;s anywhere else, it may continue handling the current request, but will quit as soon as it finishes and checks the flag.&lt;/p&gt;

&lt;p&gt;Would perhaps be nice if Lwt remembered that an attempt was made to cancel the thread during a non-cancellable operation, and killed it at the next opportunity.&lt;/p&gt;

&lt;p&gt;Type: Poor API&lt;/p&gt;

&lt;p&gt;A related race occurred if we spawned a child process while handling an HTTP request, because the child would inherit the client socket and it would never get closed.&lt;/p&gt;

&lt;p&gt;Solution: Use &lt;code&gt;Lwt_unix.set_close_on_exec connection&lt;/code&gt; as soon as the connection is accepted.&lt;/p&gt;

&lt;p&gt;Note that both these hacks should be race-free, because Lwt is cooperatively multi-threaded (e.g. we can&amp;rsquo;t spawn a subprocess between accepting a connection and marking it &lt;code&gt;close_on_exec&lt;/code&gt;). I think.&lt;/p&gt;

&lt;p&gt;Ideally, when spawning a child process you&amp;rsquo;d specify the file descriptors you wanted it to inherit explicitly (Go does this, but really it needs to be at the POSIX level).&lt;/p&gt;

&lt;p&gt;Type: Testing only&lt;/p&gt;

&lt;p&gt;(although these bugs only occurred in the unit-tests, I&amp;rsquo;m including them because they could just as easily appear in the main code)&lt;/p&gt;

&lt;h3&gt;Reactive event handler gets garbage collected&lt;/h3&gt;

&lt;p&gt;The OCaml D-BUS bindings use &lt;a href=&quot;http://erratique.ch/software/react/doc/React&quot;&gt;functional reactive programming&lt;/a&gt; to report property values.
The idea is that you get an object representing the continuously-varying value of the property, rather than a particular sample of it.
Then you can handle the signal as a whole (for example, you can get the &amp;ldquo;progress&amp;rdquo; signal from a PackageKit transaction and pass it to a GUI progress monitor widget, so that the widget always shows the current progress).
You can build up chains of signal processors. For example, you might transform a &amp;ldquo;bytes downloaded&amp;rdquo; signal into a &amp;ldquo;percentage complete&amp;rdquo; one.&lt;/p&gt;

&lt;p&gt;The technique seems to come from Haskell. Being purely functional, it&amp;rsquo;s always safe to garbage collect a signal if no-one is holding a reference to it.&lt;/p&gt;

&lt;p&gt;However, OCaml is not purely functional. You might easily want to evaluate a signal handler for its side-effects.
I created a handler to monitor the transaction status signal to see when it was finished, and attached the resulting signal to a &lt;code&gt;Lwt_switch&lt;/code&gt;.
My plan was that the switch would keep it alive until it fired.
That didn&amp;rsquo;t work, because there was a subtle circular reference in the whole scheme, and OCaml would sometimes garbage-collect the handler and the switch. Then the process would ignore the finished event and appear to hang. I asked on StackOverflow and got some suggestions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19975140/how-to-stop-ocaml-garbage-collecting-my-reactive-event-handler&quot;&gt;How to stop OCaml garbage collecting my reactive event handler?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The solution seems to be to keep references to all active signals in a global variable. Rather messy.&lt;/p&gt;

&lt;p&gt;Type: Testing only&lt;/p&gt;

&lt;h3&gt;Stuck reading output from subprocess&lt;/h3&gt;

&lt;p&gt;When using the &lt;code&gt;Lwt_glib&lt;/code&gt; module to integrate with the GTK mainloop, the &lt;code&gt;HUP&lt;/code&gt; response from &lt;code&gt;poll&lt;/code&gt; is ignored. This means that it will call &lt;code&gt;poll&lt;/code&gt; endlessly in a tight loop.
&lt;a href=&quot;https://github.com/ocsigen/lwt/commit/a9a7a5b7a3a7093b78e5ec4f5119f1f44d1f3527&quot;&gt;Patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type: Third-party&lt;/p&gt;

&lt;h3&gt;Downloads never complete&lt;/h3&gt;

&lt;p&gt;When using &lt;code&gt;Lwt_glib&lt;/code&gt;, downloads may never complete. This is because OCaml, like Python, has a global lock and &lt;code&gt;Lwt_glib&lt;/code&gt; fails to release it when calling &lt;code&gt;poll&lt;/code&gt;. Therefore, no other thread (such as the download thread) can make progress while the main thread is waiting (e.g. for the download thread to finish).
&lt;a href=&quot;https://github.com/ocsigen/lwt/commit/a9a7a5b7a3a7093b78e5ec4f5119f1f44d1f3527&quot;&gt;Patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type: Third-party&lt;/p&gt;

&lt;h3&gt;Event loop doesn&amp;rsquo;t work on OS X&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Lwt_glib&lt;/code&gt; passes &lt;code&gt;-1000&lt;/code&gt; to &lt;code&gt;poll&lt;/code&gt; to mean &amp;ldquo;no timeout&amp;rdquo;. This works on Linux, but not on BSD-type systems.
&lt;a href=&quot;https://github.com/ocsigen/lwt/commit/062bea739187dbd3b36e8587a35fce35b2ba4073&quot;&gt;Patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type: Third-party&lt;/p&gt;

&lt;h2&gt;Curl-related bugs&lt;/h2&gt;

&lt;h3&gt;Failing to reset Curl connections&lt;/h3&gt;

&lt;p&gt;For efficiency, Curl encourages the reuse of connections. However, I forgot to reset some parameters (max file size and expected modification time). If the next call didn&amp;rsquo;t use them, it would reuse the old values and possibly fail.&lt;/p&gt;

&lt;p&gt;Newer versions of ocurl have a &lt;code&gt;reset&lt;/code&gt; function, which avoids these problems.&lt;/p&gt;

&lt;p&gt;Type: Poor API&lt;/p&gt;

&lt;h3&gt;Error with cancelled downloads&lt;/h3&gt;

&lt;p&gt;Downloads were sometimes failing with this confusing error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;easy handled already used in multi handle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It happened when reusing connections (which Curl encourages, for efficiency).
There was no direct way to cancel a download, so I handled cancellation by closing the channel the download was writing to.
Then, next time some data arrived, my write callback would fail to write the new data and throw an exception, aborting the download.
It turned out that this was leaving the connection in an invalid state.&lt;/p&gt;

&lt;p&gt;Solution: return 0 from the handler instead of throwing an exception.&lt;/p&gt;

&lt;p&gt;Ideally, ocurl should catch exceptions from callbacks and allow the C code to clean up properly. &lt;a href=&quot;https://forge.ocamlcore.org/plugins/scmgit/cgi-bin/gitweb.cgi?p=ocurl/ocurl.git%3Ba=commitdiff%3Bh=813e4254cab1c5f1cc806f9aa537c6deff61466f&quot;&gt;Now fixed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Type: Third-party&lt;/p&gt;

&lt;h2&gt;GTK bugs&lt;/h2&gt;

&lt;h3&gt;Sorted treeview iter mix-up&lt;/h3&gt;

&lt;p&gt;(I caught this before committing it, but it&amp;rsquo;s a nasty bug that could easily be missed. It was present for a while in the original Python version.)&lt;/p&gt;

&lt;p&gt;The cache explorer dialog allows you to delete implementations from the cache by selecting an item and pressing the Delete button.
It also allows you to sort the table by clicking on the column headings.
However, if you sort the table and then delete something, it deletes the wrong thing!&lt;/p&gt;

&lt;p&gt;To make a sortable table (which is just a special case of a tree to GTK), you first create an underlying (unsorted) list model, then wrap it with a sorted model, then pass that to the display widget (GtkTreeView), like so:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_store&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorted_model&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;To do things with the model, you pass it a GtkTreeIter, which says which item you want to act on, e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The trouble is, sorted and unsorted GtkTreeIters both have the same type, so you can easily pass an iterator of the sorted model as an argument to the unsorted model.
Then it will act on the wrong item.
If the view isn&amp;rsquo;t sorted then everything works fine, so you might not notice the problem while testing.&lt;/p&gt;

&lt;p&gt;Solution: I created a new module for unsorted lists. The implementation (&lt;code&gt;unsorted_list.ml&lt;/code&gt;) just proxies calls to the real code:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;unsorted_list.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_store&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Gtk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree_iter&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_store&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_store&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_iter_first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_iter_first&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_iter_to_child_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Gtk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_iter_to_child_iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;However, the interface (&lt;code&gt;unsorted_list.mli&lt;/code&gt;) makes the types &lt;code&gt;t&lt;/code&gt; (the model) and &lt;code&gt;iter&lt;/code&gt; (its &lt;code&gt;GtkTreeIter&lt;/code&gt;s) abstract, so that code outside of the module isn&amp;rsquo;t allowed to know their real types:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;unsorted_list.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_sort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_sort&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_iter_first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert_iter_to_child_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_sort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Gtk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Now it&amp;rsquo;s impossible to mix up sorted and unsorted types:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Unsorted_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_store&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;(* Unsorted_list.t *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Unsorted_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_sort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* GTree.model *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorted_model&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s still possible to mix up iterators in some cases (e.g. between two different instances of a sorted model), but that&amp;rsquo;s a much less likely mistake to make.&lt;/p&gt;

&lt;p&gt;Another way to solve the problem would be to bundle the owning model with each iterator, but that would be a big change to how the underlying GTK library works.
And ATS could solve this easily using its dependant types, by declaring the iterator type as &lt;code&gt;iter(m)&lt;/code&gt; (&amp;ldquo;iterator of model at address m&amp;rdquo;), linking models to iterators in the type system.&lt;/p&gt;

&lt;p&gt;Type: Poor API&lt;/p&gt;

&lt;h3&gt;Crashes with GtkIconView&lt;/h3&gt;

&lt;p&gt;As with GtkTreeView, you can make a sorted GtkIconView with a pair of models.
For some reason, clearing the underlying model didn&amp;rsquo;t clear the sorted version, and repopulating it corrupted memory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Program received signal SIGSEGV, Segmentation fault.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Solution: since there is no UI to let the user change the sort column, I just removed the sorted model and sorted the underlying model myself in OCaml. I guess this is probably a GTK bug.&lt;/p&gt;

&lt;p&gt;Type: Third-party&lt;/p&gt;

&lt;p&gt;A second crashing bug with GtkIconView is caused by a bug in lablgtk.
The C wrapper &lt;code&gt;get_path_at_pos&lt;/code&gt; returns a &lt;code&gt;tree_path option&lt;/code&gt; (&lt;code&gt;None&lt;/code&gt; if you clicked in a blank area), but the OCaml declaration says it returns a plain &lt;code&gt;tree_path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Solution: use &lt;code&gt;Obj.magic&lt;/code&gt; to do an unchecked cast to the correct type:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_unsafe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_path_at_pos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Gtk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree_path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;(reported as &lt;a href=&quot;https://forge.ocamlcore.org/tracker/index.php?func=detail&amp;amp;aid=1359&amp;amp;group_id=220&amp;amp;atid=1032&quot;&gt;segfault due to GtkIconView type mismatch&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Two interesting things about this bug:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Even the low-level GTK bindings are presumably not generated automatically. If they were, this kind of mismatch surely couldn&amp;rsquo;t happen.&lt;/li&gt;
  &lt;li&gt;An OCaml optional pointer doesn&amp;rsquo;t have the same representation as a non-optional pointer. If it did, the code wouldn&amp;rsquo;t crash. This suggests OCaml is being a bit inefficient about option types, which is disappointing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Type: Third-party&lt;/p&gt;

&lt;h2&gt;Logic errors&lt;/h2&gt;

&lt;p&gt;The remaining bugs aren&amp;rsquo;t very interesting, but I&amp;rsquo;ve included them for completeness:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Failed to handle ambiguous short options (e.g. &lt;code&gt;-r&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Missing tab completion for &lt;code&gt;0install add&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;0install run&lt;/code&gt; ignores &lt;code&gt;--gui&lt;/code&gt; option&lt;/li&gt;
  &lt;li&gt;Infinite loop handling recursive dependencies&lt;/li&gt;
  &lt;li&gt;Allow absolute local paths in local implementations&lt;/li&gt;
  &lt;li&gt;Default command for &lt;code&gt;--source&lt;/code&gt; should be &lt;code&gt;compile&lt;/code&gt;, not &lt;code&gt;run&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Allow &lt;code&gt;machine:null&lt;/code&gt; in JSON response&lt;/li&gt;
  &lt;li&gt;Typo: scripts start &lt;code&gt;#!&lt;/code&gt; not &lt;code&gt;!#&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Report an error if we need to confirm keys during a headless background update&lt;/li&gt;
  &lt;li&gt;Wrong attribute name in overrides XML file&lt;/li&gt;
  &lt;li&gt;Allow executing selections with no command but an absolute main&lt;/li&gt;
  &lt;li&gt;Handle local-path on &lt;code&gt;&amp;lt;group&amp;gt;&lt;/code&gt; elements&lt;/li&gt;
  &lt;li&gt;Wrong attribute name when saving user overrides&lt;/li&gt;
  &lt;li&gt;Typo: &lt;code&gt;&amp;quot;https://&amp;quot;&lt;/code&gt; not &lt;code&gt;&amp;quot;https://'&amp;quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t try to use GUI in &lt;code&gt;--dry-run&lt;/code&gt; mode&lt;/li&gt;
  &lt;li&gt;Support old version of selections XML format&lt;/li&gt;
  &lt;li&gt;Support old selections without a &lt;code&gt;from-feed&lt;/code&gt; attribute&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t send an empty GetDetails request to PackageKit&lt;/li&gt;
  &lt;li&gt;Cope with dpkg-query returning a non-zero exit status&lt;/li&gt;
  &lt;li&gt;Detect Python even if python-gobject is missing&lt;/li&gt;
  &lt;li&gt;Race when cancelling downloads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Type: Testing only (x21)&lt;/p&gt;

&lt;h2&gt;Python bugs&lt;/h2&gt;

&lt;p&gt;Just for interest, here are the Python bugs discovered over the same period (it doesn&amp;rsquo;t make sense to compare bug counts, because these are bugs in mature code, often several years old, not just-written new code).&lt;/p&gt;

&lt;p&gt;I think these would be impossible or unlikely in OCaml (the problem would be detected at compile time):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Error setting machine type for Cygwin packages (type error)&lt;/li&gt;
  &lt;li&gt;When loading selections from a file, convert &lt;code&gt;last-check-mtime&lt;/code&gt; attribute to an int (type error)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;UnicodeError&lt;/code&gt; extracting or generating a manifest for archives with non-ASCII file names (no encoding of file names in OCaml :-)&lt;/li&gt;
  &lt;li&gt;Crash when specifying bold text (PyGTK API change)&lt;/li&gt;
  &lt;li&gt;Broken clipboard handling in cache explorer (PyGTK API change)&lt;/li&gt;
  &lt;li&gt;Broken filtering in cache explorer (PyGTK API change)&lt;/li&gt;
  &lt;li&gt;Broken cache explorer menu when using a filter (model mix up; could avoid with abstract types, as above)&lt;/li&gt;
  &lt;li&gt;Fails running an app when the master feed is no longer cached (would be forced to handle None case in OCaml)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These would likely still be bugs in OCaml:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix mtime check in &lt;code&gt;selections.get_unavailable_selections&lt;/code&gt; for native packages&lt;/li&gt;
  &lt;li&gt;Always return False for native packages in &lt;code&gt;needs_download&lt;/code&gt; if &lt;code&gt;include_packages&lt;/code&gt; is False&lt;/li&gt;
  &lt;li&gt;Always use the prefix &amp;ldquo;xml&amp;rdquo; for the XML namespace&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t abort solving just because a local feed is missing&lt;/li&gt;
  &lt;li&gt;Escape tooltips in cache explorer&lt;/li&gt;
  &lt;li&gt;32-bit size limit in cache explorer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was a third-party bug:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Workaround for PyGTK garbage collection bug&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Despite the newness of the code, the bug-rate has been surprisingly low so far. Of the (detected) bugs that did make it past the compiler, about a sixth were due to bugs in third-party libraries, another sixth could have been avoided with better third-party APIs and a sixth we due to my inexperience with OCaml. For the remaining half, more testing is still the only way I can see to find such bugs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/bugs.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a shame that OCaml seems to have no system for deprecating old APIs. This means that poor API choices made years ago are still causing trouble today. It would be good if OCaml could flag functions as being there for historical reasons only, and issue a compiler warning if you used them. I do, however, like the fact that they stay around - breaking existing code (as Python 3 did) is not the solution either!&lt;/p&gt;

&lt;p&gt;Two of the bugs (&amp;ldquo;Deleting temporary files&amp;rdquo; and &amp;ldquo;Reactive event handler gets garbage collected&amp;rdquo;) could have been avoided if OCaml had linear types, but I have reasonable solutions to both. The XML / JSON handling bugs could have been avoided by using proper schemas, but such schemas didn&amp;rsquo;t exist (my fault).&lt;/p&gt;

&lt;p&gt;Overall, I&amp;rsquo;m pretty happy with the bug rate so far. No doubt more bugs will be discovered as the new code makes its way into the distributions and gains more users, but I think this code will be easier to maintain than the Python code, and much less likely to break silently due to changes in the language or third-party libraries.&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2014/01/07/ocaml-the-bugs-so-far/</id><title type="text">OCaml: the bugs so far</title><updated>2014-01-07T10:48:55+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="https://mirage.io/blog/decks-n-drums" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;A few months ago, partly as a stunt, mostly because we could, Anil and I put together &lt;a href=&quot;http://decks.openmirage.org/oscon13/&quot;&gt;a presentation&lt;/a&gt; for &lt;a href=&quot;http://www.oscon.com/oscon2013/&quot;&gt;OSCON'13&lt;/a&gt; about Mirage in Mirage. That is, as a self-hosting Mirage web application that served up slides using &lt;a href=&quot;http://lab.hakim.se/reveal-js/&quot;&gt;RevealJS&lt;/a&gt;. It was a bit of a hack, but it was cool (we thought!) and it worked. Several more presentations were written and given this way, at venues ranging from the &lt;a href=&quot;http://www.youtube.com/watch?v=3Jype6sP6MQ&quot;&gt;XenSummit 2013&lt;/a&gt; to &lt;a href=&quot;https://www.usenix.org/conference/foci13%E2%80%8E&quot;&gt;ACM FOCI 2013&lt;/a&gt; to the Cambridge Computer Lab's &lt;a href=&quot;http://decks.openmirage.org/cam13/&quot;&gt;MSc in Advanced Computer Science&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;a href=&quot;http://openmirage.org/blog/releasing-mirage&quot;&gt;release of Mirage 1.0&lt;/a&gt;, &lt;a href=&quot;http://github.com/mirage/ocaml-cohttp&quot;&gt;CoHTTP&lt;/a&gt;, &lt;a href=&quot;http://github.com/mirage/cowabloga&quot;&gt;Cowabloga&lt;/a&gt; and
the new &lt;a href=&quot;http://foundation.zurb.com/&quot;&gt;Zurb Foundation&lt;/a&gt; based &lt;a href=&quot;http://openmirage.org/&quot;&gt;website&lt;/a&gt;, it was time to refresh them
and as a little seasonal gift, give them a shiny new index with some actual CSS
styling. So &lt;a href=&quot;http://decks.openmirage.org/&quot;&gt;here they are&lt;/a&gt;, a set of presentations that have been given
by various members of the Mirage team over the last 6 months or so. They cover
a range of topics, from general introductions to the Xen roadmap to more
detailed technical background. And, of course, as Mirage is under constant
rapid development, some of the older content may already be outdated. But &lt;a href=&quot;http://github.com/mirage/mirage-decks&quot;&gt;the
code for the site itself&lt;/a&gt; serves as another example of a simple --
somewhat simpler than the &lt;a href=&quot;http://openmirage.org/&quot;&gt;Mirage website&lt;/a&gt; in fact -- Mirage web
application.&lt;/p&gt;

   </content><id>https://mirage.io/blog/decks-n-drums</id><title type="text">Presenting Decks</title><updated>2014-01-03T16:00:00+00:00</updated><author><email></email><name>Richard Mortier</name></author></entry><entry><link href="http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Dec%202013" rel="alternate"/><contributor><uri>http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml</uri><name>OCL Monthly News</name></contributor><content type="html">
      &lt;p&gt;This time last year in 2012, I had just
&lt;a href=&quot;http://anil.recoil.org/2012/10/19/announcing-ocaml-labs.html&quot;&gt;announced&lt;/a&gt; the
formation of a new group called &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/&quot;&gt;OCaml Labs&lt;/a&gt; in the
&lt;a href=&quot;http://www.cl.cam.ac.uk&quot;&gt;Cambridge Computer Lab&lt;/a&gt; that would combine research
and community work towards the practical application of functional programming.
An incredible year has absolutely flown by, and I've put together this post to
summarise what's gone on, and point to our future directions for 2014.&lt;/p&gt;
&lt;p&gt;The theme of our group was not to be pure research, but rather a hybrid group
that would take on some of the load of day-to-day OCaml maintenance from
&lt;a href=&quot;http://caml.inria.fr&quot;&gt;INRIA&lt;/a&gt;, as well as help grow the wider OCaml community.
To this end, all of our projects have been highly collaborative, often
involving colleagues from &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt;,
&lt;a href=&quot;http://gallium.inria.fr/&quot;&gt;INRIA&lt;/a&gt;, &lt;a href=&quot;http://janestreet.com&quot;&gt;Jane Street&lt;/a&gt;,
&lt;a href=&quot;http://www.lexifi.com/&quot;&gt;Lexifi&lt;/a&gt; and &lt;a href=&quot;http://citrix.com&quot;&gt;Citrix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post covers progress in &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml#tooling&quot;&gt;tooling&lt;/a&gt;, the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml#core_compiler&quot;&gt;compiler and
language&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml#community_efforts&quot;&gt;community efforts&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml#research_projects&quot;&gt;research
projects&lt;/a&gt; and concludes with our &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml#priorities_for_2014&quot;&gt;priorities for
2014&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Tooling&lt;/h3&gt;

&lt;p&gt;At the start of 2013, OCaml was in the interesting position of being a mature
decades-old language with a small, loyal community of industrial users who built
mission critical applications using it.  We had the opportunity to sit down
with many of them at the &lt;a href=&quot;http://caml.inria.fr/consortium/&quot;&gt;OCaml Consortium&lt;/a&gt;
meeting and prioritise where we started work.  The answer came back clearly:
while the compiler itself is legendary for its stability, the tooling around it
(such as package management) was a pressing problem.&lt;/p&gt;
&lt;h4&gt;OPAM&lt;/h4&gt;

&lt;p&gt;Our solution to this tooling was centered around the
&lt;a href=&quot;http://opam.ocaml.org&quot;&gt;OPAM&lt;/a&gt; package manager that
&lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt; released into beta just at the end of 2012, and
had its first stable release in March 2013.  OPAM differs from most system
package managers by emphasising a flexible distributed workflow that uses
version constraints to ensure incompatible libraries aren't mixed up (important
for the statically-typed OCaml that is very careful about dependencies).
Working closely with &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt; we developed a git-based
workflow to make it possible for users (both individual or industrial) to
easily build up their own package repositories and redistribute OCaml code, and
started curating the &lt;a href=&quot;https://github.com/ocaml/opam-repository&quot;&gt;package
repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The results have been satisfying: we started with an initial set of around 100 packages in
OPAM (mostly imported by the 4 developers), and ended 2013 with 587 unique packages and 2000 individual versions, with contributions from 160 individuals.  We now have a curated
&lt;a href=&quot;https://github.com/ocaml/opam-repository&quot;&gt;central package repository&lt;/a&gt; for anyone
to submit their OCaml code,
several third-party remotes are maintained (e.g. the &lt;a href=&quot;https://github.com/xapi-project/opam-repo-dev&quot;&gt;Xen Project&lt;/a&gt;
and &lt;a href=&quot;https://github.com/ocsigen/opam-ocsigen&quot;&gt;Ocsigen&lt;/a&gt;).  We also regularly
receive releases of the &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Core&lt;/a&gt; libraries
from Jane Street, and updates from sources as varied as &lt;a href=&quot;https://github.com/ocaml/opam-repository/pull/1300&quot;&gt;Facebook&lt;/a&gt;,
&lt;a href=&quot;http://anil.recoil.org/2013/09/16/camlpdf-the-end-of-sucky-pdf-tools.html&quot;&gt;Coherent PDF&lt;/a&gt;,
to the &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/slides/guha.pdf&quot;&gt;Frenetic SDN&lt;/a&gt; research.&lt;/p&gt;
&lt;p&gt;A notable contribution from OCamlPro during this time was to
&lt;a href=&quot;https://github.com/ocaml/opam-repository/issues/955&quot;&gt;clarify&lt;/a&gt; the licensing on
the package repository to be the liberal
&lt;a href=&quot;http://creativecommons.org/choose/zero/&quot;&gt;CC0&lt;/a&gt;, and also to pass ownership to
the &lt;a href=&quot;http://github.com/ocaml&quot;&gt;OCaml&lt;/a&gt; organization on GitHub, where it's now
jointly maintained by OCaml Labs, OCamlPro and anyone else that wishes to
contribute.&lt;/p&gt;
&lt;h4&gt;A lens into global OCaml code&lt;/h4&gt;

&lt;p&gt;It's been quite interesting just watching all the varied code fly into the
repository, but stability quickly became a concern as the new packages piled
up.  OCaml compiles to native code on not just x86, but also PowerPC, Sparc and
&lt;a href=&quot;http://anil.recoil.org/2012/02/25/dreamplug-debian-and-ocaml.html&quot;&gt;ARM&lt;/a&gt; CPUs.
We kicked off various efforts into automated testing: firstly &lt;a href=&quot;https://github.com/dsheets&quot;&gt;David Sheets&lt;/a&gt;
built the
&lt;a href=&quot;http://anil.recoil.org/2013/09/09/ocamlot-autotriaging.html&quot;&gt;OCamlot&lt;/a&gt; daemon
that would schedule builds across all the exotic hardware. Later in the year,
the &lt;a href=&quot;http://travis-ci.org&quot;&gt;Travis&lt;/a&gt; service launched support for testing from GitHub pull requests,
and this became the front line of &lt;a href=&quot;http://anil.recoil.org/2013/09/30/travis-and-ocaml.html&quot;&gt;automated
checking&lt;/a&gt; for all
incoming new packages to OPAM.&lt;/p&gt;
&lt;p&gt;A major headache with automated testing is usually setting up the right build
environment with external library dependencies, and so we &lt;a href=&quot;http://anil.recoil.org/2013/11/15/docker-and-opam.html&quot;&gt;added Docker
support&lt;/a&gt; to make it
easier to bulk-build packages for local developer use, with the results of
builds available &lt;a href=&quot;https://github.com/avsm/opam-bulk-logs&quot;&gt;publically&lt;/a&gt; for
anyone to help triage.  Unfortunately fixing the bugs themselves is still a
&lt;a href=&quot;https://github.com/ocaml/opam-repository/issues/1304&quot;&gt;very manual process&lt;/a&gt;, so
more volunteers are always welcome to help out!&lt;/p&gt;
&lt;p&gt;We're going to be really seeing the rewards from all this effort as OCaml
4.02 development proceeds, since we can now adopt a data-driven approach
to changing language features instead of guessing how much third-party
code will break.  If your code is in OPAM, then it'll be tested as new
features such as &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6063&quot;&gt;module aliases&lt;/a&gt;,
&lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/slides/garrigue.pdf&quot;&gt;injectivity&lt;/a&gt; and
&lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/slides/white.pdf&quot;&gt;extension points&lt;/a&gt; show up.&lt;/p&gt;
&lt;h4&gt;Better documentation&lt;/h4&gt;

&lt;p&gt;The venerable
&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual029.html&quot;&gt;OCamlDoc&lt;/a&gt; tool
has done an admirable job for the last decade, but is increasingly showing its
age due to a lack of support for cross-referencing across packages.  We started
working on this problem in the summer when &lt;a href=&quot;https://github.com/vincent-botbol&quot;&gt;Vincent Botbol&lt;/a&gt;
visited us on an internship, expecting it to be a quick job to come up with
something as good as Haskell's excellent &lt;a href=&quot;http://www.haskell.org/haddock/&quot;&gt;Haddock&lt;/a&gt; online documentation.&lt;/p&gt;
&lt;p&gt;Instead, we ran into the &amp;quot;module wall&amp;quot;: since OCaml makes it so easy to
parameterise code over other modules, it makes it hard to generate static
documentation without outputting hundreds of megabytes of HTML every time.
After some hard work from Vincent and Leo, we've got a working prototype that
lets you simply run &lt;code&gt;opam install opam-doc &amp;amp;&amp;amp; opam doc core async&lt;/code&gt; to generate
package documentation.  You can see the results for
&lt;a href=&quot;http://mirage.github.io/&quot;&gt;Mirage&lt;/a&gt; online, but expect to see this integrated
into the main OCaml site for all OPAM packages as we work through polishing up
the user interface.&lt;/p&gt;
&lt;h4&gt;Turning OPAM into libraries&lt;/h4&gt;

&lt;p&gt;The other behind-the-scenes effort for OPAM has been to keep the core command-line
tool simple and stable, and to have it install OCaml libraries that can be
interfaced with by other tools to do domain-specific tasks.  &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt;,
&lt;a href=&quot;http://louis.gesbert.fr/cv.en.html&quot;&gt;Louis Gesbert&lt;/a&gt; and &lt;a href=&quot;https://github.com/dsheets&quot;&gt;David Sheets&lt;/a&gt; have been steadily hacking away at this and
we now have &lt;a href=&quot;https://github.com/ocamllabs/opamfu&quot;&gt;opamfu&lt;/a&gt; to run operations
over all packages, and an easy-to-template &lt;a href=&quot;https://github.com/ocaml/opam2web&quot;&gt;opam2web&lt;/a&gt;
that generates the live &lt;a href=&quot;http://opam.ocaml.org&quot;&gt;opam.ocaml.org&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;This makes OPAM easier to deploy within other organizations that want to integrate
it into their workflow.  For example, the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/pkg/&quot;&gt;software
section&lt;/a&gt; of the OCaml Labs website is regularly
generated from a search of all OPAM packages tagged &lt;code&gt;ocamllabs&lt;/code&gt;.  We also used
it to rewrite the entire OPAM repository &lt;a href=&quot;https://github.com/ocaml/opam-repository/pull/1240&quot;&gt;in one epic diff&lt;/a&gt; to add external
library dependencies via a &lt;a href=&quot;https://github.com/ocaml/opam/pull/886/files&quot;&gt;command-line shim&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;OPAM-in-a-Box&lt;/h4&gt;

&lt;p&gt;All of this effort is geared towards making it easier to maintain reusable
local OPAM installations.  After several requests from big universities to help
out their teaching needs, we're putting together all the support needed to
easily redistribute OPAM packages via an
&amp;quot;&lt;a href=&quot;https://github.com/ocaml/opam/issues/1035&quot;&gt;OPAM-in-a-Box&lt;/a&gt;&amp;quot; command that uses
&lt;a href=&quot;http://docker.io&quot;&gt;Docker&lt;/a&gt; containers to let you clone and do lightweight
modifications of OCaml installations.&lt;/p&gt;
&lt;p&gt;This will also be useful for anyone who'd like to run tutorials or teach OCaml,
without having to rely on flaky network connectivity at conference venues: a problem we've  &lt;a href=&quot;http://amirchaudhry.com/fpdays-review&quot;&gt;suffered from&lt;/a&gt; too!&lt;/p&gt;
&lt;h3&gt;Core Compiler&lt;/h3&gt;

&lt;p&gt;Starting to work on a real compiler can often be a daunting prospect, and so
one initiative we started this year is to host regular &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/2013/10/30/third-compiler-hacking-session.html&quot;&gt;compiler hacking sessions&lt;/a&gt; where people could find a &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki&quot;&gt;curated list of features&lt;/a&gt; to work on, with the regular developers at hand to help out when people get stuck, and free beer and pizza to oil the coding wheels.  This has worked out well, with around 20 people showing up on average for the three we held, and &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-previously-worked-on&quot;&gt;several patches&lt;/a&gt; submitted upstream to OCaml.  &lt;a href=&quot;http://gallium.inria.fr/~scherer/&quot;&gt;Gabriel Scherer&lt;/a&gt; and &lt;a href=&quot;http://cristal.inria.fr/~doligez/&quot;&gt;Damien Doligez&lt;/a&gt; have been helping this effort by tagging &lt;a href=&quot;http://caml.inria.fr/mantis/search.php?project_id=1&amp;amp;sticky_issues=1&amp;amp;sortby=last_updated&amp;amp;dir=DESC&amp;amp;highlight_changed=24&amp;amp;hide_status_id=90&amp;amp;tag_string=junior_job&quot;&gt;junior jobs&lt;/a&gt; in the OCaml Mantis bug tracker as they are filed.&lt;/p&gt;
&lt;h4&gt;Syntax transformations and extension points&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.lpw25.net&quot;&gt;Leo White&lt;/a&gt; started the year fresh out of completing his PhD with &lt;a href=&quot;https://www.cl.cam.ac.uk/~am21/&quot;&gt;Alan Mycroft&lt;/a&gt;, and before he realized what he'd
gotten himelf into was working with &lt;a href=&quot;http://alain.frisch.fr/&quot;&gt;Alain Frisch&lt;/a&gt; on the
future of syntax transformations in OCaml.  We started off our first
&lt;a href=&quot;http://lists.ocaml.org/listinfo/wg-camlp4&quot;&gt;wg-camlp4&lt;/a&gt; working group on the new
&lt;a href=&quot;http://lists.ocaml.org&quot;&gt;lists.ocaml.org&lt;/a&gt; host, and a spirited discussion
&lt;a href=&quot;http://lists.ocaml.org/pipermail/wg-camlp4/2013-January/thread.html&quot;&gt;started&lt;/a&gt; that
went &lt;a href=&quot;http://lists.ocaml.org/pipermail/wg-camlp4/2013-February/thread.html&quot;&gt;on&lt;/a&gt;
and &lt;a href=&quot;http://lists.ocaml.org/pipermail/wg-camlp4/2013-March/thread.html&quot;&gt;on&lt;/a&gt; for
several months.  It ended with a very satisfying design for a simpler &lt;em&gt;extension
points&lt;/em&gt; mechanism which Leo &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/slides/white.pdf&quot;&gt;presented&lt;/a&gt;
at the OCaml 2013 workshop at ICFP, and is now merged into OCaml 4.02-trunk.&lt;/p&gt;
&lt;h4&gt;Namespaces&lt;/h4&gt;

&lt;p&gt;Not all of the working groups were quite as successful in coming to a conclusion as the Camlp4 one.  On the Platform mailing list, Gabriel Scherer started a discussion on the design for &lt;a href=&quot;http://lists.ocaml.org/pipermail/platform/2013-February/000050.html&quot;&gt;namespaces&lt;/a&gt; in OCaml.  The resulting discussion was useful in separating multiple concerns that were intermingled in the initial proposal, and Leo wrote a &lt;a href=&quot;http://www.lpw25.net/2013/03/10/ocaml-namespaces.html&quot;&gt;comprehensive blog post&lt;/a&gt; on a proposed namespace design.&lt;/p&gt;
&lt;p&gt;After further discussion at &lt;a href=&quot;http://icfpconference.org/icfp2013/&quot;&gt;ICFP 2013&lt;/a&gt; with Jacques Garrigue later in the year, it turns out adding support for &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6063&quot;&gt;module aliases&lt;/a&gt; would solve much of the cost associated with compiling large libraries such as &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Core&lt;/a&gt;, with no backwards compatibility issues.  This solution has now been integrated into OCaml 4.02.0dev and is being tested with Core.&lt;/p&gt;
&lt;h4&gt;Delving into the bug tracker&lt;/h4&gt;

&lt;p&gt;Jeremy Yallop joined us in April, and he and Leo also leapt into the core
compiler and started triaging issues on the OCaml &lt;a href=&quot;http://caml.inria.fr/mantis&quot;&gt;bug
tracker&lt;/a&gt;.  This seems unglamorous in the
beginning, but there rapidly turned out to be many fascinating threads that
shed light on OCaml's design and implementation through seemingly harmless
bugs.  Here is a pick of some interesting threads through the year that we've
been involved with:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;An &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5985&amp;amp;nbn=49#bugnotes&quot;&gt;unexpected interaction between variance and GADTs&lt;/a&gt;
 that led to Jacques Garrigue's &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/slides/garrigue.pdf&quot;&gt;talk&lt;/a&gt; at OCaml 2013.&lt;/li&gt;&lt;li&gt;Type unsoundness by &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5992&quot;&gt;pattern matching lazy mutable values&lt;/a&gt;, thus
 shedding light on the precise semantics of the order of pattern matching.&lt;/li&gt;&lt;li&gt;Leo proposed an &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5584&quot;&gt;open types&lt;/a&gt; extension
 to allow abstract types to be declared open. You can try it via &lt;code&gt;opam switch 4.00.1+open-types&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Designing the popular, but controversial &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5759&quot;&gt;record disambiguation feature&lt;/a&gt; in OCaml 4.01.0, and debating &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6000&quot;&gt;the right warnings&lt;/a&gt; needed to prevent programmer surprise.&lt;/li&gt;&lt;li&gt;Exposing a &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6064&quot;&gt;GADT representation for Bigarray&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;This is just a sample of some of the issues solved in Mantis; if you want to
learn more about OCaml, it's well worth browsing through it to learn from over
a decade of interesting discussions from all the developers.&lt;/p&gt;
&lt;h4&gt;Thread-local storage runtime&lt;/h4&gt;

&lt;p&gt;While OCamlPro was working on their &lt;a href=&quot;https://github.com/lucasaiu/ocaml&quot;&gt;reentrant OCaml runtime&lt;/a&gt;, we took a different tack by adding &lt;a href=&quot;https://github.com/ocamllabs/ocaml/tree/multicore&quot;&gt;thread-local storage&lt;/a&gt; to the runtime instead, courtesy of &lt;a href=&quot;http://mu.netsoc.ie/&quot;&gt;Stephen Dolan&lt;/a&gt;.  This is an important choice to make at the outset of adding multicore, so both approaches are warranted.  The preemptive runtime adds a lot of code churn (due to adding a context parameter to most function calls) and takes up a register, whereas the thread-local storage approach we tried doesn't permit callbacks to different threads.&lt;/p&gt;
&lt;p&gt;Much of this work isn't interesting on its own, but forms the basis for a fully multicore runtime (with associated programming model) in 2014. Stay tuned!&lt;/p&gt;
&lt;h4&gt;Ctypes&lt;/h4&gt;

&lt;p&gt;One other complaint from the Consortium members was quite surprising: the difficulty of using the OCaml foreign function interface safely to interface with C code.  Jeremy Yallop began working on the &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes&quot;&gt;ctypes&lt;/a&gt; library that had the goal of eliminating the need to write any C code at all for the vast majority of foreign bindings.&lt;/p&gt;
&lt;p&gt;Instead, Ctypes lets you describe any C function call as an OCaml value, and provides various linkage options to invoke that function into C.  The first option he implemented was a &lt;code&gt;dlopen&lt;/code&gt; interface, which immediately brought us the same level of functionality as the &lt;a href=&quot;http://docs.python.org/2/library/ctypes.html&quot;&gt;Python&lt;/a&gt; or &lt;a href=&quot;http://www.haskell.org/haskellwiki/Library/libffi&quot;&gt;Haskell&lt;/a&gt; Ctypes equivalents.  This early code was in itself startlingly useful and more pleasant to use than the raw FFI, and various folk (such as David Sheets' &lt;a href=&quot;https://github.com/dsheets/ocaml-sodium&quot;&gt;libsodium&lt;/a&gt; cryptography bindings) started adopting it.&lt;/p&gt;
&lt;p&gt;At this point, I happened to be struggling to write the Foreign Function Interface chapter of &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; without blowing through our page budget with a comprehensive explanation of the existing system.  I decided to take a risk and write about Ctypes instead, since it let new users to the language have a &lt;em&gt;far&lt;/em&gt; more productive experience to get started.  Xavier Leroy pointed out &lt;a href=&quot;https://github.com/realworldocaml/book/issues/1701&quot;&gt;some shortcomings&lt;/a&gt; of the library in his technical book review, most notably with the lack of an interface with C.  The design of Ctypes fully supports alternate linking mechanisms than just &lt;code&gt;dlopen&lt;/code&gt; though, and Jeremy has added automatic C stub generation support as well.  This means that if you use Ctypes to build an OCaml binding in 2014, you can choose several mechanisms for the same source code to link to the external system.  Jeremy even demonstrated a forking model at OCaml 2013 that protects the OCaml runtime from the C binding via process separation.&lt;/p&gt;
&lt;p&gt;The effort is paying off: Daniel B&amp;uuml;nzli &lt;a href=&quot;http://alan.petitepomme.net/cwn/2013.12.17.html#9&quot;&gt;ported SDL2&lt;/a&gt; using ctypes, and gave us extensive &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/issues&quot;&gt;feedback&lt;/a&gt; about any missing corner cases, and the resulting bindings don't require any C code to be written. &lt;a href=&quot;http://xulforum.org&quot;&gt;Jonathan Protzenko&lt;/a&gt; even used it to implement an OCaml controlle
r for the &lt;a href=&quot;http://gallium.inria.fr/blog/raspi-lcd/&quot;&gt;Adafruit Raspberry Pi RGB LCD&lt;/a&gt;!&lt;/p&gt;
&lt;h3&gt;Community Efforts&lt;/h3&gt;

&lt;p&gt;Our community efforts were largely online, but we also hosted visitors over the year and regular face-to-face tutorials.&lt;/p&gt;
&lt;h4&gt;Online at OCaml.org&lt;/h4&gt;

&lt;p&gt;While the rest of the crew were hacking on OPAM and OCaml, &lt;a href=&quot;http://amirchaudhry.com/&quot;&gt;Amir Chaudhry&lt;/a&gt; and &lt;a href=&quot;http://philippewang.info/CL/&quot;&gt;Philippe Wang&lt;/a&gt; teamed up with Ashish Agarwal and Christophe Troestler to redesign and relaunch the &lt;a href=&quot;http://ocaml.org&quot;&gt;OCaml website&lt;/a&gt;.  Historically, OCaml's homepage has been the &lt;a href=&quot;http://caml.inria.fr&quot;&gt;caml.inria.fr&lt;/a&gt; domain, and the &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt; effort was begun by Christophe and Ashish &lt;a href=&quot;https://www.mail-archive.com/caml-list@inria.fr/msg00169.html&quot;&gt;some years ago&lt;/a&gt; to modernize the web presence.&lt;/p&gt;
&lt;p&gt;The webpages were already rather large with complex scripting (for example, the &lt;a href=&quot;http://ocaml.org/learn/tutorials/99problems.html&quot;&gt;99 Problems&lt;/a&gt; page runs the OCaml code to autogenerate the output). Philippe developed a &lt;a href=&quot;https://github.com/pw374/MPP-language-blender&quot;&gt;template DSL&lt;/a&gt; that made it easier to unify a lot of the templates around the website, and also a &lt;a href=&quot;https://github.com/pw374/omd&quot;&gt;Markdown parser&lt;/a&gt; that we could link to as a library from the rest of the infrastructure without shelling out to Pandoc.&lt;/p&gt;
&lt;p&gt;Meanwhile, Amir designed a series of &lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg/&quot;&gt;interactive wireframe sketches&lt;/a&gt;  and &lt;a href=&quot;http://amirchaudhry.com/ocamlorg-request-for-feedback/&quot;&gt;gathered feedback&lt;/a&gt; on it from the community. A local design agency in Cambridge helped with visual look and feel, and finally at the end of the summer we began the &lt;a href=&quot;http://amirchaudhry.com/migration-plan-ocaml-org/&quot;&gt;migration&lt;/a&gt; to the new website, followed by a triumphant &lt;a href=&quot;http://amirchaudhry.com/announcing-new-ocamlorg/&quot;&gt;switchover&lt;/a&gt; in November to the design you see today.&lt;/p&gt;
&lt;p&gt;The domain isn't just limited to the website itself.  Leo and I set up a &lt;a href=&quot;https://github.com/ocaml/ocaml.org-scripts&quot;&gt;SVN-to-Git mirror&lt;/a&gt; of the OCaml compiler &lt;a href=&quot;http://caml.inria.fr/ocaml/anonsvn.en.html&quot;&gt;Subversion repository&lt;/a&gt; on the GitHub &lt;a href=&quot;https://github.com/ocaml/ocaml&quot;&gt;OCaml organization&lt;/a&gt;, which is proving popular with developers.  There is an ongoing effort to simplify the core compiler tree by splitting out some of the larger components, and so &lt;a href=&quot;http://github.com/ocaml/camlp4&quot;&gt;camlp4&lt;/a&gt; is also now hosted on that organization, along with &lt;a href=&quot;https://github.com/ocaml/oasis&quot;&gt;OASIS&lt;/a&gt;.  We also administer several subdomains of &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt;, such as the &lt;a href=&quot;http://lists.ocaml.org&quot;&gt;mailing lists&lt;/a&gt; and the &lt;a href=&quot;http://opam.ocaml.org&quot;&gt;OPAM repository&lt;/a&gt;, and other services such as the &lt;a href=&quot;http://forge.ocamlcore.org&quot;&gt;OCaml Forge&lt;/a&gt; are currently migrating over.  This was made significantly easier thanks to sponsorship from &lt;a href=&quot;http://rackspace.com&quot;&gt;Rackspace Cloud&lt;/a&gt; (users of &lt;a href=&quot;http://xenserver.org&quot;&gt;XenServer&lt;/a&gt; which is written in OCaml). They saw our struggles with managing physical machines and gave us developer accounts, and all of the ocaml.org infrastructure is now hosted on Rackspace.  We're very grateful to their ongoing help!&lt;/p&gt;
&lt;p&gt;If you'd like to contribute to infrastructure help  (for example, I'm experimenting with a &lt;a href=&quot;http://git.ocaml.org/public/&quot;&gt;GitLab&lt;/a&gt; mirror), then please join the &lt;a href=&quot;http://lists.ocaml.org/listinfo/infrastructure&quot;&gt;infrastructure@lists.ocaml.org&lt;/a&gt; mailing list and share your thoughts.  The website team also need help with adding content and &lt;a href=&quot;https://github.com/ocaml/ocaml.org/issues/376&quot;&gt;international translations&lt;/a&gt;, so head over to the &lt;a href=&quot;http://github.com/ocaml/ocaml.org/issues&quot;&gt;website issue tracker&lt;/a&gt; and start proposing improvements you'd like to see.&lt;/p&gt;
&lt;h4&gt;Next steps for ocaml.org&lt;/h4&gt;

&lt;p&gt;The floodgates requesting features opened up after the launch of the new look and feel.  Pretty much everyone wanted deeper OPAM integration into the main website, for features such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Starring and reviewing packages&lt;/li&gt;&lt;li&gt;Integrating the &lt;a href=&quot;https://github.com/ocamllabs/opam-doc&quot;&gt;opam-doc&lt;/a&gt; documentation with the metadata&lt;/li&gt;&lt;li&gt;Display test results and a compatibility matrix for non-x86 and non-Linux architectures.&lt;/li&gt;&lt;li&gt;Link to blog posts and tutorials about the package.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Many of these features were part of the &lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg/&quot;&gt;original wireframes&lt;/a&gt; but we're being careful to take a long-term view of how they should be create
d and maintained.Rather than building all of this as a huge bloated &lt;a href=&quot;https://github.com/ocaml/opam2web&quot;&gt;opam2web&lt;/a&gt; extension, David Sheets (our resident relucant-to-admit-it web expert) has designed an overlay directory scheme that permits the overlaying of different metadata onto the website. This lets one particular feature (such as blog post aggregation) be handled separately from the others via Atom aggregators.&lt;/p&gt;
&lt;h4&gt;&amp;nbsp;Real World OCaml&lt;/h4&gt;

&lt;p&gt;A big effort that took up most of the year for me was finishing and publishing an O'Reilly book called &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; with &lt;a href=&quot;https://ocaml.janestreet.com/?q=blog/5&quot;&gt;Yaron Minsky&lt;/a&gt; and Jason Hickey.  Yaron describes how it all started in &lt;a href=&quot;https://ocaml.janestreet.com/?q=node/117&quot;&gt;his blog post&lt;/a&gt;, but I learnt a lot from developing a book using the &lt;a href=&quot;http://anil.recoil.org/2013/06/17/real-world-ocaml-beta-available.html&quot;&gt;open commenting scheme&lt;/a&gt; that we
developed just for this.&lt;/p&gt;
&lt;p&gt;In particular, the book ended up shining a bright light into dark language corners that we might otherwise not have explored in OCaml Labs.  Two chapters of the book that I wasn't satisfied with were the &lt;a href=&quot;https://realworldocaml.org/v1/en/html/objects.html&quot;&gt;objects&lt;/a&gt; and &lt;a href=&quot;https://realworldocaml.org/v1/en/html/classes.html&quot;&gt;classes&lt;/a&gt; chapters, largely since neither Yaron nor Jason nor I had ever really used their full power in our own code.  Luckily, Leo White decided to pick up the baton and champion these oft-maligned (but very powerful) features of OCaml, and the result is the clearest explanation of them that I've read yet.  Meanwhile, Jeremy Yallop helped out with extensive review of the &lt;a href=&quot;https://realworldocaml.org/v1/en/html/foreign-function-interface.html&quot;&gt;Foreign Function Interface&lt;/a&gt; chapter that used his &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes&quot;&gt;ctypes&lt;/a&gt; library.  Finally, &lt;a href=&quot;https://plus.google.com/100586365409172579442/posts&quot;&gt;Jeremie Dimino&lt;/a&gt; at Jane Street worked hard on adding several features to his &lt;a href=&quot;https://github.com/diml/utop&quot;&gt;utop&lt;/a&gt; toplevel that made it compelling enough to become our default recommendation for newcomers.&lt;/p&gt;
&lt;p&gt;All in all, we ended up closing over &lt;a href=&quot;http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2.html&quot;&gt;2000 comments&lt;/a&gt; in the process of writing the book, and I'm very proud of the result (freely available &lt;a href=&quot;https://realworldocaml.org&quot;&gt;online&lt;/a&gt;, but do &lt;a href=&quot;http://www.amazon.com/Real-World-OCaml-Functional-programming/dp/144932391X/&quot;&gt;buy a copy&lt;/a&gt; if you can to support it).  Still, there's more I'd like to do in 2014 to improve the ease of using OCaml further.  In particular, I removed a chapter on packaging and build systems since I wasn't happy with its quality, and both &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt; and I intend to spend time in 2014 on improving this part of the ecosystem.&lt;/p&gt;
&lt;h4&gt;Tutorials and Talks&lt;/h4&gt;

&lt;p&gt;We had a lively presence at &lt;a href=&quot;http://icfpconference.org&quot;&gt;ICFP 2013&lt;/a&gt; this year, with the third iteration of the &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/program.html&quot;&gt;OCaml 2013&lt;/a&gt; held there, and Stephen Dolan presenting a paper in the main conference.  I &lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/2013/09/24/liveblogging-ocaml-workshop-2013/&quot;&gt;liveblogged the workshop&lt;/a&gt; as it happened, and all the &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/program.html&quot;&gt;talks&lt;/a&gt; we gave are linked from the program.  The most exciting part of the conference for a lot of us were the two talks by Facebook on their use of OCaml: first for &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/slides/padioleau.pdf&quot;&gt;program analysis using Pfff&lt;/a&gt; and then to migrate their massive PHP codebase &lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=gKWNjFagR9k#t=1150&quot;&gt;using an OCaml compiler&lt;/a&gt;.  I also had the  opportunity to participate in a panel at the Haskell Workshop on whether &lt;a href=&quot;http://ezyang.tumblr.com/post/62157468762/haskell-haskell-and-ghc-too-big-to-fail-panel&quot;&gt;Haskell is too big to fail yet&lt;/a&gt;; lots of interesting perspectives on scaling another formerly academic language into the real world.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ocaml.janestreet.com/?q=blog/5&quot;&gt;Yaron Minsky&lt;/a&gt; and I have been giving tutorials on OCaml at ICFP for several years, but the release of Real World OCaml has made it significantly easier to give tutorials without the sort of labor intensity that it took in previous years (one memorable ICFP 2011 tutorial that we did took almost 2 hours to get everyone installed with OCaml.  In ICFP 2013, it took us 15 minutes or so to get everyone started).  Still, giving tutorials at ICFP is very much preaching to the choir, and so we've started speaking at more general-purpose events.&lt;/p&gt;
&lt;p&gt;Our first local effort was &lt;a href=&quot;http://fpdays.net/2013/&quot;&gt;FPDays&lt;/a&gt; in Cambridge, where Jeremy Yallop and Amir Chaudhry ran the tutorial with help from Phillipe Wang, Leo White and David Sheets. The OCaml session there ended up being the biggest one in the entire two days, and Amir &lt;a href=&quot;http://amirchaudhry.com/fpdays-review/&quot;&gt;wrote up&lt;/a&gt; their experiences.  One interesting change from our ICFP tutorial is that Jeremy used &lt;a href=&quot;https://github.com/ocsigen/js_of_ocaml&quot;&gt;js_of_ocaml&lt;/a&gt; to teach OCaml via JavaScript by building a fun &lt;a href=&quot;https://github.com/ocamllabs/fpdays-skeleton&quot;&gt;Monty Hall&lt;/a&gt; game.&lt;/p&gt;
&lt;h4&gt;Visitors and Interns&lt;/h4&gt;

&lt;p&gt;Since OCaml Labs is a normal group within the &lt;a href=&quot;http://www.cl.cam.ac.uk&quot;&gt;Cambridge Computer Lab&lt;/a&gt;, we often host academic visitors and interns who pass through.  This year was certainly diverse, and we welcomed a range of colleagues:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.lip6.fr/actualite/personnes-fiche.php?ident=D1161&amp;amp;LANG=en&quot;&gt;Mathias Bourgoin&lt;/a&gt; has just finished his work on interfacing OCaml with GPUs, and gave us a seminar on how his &lt;a href=&quot;http://www.algo-prog.info/spoc/web/index.php?id=spoc&quot;&gt;SPOC&lt;/a&gt; tool works (also available in OPAM via a &lt;a href=&quot;http://www.algo-prog.info/spoc/distribution/opam/&quot;&gt;custom remote&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.benjamin.canou.fr/&quot;&gt;Benjamin Canou&lt;/a&gt; (now at OCamlPro) practised his &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/slides/canou.pdf&quot;&gt;OCaml 2013 talk&lt;/a&gt; on building high-level interfaces to JavaScript with OCaml by giving a departmental seminar.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.dicosmo.org/&quot;&gt;Roberto Di Cosmo&lt;/a&gt;, who directs the &lt;a href=&quot;http://www.irill.org/&quot;&gt;IRILL&lt;/a&gt; organization on Free Software in Paris delivered a seminar on constraint solving for &lt;a href=&quot;http://mancoosi.org&quot;&gt;package systems&lt;/a&gt; that are as large-scale as Debian's.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt; visited during the summer to help plot the &lt;a href=&quot;http://openmirage.org/blog/mirage-1.0.3-released&quot;&gt;Mirage 1.0&lt;/a&gt; and &lt;a href=&quot;http://anil.recoil.org/2013/09/20/opam-1-1-beta.html&quot;&gt;OPAM 1.1&lt;/a&gt; releases.  He has also since joined OCaml Labs fulltime to work on &lt;a href=&quot;http://nymote.org&quot;&gt;Nymote&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://louis.gesbert.fr/cv.en.html&quot;&gt;Louis Gesbert&lt;/a&gt; from OCamlPro visited for 2 weeks in December and kicked off the inaugral OPAM developers summit (which was, admittedly, just 5 developers in the &lt;a href=&quot;http://www.kingston-arms.co.uk/&quot;&gt;Kingston Arms&lt;/a&gt;, but all good things start in a pub, right?)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.xulforum.org/&quot;&gt;Jonathan Protzenko&lt;/a&gt; presented his PhD work on &lt;a href=&quot;http://protz.github.io/mezzo/&quot;&gt;Mezzo&lt;/a&gt; (which is now &lt;a href=&quot;http://gallium.inria.fr/blog/mezzo-on-opam/&quot;&gt;merged into OPAM&lt;/a&gt;), and educated us on the vagaries of &lt;a href=&quot;http://protz.github.io/ocaml-installer/&quot;&gt;Windows support&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://gallium.inria.fr/~scherer/&quot;&gt;Gabriel Scherer&lt;/a&gt; from the Gallium INRIA group visited to discuss the direction of OPAM and various language feature discussions (such as namespaces).  He didn't give a talk, but promises to do so next time!&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/bvaugon&quot;&gt;Beno&amp;icirc;t Vaugon&lt;/a&gt; gave a seminar on his &lt;a href=&quot;http://oud.ocaml.org/2012/slides/oud2012-paper10-slides.pdf&quot;&gt;OCamlCC&lt;/a&gt; OCaml-to-C compiler, talked about porting OCaml to &lt;a href=&quot;http://www.algo-prog.info/ocaml_for_pic/web/index.php?id=ocapic&quot;&gt;8-bit PICs&lt;/a&gt;, and using GADTs to &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6017&quot;&gt;implement Printf&lt;/a&gt; properly.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;We were also visited several times by &lt;a href=&quot;http://danmey.org/&quot;&gt;Wojciech Meyer&lt;/a&gt; from ARM, who was an OCaml developer who maintained (among other things) the &lt;a href=&quot;http://brion.inria.fr/gallium/index.php/Ocamlbuild&quot;&gt;ocamlbuild&lt;/a&gt; system and worked on &lt;a href=&quot;http://www.youtube.com/watch?v=d9Hg5L76FG8&quot;&gt;DragonKit&lt;/a&gt; (an extensible LLVM-like compiler written in OCaml).  Wojciech very sadly passed away on November 18th, and we all fondly remember his enthusiastic and intelligent contributions to our small Cambridge community.&lt;/p&gt;
&lt;p&gt;We also hosted visitors to live in Cambridge and work with us over the summer.  In addition to Vincent Botbol (who worked on OPAM-doc as described earlier) we had the pleasure of having &lt;a href=&quot;http://erratique.ch/&quot;&gt;Daniel B&amp;uuml;nzli&lt;/a&gt; and &lt;a href=&quot;http://www.x9c.fr/&quot;&gt;Xavier Clerc&lt;/a&gt; work here.  Here's what they did in their own words.&lt;/p&gt;
&lt;h5&gt;Xavier Clerc: OCamlJava&lt;/h5&gt;

&lt;p&gt;Xavier Clerc took a break from his regular duties at INRIA to join us over the summer
to work on &lt;a href=&quot;http://ocamljava.x9c.fr/preview/&quot;&gt;OCaml-Java&lt;/a&gt; and adapt it to the latest
JVM features.  This is an incredibly important project to bridge OCaml with the huge
Java community, and here's his report:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;After a four-month visit to the OCaml Labs dedicated to the &lt;a href=&quot;http://ocamljava.x9c.fr/preview/&quot;&gt;OCaml-Java&lt;/a&gt;
project, the time has come for an appraisal! The undertaken work can be split
into two areas: improvements to code generation, and interaction between the
OCaml &amp;amp; Java languages.  Regarding code generation, several classical
optimizations have been added to the compiler, for example loop unrolling,
more aggressive unboxing, better handling of globals, or partial evaluation
(at the bytecode level). A new tool, namely ocamljar, has been introduced
allowing post-compilation optimizations. The underlying idea is that some
optimizations cannot always be applied (e.g. depending whether multiple
threads/programs will coexist), but enabling them through command-line flags
would lead to recompilation and/or multiple installations of each library
according to the set of chosen optimizations. It is thus far more easier to
first build an executable jar file, and then modify it according to these
optimizations. Furthermore, this workflow allows the ocamljar tool to take
advantage of whole-program information for some optimizations.  All these
improvements, combined, often lead to a gain of roughly 1/3 in terms of
execution time.&lt;/p&gt;
&lt;p&gt;Regarding language interoperability, there are actually two directions 
depending on whether you want to call OCaml code from Java, or want to call 
Java code from OCaml. For the first direction, a tool allows to generate Java
source files from OCaml compiled interfaces, mapping the various constructs
of the OCaml language to Java classes. It is then possible to call functions, 
and to manipulate instances of OCaml types in pure Java, still benefiting 
from the type safety provided by the OCaml language. In the other direction,
an extension of the OCaml typer is provided allowing to create and manipulate
Java instances directly from OCaml sources. This typer extension is indeed a
thin layer upon the original OCaml typer, that is mainly responsible for
encoding Java types into OCaml types.  This encoding uses a number of
advanced elements such as polymorphic variants, subtyping, variance
annotations, phantom typing, and printf-hack, but the end-user does not have
to be aware of this encoding. On the surface, the type of instances of the
Java Object classes is &lt;code&gt;java'lang'Object java_instance&lt;/code&gt;, and instances can be
created by calling Java.make &lt;code&gt;Object()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While still under heavy development, a working prototype &lt;a href=&quot;http://ocamljava.x9c.fr/preview/&quot;&gt;is available&lt;/a&gt;, and bugs &lt;a href=&quot;http://bugs.x9c.fr/&quot;&gt;can be reported&lt;/a&gt;. Finally, I would like to thank the OCaml Labs for providing a great working
environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;Daniel B&amp;uuml;nzli: Typography and Visualisation&lt;/h5&gt;

&lt;p&gt;Daniel joined us from Switzerland, and spent some time at Citrix before joining us in OCaml Labs.  All of his &lt;a href=&quot;http://erratique.ch/software&quot;&gt;software&lt;/a&gt; is now on OPAM, and is seeing ever-increasing adoption from the community.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Released a first version of &lt;a href=&quot;http://erratique.ch/software/vg&quot;&gt;Vg&lt;/a&gt; [...] I'm
especially happy about that as I wanted to use and work on these ideas since
at least 2008. The project is a long term project and is certainly not
finished yet but this is already a huge step.&lt;/p&gt;
&lt;p&gt;Adjusted and released a first version of
&lt;a href=&quot;http://erratique.ch/software/gg&quot;&gt;Gg&lt;/a&gt;. While the module was already mostly
written before my arrival to Cambridge, the development of Vg and Vz prompted
me to make some changes to the module.&lt;/p&gt;
&lt;p&gt;[...] released &lt;a href=&quot;http://erratique.ch/software/otfm&quot;&gt;Otfm&lt;/a&gt;, a
module to decode OpenType fonts. This is a work in progress as not every
OpenType table has built-in support for decoding yet. But since it is needed
by Vg's PDF renderer I had to cut a release. It can however already be used
to implement certain simple things like font kerning with Vg, this can be
seen in action in the &lt;code&gt;vecho&lt;/code&gt; binary installed by Vg.&lt;/p&gt;
&lt;p&gt;Started to work on &lt;a href=&quot;http://erratique.ch/software/vz/doc/Vz.html&quot;&gt;Vz&lt;/a&gt;, a
module for helping to map data to Vg images. This is really unfinished and is
still considered to be at a design stage. There are a few things that are
however well implemented like (human) perceptually meaningful &lt;a href=&quot;http://erratique.ch/software/vz/demos/color_schemes.html&quot;&gt;color
palettes&lt;/a&gt; and the
small folding stat module (&lt;code&gt;Vz.Stat&lt;/code&gt;). However it quickly became evident that
I needed to have more in the box w.r.t. text rendering in Vg/Otfm. Things
like d3js entirely rely on the SVG/CSS support for text which makes it easy
to e.g. align things (like tick labels on &lt;a href=&quot;http://erratique.ch/software/vz/demos/iris.html&quot;&gt;such
drawings&lt;/a&gt;). If you can't
rely on that you need ways of measuring rendered text. So I decided to
suspend the work on Vz and put more energy in making a first good release of
Vg. Vz still needs quite some design work, especially since it tries to be
independent of Vg's backend and from the mechanism for user input.&lt;/p&gt;
&lt;p&gt;Spent some time figuring out a new &amp;quot;opam-friendly&amp;quot; release workflow in 
pkgopkg. One of my problem is that by designing in the small for programming
in the large --- what a slogan --- the number of packages I'm publishing is
growing (12 and still counting). This means that I need to scale horizontally
maintenance-wise unhelped by the sad state of build systems for OCaml. I need
tools that make the release process flawless, painless and up to my quality
standards. This lead me to enhance and consolidate my old scattered
distribution scripts in that repo, killing my dependencies on Oasis and
ocamlfind along the way. &lt;em&gt;(edited for brevity, see &lt;a href=&quot;https://github.com/dbuenzli/pkgopkg&quot;&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Daniel also left his bicycle here for future visitors to use, and the &amp;quot;B&amp;uuml;nzli-bike&amp;quot;
is available for our next visitor! (Louis Gesbert even donated lights, giving
it a semblance of safety).&lt;/p&gt;
&lt;h4&gt;Industrial Fellows&lt;/h4&gt;

&lt;p&gt;Most of our regular funding bodies such as &lt;a href=&quot;http://epsrc.ac.uk&quot;&gt;EPSRC&lt;/a&gt; or &lt;a href=&quot;http://cordis.europa.eu/fp7/home_en.html&quot;&gt;EU FP7&lt;/a&gt; provide funding, but leave all the intellectual input to the academics.  A compelling aspect of OCaml Labs has been how involved our industrial colleagues have been with the day-to-day problems that we solve.  Both Jane Street and Citrix have senior staff regularly visiting our group and working alongside us as industrial fellows in the Computer Lab.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.three-tuns.net/mark/&quot;&gt;Mark Shinwell&lt;/a&gt; from Jane Street Europe has been working on improving the &lt;a href=&quot;http://www.youtube.com/watch?v=NF2WpWnB-nk&quot;&gt;state of native debugging&lt;/a&gt; in OCaml, by adding extended DWARF debugging information to the compiler output.  Mark is also a useful source of feedback about the forthcoming design of multicore, since he has daily insight into a huge production codebase at Jane Street (and can tell us about it without us requiring access!).&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; is the principal architect of &lt;a href=&quot;http://xenserver.org&quot;&gt;XenServer&lt;/a&gt; at Citrix in Cambridge.  This year has been transformative for that project, since Citrix &lt;a href=&quot;http://blogs.citrix.com/2013/06/26/open-source-what-does-it-mean-for-xenserver/&quot;&gt;open-sourced XenServer&lt;/a&gt; to GitHub and fully adopted OPAM into their workflow.  Dave is the author of numerous libraries that have all been released to OPAM, and his colleagues &lt;a href=&quot;http://jon.recoil.org&quot;&gt;Jon Ludlam&lt;/a&gt; and &lt;a href=&quot;http://www.xenserver.org/blog/blogger/listings/euanh.html&quot;&gt;Euan Harris&lt;/a&gt; are also regular visitors who have also been contributors to the OPAM and Mirage ecosystems.&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;Research Projects&lt;/h3&gt;

&lt;p&gt;The other 100% of our time at the Labs is spent on research projects.  When we started the group, I wanted to set up a feedback loop between local people &lt;em&gt;using&lt;/em&gt; OCaml to build systems, with the folk &lt;em&gt;developing&lt;/em&gt; OCaml itself.  This has worked out particularly well with a couple of big research projects in the Lab.&lt;/p&gt;
&lt;h4&gt;&amp;nbsp;Mirage&lt;/h4&gt;

&lt;p&gt;Mirage is a &lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;library operating system&lt;/a&gt; written in OCaml that compiles source code into specialised Xen microkernels, developed at the Cambridge Computer Lab, Citrix and the &lt;a href=&quot;http://horizon.ac.uk&quot;&gt;Horizon Digital Economy&lt;/a&gt; institute at Nottingham.  This year saw several years of effort culminate in the first release of &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage 1.0&lt;/a&gt; as a self-hosting entity.  While Mirage started off as a &lt;a href=&quot;http://anil.recoil.org/papers/2010-hotcloud-lamp.pdf&quot;&gt;quick experiment&lt;/a&gt; into building specialised virtual appliances, it rapidly became useful to make into a real system for use in bigger research projects.  You can learn more about Mirage &lt;a href=&quot;http://openmirage.org/docs&quot;&gt;here&lt;/a&gt;, or read the &lt;a href=&quot;http://cacm.acm.org/magazines/2014/1/170866-unikernels/abstract&quot;&gt;Communications of the ACM&lt;/a&gt; article that &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; and I wrote to close out the year.&lt;/p&gt;
&lt;p&gt;This project is where the OCaml Labs &amp;quot;feedback loop&amp;quot; has been strongest.  A typical &lt;a href=&quot;http://www.openmirage.org/wiki/hello-world&quot;&gt;Mirage application&lt;/a&gt; consists of around 50 libraries that are all installed via OPAM.  These range from &lt;a href=&quot;https://github.com/mirage/mirage-block-xen&quot;&gt;device drivers&lt;/a&gt; to protocol libraries for &lt;a href=&quot;https://github.com/avsm/ocaml-cohttp&quot;&gt;HTTP&lt;/a&gt; or &lt;a href=&quot;https://github.com/mirage/ocaml-dns&quot;&gt;DNS&lt;/a&gt;, to filesystems such as &lt;a href=&quot;https://github.com/mirage/ocaml-fat&quot;&gt;FAT32&lt;/a&gt;.  Coordinating &lt;a href=&quot;http://openmirage.org/blog/mirage-1.0.3-released&quot;&gt;regular releases&lt;/a&gt; of all of these would be near impossible without using OPAM, and has also forced us to use our own tools daily, helping to sort out bugs more quickly.  You can see the full list of libraries on the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/pkg/&quot;&gt;OCaml Labs software page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mirage is also starting to share code with big projects such as &lt;a href=&quot;http://xenserver.org&quot;&gt;XenServer&lt;/a&gt; now, and we have been working with Citrix engineers to help them to move to the &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Core&lt;/a&gt; library that Jane Street has released (and that is covered in &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt;).  Moving production codebases this large can take years, but OCaml Labs is turning out to be a good place to start unifying some of the bigger users of OCaml into one place.  We're also now an official &lt;a href=&quot;http://www.xenproject.org/developers/teams/mirage-os.html&quot;&gt;Xen Project incubator project&lt;/a&gt;, which helps us to validate functional programming  to other Linux Foundation efforts.&lt;/p&gt;
&lt;h4&gt;Nymote and User Centric Networking&lt;/h4&gt;

&lt;p&gt;The release of Mirage 1.0 has put us on the road to simplifying embedded systems programming. The move to the centralized cloud has led to regular well-publicised privacy and security threats to the way &lt;a href=&quot;http://de2013.org/wp-content/uploads/2013/09/de2013_submission_25-1.pdf&quot;&gt;we handle&lt;/a&gt; our digital infrastructure, and so &lt;a href=&quot;http://www.cl.cam.ac.uk/~jac22/&quot;&gt;Jon Crowcroft&lt;/a&gt;, &lt;a href=&quot;http://www.cs.nott.ac.uk/~rmm/&quot;&gt;Richard Mortier&lt;/a&gt; and I are leading an effort to build an alternative privacy-preserving infrastructure using embedded devices as part of the &lt;a href=&quot;http://usercentricnetworking.eu/&quot;&gt;User Centric Networking&lt;/a&gt; project, in collaboration with a host of companies led by &lt;a href=&quot;http://www.thlab.net/&quot;&gt;Technicolor&lt;/a&gt; Paris.
This work also plays on the strong points of OCaml: it already has a &lt;a href=&quot;http://anil.recoil.org/2012/02/25/dreamplug-debian-and-ocaml.html&quot;&gt;fast ARM backend&lt;/a&gt;, and Mirage can easily be ported to the new Xen/ARM target as hardware becomes available.&lt;/p&gt;
&lt;p&gt;One of the most difficult aspects of programming on the &amp;quot;wide area&amp;quot; Internet are dealing with the lack of a distributed identity service that's fully secure.  We published &lt;a href=&quot;http://anil.recoil.org/papers/2013-foci-signposts.pdf&quot;&gt;our thoughts&lt;/a&gt; on this at the USENIX Free and Open Communications on the Internet workhsop, and David Sheets is working towards a full implementation using Mirage.  If you're interested in following this effort, Amir Chaudhry is blogging at the &lt;a href=&quot;http://nymote.org/&quot;&gt;Nymote&lt;/a&gt; project website, where we'll talk about the components as they are released.&lt;/p&gt;
&lt;h4&gt;&amp;nbsp;Data Center Networking&lt;/h4&gt;

&lt;p&gt;At the other extreme from embedded programming is datacenter networking, and we started the &lt;a href=&quot;http://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/K034723/1&quot;&gt;Network-as-a-Service&lt;/a&gt; research project with &lt;a href=&quot;http://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/K032968/1&quot;&gt;Imperial College&lt;/a&gt; and &lt;a href=&quot;http://gow.epsrc.ac.uk/NGBOViewGrant.aspx?GrantRef=EP/K031724/1&quot;&gt;Nottingham&lt;/a&gt;.  With the rapid rise of &lt;a href=&quot;http://en.wikipedia.org/wiki/Software-defined_networking&quot;&gt;Software Defined Networking&lt;/a&gt; this year, we are investigating how application-specific customisation of network resources can build fast, better, cheaper infrasructure.  OCaml is in a good position here: several other groups have built OpenFlow controllers in OCaml (most notably, the &lt;a href=&quot;https://github.com/frenetic-lang&quot;&gt;Frenetic Project&lt;/a&gt;), and Mirage is specifically designed to assemble such bespoke infrastructure.&lt;/p&gt;
&lt;p&gt;Another aspect we've been considering is how to solve the problem of optimal connectivity across nodes.  TCP is increasingly considered harmful in high-through, high-density clusters, and &lt;a href=&quot;http://www.sussex.ac.uk/informatics/people/peoplelists/person/334868&quot;&gt;George Parisis&lt;/a&gt; led the design of &lt;a href=&quot;http://anil.recoil.org/papers/2013-hotnets-trevi.pdf&quot;&gt;Trevi&lt;/a&gt;, which is a fountain-coding based alternative for storage networking.  Meanwhile, &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt; (who joined OCaml Labs in November), has been working on a branch-consistent data store called &lt;a href=&quot;https://github.com/samoht/irminsule&quot;&gt;Irminsule&lt;/a&gt; which supports scalable data sharing and reconciliation using Mirage.  Both of these systems will see implementations based on the research done this year.&lt;/p&gt;
&lt;h4&gt;&amp;nbsp;Higher Kinded Programming&lt;/h4&gt;

&lt;p&gt;Jeremy Yallop and Leo White have been developing an approach that makes it possible to write programs with higher-kinded polymorphism (such as monadic functions that are polymorphic in the monad they use) without using functors. It's early days yet, but there's a &lt;a href=&quot;https://github.com/ocamllabs/higher&quot;&gt;library&lt;/a&gt; available on &lt;a href=&quot;http://opam.ocaml.org/pkg/higher/higher.0.1&quot;&gt;OPAM&lt;/a&gt; that implements the approach, and a &lt;a href=&quot;https://github.com/ocamllabs/higher/raw/paper/higher.pdf&quot;&gt;draft
paper&lt;/a&gt; that outlines the design.&lt;/p&gt;
&lt;h3&gt;Priorities for 2014&lt;/h3&gt;

&lt;p&gt;This year has been a wild ride to get us up to speed, but we now have a solid sense of what to work on for 2014.  We've decided on a high-level set of priorities led by the senior members of the group:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Multicore&lt;/strong&gt;: Leo White will be leading efforts in putting an end-to-end multicore capable OCaml together.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Metaprogramming&lt;/strong&gt;: Jeremy Yallop will direct the metaprogramming efforts, continuing with Ctypes and into macros and extension points.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Platform&lt;/strong&gt;: Thomas Gazagnaire will continue to drive OPAM development towards becoming the first &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/slides/madhavapeddy.pdf&quot;&gt;OCaml Platform&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Online&lt;/strong&gt;: Amir Chaudhry will develop the online and community efforts that started in 2013.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;These are guidelines to choosing where to spend our time, but not excluding other work or day-to-day bugfixing. Our focus on collaboration with Jane Street, Citrix, Lexifi, OCamlPro and our existing colleagues will continue, as well as warmly welcoming new community members that wish to work with us on any of the projects, either via internships, studentships or good old-fashioned open source hacking.&lt;/p&gt;
&lt;p&gt;I appreciate the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/&quot;&gt;whole team's&lt;/a&gt; feedback in editing this long post into shape, the amazing professorial support from &lt;a href=&quot;http://www.cl.cam.ac.uk/~jac22/&quot;&gt;Jon Crowcroft&lt;/a&gt;, &lt;a href=&quot;https://www.cl.cam.ac.uk/~iml1/&quot;&gt;Ian Leslie&lt;/a&gt; and &lt;a href=&quot;https://www.cl.cam.ac.uk/~am21/&quot;&gt;Alan Mycroft&lt;/a&gt; throughout the year, and of course the funding and support from Jane Street, Citrix, RCUK, EPSRC, DARPA and the EU FP7 that made all this possible.  Roll on 2014, and please do &lt;a href=&quot;mailto:avsm2@cl.cam.ac.uk&quot;&gt;get in touch&lt;/a&gt; with me with any queries!&lt;/p&gt;

   </content><id>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Dec%202013</id><title type="text">Dec 2013 news update</title><updated>2013-12-29T12:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2013/12/20/polymorphism-for-beginners/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;OCaml makes heavy use of &lt;a href=&quot;http://en.wikipedia.org/wiki/Parametric_polymorphism&quot;&gt;parametric polymorphism&lt;/a&gt; (which you may also know as &amp;ldquo;generics&amp;rdquo; in other languages).
The OCaml tutorials mention it from time to time, but the information is spread about over many articles and they don&amp;rsquo;t go into much detail.
I&amp;rsquo;m not a type theorist, just a Python/Java/C programmer who finds this stuff interesting.
I wanted to write this guide while I still remember the things that confused me.
I know several OCaml experts keep an eye on this blog, so hopefully any inaccuracies will be corrected in the comments.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#subtyping&quot;&gt;Subtyping&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#top-and-bottom&quot;&gt;Top and bottom&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#polymorphism&quot;&gt;Polymorphism&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#polymorphic-objects&quot;&gt;Polymorphic objects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#polymorphic-variants&quot;&gt;Polymorphic variants&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#example--a-polymorphic-dialog-box&quot;&gt;Example : a polymorphic dialog box&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#other-issues&quot;&gt;Other issues&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#monomorphic-types&quot;&gt;Monomorphic types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#partial-application-loses-polymorphism&quot;&gt;Partial application loses polymorphism&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#universal-qualification&quot;&gt;Universal qualification&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#polymorphism-in-module-signatures&quot;&gt;Polymorphism in module signatures&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#cheat-sheet&quot;&gt;Cheat-sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;( This post is part of a series in which I am
&lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install&quot;&gt;converting 0install from Python to OCaml&lt;/a&gt;, learning OCaml as I go. )&lt;/p&gt;

&lt;h2&gt;Subtyping&lt;/h2&gt;

&lt;p&gt;The first thing that confused me was that OCaml tends to use &lt;em&gt;parametric polymorphism&lt;/em&gt; where other languages use &lt;em&gt;subtyping&lt;/em&gt; (&amp;ldquo;subtype polymorphism&amp;rdquo;), so I&amp;rsquo;ll start with a brief summary of subtyping and then show how OCaml uses parametric polymorphism to achieve similar ends.&lt;/p&gt;

&lt;p&gt;Note: in the rest of this article I will always use &amp;ldquo;polymorphism&amp;rdquo; to mean &amp;ldquo;parametric polymorphism&amp;rdquo;, which is the way the OCaml documentation uses it.&lt;/p&gt;

&lt;p&gt;When you think of object oriented programming, you probably think of the types arranged in a tree. In fact, with multiple-inheritance of interfaces,
the types form a &lt;em&gt;lattice&lt;/em&gt;, which is easier to draw than to explain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/lattice.png&quot; class=&quot;border center&quot;/&gt;&lt;/p&gt;

&lt;p&gt;On the left, we have some example primitive types, &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;unit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the middle, we have some GUI object types. &lt;code&gt;widget&lt;/code&gt; represents &amp;ldquo;things that can appear on the screen&amp;rdquo;. &lt;code&gt;button&lt;/code&gt; and &lt;code&gt;window&lt;/code&gt; are types of &lt;code&gt;widget&lt;/code&gt; and a &lt;code&gt;dialog&lt;/code&gt; is a type of &lt;code&gt;window&lt;/code&gt;. For example, any function that can operate on windows can also operate on dialogs. A &lt;code&gt;button&lt;/code&gt; is both a &lt;code&gt;widget&lt;/code&gt; and an &lt;code&gt;action&lt;/code&gt;. In Java terms, we might write &lt;code&gt;class Button implements Widget, Action&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the right, we have some variant types (enums). The type &amp;ldquo;yes or no&amp;rdquo; is a sub-type of &amp;ldquo;yes, no or maybe&amp;rdquo;. For example, a function that can format a yes/no/maybe value as a string will also work on the simpler yes/no type.&lt;/p&gt;

&lt;p&gt;The rule is that you can always safely cast a type to a super type (going upwards). However, casting in Java and OCaml work differently:&lt;/p&gt;

&lt;p&gt;In Java:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Upcasting (converting to a type higher up in the lattice) is automatic and implicit. e.g. in &lt;code&gt;Widget w = new Dialog();&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Downcasting&quot;&gt;Downcasting&lt;/a&gt; requires an explicit cast, and may throw an exception: &lt;code&gt;Dialog d = (Dialog) w&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In OCaml:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Upcasting must be explicit, e.g. &lt;code&gt;let w : widget = (new dialog :&amp;gt; widget)&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Downcasting is impossible (types are not recorded at runtime, so it wouldn&amp;rsquo;t be able to check).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s an example that might surprise you if you&amp;rsquo;re expecting automatic upcasts:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;close_window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;(* ERROR! *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;Error: This expression has type dialog but an expression was expected of type window
       The second object type has no method get_response
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OCaml won&amp;rsquo;t let you pass a dialog to &lt;code&gt;close_window&lt;/code&gt; because it&amp;rsquo;s a &lt;code&gt;dialog&lt;/code&gt;, not a &lt;code&gt;window&lt;/code&gt; and there are no automatic coercions in OCaml. However, OCaml does know the subtyping relationship and will therefore let you cast it:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;close_window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* OK *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Functions also have types and can be cast too, so here&amp;rsquo;s another way to solve this problem:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close_window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, we upcast &lt;code&gt;close_window&lt;/code&gt; to the type &lt;code&gt;dialog -&amp;gt; unit&lt;/code&gt; and then pass it a &lt;code&gt;dialog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By the way, notice that &lt;code&gt;dialog&lt;/code&gt; is a &lt;em&gt;subtype&lt;/em&gt; of &lt;code&gt;window&lt;/code&gt; but &lt;code&gt;dialog -&amp;gt; unit&lt;/code&gt; is a &lt;em&gt;super-type&lt;/em&gt; of &lt;code&gt;window -&amp;gt; unit&lt;/code&gt;. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)&quot;&gt;covariance and contravariance&lt;/a&gt; for the details about that.&lt;/p&gt;

&lt;h3&gt;Top and bottom&lt;/h3&gt;

&lt;p&gt;The types &lt;em&gt;top&lt;/em&gt; and &lt;em&gt;bottom&lt;/em&gt; don&amp;rsquo;t seem to exist in OCaml, but I included them for completeness and because they&amp;rsquo;re conceptually interesting and you&amp;rsquo;ll probably run across these terms when reading anything about types.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Top&lt;/em&gt; is a super-type of everything, like &lt;code&gt;object&lt;/code&gt; in Python (or &lt;code&gt;Object&lt;/code&gt; in Java, if you ignore unboxed types). Everything is a top and, therefore, knowing that something is a top tells you nothing at all. Because OCaml doesn&amp;rsquo;t allow downcasting, there&amp;rsquo;s not much you could do with a top in OCaml anyway.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bottom&lt;/em&gt; is a sub-type of everything. A value of type bottom can be used as an int, a widget, a yes/no enum, etc. Needless to say, instances of this type don&amp;rsquo;t actually exist.&lt;/p&gt;

&lt;p&gt;Although OCaml doesn&amp;rsquo;t have a bottom type, it achieves the same effect with polymorphism.
For example, the result of these expressions can be used as any type you like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;exit 1&lt;/code&gt; (exits the program)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;failwith msg&lt;/code&gt; (throws an exception)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;let rec loop () = loop () in loop ()&lt;/code&gt; (infinite loop)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Obj.magic x&lt;/code&gt; (unsafe cast; program may segfault if you get it wrong!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, this code compiles fine, even though we use &lt;code&gt;bot&lt;/code&gt; as an &lt;code&gt;int&lt;/code&gt; and as a &lt;code&gt;string&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;x = %d, y = %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Polymorphism&lt;/h2&gt;

&lt;p&gt;If you treat OCaml like Java then things mostly work fine; you just end up doing a lot of explicit casting. However, where Java uses implicit upcasts, OCaml generally prefers using &lt;em&gt;(parametric) polymorphism&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A polymorphic value doesn&amp;rsquo;t have a single concrete type. Instead, it can take on many different types as needed.
For example, the OCaml function &lt;code&gt;Queue.create&lt;/code&gt; can create queues of ints, queues of strings, etc. Its type is &lt;code&gt;unit -&amp;gt; 'a Queue.t&lt;/code&gt;, where &lt;code&gt;'a&lt;/code&gt; is a &lt;em&gt;type variable&lt;/em&gt;. When you want to use this function, you can use any type (e.g. &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;) as the value of &lt;code&gt;'a&lt;/code&gt;, to get a function that makes queues of ints or queues of strings, as needed.&lt;/p&gt;

&lt;p&gt;Note that unlike e.g. C++ templates, using polymorphism does not create any extra code. There is only ever one &lt;code&gt;Queue.create&lt;/code&gt; function compiled into your binary, not one for each type you use. The same generic code works for queues of ints and queues of strings.&lt;/p&gt;

&lt;p&gt;In Java, upcasting types is implicit, while using polymorphism (generics) requires extra annotations. In OCaml, it&amp;rsquo;s the other way around. Polymorphism is implicit, while upcasting requires annotations. So, in Java:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;String&amp;gt;&lt;/code&gt; parts show where we convert a generic type (list of X) to a concrete type (list of String). In OCaml, this happens implicitly:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linked_list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;(Note: I used a made-up &lt;code&gt;linked_list&lt;/code&gt; class rather than &lt;code&gt;Queue&lt;/code&gt; to keep this example similar to the Java)&lt;/p&gt;

&lt;p&gt;This saves a lot of typing, which is good, but it also makes it far harder to understand what&amp;rsquo;s going on.
The way I think of it, OCaml adds type variables at certain points in the code and then uses type inference to work out what they are.
So in this case, we have (note: this is not valid OCaml syntax):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linked_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Then OCaml infers that &lt;code&gt;type t = string&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Polymorphic objects&lt;/h3&gt;

&lt;p&gt;The problem with our &lt;code&gt;close_window&lt;/code&gt; function in the subtyping section was that we gave it a fixed concrete type (&lt;code&gt;window -&amp;gt; unit&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;If we give it a polymorphic type then there&amp;rsquo;s no problem:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_window_poly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;close_window_poly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;#window&lt;/code&gt; means any type with at least the methods of &lt;code&gt;window&lt;/code&gt; (not to be confused with &lt;code&gt;w#close&lt;/code&gt;, which is a method call, not a type). The syntax is a bit confusing because OCaml hides the type variable by default. If you wanted to declare the type of &lt;code&gt;close_window_poly&lt;/code&gt; explicitly, you&amp;rsquo;d have to make the type variable explicit using &lt;code&gt;as&lt;/code&gt;. For comparison, here are the types of the two versions:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window_closer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Thus the type &lt;code&gt;window closer&lt;/code&gt; is the type of functions that close a &lt;code&gt;window&lt;/code&gt;, while &lt;code&gt;dialog closer&lt;/code&gt; is the type of functions that close a &lt;code&gt;dialog&lt;/code&gt;. OCaml will automatically apply the appropriate type at compile time.&lt;/p&gt;

&lt;p&gt;As OCaml will infer polymorphic types automatically, we can define and call the function without any type annotations at all:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# let close_window_inf w = w#close;;
val close_window_inf : &amp;lt; close : 'a; .. &amp;gt; -&amp;gt; 'a = &amp;lt;fun&amp;gt;
# close_window_inf d;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is yet more new syntax! OCaml didn&amp;rsquo;t infer that this requires a &lt;code&gt;#window&lt;/code&gt;, only that it requires something with a suitable &lt;code&gt;close&lt;/code&gt; method. Also, it couldn&amp;rsquo;t infer that &lt;code&gt;close&lt;/code&gt; must return &lt;code&gt;unit&lt;/code&gt;, so it left the return type generic as &lt;code&gt;'a&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;..&lt;/code&gt; indicates more polymorphism, with another hidden type variable. If we wanted to define the type for this function, it would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type ('a, 'b) closer2 = (&amp;lt; close : 'a; .. &amp;gt; as 'b) -&amp;gt; 'a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the polymorphic type for functions which take objects of type &lt;code&gt;'b&lt;/code&gt;, where &lt;code&gt;'b&lt;/code&gt; includes a &lt;code&gt;close&lt;/code&gt; method that returns an &lt;code&gt;'a&lt;/code&gt;, and return an &lt;code&gt;'a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, the original &lt;code&gt;close_window&lt;/code&gt; function has the type &lt;code&gt;(unit, window) closer2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What all this means is that defining objects and functions without explicit types usually works fine, but if you later try to add type annotations (e.g. by declaring an interface for your module in an &lt;code&gt;.mli&lt;/code&gt; file) then you&amp;rsquo;re likely to remove the polymorphism accidentally unless you&amp;rsquo;re careful. If you don&amp;rsquo;t understand what happened, you&amp;rsquo;ll end up doing a load of explicit casting to make things work again.&lt;/p&gt;

&lt;p&gt;A good way around this is to use &lt;code&gt;ocamlc -i&lt;/code&gt; to generate an initial &lt;code&gt;.mli&lt;/code&gt; file with all the inferred types, with all the polymorphism still there.&lt;/p&gt;

&lt;p&gt;In another bit of inconsistent syntax, when defining a class type you need to put the type parameter in brackets, but you don&amp;rsquo;t when declaring an object type:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* An object with a &amp;quot;get&amp;quot; method returning an 'a *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poly_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* A class type with a &amp;quot;get&amp;quot; method *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poly_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;(see my previous &lt;a href=&quot;http://roscidus.com/blog/blog/2013/09/28/ocaml-objects/&quot;&gt;Experiences With OCaml Objects&lt;/a&gt; post for more on objects and classes)&lt;/p&gt;

&lt;h3&gt;Polymorphic variants&lt;/h3&gt;

&lt;p&gt;The situation with variants (enums) is similar. Let&amp;rsquo;s start with some non-polymorphic code:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paint_sky&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A clear blue sky&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A dark black sky&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paint_balloon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A black balloon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A blue balloon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A red balloon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw_scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;paint_sky&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;paint_balloon&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* Error *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;Error: This expression has type [ `black | `blue ]
       but an expression was expected of type [ `black | `blue | `red ]
       The first variant type does not allow tag(s) `red
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, if you&amp;rsquo;re expecting subtyping behaviour then this is confusing. If we can draw a balloon blue, black or red, why can&amp;rsquo;t we draw it blue or black? Again, we can use an upcast (which is checked by the compiler and is entirely type-safe):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw_scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;paint_sky&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;paint_balloon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;As before, OCaml generally expects you to use polymorphism instead. There&amp;rsquo;s more new syntax for this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paint_balloon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A black balloon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A blue balloon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A red balloon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;code&gt;[&amp;lt; `blue | `black | `red ]&lt;/code&gt; means all subtypes of &lt;code&gt;[ `blue | `black | `red ]&lt;/code&gt;. The &lt;code&gt;&amp;lt;&lt;/code&gt; introduces another hidden type variable. If you wanted to define a type for this function explicitly, you could do it with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type 'a balloon_painter = ([&amp;lt;`blue | `black | `red ] as 'a) -&amp;gt; unit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of &lt;code&gt;&amp;lt;&lt;/code&gt;, there&amp;rsquo;s also &lt;code&gt;&amp;gt;&lt;/code&gt;, which means the variant must have &lt;em&gt;at least&lt;/em&gt; the given elements.&lt;/p&gt;

&lt;p&gt;As before, just removing the type annotations and letting OCaml infer the polymorphic type is easy:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paint_balloon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A black balloon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A blue balloon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A red balloon&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Example : a polymorphic dialog box&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a neat polymorphic dialog box (based on lablgtk&amp;rsquo;s GTK bindings):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;dialog.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;constraint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;prog.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_dialog&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Delete&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_response&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Deleting...&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Aborted&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;OCaml will automatically infer &lt;code&gt;'a&lt;/code&gt; as &lt;code&gt;[`close | `delete]&lt;/code&gt; - a dialog with close and delete responses.
OCaml will force you to handle every response code, so you can&amp;rsquo;t add a button but forget to handle it!
The &lt;code&gt;constraint 'a = [&amp;gt; `close]&lt;/code&gt; line forces you to handle the &lt;code&gt;close&lt;/code&gt; response in all cases (because the user could always just close the window).&lt;/p&gt;

&lt;p&gt;For another example, see my earlier post 
&lt;a href=&quot;http://roscidus.com/blog/blog/2013/08/31/option-handling-with-ocaml-polymorphic-variants/&quot;&gt;Option Handling With OCaml Polymorphic Variants&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Other issues&lt;/h2&gt;

&lt;h3&gt;Monomorphic types&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a subtle but important distinction between &lt;em&gt;polymorphic types&lt;/em&gt; (which can be used to generate many concrete types) and &lt;em&gt;monomorphic types&lt;/em&gt; (which OCaml uses to mean a single type that is currently undecided). Monomorphic types only occur while OCaml is still working out the types, so you&amp;rsquo;ll only see them in compiler error messages or in the interactive toplevel. They look like regular type variables but start with an underscore. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# let x = [];;
val x : 'a list = []

# let y = ref None;;
val y : '_a option ref = {contents = None}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;x&lt;/code&gt; has a polymorphic type (using &lt;code&gt;'a&lt;/code&gt;). It can be used as an empty list of ints, or as an empty list of strings, or both. Every time you use &lt;code&gt;x&lt;/code&gt;, you get to pick a type for it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;y&lt;/code&gt; has a monomorphic type (using &lt;code&gt;'_a&lt;/code&gt;). It can be used as a mutable container of ints, or of strings, but not both. As soon as OCaml sees it used with a concrete type, it will assign that type for it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# let y = ref None;;
# y;;
- : '_a option ref = {contents = None}

# y := Some 3;;
# y := None;;
# y;;
- : int option ref = {contents = None}

# y := Some &amp;quot;hello&amp;quot;;;
Error: This expression has type string but an expression was expected of type int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the second time we print &lt;code&gt;y&lt;/code&gt;, OCaml has worked out the concrete type.&lt;/p&gt;

&lt;p&gt;Note: The term &amp;ldquo;weakly polymorphic&amp;rdquo; seems to be used as an alias for &amp;ldquo;monomorphic&amp;rdquo; in some OCaml documentation.&lt;/p&gt;

&lt;h3&gt;Partial application loses polymorphism&lt;/h3&gt;

&lt;p&gt;Partially-applied functions lose their polymorphism. Consider:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# let p1 = Printf.fprintf;;
val p1 : out_channel -&amp;gt; ('a, out_channel, unit) format -&amp;gt; 'a = &amp;lt;fun&amp;gt;

# let p2 = Printf.fprintf stdout;;
val p2 : ('_a, out_channel, unit) format -&amp;gt; '_a = &amp;lt;fun&amp;gt;

# let p3 fmt = Printf.fprintf stdout fmt;;
val p3 : ('a, out_channel, unit) format -&amp;gt; 'a = &amp;lt;fun&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fprintf&lt;/code&gt; is a polymorphic function. It takes an output channel, a format string (with a polymorphic type) and values of the appropriate type. &lt;code&gt;p1&lt;/code&gt; retains the polymorphic type.
However, &lt;code&gt;p2&lt;/code&gt;, which partially applies the function to &lt;code&gt;stdout&lt;/code&gt;, has a monomorphic type (&lt;code&gt;'_a&lt;/code&gt;). You could use &lt;code&gt;p2&lt;/code&gt; to print a string, or to print an int, but you couldn&amp;rsquo;t use it twice to do both.
&lt;code&gt;p3&lt;/code&gt;, which just makes the format argument explicit, is polymorphic again!&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* OK *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;(* Error *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;(* OK! *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;So, what&amp;rsquo;s going on here?
The &lt;a href=&quot;http://caml.inria.fr/resources/doc/faq/core.en.html&quot;&gt;OCaml FAQ&lt;/a&gt; explains what to do about it (use &lt;code&gt;p3&lt;/code&gt;), but doesn&amp;rsquo;t explain why.
As &lt;code&gt;fprintf&lt;/code&gt; has a really complicated type, let&amp;rsquo;s switch to a simpler example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logged_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logged_id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logged_id&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;called&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logged_id&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;called&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;called&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;called&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* OK *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* Error! *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i3&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* OK *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;logged_id msg x&lt;/code&gt; prints the message and then just returns &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The polymorphism is lost in &lt;code&gt;i2&lt;/code&gt; because OCaml doesn&amp;rsquo;t know, from the type of &lt;code&gt;logged_id&lt;/code&gt;, whether partially applying it will create any mutable state. Consider:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logged_mem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;When &lt;code&gt;logged_mem&lt;/code&gt; is partially applied, it creates a mutable cell and returns a function that remembers the first value it is called with and always returns that.
The result of &lt;code&gt;logged_mem &amp;quot;called&amp;quot;&lt;/code&gt; cannot be polymorphic: it must always be called with the same argument type. Yet &lt;code&gt;logged_mem&lt;/code&gt; has the same type as &lt;code&gt;logged_id&lt;/code&gt; (&lt;code&gt;string -&amp;gt; 'a -&amp;gt; 'a&lt;/code&gt;), so OCaml can&amp;rsquo;t distinguish the two cases.&lt;/p&gt;

&lt;p&gt;OCaml assumes that every function call potentially creates mutable state. Therefore, the result of calling a function is never polymorphic. Normally that&amp;rsquo;s what you want, but it can be surprising in the case of partial functions. The solution (&lt;code&gt;i3&lt;/code&gt;) is to avoid partial application and do a complete fresh invocation each time.&lt;/p&gt;

&lt;p&gt;There are actually some cases where OCaml can turn a monomorphic result type back into a polymorphic one. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# let make_empty () = [];;
val make_empty : unit -&amp;gt; 'a list = &amp;lt;fun&amp;gt;

# let x = make_empty ();;
val x : 'a list = []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;x&lt;/code&gt; gets a polymorphic type despite being the result of a function call.
See &lt;a href=&quot;http://caml.inria.fr/pub/papers/garrigue-value_restriction-fiwflp04.pdf&quot;&gt;Relaxing the Value Restriction&lt;/a&gt; for how it does that.&lt;/p&gt;

&lt;h3&gt;Universal qualification&lt;/h3&gt;

&lt;p&gt;This surprised me at first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# let id = fun x -&amp;gt; x;;
val id : 'a -&amp;gt; 'a = &amp;lt;fun&amp;gt;

# let id2 : ('a -&amp;gt; 'a) = fun x -&amp;gt; x + 1;;
val id2 : int -&amp;gt; int = &amp;lt;fun&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OCaml tells us that the identity function &lt;code&gt;id&lt;/code&gt; has the type &lt;code&gt;'a -&amp;gt; 'a&lt;/code&gt;. OK. Then I declare another function with the same type, and OCaml tells me its type is &lt;code&gt;int -&amp;gt; int&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;OCaml is hiding part of the type! The real type of the identity function is &lt;code&gt;'a. 'a -&amp;gt; 'a&lt;/code&gt; (given &lt;code&gt;'a&lt;/code&gt;, the type is &lt;code&gt;'a -&amp;gt; 'a&lt;/code&gt;). Using this full type, we get the expected error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# let id : 'a. 'a -&amp;gt; 'a = fun x -&amp;gt; x;;
val id : 'a -&amp;gt; 'a = &amp;lt;fun&amp;gt;

# let id2 : 'a. 'a -&amp;gt; 'a = fun x -&amp;gt; x + 1;;
Error: This definition has type int -&amp;gt; int which is less general than
         'a. 'a -&amp;gt; 'a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The input to the polymorphic type expression (the &lt;code&gt;'a.&lt;/code&gt; bit) can only go at the start of a type expression in OCaml. That means that you can&amp;rsquo;t write a function that takes a polymorphic function as an argument. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# let use_id (id : 'a. 'a -&amp;gt; 'a) =
    assert (id 3 = 3);
    assert (id &amp;quot;hi&amp;quot; = &amp;quot;hi&amp;quot;) ;;
Error: Syntax error: type expected.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, you can put them in object method and record field types:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_holder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_holder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_holder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_holder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;So, you may have to wrap some things up in objects or records. If you use this in a method type, make sure you declare the type of the object you&amp;rsquo;re creating. Otherwise, OCaml will infer the wrong type (it will assume that &lt;code&gt;'a&lt;/code&gt; is scoped to the whole object, not a single method):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_id_obj&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_id_obj&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;	 &lt;span class=&quot;c&quot;&gt;(* Error *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;Error: This expression has type &amp;lt; id : 'a -&amp;gt; 'a &amp;gt;
       but an expression was expected of type id_class
       The universal variable 'a0 would escape its scope
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You have to give the type at the point where you define the object:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_id_obj&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Polymorphism in module signatures&lt;/h3&gt;

&lt;p&gt;When you define a module, you can (optionally) write an &lt;code&gt;.mli&lt;/code&gt; file giving it a more limited public interface.
In this interface, you can make types abstract, only expose certain functions, etc. 
If you include a value with concrete type, the signature must be the same in the module and in the interface.
But when your module contains polymorphic values, you are allowed to limit the polymorphism in the module signature. For example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;test.mli &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;test.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;close_window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Inside the module, &lt;code&gt;close_window&lt;/code&gt; will close anything with a &lt;code&gt;close&lt;/code&gt; method and return whatever it returns.
But outside the module, &lt;code&gt;close_window&lt;/code&gt; can only close subclasses of &lt;code&gt;dialog&lt;/code&gt; (and always returns unit).&lt;/p&gt;

&lt;h2&gt;Cheat-sheet&lt;/h2&gt;

&lt;p&gt;Some concrete types:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type expression&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;int list&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;a list of integers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;int -&amp;gt; int&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;a function that takes an &lt;code&gt;int&lt;/code&gt; and returns an &lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;widget&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;the concrete type &lt;code&gt;widget&lt;/code&gt; exactly&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;close : unit&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;an object type with a single &lt;code&gt;close&lt;/code&gt; method&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;[`red|`green]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;the variant type &amp;ldquo;red or green&amp;rdquo;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Some polymorphic types (supplying the type parameter &lt;code&gt;'a&lt;/code&gt; will produce some concrete type):&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type expression&lt;/th&gt;
      &lt;th&gt;Can produce types for&amp;hellip;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;'a list&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;any list of items, each of the same type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;'a -&amp;gt; 'a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;any function that returns something of the same type as its input&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;(#widget as 'a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;any type that includes all the methods of &lt;code&gt;widget&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;(&amp;lt;close : unit; ..&amp;gt; as 'a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;any type with at least a &lt;code&gt;close : unit&lt;/code&gt; method&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;([&amp;lt; `red|`green] as 'a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;any variant with some subset of &lt;code&gt;red&lt;/code&gt; and &lt;code&gt;green&lt;/code&gt; as options&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;([&amp;gt; `red|`green] as 'a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;any variant with some superset of &lt;code&gt;red&lt;/code&gt; and &lt;code&gt;green&lt;/code&gt; as options&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can omit the &lt;code&gt;as 'a&lt;/code&gt; bits, unless you need to refer to &lt;code&gt;'a&lt;/code&gt; somewhere else.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Java uses subtyping by default (automatically), with extra syntax for using generics (polymorphism). OCaml uses polymorphism by default, with extra syntax for using subtypes. Polymorphism is powerful, but can be confusing. If you allow OCaml to infer types, it will infer polymorphic types automatically and everything should work, but you&amp;rsquo;ll want to understand polymorphism when you come to writing module signatures and you need to write out the types.&lt;/p&gt;

&lt;p&gt;When the compiler and the interactive OCaml interpreter display polymorphic types, they frequently omit the type variables, which can make learning OCaml more difficult. Polymorphic object types, class types and variants all use different syntax to indicate polymorphism, which can also be confusing.&lt;/p&gt;

&lt;p&gt;OCaml uses &amp;ldquo;monomorphic type&amp;rdquo; to mean a single (non-polymorphic) type which has not yet been inferred. Monomorphic types occur when you create mutable state or call functions (which may create mutable state internally). This explains why partially applying a function loses its polymorphism.&lt;/p&gt;

&lt;p&gt;OCaml does not allow functions that take polymorphic arguments (arguments that remain polymorphic within the function, rather than being resolved to a particular concrete type when the function is called). However, you can work around this using record or object types.&lt;/p&gt;

&lt;p&gt;When defining a module&amp;rsquo;s signature (its external API), you can&amp;rsquo;t change concrete types but you can expose less polymorphism in polymorphic types if you want.&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2013/12/20/polymorphism-for-beginners/</id><title type="text">Polymorphism for beginners</title><updated>2013-12-20T11:15:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="https://mirage.io/blog/mirage-1.0.3-released" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;We've had a lot of people trying out MirageOS since the &lt;a href=&quot;http://openmirage.org/blog/releasing-mirage&quot;&gt;1.0 release&lt;/a&gt; last week, and so we've been steadily cutting point releases and new libraries to OPAM as they're done.
The most common build error by far has been people using outdated OPAM packages.  Do make sure that you have at least &lt;a href=&quot;http://opam.ocaml.org/doc/Quick_Install.html&quot;&gt;OPAM 1.1&lt;/a&gt; installed, and that you've run &lt;code&gt;opam update -u&lt;/code&gt; to get the latest package lists from the &lt;a href=&quot;https://github.com/ocaml/opam-repository&quot;&gt;package repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mirage/mirage/releases/tag/1.0.3&quot;&gt;MirageOS 1.0.3&lt;/a&gt; improves
Xen configuration generation, cleans up HTTP support, and adds support for FAT
filesystems.  Here are some of the libraries we've released this week to go along with it:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-www&quot;&gt;mirage-www&lt;/a&gt; (update): the live website now runs on the 1.0 tools.  Explanation of how to build it in various configurations is available &lt;a href=&quot;http://openmirage.org/wiki/mirage-www&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/samoht/alcotest&quot;&gt;alcotest&lt;/a&gt; (new): a lightweight and colourful test framework built over &lt;a href=&quot;http://ounit.forge.ocamlcore.org/&quot;&gt;oUnit&lt;/a&gt;.  The interface is simpler to facilitate writing tests quickly, and it formats test results nicely.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-block-xen&quot;&gt;mirage-block-xen.1.0.0&lt;/a&gt; (new): is the stable release of the Xen &lt;code&gt;Blkfront&lt;/code&gt; driver for block devices.  The library supports both frontend and backend operation, but only the frontend is plumbed through to Mirage for now (although the backend can be manually configured).&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-block-unix&quot;&gt;mirage-block-unix.1.2.0&lt;/a&gt; (update): fixed some concurrency bugs and added support for buffered I/O to improve performance.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/ocaml-fat&quot;&gt;fat-filesystem.0.10.0&lt;/a&gt; (update): copies with more sector sizes, uses buffered I/O on Unix, and adds a &lt;code&gt;KV_RO&lt;/code&gt; key/value interface as well as a more complicated filesystem one.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-fs-unix&quot;&gt;mirage-fs-unix.1.0.0&lt;/a&gt; (update): implements the &lt;code&gt;KV_RO&lt;/code&gt; signature as a passthrough to a Unix filesystem.  This is convenient during development to avoid recompile cycles while changing data.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-platform&quot;&gt;mirage-xen.1.0.0&lt;/a&gt; (update): removed several distracting-but-harmless linker warnings about code bloat.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;cohttp.0.9.14&lt;/a&gt; (update): supports Server-Side Events via better channel flushing, has a complete set of HTTP codes autogenerated from &lt;a href=&quot;https://github.com/citricsquid/httpstatus.es&quot;&gt;httpstatus.es&lt;/a&gt; and exposes a platform-independent &lt;code&gt;Cohttp_lwt&lt;/code&gt; module.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/ocaml-cow&quot;&gt;cow.0.8.1&lt;/a&gt; (update): switch to the &lt;a href=&quot;https://github.com/pw374/omd&quot;&gt;Omd&lt;/a&gt; library for Markdown parsing, which is significantly more compatible with other parsers.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/samoht/ezjsonm&quot;&gt;ezjsonm.0.2.0&lt;/a&gt; (new): a combinator library to parse, select and manipulate JSON structures.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/avsm/ezxmlm&quot;&gt;ezxmlm.1.0.0&lt;/a&gt; (new): a combinator library to parse, select and transform XML tags and attributes.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mirage/mirage-http-xen&quot;&gt;mirage-http-xen&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirage/mirage-http-unix&quot;&gt;mirage-http-unix&lt;/a&gt; provide the HTTP drivers on top of Cohttp for MirageOS. Although they are very similar at the moment, they will diverge as the Unix variant gains options to use kernel sockets instead of only the network stack.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;We're making great progress on moving our personal homepages over to MirageOS.  The first two introductory wiki posts are also now available:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/wiki/hello-world&quot;&gt;Building a hello world example&lt;/a&gt; takes you through the basic steps to build a Unix and Xen binary.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://openmirage.org/wiki/mirage-www&quot;&gt;Building the MirageOS website&lt;/a&gt; lets you build this website with several variants, demonstrating the Unix passthrough filesystem, the OCaml FAT filesystem library, and how to attach a network stack to your application.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;As always, please feel free to report any issues via the &lt;a href=&quot;https://github.com/mirage/mirage/issues&quot;&gt;bug tracker&lt;/a&gt; and ask questions on the &lt;a href=&quot;mailto:mirageos-devel@lists.xenproject.org&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

   </content><id>https://mirage.io/blog/mirage-1.0.3-released</id><title type="text">MirageOS 1.0.3 released; tutorial on building this website available</title><updated>2013-12-19T23:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="https://mirage.io/blog/announcing-mirage10" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;em&gt;First&lt;/em&gt;: read the &lt;a href=&quot;http://openmirage.org/wiki/overview-of-mirage&quot;&gt;overview&lt;/a&gt; and
&lt;a href=&quot;http://openmirage.org/wiki/technical-background&quot;&gt;technical background&lt;/a&gt; behind the project.&lt;/p&gt;
&lt;p&gt;When we started hacking on MirageOS back in 2009, it started off looking like a
conventional OS, except written in OCaml.   The &lt;a href=&quot;https://github.com/mirage/mirage/tree/old-master&quot;&gt;monolithic
repository&lt;/a&gt; contained all the
libraries and boot code, and exposed a big &lt;code&gt;OS&lt;/code&gt; module for applications to use.
We used this to do several fun &lt;a href=&quot;http://cufp.org/conference/sessions/2011/t3-building-functional-os&quot;&gt;tutorials&lt;/a&gt; at conferences
such as ICFP/CUFP and get early feedback.&lt;/p&gt;
&lt;p&gt;As development continued though, we started to understand what it is we were
building: a &lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;&amp;quot;library operating system&amp;quot;&lt;/a&gt;.  As the number of libraries grew,
putting everything into one repository just wasn't scaling, and it made it hard
to work with third-party code.  We spent some time developing tools to make
Mirage fit into the broader OCaml ecosystem.&lt;/p&gt;
&lt;p&gt;Three key things have emerged from this effort:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://opam.ocaml.org&quot;&gt;OPAM&lt;/a&gt;, a source-based package manager for
 OCaml. It supports multiple simultaneous compiler installations, flexible
 package constraints, and a Git-friendly development workflow.  Since
 releasing 1.0 in March 2013 and 1.1 in October, the community has leapt
 in to contribute over 1800 packages in this short time.  All of the 
 Mirage libraries are now tracked using it, including the Xen libraries.&lt;/li&gt;&lt;li&gt;The build system for embedded programming (such as the Xen target) is
 a difficult one to get right.  After several experiments, Mirage provides
 a single &lt;strong&gt;&lt;a href=&quot;https://github.com/mirage/mirage&quot;&gt;command-line tool&lt;/a&gt;&lt;/strong&gt; that
 combines configuration directives (also written in OCaml) with OPAM to
 make building Xen unikernels as easy as Unix binaries.&lt;/li&gt;&lt;li&gt;All of the Mirage-compatible libraries satisfy a set of module type
 signatures in a &lt;strong&gt;&lt;a href=&quot;https://github.com/mirage/mirage-types/blob/master/lib/v1.mli&quot;&gt;single file&lt;/a&gt;&lt;/strong&gt;.
 This is where Mirage lives up to its name: we've gone from the early
 monolithic repository to a single, standalone interface file that
 describes the interfaces.  Of course, we also have libraries to go along
 with this signature, and they all live in the &lt;a href=&quot;https://github.com/mirage&quot;&gt;MirageOS GitHub organization&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;With these components, I'm excited to announce that MirageOS 1.0 is finally ready
to see the light of day!  Since it consists of so many libraries, we've decided
not to have a &amp;quot;big bang&amp;quot; release where we dump fifty complex libraries on the
open-source community.  Instead, we're going to spend the month of December
writing a series of blog posts that explain how the core components work,
leading up to several use cases:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The development team have all decided to shift our personal homepages to be Mirage
 kernels running on Xen as a little Christmas present to ourselves, so we'll work through that step-by-step how to build 
 a dedicated unikernel and maintain and deploy it (&lt;strong&gt;spoiler:&lt;/strong&gt; see &lt;a href=&quot;https://github.com/mirage/mirage-www-deployment&quot;&gt;this repo&lt;/a&gt;).  This will culminate in
 a webservice that our colleagues at &lt;a href=&quot;http://horizon.ac.uk&quot;&gt;Horizon&lt;/a&gt; have been
 building using Android apps and an HTTP backend.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;http://xenserver.org&quot;&gt;XenServer&lt;/a&gt; crew at Citrix are using Mirage to build custom middlebox VMs
 such as block device caches.&lt;/li&gt;&lt;li&gt;For teaching purposes, the &lt;a href=&quot;http://ocaml.io&quot;&gt;Cambridge Computer Lab team&lt;/a&gt; want a JavaScript backend,
 so we'll explain how to port Mirage to this target (which is rather different
 from either Unix or Xen, and serves to illustrate the portability of our approach).&lt;/li&gt;&lt;/ul&gt;

&lt;h3&gt;How to get involved&lt;/h3&gt;

&lt;p&gt;Bear with us while we update all the documentation and start the blog posts off
today (the final libraries for the 1.0 release are all being merged into OPAM
while I write this, and the usually excellent &lt;a href=&quot;http://travis-ci.org&quot;&gt;Travis&lt;/a&gt; continuous integration system is down due to a &lt;a href=&quot;https://github.com/travis-ci/travis-ci/issues/1727&quot;&gt;bug&lt;/a&gt; on their side).  I'll edit this post to contain links to the future posts
as they happen.&lt;/p&gt;
&lt;p&gt;Since we're now also a proud Xen and Linux Foundation incubator project, our mailing
list is shifting to &lt;a href=&quot;http://lists.xenproject.org/cgi-bin/mailman/listinfo/mirageos-devel&quot;&gt;mirageos-devel@lists.xenproject.org&lt;/a&gt;, and we very much
welcome comments and feedback on our efforts over there.
The &lt;code&gt;#mirage&lt;/code&gt; channel on FreeNode IRC is also growing increasingly popular, as
is simply reporting issues on the main &lt;a href=&quot;http://github.com/mirage/mirage&quot;&gt;Mirage GitHub&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Several people have also commented that they want to learn OCaml properly to
start using Mirage.  I've just co-published an O'Reilly book called
&lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; that's available for free online
and also as hardcopy/ebook.  Our Cambridge colleague John Whittington has
also written an excellent &lt;a href=&quot;http://ocaml-book.com/&quot;&gt;introductory text&lt;/a&gt;, and
you can generally find more resources &lt;a href=&quot;http://ocaml.org/docs/&quot;&gt;online&lt;/a&gt;.
Feel free to ask beginner OCaml questions on our mailing lists and we'll help
as best we can!&lt;/p&gt;

   </content><id>https://mirage.io/blog/announcing-mirage10</id><title type="text">MirageOS 1.0: not just a hallucination!</title><updated>2013-12-09T12:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2013/11/28/asynchronous-python-vs-ocaml/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;ve now migrated the asynchronous download logic in 0install from Python to OCaml + Lwt.
This post records my experiences using Lwt, plus some comparisons with Python&amp;rsquo;s coroutines.
As usual, the examples will be based on the real-world case of 0install, rather than on idealised text-book examples.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-problem&quot;&gt;The problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#solutions&quot;&gt;Solutions&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#callbacks&quot;&gt;Callbacks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#promises&quot;&gt;Promises&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#ocaml-lwt&quot;&gt;OCaml Lwt&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#python-generators&quot;&gt;Python generators&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#examples&quot;&gt;Examples&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#following-a-recipe&quot;&gt;Following a recipe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#downloading-with-libcurl&quot;&gt;Downloading with libcurl&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#error-handling-in-key-look-ups&quot;&gt;Error handling in key look-ups&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#failing-over-to-a-mirror&quot;&gt;Failing over to a mirror&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#switches&quot;&gt;Switches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#parallel-tasks&quot;&gt;Parallel tasks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The problem&lt;/h2&gt;

&lt;p&gt;What happens when you download a program using &lt;a href=&quot;http://0install.net/&quot;&gt;0install&lt;/a&gt;? To make this concrete, let&amp;rsquo;s look at the downloads that happen when you enter the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ 0launch http://simamo.de/0install/armagetronad.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to make this happen:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://armagetronad.org/&quot;&gt;&lt;img src=&quot;http://roscidus.com/blog/images/armagetron.png&quot; class=&quot;border center&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the software is cached, we run immediately. If not, we need to download some things first. The steps are (you don&amp;rsquo;t need to remember this!):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download &lt;a href=&quot;http://simamo.de/0install/armagetronad.xml&quot;&gt;http://simamo.de/0install/armagetronad.xml&lt;/a&gt;. This feed just points us at various sub-feeds that say where to get implementations for each platform.&lt;/li&gt;
  &lt;li&gt;I&amp;rsquo;m on Linux (64 bit), so on my computer we next download (concurrently) the four suggested sub-feeds:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://simamo.de/0install/armagetronad-experimental-Linux-x86_64.xml&quot;&gt;http://simamo.de/0install/armagetronad-experimental-Linux-x86_64.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://simamo.de/0install/armagetronad-alpha-Linux-x86_64.xml&quot;&gt;http://simamo.de/0install/armagetronad-alpha-Linux-x86_64.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://simamo.de/0install/armagetronad-beta-Linux-x86_64.xml&quot;&gt;http://simamo.de/0install/armagetronad-beta-Linux-x86_64.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://simamo.de/0install/armagetronad-stable-Linux-x86_64.xml&quot;&gt;http://simamo.de/0install/armagetronad-stable-Linux-x86_64.xml&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Once we have these, we find a dependency on the library &lt;a href=&quot;http://simamo.de/0install/armagetronad-libs-Linux-x86_64.xml&quot;&gt;http://simamo.de/0install/armagetronad-libs-Linux-x86_64.xml&lt;/a&gt;, so we download that XML file too.&lt;/li&gt;
  &lt;li&gt;Once all the XML downloads have finished, we select a version of Armagetron (0.2.8.3.2 in my case) and its (single) declared library (version 0.3-pre0.1570 here).&lt;/li&gt;
  &lt;li&gt;We download these two tar.bz2 files (concurrently) and unpack them to the cache.&lt;/li&gt;
  &lt;li&gt;Finally, we run (as described in previous posts).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s the overall process. It&amp;rsquo;s not totally trivial, but in fact some of the steps are complex in themselves. For example, to download a single feed (XML) file:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We download the feed from the given URL.&lt;/li&gt;
  &lt;li&gt;We check the GPG signature on the feed. If we don&amp;rsquo;t have the GPG key, we must download that next.&lt;/li&gt;
  &lt;li&gt;Once we&amp;rsquo;ve checked that the signature is valid, we need to decide whether to trust it. We download information from the key information server.&lt;/li&gt;
  &lt;li&gt;Depending on the user&amp;rsquo;s configuration and the key information server&amp;rsquo;s response, we may show a confirmation dialog to the user.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If the primary site (simamo.de) fails, we try the mirror site &lt;a href=&quot;http://roscidus.com/0mirror/&quot;&gt;http://roscidus.com/0mirror/&lt;/a&gt; instead.&lt;/li&gt;
  &lt;li&gt;If the primary site is slow, we ask the mirror too. If the primary then succeeds, we cancel the mirror download. If the mirror succeeds first, we use the information we got from it to find more required downloads, but also continue waiting for the primary (which may have more up-to-date information).&lt;/li&gt;
  &lt;li&gt;If the key information server is slow, we display the dialog to the user anyway, but update the display if the information arrives while the user is pondering.&lt;/li&gt;
  &lt;li&gt;We never use more than 2 HTTP connections per site at the same time. Further requests are queued.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In other words, there&amp;rsquo;s quite a bit of logic here (and there&amp;rsquo;s still the archive downloads too&amp;hellip;). How can we make sure all these operations happen at the right time and that errors are handled correctly?&lt;/p&gt;

&lt;h2&gt;Solutions&lt;/h2&gt;

&lt;p&gt;Note that the challenge here is not to use multiple CPUs in parallel to perform some calculation faster, but to schedule and manage multiple concurrent operations. The effects of concurrency will be visible (i.e. the behaviour of the code, such as whether we decide to contact the mirror server or not, depends on how quickly things happen). Therefore, some non-determinism is unavoidable. However, we want to minimise it.&lt;/p&gt;

&lt;p&gt;Most languages provide some kind of low-level &lt;em&gt;preemptive multi-threading&lt;/em&gt; support, e.g. Python&amp;rsquo;s &lt;code&gt;threading.create&lt;/code&gt;, Haskell&amp;rsquo;s &lt;code&gt;forkIO&lt;/code&gt;, OCaml&amp;rsquo;s &lt;code&gt;Thread.create&lt;/code&gt;, Java&amp;rsquo;s &lt;code&gt;java.lang.Thread&lt;/code&gt; and Go&amp;rsquo;s &lt;code&gt;go&lt;/code&gt;. In these cases, all threads always run in parallel by default. If two threads access a shared or global variable without appropriate locking, the program will occasionally fail in ways that are hard to reproduce or diagnose.&lt;/p&gt;

&lt;p&gt;Of course, these languages provide mutexes, channels, etc to make correct code possible, but this style is unsafe by default. For example, if a multi-threaded program uses some library from multiple threads, and the author of the library was only thinking about single-threaded use, then you likely have a subtle, hard-to-trigger bug.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s consider a simplified example: we want to fetch information from the key information server, parse it, and confirm the key with the user (this server says things like &amp;ldquo;This key belongs to a registered Debian developer&amp;rdquo;).
Within each thread, we might do something like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_with_gui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Probably this code will crash if two keys are downloaded close together, because the graphical toolkit library used to show the GUI isn&amp;rsquo;t thread-safe. But there could be similar issues with any code we call (is &lt;code&gt;parse_key_info&lt;/code&gt; thread-safe, for example? What about the XML parser it uses? etc).&lt;/p&gt;

&lt;p&gt;So how can we avoid these problems? Rust uses its linear types to prevent concurrent access to mutable state, which looks very useful. For other languages, we can use &lt;em&gt;cooperative multi-threading&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The idea here is that instead of running threads in parallel by default and remembering to add locks wherever necessary, we run only one thread at a time, switching between threads only at explicitly marked points.&lt;/p&gt;

&lt;p&gt;The two schemes have different failure modes. If you forget the locking in preemptive code, you get subtle bugs. If you forget to allow task switching in a cooperative system, the program may run slower (waiting when it could be getting on with something). For an application like 0install, cooperative makes far more sense. Just making downloads and GUI interaction alone concurrent is really all we need.&lt;/p&gt;

&lt;h3&gt;Callbacks&lt;/h3&gt;

&lt;p&gt;The simplest scheme to implement uses &lt;em&gt;callbacks&lt;/em&gt;. You tell the system to start an operation, and give it a function to call on success:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;download_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_info_downloaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;key_info_downloaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;confirm_with_gui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trust_confirmed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trust_confirmed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, we don&amp;rsquo;t know what other functions may be called in the time between us calling &lt;code&gt;download_key_info&lt;/code&gt; and the &lt;code&gt;key_info_downloaded&lt;/code&gt; callback, but while our code is executing we know that we have complete control. For example, it&amp;rsquo;s not a problem if &lt;code&gt;parse_key_info&lt;/code&gt; here only supports single threading.&lt;/p&gt;

&lt;p&gt;Callbacks have two major problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They make the code messy and hard to read.&lt;/li&gt;
  &lt;li&gt;They handle exceptions poorly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine that &lt;code&gt;download_key_info&lt;/code&gt; has succeeded. It calls the &lt;code&gt;key_info_downloaded&lt;/code&gt; callback. That calls &lt;code&gt;parse_key_info&lt;/code&gt;, which throws an exception. The exception gets returned to &lt;code&gt;download_key_info&lt;/code&gt; which can&amp;rsquo;t do anything useful with it. Probably, it gets logged and the program hangs, waiting for a call to &lt;code&gt;trust_confirmed&lt;/code&gt; that will never happen.&lt;/p&gt;

&lt;h3&gt;Promises&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Promises&lt;/em&gt; are a nice alternative to callbacks. When you start an operation, you get a &lt;em&gt;promise&lt;/em&gt; for the result. A promise is a place-holder for a result that will arrive in the future. Without any special syntax, using promises might look something like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;data_promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_fulfilled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key_info_downloaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;key_info_downloaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;confirmation_promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_with_gui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation_promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_fulfilled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trust_confirmed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trust_confirmed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;promise.when_fulfilled(callback)&lt;/code&gt; immediately returns a new promise for the (future) result of the callback.&lt;/p&gt;

&lt;p&gt;Internally, a promise initially contains a queue for callbacks. When the promise is (eventually) resolved to a value, the callbacks are all run and the queue is replaced by the value. Attempting to attach any further callbacks just runs them immediately on the value.&lt;/p&gt;

&lt;p&gt;Promises have a number of advantages over callbacks. For example, you can store promises of results in lists, pass them to other functions, etc. One particular advantage is exception handling. Consider our previous example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;confirm_key&lt;/code&gt; returns a promise for the result of &lt;code&gt;key_info_downloaded&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;download_key_info&lt;/code&gt; downloads the data successfully, fulfilling &lt;code&gt;data_promise&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;key_info_downloaded&lt;/code&gt; is called (it was attached to &lt;code&gt;data_promise&lt;/code&gt; as a callback).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;parse_key_info&lt;/code&gt; throws an exception, which is caught by the promise system.&lt;/li&gt;
  &lt;li&gt;This &amp;ldquo;breaks&amp;rdquo; the promise returned by &lt;code&gt;confirm_key&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Whoever was waiting for &lt;code&gt;confirm_key&lt;/code&gt; gets notified of the exception.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice that instead of propagating uncaught exceptions &lt;em&gt;backwards&lt;/em&gt; (to &lt;code&gt;download_key_info&lt;/code&gt;), we propagate them &lt;em&gt;forwards&lt;/em&gt; (to whoever is waiting for the result). The result is that, as in synchronous programming, an exception is not lost just because someone in the chain doesn&amp;rsquo;t handle it.&lt;/p&gt;

&lt;p&gt;A natural next step is to introduce some simpler syntax for this&amp;hellip;&lt;/p&gt;

&lt;h3&gt;OCaml Lwt&lt;/h3&gt;

&lt;p&gt;OCaml provides a couple of libraries for handling promises - &lt;a href=&quot;http://ocsigen.org/lwt/&quot;&gt;Lwt&lt;/a&gt; and &lt;a href=&quot;https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html&quot;&gt;Jane Street&amp;rsquo;s Async&lt;/a&gt;. I&amp;rsquo;ve only looked at Lwt, although they seem &lt;a href=&quot;http://lists.ocaml.org/pipermail/wg-parallel/2013-April/000000.html&quot;&gt;fairly similar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The terminology I introduced above I learnt from E (which also has &lt;a href=&quot;http://www.erights.org/elib/concurrency/refmech.html&quot;&gt;sophisticated distributed promises&lt;/a&gt;). I find the E terms more natural, but here&amp;rsquo;s a conversion table:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;E term&lt;/th&gt;
      &lt;th&gt;Lwt term&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Promise&lt;/td&gt;
      &lt;td&gt;Thread&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fulfilled promise&lt;/td&gt;
      &lt;td&gt;Returned thread&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Broken promise&lt;/td&gt;
      &lt;td&gt;Failed thread&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Unresolved promise&lt;/td&gt;
      &lt;td&gt;Sleeping thread&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Resolver&lt;/td&gt;
      &lt;td&gt;Waker&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In particular, while a Lwt thread is still working to produce a result, the thread is said to be &amp;ldquo;sleeping&amp;rdquo;, which I find rather awkward. A resolver/waker is the object used by the maker of the promise to resolve it.&lt;/p&gt;

&lt;p&gt;Anyway, switching to OCaml and using Lwt without the syntax extensions, we get this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_key_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_key_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation_promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_with_gui&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation_promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;Lwt.bind promise callback&lt;/code&gt; is like our previous &lt;code&gt;promise.when_fulfilled(callback)&lt;/code&gt;. Again, &lt;code&gt;confirm_key&lt;/code&gt; returns a promise (thread) for the final result.&lt;/p&gt;

&lt;p&gt;To make things more convenient, you can enable the Lwt syntax extension. This provides thread-aware alternatives to several built-in OCaml keywords:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_key_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_key_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_with_gui&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;As if by magic, our asynchronous code now reads like the original synchronous code! &lt;code&gt;lwt&lt;/code&gt; is the new way to do &lt;code&gt;Lwt.bind&lt;/code&gt;, by analogy with the ordinary &lt;code&gt;let&lt;/code&gt; construct. We just have to remember that we give up control between evaluating the right-hand side of the assignment (getting a thread/promise for the data) and assigning the actual data on the left-hand side. For example, another function might change a global variable while we&amp;rsquo;re waiting for the promise to resolve.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ocsigen.org/lwt/api/Pa_lwt&quot;&gt;The other short-cuts&lt;/a&gt; are &lt;code&gt;try_lwt&lt;/code&gt;, &lt;code&gt;for_lwt&lt;/code&gt;, &lt;code&gt;while_lwt&lt;/code&gt; and &lt;code&gt;match_lwt&lt;/code&gt;, which do what you&amp;rsquo;d expect. As a bonus, &lt;code&gt;try_lwt&lt;/code&gt; also adds a &lt;code&gt;finally&lt;/code&gt; construct and &lt;code&gt;for_lwt&lt;/code&gt; adds iteration over sequences - both are missing for the core OCaml language.&lt;/p&gt;

&lt;p&gt;There are plenty of functions for combining or creating threads in various ways, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;let thread, waker = Lwt.wait ()&lt;/code&gt; explicitly creates a promise and a resolver for it.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Lwt.return value&lt;/code&gt; evaluates to a returned thread, which is useful if something needs a thread type but you already have the value.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Lwt.choose threads&lt;/code&gt; waits until one of the given threads is ready.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Lwt.join threads&lt;/code&gt; returns a single thread that returns when all of the given threads have returned.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Lwt_list.map_s fn items&lt;/code&gt; applies &lt;code&gt;fn&lt;/code&gt; to each item, waiting for the resulting thread to resolve before doing the next item.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Lwt_list.map_p fn items&lt;/code&gt; as above, but runs all the threads in parallel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Python generators&lt;/h3&gt;

&lt;p&gt;Python has an unusual solution to the problem, using its &lt;em&gt;generator functions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A generator is any function which contains a &lt;code&gt;yield&lt;/code&gt;. Running such a function gets you an iterator. Each time you ask for a value from the iterator, the generator runs until the next &lt;code&gt;yield&lt;/code&gt; to produce the result. It is suspended until the next call. Generators were originally just an easy way to produce sequences, for example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;However, this ability to suspend and resume functions is obviously useful for cooperative multi-threading too and, like many other people, I used them to create a such a system (back in 2004). The version used in the Python version of 0install was designed for Python 2.3, but since then Python has added many useful new features so I&amp;rsquo;ll describe the recent &lt;a href=&quot;http://www.python.org/dev/peps/pep-3156/&quot;&gt;Tulip/asyncio&lt;/a&gt; system rather than my own, even though I haven&amp;rsquo;t actually used it much.&lt;/p&gt;

&lt;p&gt;The idea is that every time you need to wait, you yield the promise (&amp;ldquo;future&amp;rdquo; in Python terminology) you&amp;rsquo;re waiting for. When it&amp;rsquo;s ready, the scheduler will resume your generator function with the result:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_with_gui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Examples&lt;/h2&gt;

&lt;p&gt;Both systems (OCaml Lwt and Python generators) work very well in general. Here are some (slightly simplified) examples from 0install.&lt;/p&gt;

&lt;h3&gt;Following a recipe&lt;/h3&gt;

&lt;p&gt;Some downloads require collecting files from several places (e.g. an upstream tarball and some files to patch it with). We want to download the files in parallel, but execute the steps (e.g. unpacking downloads into the target directory) in series. My solution is that each download is a thread that performs the download and then returns a lazy thunk that applies it:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* Start all the downloads in parallel. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downloads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_step&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* Now iterate over the steps in series. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;downloads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(* Wait for download *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(* Apply download to directory *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Note that we start unpacking as soon as possible; we only wait when the next thing to unpack isn&amp;rsquo;t downloaded yet.&lt;/p&gt;

&lt;p&gt;This was my first attempt at a Python version with asyncio:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Start all downloads in parallel&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;downloads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Wait for all downloads to complete&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downloads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Unpack each download in sequence&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;An interesting difference is that OCaml threads, once started, continue to run by themselves even if no-one is waiting for the result. When the OCaml code is waiting for the first download to complete, the other downloads are still going on. But if we &lt;code&gt;yield from&lt;/code&gt; just the first download in Python, only that download makes progress. In the code above, therefore, the Python waits for all downloads to complete before it starts unpacking.&lt;/p&gt;

&lt;p&gt;You can fix this by wrapping the future with &lt;code&gt;async&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Start all downloads in parallel&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;downloads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Now iterate over the steps in series.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downloads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;c&quot;&gt;# Wait for download&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;c&quot;&gt;# Apply download to directory&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Downloading with libcurl&lt;/h3&gt;

&lt;p&gt;libcurl doesn&amp;rsquo;t provide Lwt support. However, it is thread-safe. We can therefore use the &lt;code&gt;Lwt_preemptive&lt;/code&gt; module to run each download in a real operating system thread and get a promise for its completion. In addition, we use a &lt;code&gt;Lwt_pool&lt;/code&gt; to keep up to two Curl connections per site (queuing further requests).&lt;/p&gt;

&lt;p&gt;When it&amp;rsquo;s our turn to run, we also start a five second timer if the caller wanted to be notified if the download is slow. This is used when downloading the small XML metadata files so the mirror can be tried in parallel (for archives, we only try the mirror if the download actually fails).&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_site&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_per_site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_connection&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Curl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_per_site&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_connection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule_download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;if_slow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;Lwt_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe_some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_slow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;nn&quot;&gt;Lwt_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;n&quot;&gt;download_in_thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;try_lwt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;nn&quot;&gt;Lwt_preemptive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_some&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;download_in_thread&lt;/code&gt; function also needs to send progress notifications to back to Lwt, which it does using &lt;code&gt;Lwt_preemptive.run_in_main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Update: note that recent versions of ocurl support Lwt directly.&lt;/p&gt;

&lt;p&gt;Python provides the &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;, which combines pooling and preemptive threading. This makes it a bit harder to start the timer (which should happen cooperatively), so we need to use &lt;code&gt;call_soon_threadsafe&lt;/code&gt;, which is like Lwt&amp;rsquo;s &lt;code&gt;run_in_main&lt;/code&gt;. Python doesn&amp;rsquo;t seem to provide a way to manage the HTTP connections with the pool - I guess you have to do that manually.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_per_site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_per_site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;schedule_download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;thread_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;c&quot;&gt;# Wait for an executor to be ready...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_ready&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;c&quot;&gt;# Wait until 5 seconds into the download&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;c&quot;&gt;# Notify that the download is slow&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;if_slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_in_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call_soon_threadsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread_ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;					  &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;download_in_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_in_executor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_in_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Error handling in key look-ups&lt;/h3&gt;

&lt;p&gt;Lwt does have a gotcha for error handling. Consider this code:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;download_key_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;log_warning&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed to download key info: %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_key_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;If querying the key info server fails, we want to log the error but continue with the confirmation, just with an empty list of hints.&lt;/p&gt;

&lt;p&gt;Something I really dislike is code that looks right, compiles without warnings, works when you test it, and then fails in the field. Unfortunately, this code does just that. Even if you unit-test the error case!&lt;/p&gt;

&lt;p&gt;The bug occurs because we accidentally used &lt;code&gt;try&lt;/code&gt; rather than &lt;code&gt;try_lwt&lt;/code&gt;. &lt;code&gt;download_key_info&lt;/code&gt; successfully returns a promise for the information, so the &lt;code&gt;with&lt;/code&gt; clause isn&amp;rsquo;t triggered and we exit the try block. Then Lwt waits for the promise to resolve so it can set &lt;code&gt;data&lt;/code&gt;.
When unit-testing, you&amp;rsquo;ll probably raise the test exception immediately and so the &lt;code&gt;with&lt;/code&gt; block does get called.&lt;/p&gt;

&lt;p&gt;By contrast, Python&amp;rsquo;s generators have no such problems:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirm_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Failed to download key info: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_key_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirm_with_gui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The other Lwt constructs don&amp;rsquo;t have this problem because the type-system will detect the error (e.g. if you use &lt;code&gt;match&lt;/code&gt; instead of &lt;code&gt;match_lwt&lt;/code&gt;), but with &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;try_lwt&lt;/code&gt; the type signatures are the same.&lt;/p&gt;

&lt;h3&gt;Failing over to a mirror&lt;/h3&gt;

&lt;p&gt;We start downloading each XML feed from its primary site, but trigger a timeout task if it takes too long.
The timeout starts a download from the mirror, which happens in parallel with the original download attempt.
We don&amp;rsquo;t want to start the timer immediately because the download might get queued due to the rate limiting code, so we just pass the &lt;code&gt;if_slow&lt;/code&gt; trigger to the download system (see above).&lt;/p&gt;

&lt;p&gt;Because we need to report intermediate results (e.g. we have downloaded a possibly-slightly-old version from the mirror), we return a pair of the new result and a promise for the next update (or &lt;code&gt;None&lt;/code&gt; if this is the last). In a similar way, we return errors as a pair of the current error (e.g. &amp;ldquo;mirror failed&amp;rdquo;) and a promise for the other result.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Lwt.choose&lt;/code&gt; selects the result of the first task from a list to resolve. When choosing between the primary and the mirror however we ignore the result and test explicitly, because we need to know which one it was.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout_waker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_slow&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout_waker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_primary_download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;if_slow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Download just the upstream feed, unless it takes too long... *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;match_lwt&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout_task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_mirror_download&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_mirror&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirror&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(* OK, maybe it's just being slow... *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;log_info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Feed download from %s is taking a long time.&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(* Start downloading from mirror... *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_mirror_download&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;c&quot;&gt;(* Wait for a result from either *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirror&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Fail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sleep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;c&quot;&gt;(* The mirror finished first *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirror&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;n&quot;&gt;log_info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mirror succeeded, but will continue to wait for primary&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_primary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;n&quot;&gt;log_info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mirror download failed: %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;n&quot;&gt;wait_for_primary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;c&quot;&gt;(* The primary returned first *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirror&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_mirror&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirror&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;m too lazy to translate this into modern Python, but I think it&amp;rsquo;s clear that a direct translation would be easy enough.&lt;/p&gt;

&lt;p&gt;The main problem would be losing OCaml&amp;rsquo;s type checking, which ensures that we handle all the possible error conditions. I simplified the outcomes into just &lt;code&gt;ok&lt;/code&gt; and &lt;code&gt;problem&lt;/code&gt; above, but in the real code we also distinguish &lt;code&gt;replay_attack&lt;/code&gt;, &lt;code&gt;aborted_by_user&lt;/code&gt; and &lt;code&gt;no_trusted_keys&lt;/code&gt;, and handle them differently. For example, a &amp;ldquo;replay attack&amp;rdquo; from the mirror (where the mirror gives us a version older than one we&amp;rsquo;ve already seen) is ignored, whereas it&amp;rsquo;s reported if it comes from the primary.&lt;/p&gt;

&lt;h2&gt;Switches&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Lwt_switch&lt;/code&gt; module provides a way to group a set of activities together so you can stop them all at once.
You create a switch and pass it to all the various setup functions you call.
When you&amp;rsquo;re done, call &lt;code&gt;Lwt_switch.turn_off&lt;/code&gt; to kill everything.
For example, each download goes to a temporary file. To ensure they&amp;rsquo;re all deleted afterwards:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;try_lwt&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Lwt_switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turn_off&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s easy to attach whatever finalisation code you want to a switch, e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_temp_file&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Lwt_switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_hook&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlink&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Lwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpfile&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Then it doesn&amp;rsquo;t matter whether we download successfully, raise an exception inside of &lt;code&gt;download&lt;/code&gt;, raise an exception after calling &lt;code&gt;download&lt;/code&gt;, etc; the file always gets deleted.&lt;/p&gt;

&lt;p&gt;Perhaps this is bad API design and I shouldn&amp;rsquo;t rely on &lt;code&gt;download&lt;/code&gt;&amp;rsquo;s caller to clean up the file if &lt;code&gt;download&lt;/code&gt; fails, but it does seem convenient. To avoid mistakes, I used &lt;code&gt;~switch&lt;/code&gt; to force the caller to pass a switch instead of the more normal &lt;code&gt;?switch&lt;/code&gt; (where use of a switch is optional).&lt;/p&gt;

&lt;h2&gt;Parallel tasks&lt;/h2&gt;

&lt;p&gt;Regular OCaml lets you assign multiple variables at once using &lt;code&gt;and&lt;/code&gt;, so that all the expressions are evaluated in a context where none of them is bound. For example, to switch the names of two variables:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Lwt uses this syntax with &lt;code&gt;lwt&lt;/code&gt; to create multiple tasks in parallel and then wait for all of them. For example, when we run a command we may want to collect the standard output and standard error separately but in parallel (if we did them in series, the process might get stuck trying to write its stderr while we were trying to read its stdout, if the Unix pipe gets full). With this syntax, we can get the two strings with just:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;lwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;0install needs to manage several fairly complex concurrent download activities, including error handling, timeouts and mirrors. Cooperative multi-threading allows us to support this easily with a low risk of race conditions.&lt;/p&gt;

&lt;p&gt;Python and OCaml both provide powerful and easy-to-use cooperative threading support. I think Python&amp;rsquo;s generators are slightly easier to understand for beginners, but I find both quite easy to use. I find Lwt&amp;rsquo;s terminology a little confusing, but thinking of threads as promises seems to help. Both systems handle exceptions sensibly.&lt;/p&gt;

&lt;p&gt;Comparing Python and OCaml code, they&amp;rsquo;re pretty similar. Both make it easy to start and manage cooperative threads, to interact with pools of preemptively threaded code (e.g. libcurl) and to handle errors.
Using OCaml variants for network errors rather than exceptions is useful; this ensures that all such errors are handled. If you rely on exceptions instead then things mostly work, but watch out for using &lt;code&gt;try&lt;/code&gt; rather than &lt;code&gt;try_lwt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The old 0install Python code used a custom system built on top of Python&amp;rsquo;s generators, but Python&amp;rsquo;s new asyncio module provides a standardised replacement (asyncio will be added to the standard library in Python 3.4). Lwt has been around for a while and is already available from Linux distribution repositories.&lt;/p&gt;

&lt;p&gt;Lwt also integrates with several other libraries, including GTK, OBus (D-BUS bindings) and React. Lwt seems very reliable. The only bug I found in Lwt so far was &lt;a href=&quot;https://github.com/ocsigen/lwt/issues/20&quot;&gt;a pipe read failure on Windows&lt;/a&gt;, which they quickly fixed.&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2013/11/28/asynchronous-python-vs-ocaml/</id><title type="text">Asynchronous Python vs OCaml</title><updated>2013-11-28T13:06:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://amirchaudhry.com/switching-from-bootstrap-to-zurb-foundation" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;I&amp;rsquo;ve just updated my site&amp;rsquo;s HTML/CSS and moved from Twitter Bootstrap to 
&lt;a href=&quot;http://foundation.zurb.com/learn/features.html&quot;&gt;Zurb Foundation&lt;/a&gt;.  This post captures my subjective notes on the 
migration.&lt;/p&gt;

&lt;h4&gt;My use of Bootstrap&lt;/h4&gt;

&lt;p&gt;When I originally set this site up, I didn&amp;rsquo;t know what frameworks existed or 
anything more than the basics of dealing with HTML (and barely any CSS).  I 
came across Twitter Bootstrap and immediately decided it would Solve All My 
Problems.  It really did.  Since then, I&amp;rsquo;ve gone through one &amp;lsquo;upgrade&amp;rsquo; with 
Bootstrap (from 1.x to 2.x), after which I dutifully ignored all the fixes 
and improvements (note that Bootstrap was up to v2.3.2 while I was still 
using v2.0.2).  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://amirchaudhry.com/images/switch-to-foundation/responsive-design.png&quot; alt=&quot;Responsive Design&quot;/&gt;&lt;/p&gt;

&lt;p&gt;For the most part, this was fine with me but for a while now, I&amp;rsquo;ve been 
meaning to make this site &amp;lsquo;responsive&amp;rsquo; (read: not look like crap from a 
mobile).  Bootstrap v3 purports to be mobile-first so upgrading would likely 
give me what I&amp;rsquo;m after but v3 is &lt;a href=&quot;http://getbootstrap.com/getting-started/&quot;&gt;not backwards compatible&lt;/a&gt;, 
meaning I&amp;rsquo;d have to rewrite parts of the HTML.  Since this step was 
unavoidable, it led me to have another look at front-end frameworks, just to 
see if I was missing anything.  This was especially relevant since we&amp;rsquo;d 
&lt;a href=&quot;http://amirchaudhry.com/announcing-new-ocamlorg/&quot;&gt;just released&lt;/a&gt; the new &lt;a href=&quot;http://ocaml.org&quot;&gt;OCaml.org&lt;/a&gt; 
website, itself built with Bootstrap v2.3.1 (we&amp;rsquo;d done the design/templating 
work long before v3 was released).  It would be useful to know what else is 
out there for any future work.&lt;/p&gt;

&lt;p&gt;Around this time I discovered Zurb Foundation and also the numerous 
comparisons between them (note: Foundation seems to come out ahead in most 
of those).  A few days ago, the folks at Zurb released 
&lt;a href=&quot;http://zurb.com/article/1280/foundation-5-blasts-off--2&quot;&gt;version 5&lt;/a&gt;, so I decided that now is the time to kick the 
tires.  For the last few days, I&amp;rsquo;ve been playing with the framework and in 
the end I decided to migrate my site over completely.  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://foundation.zurb.com/learn/features.html&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/switch-to-foundation/zurb-yeti.png&quot; alt=&quot;Foundation's Yeti&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Swapping out one framework for another&lt;/h4&gt;

&lt;p&gt;Over time, I&amp;rsquo;ve become moderately experienced with HTML/CSS and I can 
usually wrangle things to look the way I want, but my solutions aren&amp;rsquo;t 
necessarily elegant. I was initially concerned that I&amp;rsquo;d already munged 
things so much that changing anything would be a pain.  When I first put the 
styles for this site together, I had to spend quite a bit of time 
overwriting Bootstrap&amp;rsquo;s defaults so I was prepared for the same when using 
Foundation.  Turns out that I was fine.  I currently use &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; (and 
&lt;a href=&quot;http://jekyllbootstrap.com&quot;&gt;Jekyll Bootstrap&lt;/a&gt;) so I only had three template files and a couple of 
HTML pages to edit and because I&amp;rsquo;d kept most of my custom CSS in a separate 
file, it was literally a case of swapping out one framework for another and 
bug-fixing from there onwards.  There&amp;rsquo;s definitely a lesson here in using 
automation as much as possible.&lt;/p&gt;

&lt;p&gt;Customising the styles was another area of concern but I was pleasantly 
surprised to find I needed &lt;em&gt;less&lt;/em&gt; customisation than with Bootstrap.  This 
is likely because I didn&amp;rsquo;t have to override as many defaults (and probably 
because I&amp;rsquo;ve learned more about CSS since then).  The one thing I seemed to 
be missing was a way to deal with code sections, so I just took what 
Bootstrap had and copied it in.  At some point I should revisit this.&lt;/p&gt;

&lt;p&gt;It did take me a while to get my head around Foundation&amp;rsquo;s grid but it was 
worth it in the end.  The idea is that you should design for small screens 
first and then adjust things for larger screens as necessary. There are 
several different default sizes which inherit their properties from the size 
below, unless you explicitly override them.  I initially screwed this up by 
explicitly defining the grid using the &lt;code&gt;small-#&lt;/code&gt; classes, which obviously 
looks ridiculous on small screens.  I fixed it by swapping out &lt;code&gt;small-#&lt;/code&gt; for 
&lt;code&gt;medium-#&lt;/code&gt; everywhere in the HTML, after which everything looked reasonable. 
Items flowed sensibly into a default column for the small screens and looked 
acceptable for larger screens and perfectly fine on desktops.  I could do 
more styling of the mobile view but I&amp;rsquo;d already achieved most of what I was 
after.  &lt;/p&gt;

&lt;h4&gt;Fixing image galleries and embedded content&lt;/h4&gt;

&lt;p&gt;The only additional thing I used from Bootstrap was the &lt;a href=&quot;http://getbootstrap.com/javascript/#carousel&quot;&gt;Carousel&lt;/a&gt;. I&amp;rsquo;d 
written some custom helper scripts that would take some images and 
thumbnails from a specified folder and produce clickable thumbnails with a 
slider underneath.  Foundation provides &lt;a href=&quot;http://foundation.zurb.com/docs/components/orbit.html&quot;&gt;Orbit&lt;/a&gt;, so I had to spend time 
rewriting my script to produce the necessary HTML.  This actually resulted 
in cleaner HTML and one of the features I wanted (the ability to link to a 
specific image) was available by default in Orbit.  At this point I also 
tried to make the output look better for the case where JavaScript is 
disabled (in essence, each image is just displayed as a list).  Below is an 
example of an image gallery, taken from a previous post, when I 
&lt;a href=&quot;http://amirchaudhry.com/joined-the-computer-lab/&quot;&gt;joined the computer lab&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;gallery&quot;&gt;
  &lt;noscript&gt;&lt;small&gt;&lt;em&gt;Note: The gallery needs JavaScript but I've tried to make it degrade gracefully. -Amir&lt;/em&gt;&lt;/small&gt;&lt;/noscript&gt;
  &lt;ul class=&quot;inline-list&quot;&gt;
    
      &lt;li&gt;&lt;a data-orbit-link=&quot;join-comp-lab-1&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/join-comp-lab/join-comp-lab-thumb-1.png&quot; alt=&quot;join-comp-lab-thumb-1&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
    
      &lt;li&gt;&lt;a data-orbit-link=&quot;join-comp-lab-2&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/join-comp-lab/join-comp-lab-thumb-2.png&quot; alt=&quot;join-comp-lab-thumb-2&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
    
      &lt;li&gt;&lt;a data-orbit-link=&quot;join-comp-lab-3&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/join-comp-lab/join-comp-lab-thumb-3.png&quot; alt=&quot;join-comp-lab-thumb-3&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
    
  &lt;/ul&gt;
  &lt;ul data-orbit=&quot;&quot; data-options=&quot;next_on_click:true; timer_speed:3000; pause_on_hover:false; bullets:false;&quot;&gt;
    
    &lt;li class=&quot;gallery-image&quot; data-orbit-slide=&quot;join-comp-lab-1&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/join-comp-lab/join-comp-lab-1.jpg&quot; alt=&quot;join-comp-lab-1&quot;/&gt;&lt;/li&gt;
    
    &lt;li class=&quot;gallery-image&quot; data-orbit-slide=&quot;join-comp-lab-2&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/join-comp-lab/join-comp-lab-2.jpg&quot; alt=&quot;join-comp-lab-2&quot;/&gt;&lt;/li&gt;
    
    &lt;li class=&quot;gallery-image&quot; data-orbit-slide=&quot;join-comp-lab-3&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/join-comp-lab/join-comp-lab-3.jpg&quot; alt=&quot;join-comp-lab-3&quot;/&gt;&lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Foundation also provides a component called &lt;a href=&quot;http://foundation.zurb.com/docs/components/flex_video.html&quot;&gt;Flex Video&lt;/a&gt;, which allows the 
browser to scale videos to the appropriate size.  This fix was as simple as 
going back through old posts and wrapping anything that was &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; in a 
&lt;code&gt;&amp;lt;div class=&amp;quot;flex-video&amp;quot;&amp;gt;&lt;/code&gt;.  It really was that simple and all the Vimeo and 
YouTube items scaled perfectly.  Here&amp;rsquo;s an example of a video from an 
earlier post, where I gave a &lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg/&quot;&gt;walkthrough of the ocaml.org site&lt;/a&gt;. 
Try changing the width of your browser window to see it scale.&lt;/p&gt;

&lt;div class=&quot;flex-video widescreen vimeo&quot;&gt;
  &lt;iframe src=&quot;http://player.vimeo.com/video/61768157?byline=0&amp;amp;portrait=0&amp;amp;color=de9e6a&quot; width=&quot;540&quot; height=&quot;303&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;Video demo&lt;/iframe&gt;
&lt;/div&gt;

&lt;h4&gt;Framework differences&lt;/h4&gt;

&lt;p&gt;Another of the main difference between the two frameworks is that Bootstrap 
uses &lt;a href=&quot;http://lesscss.org&quot;&gt;LESS&lt;/a&gt; to manage its CSS whereas Foundation uses &lt;a href=&quot;http://sass-lang.com&quot;&gt;SASS&lt;/a&gt;.  Frankly, 
I&amp;rsquo;ve no experience with either of them so it makes little difference to me. 
It&amp;rsquo;s worth bearing in mind for anyone who&amp;rsquo;s workflow does involve 
pre-processing.  Also, Bootstrap is available under the 
&lt;a href=&quot;http://getbootstrap.com/getting-started/#license-faqs&quot;&gt;Apache 2 License&lt;/a&gt;, while Foundation is released under 
the &lt;a href=&quot;http://foundation.zurb.com/learn/faq.html#question-3&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Summary&lt;/h4&gt;

&lt;p&gt;Overall, the transition was pretty painless and most of the time was spent 
getting familiar with the grid, hunting for docs/examples and trying to make 
the image gallery work the way I wanted.  I do think Bootstrap&amp;rsquo;s docs are 
better but Foundation&amp;rsquo;s aren&amp;rsquo;t bad.  &lt;/p&gt;

&lt;p&gt;Although this isn&amp;rsquo;t meant to be a comparison, I much prefer Foundation to 
Bootstrap.  If you&amp;rsquo;re not sure which to use then I think the secret is in 
the names of the frameworks.  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bootstrap (for me) was a &lt;em&gt;great&lt;/em&gt; way to &amp;lsquo;&lt;em&gt;bootstrap&lt;/em&gt;&amp;rsquo; a site quickly with 
lots of acceptable defaults &amp;ndash; it was quick to get started but took some 
work to alter.  &lt;/li&gt;
  &lt;li&gt;Foundation seems to provide a great &amp;lsquo;&lt;em&gt;foundation&lt;/em&gt;&amp;rsquo; on which to create more 
customised sites &amp;ndash; it&amp;rsquo;s more flexible but needs more upfront thought.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s pretty much how I&amp;rsquo;d recommend them to people now.&lt;/p&gt;

</content><id>http://amirchaudhry.com/switching-from-bootstrap-to-zurb-foundation</id><title type="text">Switching from Bootstrap to Zurb Foundation</title><updated>2013-11-26T21:05:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://amirchaudhry.com/announcing-new-ocamlorg" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;As some of you may have noticed, the new OCaml.org site is now live!  &lt;/p&gt;

&lt;p&gt;The DNS may still be propagating so if &lt;a href=&quot;http://ocaml.org&quot;&gt;http://ocaml.org&lt;/a&gt; hasn&amp;rsquo;t updated for you then try http://166.78.252.20.  This post is in two parts: the first is the announcement and the second is a call for content.&lt;/p&gt;

&lt;h3&gt;New OCaml.org website design!&lt;/h3&gt;

&lt;p&gt;The new site represents a major milestone in the continuing growth of the OCaml ecosystem. It&amp;rsquo;s the culmination of a lot of volunteer work over the last several months and I&amp;rsquo;d specifically like to thank &lt;a href=&quot;https://github.com/Chris00&quot;&gt;Christophe&lt;/a&gt;, &lt;a href=&quot;http://ashishagarwal.org&quot;&gt;Ashish&lt;/a&gt; and &lt;a href=&quot;http://philippewang.info/CL/&quot;&gt;Philippe&lt;/a&gt; for their dedication (the &lt;a href=&quot;https://github.com/ocaml/ocaml.org/commits/master&quot;&gt;commit logs&lt;/a&gt; speak volumes).  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg/&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/ann-new-ocamlorg/ocaml-home-wire.png&quot; alt=&quot;OCaml.org Wireframes&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We began this journey just over 8 months ago with paper, pencils and a lot of ideas. This led to a comprehensive set of &lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg/&quot;&gt;wireframes and walk-throughs&lt;/a&gt; of the site, which then developed into a collection of &lt;a href=&quot;https://github.com/ocaml/ocaml.org/wiki/Site-Redesign&quot;&gt;Photoshop mockups&lt;/a&gt;. In turn, these formed the basis for the html templates and style sheets, which we&amp;rsquo;ve adapted to fit our needs across the site.  &lt;/p&gt;

&lt;p&gt;Alongside the design process, we also considered the kind of structure and &lt;a href=&quot;http://lists.ocaml.org/pipermail/infrastructure/2013-July/000211.html&quot;&gt;workflow we aspired to&lt;/a&gt;, both as maintainers and contributors.  This led us to develop completely new tools for &lt;a href=&quot;http://pw374.github.io/posts/2013-09-05-22-31-26-about-omd.html&quot;&gt;Markdown&lt;/a&gt; and &lt;a href=&quot;http://pw374.github.io/posts/2013-10-03-20-35-12-using-mpp-two-different-ways.html&quot;&gt;templating&lt;/a&gt; in OCaml, which are now available in OPAM for the benefit all.  &lt;/p&gt;

&lt;p&gt;Working on all these things in parallel definitely had it challenges (which I&amp;rsquo;ll write about separately) but the result has been worth the effort.  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ocaml.org&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/ann-new-ocamlorg/ocaml-home-mockup.png&quot; alt=&quot;OCaml.org&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The journey is ongoing and we still have many more improvements we hope to make. The site you see today primarily improves upon the design, structure and workflows but in time, we also intend to incorporate more information on packages and documentation. With the new tooling, moving the website forward will become much easier and I hope that more members of the community become involved in the generation and curation of content.  This brings me to the second part of this post.&lt;/p&gt;

&lt;h3&gt;Call for content&lt;/h3&gt;

&lt;p&gt;We have lots of great content on the website but there are parts that could do with a refresh and gaps that could be filled.  As a community driven site, we need ongoing contributions to ensure that the site best reflects its members.  &lt;/p&gt;

&lt;p&gt;For example, if you do commercial work on OCaml then maybe you&amp;rsquo;d like to add yourself to the &lt;a href=&quot;http://ocaml.org/community/support.html&quot;&gt;support page&lt;/a&gt;? Perhaps there are tutorials you can help to complete, like &lt;a href=&quot;http://ocaml.org/learn/tutorials/99problems.html&quot;&gt;99 problems&lt;/a&gt;?  If you&amp;rsquo;re not sure where to begin, there are already a number of &lt;a href=&quot;https://github.com/ocaml/ocaml.org/issues?labels=content&quot;&gt;content issues&lt;/a&gt; you could contribute to.  &lt;/p&gt;

&lt;p&gt;Although we&amp;rsquo;ve gone through a bug-hunt already, feedback on the site is still very welcome.  You can either &lt;a href=&quot;https://github.com/ocaml/ocaml.org/issues&quot;&gt;create an issue&lt;/a&gt; on the tracker (preferred), or email the infrastructure list. &lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s fantastic how far we&amp;rsquo;ve come and I look forward to the next phase!&lt;/p&gt;

</content><id>http://amirchaudhry.com/announcing-new-ocamlorg</id><title type="text">Announcing the new OCaml.org</title><updated>2013-11-20T23:00:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://amirchaudhry.com/migration-plan-ocaml-org" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;We&amp;rsquo;re close to releasing the new design of ocaml.org but need help from the 
OCaml community to identify and fix bugs before we switch next week.&lt;/p&gt;

&lt;p&gt;Ashish, Christophe, Philippe and I have been discussing how we should go 
about this and below is the plan for migration.  If anyone would like to 
discuss any of this, then the &lt;a href=&quot;http://lists.ocaml.org/listinfo/infrastructure&quot;&gt;infrastructure list&lt;/a&gt; is the best 
place to do so.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We&amp;rsquo;ve made a &lt;strong&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml.org/tree/redesign&quot;&gt;new branch&lt;/a&gt;&lt;/strong&gt; on the main ocaml.org repository with 
the redesign.  This branch is a fork of the master and we&amp;rsquo;ve simply cleaned 
up and replayed our git commits there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We&amp;rsquo;ve built a live version of the new site, which is visible at 
&lt;strong&gt;&lt;a href=&quot;http://preview.ocaml.org&quot;&gt;http://preview.ocaml.org&lt;/a&gt;&lt;/strong&gt; - this is rebuilt every few minutes 
from the branch mentioned above.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Over the course of one week, we ask the community to review the new site 
and &lt;strong&gt;&lt;a href=&quot;https://github.com/ocaml/ocaml.org/issues&quot;&gt;report any bugs or problems&lt;/a&gt;&lt;/strong&gt; on the issue tracker. We &lt;em&gt;triage&lt;/em&gt; 
those bugs to identify any blockers and work on those first.  This is the 
phase we&amp;rsquo;ll be in from &lt;em&gt;today&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After one week (7 days), and after blocking bugs have been fixed, we 
&lt;strong&gt;merge the redesign branch&lt;/strong&gt; into the master branch.  This would 
effectively present the new site to the world.  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;During the above, we would not be able to accept any new pull requests on 
the master branch but would be happy to accept them on the new, redesign 
branch.  Hence, restricting the time frame to one week.  &lt;/p&gt;

&lt;p&gt;Please note that the above is only intended to merge the &lt;em&gt;design&lt;/em&gt; and 
&lt;em&gt;toolchain&lt;/em&gt; for the new site.  Specifically, we&amp;rsquo;ve created new landing 
pages, have new style sheets and have restructured the site&amp;rsquo;s contents as 
well as made some new libraries (&lt;a href=&quot;http://pw374.github.io/posts/2013-09-05-22-31-26-about-omd.html&quot;&gt;OMD&lt;/a&gt; and &lt;a href=&quot;http://pw374.github.io/posts/2013-10-03-20-39-07-OPAMaging-MPP.html&quot;&gt;MPP&lt;/a&gt;). The new toolchain 
means people can write files in markdown, which makes contributing content a 
lot easier.  &lt;/p&gt;

&lt;p&gt;Since the files are on GitHub, people don&amp;rsquo;t even need to clone the site 
locally to make simple edits (or even add new pages). Just click the &amp;lsquo;Edit 
this page&amp;rsquo; link in the footer to be taken to the right file in the 
repository and GitHub&amp;rsquo;s editing and pull request features will allow you to 
make changes and submit updates, all from within your browser (see the 
&lt;a href=&quot;https://help.github.com/articles/creating-and-editing-files-in-your-repository&quot;&gt;GitHub Article&lt;/a&gt; for details).  &lt;/p&gt;

&lt;p&gt;There is still work to be done on adding new features but the above changes 
are already a great improvement to the site and are ready to be reviewed by 
the OCaml community and merged.&lt;/p&gt;

</content><id>http://amirchaudhry.com/migration-plan-ocaml-org</id><title type="text">Migration plan for the OCaml.org redesign</title><updated>2013-11-06T11:00:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2013/10/30/third-compiler-hacking-session" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;It's time for the third Cambridge OCaml compiler-hacking session! This time we're going to be back in the &lt;a href=&quot;http://www.cl.cam.ac.uk/&quot;&gt;Computer Lab&lt;/a&gt;, where the first session was held.&lt;/p&gt;

&lt;p&gt;If you're planning to come along, it'd be helpful if you could &lt;a href=&quot;http://doodle.com/czzp7ik4r72npz6p&quot;&gt;&lt;em&gt;indicate interest via Doodle&lt;/em&gt;&lt;/a&gt; and &lt;a href=&quot;http://lists.ocaml.org/listinfo/cam-compiler-hacking&quot;&gt;&lt;em&gt;sign up to the mailing list&lt;/em&gt;&lt;/a&gt; to receive updates:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Where&lt;/em&gt;: Room &lt;a href=&quot;http://www.cl.cam.ac.uk/research/dtg/openroommap/static/?s=FW11&amp;amp;amp%3Blabels=1&quot;&gt;FW11&lt;/a&gt;, &lt;a href=&quot;http://www.cl.cam.ac.uk/directions/&quot;&gt;Computer Laboratory, Madingley Road&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When&lt;/em&gt;: 6pm, Wednesday 6th November&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Who&lt;/em&gt;: anyone interested in improving OCaml. Knowledge of OCaml programming will obviously be helpful, but prior experience of working on OCaml internals isn't necessary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What&lt;/em&gt;: fixing bugs, implementing new features, learning about OCaml internals&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wiki&lt;/em&gt;: &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki&quot;&gt;https://github.com/ocamllabs/compiler-hacking/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're defining &amp;quot;compiler&amp;quot; pretty broadly, to include anything that's part of the standard distribution, which means at least the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/libref/index.html&quot;&gt;standard library&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual024.html&quot;&gt;runtime&lt;/a&gt;, tools (&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.01/depend.html&quot;&gt;ocamldep&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc105&quot;&gt;ocamllex&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual026.html#toc107&quot;&gt;ocamlyacc&lt;/a&gt;, etc.), &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-camlp4/manual002.html&quot;&gt;camlp4&lt;/a&gt;, &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual032.html&quot;&gt;ocamlbuild&lt;/a&gt;, the &lt;a href=&quot;http://caml.inria.fr/resources/doc/index.en.html&quot;&gt;documentation&lt;/a&gt;, and the compiler itself. We'll have suggestions for &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;mini-projects&lt;/a&gt; for various levels of experience, but feel free to come along and work on whatever you fancy.&lt;/p&gt;

&lt;p&gt;We'll also be ordering pizza, so if you want to be counted for food you should aim to arrive by 6.30pm.&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2013/10/30/third-compiler-hacking-session</id><title type="text">Third OCaml compiler hacking session</title><updated>2013-10-30T11:49:04+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://amirchaudhry.com/fpdays-review" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;&lt;a href=&quot;http://fpdays.net/2013/sessions/index.php?session=24&quot;&gt;&lt;img src=&quot;http://amirchaudhry.com/images/web/fpdays-logo.png&quot; style=&quot;float: right; margin-top: 10px; margin-left: 10px&quot;/&gt;&lt;/a&gt;
Last Thursday a bunch of us from the OCaml Labs team gave an OCaml tutorial 
at the &lt;a href=&quot;http://fpdays.net/2013/sessions/index.php?session=24&quot;&gt;FPDays&lt;/a&gt; conference (an event for people interested in Functional 
Programming).  &lt;a href=&quot;https://github.com/yallop&quot;&gt;Jeremy&lt;/a&gt; and I led the session with &lt;a href=&quot;http://www.lpw25.net&quot;&gt;Leo&lt;/a&gt;, &lt;a href=&quot;https://github.com/dsheets&quot;&gt;David&lt;/a&gt; and 
&lt;a href=&quot;http://philippewang.info/CL/&quot;&gt;Philippe&lt;/a&gt; helping everyone progress and dealing with questions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://amirchaudhry.com/images/fpdays2013/fpdays2013-01.jpg&quot; style=&quot;float: left; margin-right: 10px&quot;/&gt;
It turned out to be by far the &lt;em&gt;most popular session&lt;/em&gt; at the conference with 
over 20 people all wanting to get to grips with OCaml!  An excellent turnout 
and a great indicator of the interest that&amp;rsquo;s out there, especially when you 
offer a hands-on session to people.  This shouldn&amp;rsquo;t be a surprise as we&amp;rsquo;ve 
had good attendance for the general &lt;a href=&quot;http://www.meetup.com/Cambridge-NonDysFunctional-Programmers/&quot;&gt;OCaml meetups&lt;/a&gt; I&amp;rsquo;ve run 
and also the &lt;a href=&quot;http://ocamllabs.github.io/compiler-hacking/2013/09/17/compiler-hacking-july-2013.html&quot;&gt;compiler hacking sessions&lt;/a&gt;, which Jeremy and 
Leo have been building up (do sign up if you&amp;rsquo;re interested in either of 
those!).  We had a nice surprise for attendees, which were 
&lt;a href=&quot;http://en.wikipedia.org/wiki/Galley_proof&quot;&gt;uncorrected proof&lt;/a&gt; copies of Real World OCaml and luckily, we had just 
enough to go around.&lt;/p&gt;

&lt;p&gt;For the tutorial itself, Jeremy put together a nice sequence of exercises 
and a &lt;a href=&quot;https://github.com/ocamllabs/fpdays-skeleton&quot;&gt;skeleton repo&lt;/a&gt; (with helpful comments in the code) so that people 
could dive in quickly.  The event was set up to be really informal and the 
rough plan was as following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Installation/Intro&lt;/em&gt; - We checked that people had been able to follow the 
&lt;a href=&quot;http://amirchaudhry.com/fpdays-ocaml-session/&quot;&gt;installation instructions&lt;/a&gt;, which we&amp;rsquo;d sent them in advance. 
We also handed out copies of the book and made sure folks were comfortable 
with &lt;a href=&quot;http://opam.ocaml.org&quot;&gt;OPAM&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Hello world&lt;/em&gt; - A light intro to get people familiar with the OCaml 
syntax and installing packages with OPAM. This would also help people to get 
familiar with the toolchain, workflow and compilation.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Monty Hall browser game&lt;/em&gt; - Using &lt;a href=&quot;http://ocsigen.org/js_of_ocaml/&quot;&gt;&lt;code&gt;js_of_ocaml&lt;/code&gt;&lt;/a&gt;, we wanted 
people to create and run the &lt;a href=&quot;http://en.wikipedia.org/wiki/Monty_Hall_problem&quot;&gt;Monty Hall problem&lt;/a&gt; in their 
browser.  This would give people a taste of some real world interaction by 
having to deal with the DOM and interfaces.  If folks did well, they could 
add code to keep logs of the game results.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Client-server game&lt;/em&gt; - The previous game was all in the browser (so could 
be examined by players) so here the task was to split it into a client and 
server, ensuring the two stay in sync.  This would demonstrate the 
re-usability of the OCaml code already written and give people a feel for 
client server interactions. If people wanted to do more, they could use 
&lt;a href=&quot;http://opam.ocaml.org/pkg/ctypes/0.1.1/&quot;&gt;ctypes&lt;/a&gt; and get better random numbers.  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We did manage to stick to the overall scheme as above and we think this is a 
great base from which to improve future tutorials.  It has the really nice 
benefit of having visual, interactive elements and the ability to run things 
both in the browser as well as on the server is a great way to show the 
versatility of OCaml.  &lt;code&gt;js_of_ocaml&lt;/code&gt; is quite a mature tool and so it&amp;rsquo;s 
no surprise that it&amp;rsquo;s also used by companies such as Facebook (see the recent 
&lt;a href=&quot;http://www.youtube.com/watch?v=gKWNjFagR9k&quot;&gt;CUFP talk by Julien Verlaguet&lt;/a&gt; - skip to &lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=gKWNjFagR9k#t=1149&quot;&gt;19:00&lt;/a&gt;).  &lt;/p&gt;

&lt;p&gt;We learned a lot from running this session so we&amp;rsquo;ve captured the good, the 
bad and the ugly below.  This is useful for anyone who&amp;rsquo;d like to run an 
OCaml tutorial in the future and also for us to be aware of the next 
time we do this.  I&amp;rsquo;ve incorporated the feedback from the attendees as well 
as our own thoughts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://amirchaudhry.com/images/fpdays2013/fpdays2013-03.jpg&quot; alt=&quot;Heads down and hands on&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;Things we learnt&lt;/h3&gt;

&lt;h4&gt;The Good&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Most people really did follow the install instructions beforehand. This 
made things so much easier on the day as we didn&amp;rsquo;t have to worry about 
compile times and people getting bored.  A few people had even got in touch 
with me the night before to sort out installation problems.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many folks from OCaml Labs also came over to help people, which meant 
no-one was waiting longer than around 10 seconds before getting help.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We had a good plan of the things we wanted to cover but we were happy to 
be flexible and made it clear the aim was to get right into it.  Several 
folks told us that they really appreciated this loose (as opposed to rigid) 
structure.  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We didn&amp;rsquo;t spend any time lecturing the room but instead got people right 
into the code.  Having enough of a skeleton to get something interesting 
working was a big plus in this regard. People did progress from the early 
examples to the later ones fairly well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We had a VM with the correct set up that we could log people into if they 
were having trouble locally.  Two people made use of this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Of course, It was great to have early proofs of the book and these were 
well-received.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://amirchaudhry.com/images/fpdays2013/fpdays2013-02.jpg&quot; alt=&quot;RWO books galore!&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;The Bad&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In our excitement to get right into the exercises, we didn&amp;rsquo;t really give 
an overview of OCaml and its benefits.  A few minutes at the beginning would 
be enough and it&amp;rsquo;s important so that people can leave with a few sound-bites.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Not everyone received my email about installation, and certainly not the 
late arrivals.  This meant some pain getting things downloaded and running 
especially due to the wifi (see &amp;lsquo;Ugly&amp;rsquo; below).  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A few of the people who &lt;em&gt;had&lt;/em&gt; installed, didn&amp;rsquo;t complete the instructions 
fully but didn&amp;rsquo;t realise this until the morning of the session.  There was a good 
suggestion about having some kind of test to run that would check 
everything, so you&amp;rsquo;d know if there was something missing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We really should have had a cut-off where we told people to use VMs 
instead of fixing installation issues and 10-15 minutes would have been 
enough.  This would have been especially useful for the late-comers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We didn&amp;rsquo;t really keep a record of the problems folks were having so we 
can&amp;rsquo;t now go back and fix underlying issues.  To be fair, this would have 
been a little awkward to do ad-hoc but in hindsight, it&amp;rsquo;s a good thing to 
plan for.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;The Ugly&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The only ugly part was the wifi.  It turned out that the room itself was a 
bit of a dead-spot and that wasn&amp;rsquo;t helped by 30ish devices trying to connect 
to one access point!  Having everyone grab packages at the same time in the 
morning probably didn&amp;rsquo;t help.  It was especially tricky as all our 
mitigation plans seemed to revolve around at least having local connectivity.
In any case, this problem only lasted for the morning session and was a 
little better by the afternoon.  I&amp;rsquo;d definitely recommend a backup plan in 
the case of complete wifi failure next time!  One such plan that Leo got 
started on was to put the repository and other information onto a flash 
drive that could be shared with people.  We didn&amp;rsquo;t need this in the end but 
it&amp;rsquo;ll be useful to have something like this prepared for next time.  If 
anyone fancies donating a bunch of flash drives, I&amp;rsquo;ll happily receive them!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, it was a great session and everyone left happy, having completed 
most of the tutorial (and with a book!).  A few even continued at home 
afterwards and &lt;a href=&quot;https://twitter.com/richardclegg/status/393458073052139520&quot;&gt;got in touch&lt;/a&gt; to let us know that they got 
everything working.
It was a great session and thanks to &lt;a href=&quot;https://twitter.com/MarkDalgarno&quot;&gt;Mark&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/JacquiDDavidson&quot;&gt;Jacqui&lt;/a&gt; and the rest of 
the FPDays crew for a great conference!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://amirchaudhry.com/images/fpdays2013/fpdays2013-04.jpg&quot; alt=&quot;RWO Book giveaway&quot;/&gt;&lt;/p&gt;

&lt;p&gt;(Thanks to Jeremy, Leo, David and Philippe for contributions to this post)&lt;/p&gt;

</content><id>http://amirchaudhry.com/fpdays-review</id><title type="text">Review of the OCaml FPDays tutorial</title><updated>2013-10-28T12:30:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://amirchaudhry.com/fpdays-ocaml-session" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;On Thursday, along with &lt;a href=&quot;https://github.com/yallop&quot;&gt;Jeremy&lt;/a&gt; and 
&lt;a href=&quot;http://www.lpw25.net&quot;&gt;Leo&lt;/a&gt;, I&amp;rsquo;ll be running an OCaml Hands-on Session at 
the &lt;a href=&quot;http://fpdays.net/2013/&quot;&gt;FPDays conference&lt;/a&gt;. Below are some prep 
instructions for attendees.&lt;/p&gt;

&lt;h3&gt;Preparation for the session&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re starting from scratch, installation can take some time so it&amp;rsquo;s 
best to get as much done in advance as possible.  You&amp;rsquo;ll need OPAM (the 
package manager), OCaml 4.01 (available through OPAM) and a few libraries 
before Thursday.  If you have any issues, please contact Amir.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;OPAM&lt;/strong&gt;: Follow the instructions for your platform at &lt;a href=&quot;http://opam.ocaml.org/doc/Quick_Install.html&quot;&gt;http://opam.ocaml.org/doc/Quick_Install.html&lt;/a&gt;. 
OPAM requires OCaml so hopefully the relevant dependencies will kick in and 
you&amp;rsquo;ll get OCaml too (most likely version 3.12).  You can get a cup of 
coffee while you wait. After installation, run &lt;code&gt;opam init&lt;/code&gt; to initialise OPAM.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;OCaml 4.01&lt;/strong&gt;: We actually need the latest version of OCaml but OPAM 
makes this easy.  Just run the following (and get more coffee):&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam switch 4.01.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;opam config env&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Libraries&lt;/strong&gt;: For the workshop you will need to check that you have the 
following installed: &lt;code&gt;libffi&lt;/code&gt;, &lt;code&gt;pcre&lt;/code&gt; and &lt;code&gt;pkg-config&lt;/code&gt;.  This will depend on 
your platform so on a Mac with homebrew I would do 
&lt;code&gt;brew install libffi pcre pkg-config&lt;/code&gt; or on Debian or Ubuntu 
&lt;code&gt;apt-get install libffi-dev&lt;/code&gt;.  After this, two OCaml packages it&amp;rsquo;s worth 
installing in advance are &lt;code&gt;core&lt;/code&gt; and &lt;code&gt;js_of_ocaml&lt;/code&gt; so simply run:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;opam install core js_of_ocaml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OPAM will take care of the dependencies and the rest we can get on the day!&lt;/p&gt;
</content><id>http://amirchaudhry.com/fpdays-ocaml-session</id><title type="text">FP Days OCaml Session</title><updated>2013-10-22T21:00:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2013/10/13/ocaml-tips/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;In today&amp;rsquo;s &amp;ldquo;thing&amp;rsquo;s I&amp;rsquo;ve learnt about OCaml&amp;rdquo; I look back at &lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/20/replacing-python-round-2/&quot;&gt;my first OCaml code&lt;/a&gt;, and think about how I&amp;rsquo;d write it differently now.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#removing-&quot;&gt;Removing ;;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#warnings&quot;&gt;Warnings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#exhaustive-matching&quot;&gt;Exhaustive matching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#handy-operators&quot;&gt;Handy operators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#handling-option-types&quot;&gt;Handling option types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Removing ;;&lt;/h2&gt;

&lt;p&gt;Looking back at my code, the most obvious &amp;ldquo;this is beginner code&amp;rdquo; clue is the use of &lt;code&gt;;;&lt;/code&gt; everywhere. The &lt;a href=&quot;http://ocaml.org/tutorials/structure_of_ocaml_programs.html&quot;&gt;OCaml tutorial&lt;/a&gt; gives a list of complicated rules for when to use &lt;code&gt;;;&lt;/code&gt;, but in fact it&amp;rsquo;s very simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Never use top-level expressions in an OCaml program.&lt;/li&gt;
  &lt;li&gt;Never use &lt;code&gt;;;&lt;/code&gt; (except when tracking down syntax errors).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to run some code at startup (e.g. your &amp;ldquo;main&amp;rdquo; function), just put it inside a &lt;code&gt;let () = ...&lt;/code&gt; block. That way you&amp;rsquo;ll also get a compile-time error if you miss an argument. I don&amp;rsquo;t know why OCaml even allows top-level expressions. e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Bad - mistake goes undetected and you need ';;' *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello %s&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Good - compiler spots missing argument *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello %s&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;In a similar way, I was a bit over cautious about adding parenthesis around expressions. For example, I had &lt;code&gt;Str.regexp (&amp;quot;...&amp;quot;)&lt;/code&gt; and &lt;code&gt;match (...) with&lt;/code&gt;. They&amp;rsquo;re not needed in most cases.&lt;/p&gt;

&lt;h2&gt;Warnings&lt;/h2&gt;

&lt;p&gt;Always compile with warnings on. I don&amp;rsquo;t know why this isn&amp;rsquo;t the default. Use &lt;code&gt;-w A&lt;/code&gt; to enable all warnings.&lt;/p&gt;

&lt;p&gt;I actually use &lt;code&gt;-w A-4&lt;/code&gt;, which disables the warning when you use a default match case. Default match cases should be avoided when possible, but if you&amp;rsquo;ve gone to the trouble of adding one then you probably needed it.&lt;/p&gt;

&lt;h2&gt;Exhaustive matching&lt;/h2&gt;

&lt;p&gt;One of the great strengths of OCaml (which I missed at first) is that it always makes you handle every possible case. Providing a catch-all case defeats this check. In my initial code, I needed to process a list of bindings. First, all the environment bindings, then all the executable ones. I made a &lt;code&gt;do_env_binding&lt;/code&gt; function which applied environment bindings and ignored all others:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_env_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnvironmentBinding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I did the same for executable bindings. Then I applied them all like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Do &amp;lt;environment&amp;gt; bindings *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_env_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Do &amp;lt;executable-in-*&amp;gt; bindings *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_exec_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I now think this is bad style, because if a new binding type is added no compiler warning will appear. It&amp;rsquo;s better to have the functions accept only the single kind of binding they process. Then the code that calls them separates out the two types of binding. If a new type is added later, the code will issue a warning about an unmatched case:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_env_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnvironmentBinding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_env_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExecutableBinding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_bindings&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;exec_bindings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_exec_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Handy operators&lt;/h2&gt;

&lt;p&gt;The recently released OCaml 4.01 adds two new built-in operators, &lt;code&gt;@@&lt;/code&gt; and &lt;code&gt;|&amp;gt;&lt;/code&gt;. They&amp;rsquo;re very simple, and you can define them yourself on older versions like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(@@)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(|&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;They both simply call a function with an argument. For example &lt;code&gt;print @@ &amp;quot;Hello&amp;quot;&lt;/code&gt; is the same as &lt;code&gt;print &amp;quot;Hello&amp;quot;&lt;/code&gt;. However, they are very low precedence, which means you can use them to avoid parenthesis. For example, these two lines are equivalent (we load a file, parse it as XML, parse the resulting document as a 0install selections document and then execute the selections):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_selections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_selections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The advantage here is that when you read an &lt;code&gt;(&lt;/code&gt;, you have to scan along the rest of the line counting brackets to find the matching one. When you see &lt;code&gt;@@&lt;/code&gt;, you know that the rest of the expression is a single argument to the previous function.&lt;/p&gt;

&lt;p&gt;The pipe operator &lt;code&gt;|&amp;gt;&lt;/code&gt; is similar, but the function and argument go the other way around. These lines are equivalent:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_selections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_selections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Intuitively, the result of each segment of the pipeline becomes the last argument to the next segment.&lt;/p&gt;

&lt;p&gt;At first, I couldn&amp;rsquo;t see any reason for preferring one or the other, so I decided to use just &lt;code&gt;@@&lt;/code&gt; initially (which was most familiar, being the same as Haskell&amp;rsquo;s &lt;code&gt;$&lt;/code&gt; operator). That was a mistake. &lt;code&gt;|&amp;gt;&lt;/code&gt; is the more useful of the two.&lt;/p&gt;

&lt;p&gt;In the original post, I complained that you had to write loops backwards, giving the loop body first and then the list to be looped-over. With &lt;code&gt;|&amp;gt;&lt;/code&gt;, that problem is solved:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Item: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Using the pipe operator eliminates the mismatch between the desire to make the function the last argument and OCaml&amp;rsquo;s common (but not universal) convention of putting the data structure last. It can also make things look more object-oriented, by putting the object first. Consider this code for setting an attribute on an XML element:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;set_attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Which is the element, and which are the name and value? Written this way, it&amp;rsquo;s hopefully obvious that &lt;code&gt;c&lt;/code&gt; is the element:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Sequences become clearer. For example, consider adding two items to a collection in order:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* Using () *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* Using |&amp;gt; *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I was even considering changing the order of the arguments to my &lt;code&gt;starts_with&lt;/code&gt; function to make it work with pipe. Currently, we have:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starts_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;But does it check that &lt;code&gt;a&lt;/code&gt; starts with &lt;code&gt;b&lt;/code&gt; or the other way around? They&amp;rsquo;re both strings, so type checking won&amp;rsquo;t catch errors either. Reversing the arguments and using pipe, it would be clear:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starts_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;However, &lt;a href=&quot;http://ocaml-extlib.googlecode.com/svn/doc/apiref/ExtString.String.html&quot;&gt;extlib&amp;rsquo;s version&lt;/a&gt; uses the original order, so I decided not to change it. Also, I used it in a lot of places and I couldn&amp;rsquo;t find a semantic patching tool to change them all automatically (like Go&amp;rsquo;s &lt;a href=&quot;http://golang.org/cmd/gofmt/&quot;&gt;gofmt -r&lt;/a&gt; or C&amp;rsquo;s &lt;a href=&quot;http://coccinelle.lip6.fr/&quot;&gt;Coccinelle&lt;/a&gt; - which, interestingly, is written in OCaml).&lt;/p&gt;

&lt;h2&gt;Handling option types&lt;/h2&gt;

&lt;p&gt;I noted the lack of a null coalescing operator in my original code. I&amp;rsquo;ve now made some helpers for handling option types (I don&amp;rsquo;t know if OCaml programmers have standard names for these). I find them neater than using &lt;code&gt;match&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;The first I named &lt;code&gt;|?&lt;/code&gt;. It&amp;rsquo;s used to get the value out of an option, or generate some default if it&amp;rsquo;s missing. It&amp;rsquo;s defined like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(|?)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Using OCaml&amp;rsquo;s built-in &lt;code&gt;lazy&lt;/code&gt; syntax makes this a bit nicer than having to define an anonymous function each time you use it. It&amp;rsquo;s used like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Use config.dir, or $HOME if it's not set *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HOME&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Using |? *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HOME&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Guess the MIME type if it's not set on the element *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mime_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mime_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type_from_url&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Abort if not set *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raise_safe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Item '%s' not found&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The only slight issue I have is that if you forget the &lt;code&gt;lazy&lt;/code&gt; when raising an exception then you don&amp;rsquo;t get a compile-time error. It just throws the exception in all cases. However, you should spot this problem quickly when you test it.&lt;/p&gt;

&lt;p&gt;Another common task is to execute some code with the option&amp;rsquo;s value only if it&amp;rsquo;s set. I defined &lt;code&gt;if_some&lt;/code&gt; for this. It takes a function to call with the value, but partial application means you usually don&amp;rsquo;t need to define one explicitly. For example, to stop a timer if you have one:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Normal method *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Using if_some *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_some&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Lwt_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Finally, there&amp;rsquo;s a &lt;code&gt;pipe_some&lt;/code&gt;, which is the same except that it maps &lt;code&gt;None -&amp;gt; None&lt;/code&gt; rather than &lt;code&gt;None -&amp;gt; ()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;After spending a few months writing OCaml, my coding style hasn&amp;rsquo;t actually changed much since my first attempts right after reading the tutorials. I&amp;rsquo;m not sure whether this is good or bad. Like Python, there is a one-obvious-way-to-do-it feeling to OCaml, unlike Haskell and Perl, which somehow seem to encourage clever-but-incomprehensible solutions. When I&amp;rsquo;ve read other people&amp;rsquo;s OCaml code (e.g. Lwt), I haven&amp;rsquo;t found anything new or hard to read.&lt;/p&gt;

&lt;p&gt;The main changes have been cosmetic: the removal of &lt;code&gt;;;&lt;/code&gt;, fewer brackets, and the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator to make the code tidier, plus some common helper functions. I&amp;rsquo;m also finding more ways to make the type system do more of the work: e.g. avoiding catch-all match cases and using &lt;a href=&quot;http://roscidus.com/blog/blog/2013/08/31/option-handling-with-ocaml-polymorphic-variants/&quot;&gt;Polymorphic Variants&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most useful functions I&amp;rsquo;ve added (some borrowed from other people) are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;|?&lt;/code&gt; for handling &lt;code&gt;None&lt;/code&gt; values (see above)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;if_some&lt;/code&gt; and &lt;code&gt;pipe_some&lt;/code&gt; (see above)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;finally_do&lt;/code&gt; to work around the lack of a &lt;code&gt;try...finally&lt;/code&gt; syntax in OCaml&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;filter_map&lt;/code&gt; (apply a function to each item in a list, filtering out any &lt;code&gt;None&lt;/code&gt; replies)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;starts_with&lt;/code&gt; (as in Python)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;abspath&lt;/code&gt; and &lt;code&gt;realpath&lt;/code&gt; (to resolve pathnames; translated from the Python standard library code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If anyone else wants my &lt;code&gt;realpath&lt;/code&gt;, it&amp;rsquo;s in &lt;a href=&quot;https://github.com/0install/0install/blob/master/ocaml/support/utils.ml&quot;&gt;Support.Utils&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What other useful tips or utilities do people have?&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2013/10/13/ocaml-tips/</id><title type="text">OCaml tips</title><updated>2013-10-13T15:22:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://anil.recoil.org/2013/10/08/fpdays-real-world-ocaml.html" rel="alternate"/><contributor><uri>http://anil.recoil.org/feeds/atom-ocaml.xml</uri><name>Anil Madhavapeddy</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://fpdays.net/fpdays2013/sessions/index.php?session=24&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/fpdays-logo-thumb.jpg&quot; style=&quot;padding-left: 15px; float:right;&quot; width=&quot;200&quot;/&gt;&lt;/a&gt;
Yaron Minsky and I have been running OCaml tutorials for a few years at
&lt;a href=&quot;http://icfpconference.org&quot;&gt;ICFP&lt;/a&gt; and &lt;a href=&quot;http://cufp.org&quot;&gt;CUFP&lt;/a&gt;, but haven&amp;rsquo;t
really spread out into the wider conference circuit.  Now that &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World
OCaml&lt;/a&gt; is almost finished, the scene is set for
doing much more.  The first such tutorial is being help at &lt;a href=&quot;http://fpdays.net/fpdays2013/&quot;&gt;FPDays
2013&lt;/a&gt; on October 24th in the lovely Murray
Edwards College in Cambridge.  Check out the &lt;a href=&quot;http://lanyrd.com/2013/fpdays/&quot;&gt;Lanyrd
page&lt;/a&gt; for ticket information, and the &lt;a href=&quot;http://lanyrd.com/2013/fpdays/sckzky/&quot;&gt;OCaml
session&lt;/a&gt; page for more information.&lt;/p&gt;

&lt;p&gt;The basic layout of the tutorial is to get started with the guided tour of the
&lt;a href=&quot;https://realworldocaml.org&quot;&gt;book&lt;/a&gt;, and then work through building a
&lt;a href=&quot;https://bitbucket.org/yminsky/core-hello-world&quot;&gt;distributed message broker&lt;/a&gt;.
This gets you familiar with the &lt;a href=&quot;https://github.com/janestreet/core&quot;&gt;Core&lt;/a&gt;
standard library, the &lt;a href=&quot;https://github.com/janestreet/async&quot;&gt;Async&lt;/a&gt; event-driven
I/O library, and all the strongly-typed RPC plumbing that goes in between.
We&amp;rsquo;re hoping to have physical preprints of the book available for free to
attendees, so do sign up fast if you wish to attend.&lt;/p&gt;

&lt;p&gt;As a bonus, the Cambridge FPDays session will feature Jeremy Yallop working through
the book and conducting the tutorial: he has an incredible depth of knowledge
about the innards of OCaml&amp;rsquo;s type system, and so advanced users will also find
a good home in this tutorial to throw questions at him too!  For those of you
interested in other programming languages, there are also excellent-looking
sessions on Erlang, F# and Scala, and Phil Wadler is giving a keynote speech.
I&amp;rsquo;m most excited about &lt;a href=&quot;http://fpdays.net/fpdays2013/sessions/index.php?session=28&quot;&gt;Sam Aaron&amp;rsquo;s session&lt;/a&gt;
on live coding and music though.  You have to hear it to believe it&amp;hellip;&lt;/p&gt;
</content><id>http://anil.recoil.org/2013/10/08/fpdays-real-world-ocaml.html</id><title type="text">FPDays 2013 Real World OCaml tutorial in Cambridge</title><updated>2013-10-08T01:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://anil.recoil.org/2013/10/06/travis-secure-ssh-integration.html" rel="alternate"/><contributor><uri>http://anil.recoil.org/feeds/atom-ocaml.xml</uri><name>Anil Madhavapeddy</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://travis-ci.org&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/travis-mascot-200px.png&quot; style=&quot;padding-left: 15px; float:right;&quot;/&gt;&lt;/a&gt;
In my &lt;a href=&quot;http://anil.recoil.org/2013/09/30/travis-and-ocaml.html&quot;&gt;previous post&lt;/a&gt;
on Travis, I explained how it can be used to easily test OCaml packages on
GitHub without having to host any infrastructure yourself.&lt;/p&gt;

&lt;p&gt;The next step I wanted to investigate was how to use Travis to trigger service deployments
after a successful build.  One nice feature that Travis has is &lt;a href=&quot;http://about.travis-ci.org/docs/user/encryption-keys/&quot;&gt;support for
encrypted environment variables&lt;/a&gt;. The basic workflow is that you encrypt
key/value pairs using a public key that they publish per GitHub repository.
Once registered, this is made available as a decrypted environment variable
within the Travis worker.  You can use this to transmit API keys or other
authentication data that you need to commit to the &lt;code&gt;travis.yml&lt;/code&gt; file, but
obviously can&amp;rsquo;t leave on a public repository for the world to see.&lt;/p&gt;

&lt;p&gt;The small hitch with this whole scheme is that there&amp;rsquo;s a very small limit
of about 90 bytes or so for the size of each individual environment variable
that&amp;rsquo;s exported, and so you can&amp;rsquo;t just stash an SSH private key in there.
Instead, it needs to be Base64 encoded, split it up into multiple environment
variables of the right size, and then reassembled within the Travis VM.  Rather
than deal with importable shell scripts between MacOS X and Linux, I created
a small &lt;code&gt;travis-senv&lt;/code&gt; command-line binary to make this easier.&lt;/p&gt;

&lt;p&gt;To use it, just &lt;code&gt;opam install travis-senv&lt;/code&gt; and follow the instructions on the
&lt;a href=&quot;https://github.com/avsm/travis-senv&quot;&gt;README at the homepage&lt;/a&gt;.  Here&amp;rsquo;s the
fragment of shell script that pushes the build output to another GitHub
repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$DEPLOY&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# get the secure key out for deployment&lt;/span&gt;
  opam install travis-senv
  mkdir -p ~/.ssh
  &lt;span class=&quot;nv&quot;&gt;SSH_DEPLOY_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.ssh/id_dsa
  travis-senv decrypt &amp;gt; &lt;span class=&quot;nv&quot;&gt;$SSH_DEPLOY_KEY&lt;/span&gt;
  chmod &lt;span class=&quot;m&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SSH_DEPLOY_KEY&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Host mirdeploy github.com&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/config
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;   Hostname github.com&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/config
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;   StrictHostKeyChecking no&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/config
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;   CheckHostIP no&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/config
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;   UserKnownHostsFile=/dev/null&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/config
  git config --global user.email &lt;span class=&quot;s2&quot;&gt;&amp;quot;travis@openmirage.org&amp;quot;&lt;/span&gt;
  git config --global user.name &lt;span class=&quot;s2&quot;&gt;&amp;quot;Travis the Build Bot&amp;quot;&lt;/span&gt;
  git clone git@mirdeploy:mirage/mirage-www-deployment
  &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;mirage-www-deployment
  mkdir -p xen/&lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;
  cp ../src/mir-www.xen ../src/mir-www.map ../src/www.conf xen/&lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;
  bzip2 -9 xen/&lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;/mir-www.xen
  git pull --rebase
  git add xen/&lt;span class=&quot;nv&quot;&gt;$TRAVIS_COMMIT&lt;/span&gt;
  git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;adding $TRAVIS_COMMIT&amp;quot;&lt;/span&gt;
  git push
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;ve been using this to automate the construction of the &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage Xen unikernel&lt;/a&gt;
homepage.  Every time there&amp;rsquo;s a push to the
&lt;a href=&quot;https://github.com/mirage/mirage-www&quot;&gt;mirage-www&lt;/a&gt;, the &lt;a href=&quot;https://github.com/mirage/mirage-www/blob/master/.travis-ci.sh&quot;&gt;Travis
scripts&lt;/a&gt; now
retrieve an SSH deployment key using &lt;code&gt;travis-senv&lt;/code&gt;, and push the results of the
build to the
&lt;a href=&quot;https://github.com/mirage/mirage-www-deployment&quot;&gt;mirage-www-deployment&lt;/a&gt;
repository that stores the build output.  This repository is polled by the
hosting machines we have to look for new kernels and rotate the website (but
more on this later &amp;ndash; I&amp;rsquo;m just integrating the EC2 and Rackspace scripts to
remove this step entirely next!)&lt;/p&gt;
</content><id>http://anil.recoil.org/2013/10/06/travis-secure-ssh-integration.html</id><title type="text">Using Travis for secure deployments with SSH</title><updated>2013-10-06T01:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://anil.recoil.org/2013/10/03/merlin-and-vim.html" rel="alternate"/><contributor><uri>http://anil.recoil.org/feeds/atom-ocaml.xml</uri><name>Anil Madhavapeddy</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://anil.recoil.org/images/vim-merlin-autocomplete.png&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/vim-merlin-autocomplete-thumb.png&quot; style=&quot;float: right; padding-left: 15px;&quot; width=&quot;250&quot;/&gt;&lt;/a&gt;
I&amp;rsquo;m finalizing the installation instructions for &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; and
finally got around to configuring the awesome &lt;a href=&quot;https://github.com/def-lkb/merlin&quot;&gt;Merlin editor&lt;/a&gt; tool.  I pretty much never configure
my editor, so here are my notes on getting Merlin working with Vim completely from scratch on
MacOS X (I&amp;rsquo;m on 10.9DP7, but this should work with earlier versions of MacOS X too).&lt;/p&gt;

&lt;p&gt;First, install some basic plugin tools by following the Synastic &lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;vim-pathogen&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;mkdir -p ~/.vim/autoload ~/.vim/bundle&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
curl -so ~/.vim/autoload/pathogen.vim &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install &lt;a href=&quot;https://github.com/tpope/vim-sensible.git&quot;&gt;vim-sensible&lt;/a&gt; for useful defaults:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.vim/bundle
git clone git://github.com/tpope/vim-sensible.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install &lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;Syntastic&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.vim/bundle
git clone https://github.com/scrooloose/syntastic.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Follow the &lt;a href=&quot;https://github.com/def-lkb/merlin/wiki/vim-from-scratch&quot;&gt;Merlin/vim from scratch&lt;/a&gt; directions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;opam install merlin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, add this this in your &lt;code&gt;~/.vimrc&lt;/code&gt; to turn everything on.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;execute pathogen#infect&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;s&lt;/span&gt;:ocamlmerlin&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;substitute&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;system&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'opam config var share'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\n$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; .  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/ocamlmerlin&amp;quot;&lt;/span&gt;
execute &lt;span class=&quot;s2&quot;&gt;&amp;quot;set rtp+=&amp;quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;s&lt;/span&gt;:ocamlmerlin.&lt;span class=&quot;s2&quot;&gt;&amp;quot;/vim&amp;quot;&lt;/span&gt;
execute &lt;span class=&quot;s2&quot;&gt;&amp;quot;set rtp+=&amp;quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;s&lt;/span&gt;:ocamlmerlin.&lt;span class=&quot;s2&quot;&gt;&amp;quot;/vimbufsync&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Trying it out&lt;/h2&gt;

&lt;p&gt;Read the excellent instructions at the &lt;a href=&quot;https://github.com/def-lkb/merlin/wiki/vim-from-scratch&quot;&gt;Merlin for Vim from scratch&lt;/a&gt; wiki page.  A few immediately useful things I did are below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Displaying types:&lt;/em&gt; You can get the local type of something by typing in &lt;code&gt;\t&lt;/code&gt; anywhere.  This is the &lt;code&gt;&amp;lt;LocalLeader&amp;gt;&lt;/code&gt; for anyone who has customized their setup (it is mapped to backslash by default).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tab completing functions:&lt;/em&gt; You can tab-complete module signatures by pressing &lt;code&gt;Ctrl-X-O&lt;/code&gt; (make sure you keep Ctrl pressed the whole time).  This activates vim&amp;rsquo;s OmniComplete mode.  To get this to work with your external projects, create a &lt;code&gt;.merlin&lt;/code&gt; file.  I use this for &lt;a href=&quot;https://github.com/mirage/ocaml-dns&quot;&gt;ocaml-dns&lt;/a&gt; for example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PKG lwt cstruct
S lib
S lib_test
S lwt
B _build/lib
B _build/lib_test
B _build/lwt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, don&amp;rsquo;t forget to pass the &lt;code&gt;-bin-annot&lt;/code&gt; function to the compiler to
generate the typed-AST &lt;code&gt;cmt&lt;/code&gt; files.  You can add &lt;code&gt;true: bin_annot&lt;/code&gt; to your
&lt;code&gt;_tags&lt;/code&gt; file if you&amp;rsquo;re using OCamlbuild (in OCaml 4.01.0 or higher, and
it&amp;rsquo;ll be silently ignored on previous versions so you don&amp;rsquo;t need to worry
about breaking older OCaml compilers).&lt;/p&gt;

</content><id>http://anil.recoil.org/2013/10/03/merlin-and-vim.html</id><title type="text">Intellisense for OCaml with Vim and Merlin</title><updated>2013-10-03T01:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://www.syslog.cl.cam.ac.uk/2013/10/02/liveblogging-the-first-human-data-interaction-workshop/" rel="alternate"/><contributor><uri>http://www.syslog.cl.cam.ac.uk/tag/ocamllabs/feed/atom</uri><name>SRG Syslog</name></contributor><content type="html">&lt;p&gt;I'm at the Open Data institute, with Richard Mortier, Jon Crowcroft, Amir Chaudhry and Hamed Haddadi , live-blogging a daylong workshop about our emerging Human-Data Interaction research initiative. &amp;nbsp;The room is packed with notable researchers from all over the UK, so this promises to be an exciting day!&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mort opens up with an introduction to the format of the workshop and lays out the problem space:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Visualisation and sense making:&lt;/strong&gt; how do we make sense of such complex, technical systems, and crucially, what is the process of translating the information to&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transparency and audit:&lt;/strong&gt; is essential to give a feedback loop to users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy and control:&amp;nbsp;&lt;/strong&gt;...&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Analytics and commerce:&lt;/strong&gt; there is clearly an ecosystem forming around personal data (c.f. several startups specifically around this&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data to knowledge:&lt;/strong&gt; what are the new business models around&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Attendee introductions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Danielle&amp;nbsp;&lt;/strong&gt;(missed her last name, is from Switzerland): did a PhD on anomaly detection and then worked at Swiss banks on security monitoring. The key challenges in the area are around the nature of the questions we need to ask about all the data that we have access to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steve Brewer:&lt;/strong&gt; coordinator of the IT as a Utility network which is funding all this. &amp;nbsp;Interested in the next steps: both immediate and the overall vision and direction it's all going. &amp;nbsp;Concrete actions emphasised.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ian Brown:&lt;/strong&gt; Oxford University and cybersecurity. Interested broadly in these issues and also has a degree in psychology and behavioural psychology. &amp;nbsp;The challenge is how to balance the &amp;quot;engineering&amp;quot; (this isnt fundamental computer science) and understand why there is so little takeup of this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Amir Chaudhry:&lt;/strong&gt; working on a toolstack for the Internet of Things. &amp;nbsp;When we have tweeting toasters, how do we make it all useful to people. It's not the raw data, but the insights we present back to people to make it useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elizabeth Churchill:&lt;/strong&gt; was at Yahoo, now at eBay Research. &amp;nbsp;Right now the challenge I'm facing is personalisation, and is trying to understand why the models they have of people are rubbush (this is why so much advertising isnt very useful). &amp;nbsp;The reasoning processes and data &lt;em&gt;quality&lt;/em&gt; is important. &amp;nbsp;We are making assertions about people based on data they have gathered for another purpose, and the ethical and business issues are important. Has been pushing on : what the data source, what is the data quality, and are these assertions based off data thats appropriate, and how can we design new algorithms&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jon Crowcroft:&lt;/strong&gt; from the Computer Lab in Cambridge and does anything to do with communication systems, and leads the Horizon project with Mort and PAWS which is working on wifi access in disadvantaged areas. Also working on Nymote. &amp;nbsp;Is interested in new human/data rights vs t&amp;amp;cs. &amp;nbsp;Rights and duties are encoded in terms and conditions (badly) -- see Latier's latest book about this, and see how poor Amazon's recommendations are. &amp;nbsp;We're interested in building a technology where you own your own data but business practises all gel together. &amp;nbsp;We had a workshop at how the EU is pushing the right to be forgotten, so how can we ensure that data can be removed including all references. &amp;nbsp;People go &amp;quot;its too difficult&amp;quot;, but this isn't true -- takedowns work, and why is it that only big corporations can afford to take down stuff. &amp;nbsp;The right to oblivion (&amp;quot;not be there in the first place&amp;quot;) and data shouldn't be a public good but people should have the right to be in a paid avoidance zones. (See Shockwave Rider by Brunner, 30 years old, loads of great technical ideas, and Future Shock is a good read too). &amp;nbsp;Can we shift regulatory positions and have&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thomas Dedis:&lt;/strong&gt; runs Fab Lab in Barcelona. &amp;nbsp;Cofounder of Smart Citizen, crowdfunded environment sensing platform based on a piece of hardware based on Arduino. &amp;nbsp;Allows people to capture data in their own homes, and push it to an online platform. &amp;nbsp;Allows people to push it in a 'conscious' way? Go to smartcitizen.me to see the data platform. &amp;nbsp;Intended to grow into other places, but capturing air pollution, humidity, temperature and other environment data. &amp;nbsp;Main thing is that you own your own data. &amp;nbsp;Much cheaper than the competition too and crowdfunding.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Martin Dittus&lt;/strong&gt; (@dekstop) is a PhD student at UCL and works on cities.io. Thousands of people mapping the planet in incredibly detailed ways and it works with both commercial and non-commercial stuff. What makes these systems work, what are the processes to coordinate things, questions of data quality and how to assert stuff over it? &amp;nbsp;Used to be part of the last.fm data team which is about personal data gathering and detailed profiling that users themselves put up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Christos Efstratiou:&lt;/strong&gt; as of September is a lecturer at University of Kent (and is still a visiting research at Cambridge). &amp;nbsp;Works on sensing, more broadly that has to do with people and sensors in the environment and embedded sensing in the environment. &amp;nbsp;Privacy is a huge issue and is his key challenge. &amp;nbsp;This isn't sensing in the old style like Active Badge -- back then, people werent aware of the issues and nowadays, people are more aware of privacy. &amp;nbsp;So the challenge is the evolving user perceptions and how our system design works. &amp;nbsp;Anecdote: at a recent wedding he was at, there was a request from the &amp;nbsp;bride/groom to note post any public photos to Twitter/Facebook. We've lost control over our public personas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julie Freeman:&lt;/strong&gt; an actual resident in this building and the art associate for the ODI space! &amp;nbsp;Is a PhD student at QMW and is interested in echoing other people. &amp;nbsp;Interested in physical manifestations of digital data, and how we can &amp;quot;step away from the screen&amp;quot;. &amp;nbsp;Broad interests in transformation of digital data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Barbara Grimpe:&lt;/strong&gt; from Oxford and is a sociologist in an interdisciplinary EU project on &amp;quot;Governance for Responsible Innovation&amp;quot;. &amp;nbsp;They have a network notion of responsibility which takes into account that a lot of data production and data use takes place in networks that posses strong ties between people. &amp;nbsp;She started two cases studies in two area: telecare technologies for elderly people (relevant due to the EU Horizon 2020 societal challenge in aging and wellbeing due to the demographic change in western societies, and this brings the ethical issue around the use of personal data at scale); there is difficulty of informed consent due to dementia also. The other case study is completely different and is about financial market technology and the data is highly commercially sensitive, so understanding how transparency can be balanced against financial control and the need for genuine market secrets to facilitate trade.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wifak Gueddana&lt;/strong&gt; is a postdoc at information systems group at LSE. &amp;nbsp;Did her PhD on open source communities and how open source can work for NGOs and grass roots. &amp;nbsp;Working on a research project for online platforms -- how to use computational analytics to collect and process data and deal with the qualitative and subjective issues.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hamed Haddadi:&lt;/strong&gt; lecturer in QMUL, asking how we can compute over mobile data and has worked on advertising and privacy aware system systems. &amp;nbsp;Linking the temporal nature of the data and understanding how much of your data is exposed (amusing anecdote about wearing shorts)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Muki Haklay:&lt;/strong&gt; professor of GIScience and the Extreme Citizen Science group. He's interested in participatory citizen science and cyberscience. &amp;nbsp;Interested in GeoWeb and mobiile GeoWeb technologies and understanding how tools for voluntary participation work (open street map, participatory geoweb). &amp;nbsp;&amp;quot;How can you give control to people that are not technical&amp;quot; and how do we build protocols for cultural sensitivity? &amp;nbsp;Working on Open Street Map, while its easy for techies to contribute and feel happy, it might be an issue from a privacy perspective without GPS fuzzing or pseudonyms (you can say &amp;quot;I know where you live&amp;quot; to every OSM user). (discussion about most data being rubbish and is a psychology question about whether this depresses people!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jenny Harding:&lt;/strong&gt; from the Ordnance Survey who control most of the UK's mapping data and is a principal scientist in the research team team on working on how people interact with geography in business, public service and leisure. &amp;nbsp;Moving beyond just GPS into the connective function about what's going on in places, and the connection between different objects and places. &amp;nbsp;What is the purpose for needing all this connected information, and how can the Ordnance Survey better serve its users with such &lt;em&gt;usable&lt;/em&gt;&amp;nbsp;connected data? &amp;nbsp;She commissions internal and external research and this includes PhDs and postdocs. &amp;nbsp;Challenge for this workshop: how personal data relates to location and the different levels of granularity at which such relationships can be made -- beyond GPS, there is address data in (e.g.) supermarket loyalty cards, and other data at a postcode level, and different types of geographies all have connections. &amp;nbsp;Understanding provenance of data is really really important .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pat Healey:&amp;nbsp;&lt;/strong&gt;Professor of Human Interaction and head of cognitive science research group and workson health issues. &amp;nbsp;Not here yet so introduced by Hamed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tristan Henderson;&amp;nbsp;&lt;/strong&gt;lecturer in compsci at St Andrews in Scotland, did his PhD on first person shooter games and runs a widely used mobile data set called CRAWDAD. They archive and share it and so work a lot on redistribution of data. His undergrad was economics so his interest is on behavioural aspects and usability issues too (Tristan has recently joined the HCI group and the ethics committee at St Andrews). &amp;nbsp;How can we get researchers to further engage with the ethics process and to refine the notions of informed consent in electronic terms. &amp;nbsp;Challenges: what is acceptable HDI and are we conducting it in an acceptable way (q from Mort: how broad? a: everything). &amp;nbsp;And is HDI unique enough that we might need another term.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Laura James:&amp;nbsp;&lt;/strong&gt;from OKF (not here yet)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Helene&amp;nbsp;Lambrix:&amp;nbsp;&lt;/strong&gt;visiting LSE and usually at Paris-Dauphine University in France and is hoping to finish her PhD this year! Interested in corporate reputation and social media.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neal Lathia:&amp;nbsp;&lt;/strong&gt;researcher at Cambridge University and did his PhD on online recommender systems. Noticed a disparity between data services online and the offline word so started working on recommender systems for urban systems (banging head against TFL data). &amp;nbsp;At Cambridge, started working with psychologists and leads EmotionSense (how satisfied are you with your life, as well as ongoing smartphone sensor data) -- its really popular. &amp;nbsp;Challenges: language issue around how we present issue and motivate people around using that data (how does using EmotionSense affect their behavior)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Panos&lt;/strong&gt; from Brunel: interested in cybersecurity and intelligence from media data mining and cloud based work. Commodification process of digital economy data and what is the legal frameowork surrounding this. &amp;nbsp;What are the personas for data to apply frameworks and data mining techniques to it? &amp;nbsp;Challenges: regulatory system using big personal data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Eva&lt;/strong&gt; from University of Nottingham and has just submitted PhD and waiting viva. Background is political science and internationl relations, and is interested in informed consent and how we sustain consent rather than just secure it as a one-off. The challenges: the human bit and how we communicate the complexity of systems and how people can make meaningful decisions. If you want people to be engaged with process then we need data to be more social and human.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ursula Martin&lt;/strong&gt;: professor in a Russel Group university in Mile End road. Is a mathematician and is researching the production of mathematics, and how it happens in the first place. Producing maths is a slow, painstaking thing, and is wondering how the rate of production can keep up with our needs. When interacting with an outfit getting her data, she's not just an isolate, but is actually part of a large complex system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Richard Mortier &amp;quot;mort&amp;quot;&lt;/strong&gt;: From Nottingham and is the dude running this workshop so has introed before!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nora Ni Loideain:&amp;nbsp;&lt;/strong&gt;doing a PhD in the european data protection and this requires the mandatory retention of data by telecomms provider. References recent US events cf Snowden and her PhD is on privacy oversight and the guards (or lack thereof) in current frameworks. &amp;nbsp;Challenges: how can we build these safeguards and what is the nature of informed consent with these.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ernima Ochu:&amp;nbsp;&lt;/strong&gt;based in Manchester. Sometimes an activist, sometimes a writer, sometimes an artist. Background in neuroscience! &amp;nbsp;The social life of data and what happens around it, and how people get around based on it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yvonne Rogers&lt;/strong&gt; and is from team UCL and is director of UCLIC (Interaction Center) and also an Intel-funded institute at UCL where they work on connected data. &amp;nbsp;Given lots of data from sources, interested in how people can engage with it and how to visualise . (Hamed: &amp;quot;Human City Interaction is the next thing!&amp;quot;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Geetanjali Sampemane;&lt;/strong&gt;&amp;nbsp;background in Computer Science, and works at Google on Infrastructure Security and Privacy group. &amp;nbsp;Challenge is how to help people calibrate the benefits and risks for appropriate tradeoffs. &amp;nbsp;How can humans make an informed choice, and this isn't based on informed choice. &amp;nbsp;Giving people buttons and options isn't the most useful way to approach this, and we need a mental model similar to how we judge risks in the physical world. &amp;nbsp;In the online world, noone understands how dangerous it is to reuse passwords. Security people have made is a little worse by telling people to use complicated passwords, but brute force isn't the big problem right now, it's the connectivity of services.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cerys Willoughby:&amp;nbsp;&lt;/strong&gt;Southhampton and looking at the usability of notebooks and wondering how to make the interfaces usable without being a technological guru. (missed rest due to reading cool comic she projected about her work. Sorry!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Eiko Yoneki&lt;/strong&gt;: from Cambridge, and she works on digital epidemiology and real world mobility data collection in Africa (e.g. EipPhone). &amp;nbsp;She analyses network structure to understand graphs and connectivity. &amp;nbsp;Also works on CDNs and builds self-adaptive CDNs, and works on graph-specific data parallel algorithms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jonathan Cave:&amp;nbsp;&lt;/strong&gt;game theorist (Yale, Cambridge, Stanford) and worked in a lot of government/academia/research areas. Works on economics and IoT (festival of things and the boundaries of humanity is coming up soon in Cambridge on 29th October). &amp;nbsp;Fascinating anecdote about price of sick animals&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;George Danezis:&lt;/strong&gt; formerly MSR now UCL, and is interested in technical security aspects of how to glue together distributed mobile devices and not leave our personal data unreadable. &amp;nbsp;Has done work on privacy friendly statistics and how we can process and analyse it as an aggregate data set. Has worked in the context of smart metering in Europe.&lt;/p&gt;
&lt;h2&gt;Breakout sessions&lt;/h2&gt;
&lt;p&gt;We then had breakout sessions to brainstorm the challenges in this area (lots of post it notes and arguments), and Amir Chaudhry has summarised the results of the 5 presentations here:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disambiguating data.&lt;/strong&gt; For example from the home and organisations. This isn't a new problem but becomes more important the more data collection occurs using different sources. &amp;nbsp;Who are the principles in terms of onwership and provenance? &amp;nbsp;How do we deal with communities/groups &amp;nbsp;and data control?&lt;/p&gt;
&lt;p&gt;Why not try crowd sourcing mechanisms for people to use so that they can improve the use of sites like Ryanair (who deliberately obfuscate things). &amp;nbsp;Changing mindset from consumer perspective to a producer perspective. &amp;nbsp;i.e humans make data and perhaps can provide this to others for economic benefits.&lt;/p&gt;
&lt;p&gt;We have data and different notions of data quality. &amp;nbsp;It's not always the case that the most scientific data is the best, depending on how it's used. &amp;nbsp;We have Collectivist notions of data culture: e.g this conversation right now in the room isn't just individual, it's all of us so we can't ascribe it to individuals. Then there are Network notions, based on transactions that use a reductionist view to decide what they're worth. &amp;nbsp;Can think of these on a continuum and the research challenge is how well do different ends of above scale in producing data and making value. &amp;nbsp;Interesting question is if people opt out (right to forget or right to oblivion), then the data that is left is flawed.&lt;/p&gt;
&lt;p&gt;We need to examine current assumptions and values around data. &amp;nbsp;What is the unit of analysis? Must be clearer on this. Where and when we look at what data also matters as well as global aggregation. &amp;nbsp;Sometimes also want to look at trajectories and data flows and how this changes over time. &amp;nbsp;How do we interact with this data. &amp;nbsp;Do users interact with data directly or with something that sits in front of it? &amp;nbsp;There's an interaction between data science and the creative process of presenting information in a certain way. &amp;nbsp;This depends on ultimate goal being served, for example e.g beavioural changes or just increased engagement.&lt;/p&gt;
&lt;p&gt;There are big challenges in integration of groups who want to construct humans. Groups like social sciences (think about risk), Psychological science (reputation), Data sciences (Epistomology and Ontology), Design science (Interfaces and interactions). What is the new meaning of ownership and liability? e.g who owns this collection of posters and the ideas that have come out? [Hamed and Mort clarify that it's all theirs!] &amp;nbsp;What happens if there are negative consequences as a result of using poor data?&lt;/p&gt;
&lt;p&gt;Business models are also important in order to go from studies to practice. Are there new social structures we could make to help this? &amp;nbsp;For example, we have venture capital that takes risks but what about social capital to spread risk to create new businesses e.g kickstarter and the like.&lt;/p&gt;
&lt;p&gt;What does informed consent mean? Current system puts onus on user to understand all the contractual conditions before deciding. &amp;nbsp;Perhaps there's a social-network method of crowd-sourcing opinions on ToS or providing some kind of health rating? &amp;nbsp;Perhaps data protection agencies could certify terms or maybe the EFF or non-profits can provide some kind of rating system (c.f Moody's etc?). For example from the home and organisations. This isn't a new problem but becomes more important the more data collection occurs using different sources. &amp;nbsp;Who are the principles in terms of onwership and provenance? &amp;nbsp;How do we deal with communities/groups &amp;nbsp;and data control?&lt;/p&gt;
&lt;p&gt;Why not try crowd sourcing mechanisms for people to use so that they can improve the use of sites like Ryanair (who deliberately obfuscate things). &amp;nbsp;Changing mindset from consumer perspective to a producer perspective. &amp;nbsp;i.e humans make data and perhaps can provide this to others for economic benefits.&lt;/p&gt;
&lt;p&gt;We have data and different notions of data quality. &amp;nbsp;It's not always the case that the most scientific data is the best, depending on how it's used. &amp;nbsp;We have Collectivist notions of data culture: e.g this conversation right now in the room isn't just individual, it's all of us so we can't ascribe it to individuals. Then there are Network notions, based on transactions that use a reductionist view to decide what they're worth. &amp;nbsp;Can think of these on a continuum and the research challenge is how well do different ends of above scale in producing data and making value. &amp;nbsp;Interesting question is if people opt out (right to forget or right to oblivion), then the data that is left is flawed.&lt;/p&gt;
&lt;p&gt;We need to examine current assumptions and values around data. &amp;nbsp;What is the unit of analysis? Must be clearer on this. Where and when we look at what data also matters as well as global aggregation. &amp;nbsp;Sometimes also want to look at trajectories and data flows and how this changes over time. &amp;nbsp;How do we interact with this data. &amp;nbsp;Do users interact with data directly or with something that sits in front of it? &amp;nbsp;There's an interaction between data science and the creative process of presenting information in a certain way. &amp;nbsp;This depends on ultimate goal being served, for example e.g beavioural changes or just increased engagement.&lt;/p&gt;
&lt;p&gt;There are big challenges in integration of groups who want to construct humans. Groups like social sciences (think about risk), Psychological science (reputation), Data sciences (Epistomology and Ontology), Design science (Interfaces and interactions). &amp;nbsp;What is the new meaning of ownership and liability? e.g who owns this collection of posters and the ideas that have come out? [Hamed and Mort clarify that it's all theirs!] &amp;nbsp;What happens if there are negative consequences as a result of using poor data? Business models are also important in order to go from studies to practice. Are there new social structures we could make to help this? &amp;nbsp;For example, we have venture capital that takes risks but what about social capital to spread risk to create new businesses e.g kickstarter and the like.&lt;/p&gt;
&lt;p&gt;What does informed consent mean? Current system puts onus on user to understand all the contractual conditions before deciding. &amp;nbsp;Perhaps there's a social-network method of crowd-sourcing opinions on ToS or providing some kind of health rating? &amp;nbsp;Perhaps data protection agencies could certify terms or maybe the EFF or non-profits can provide some kind of rating system (c.f Moody's etc?)&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Ian Brown took notes on our breakout session on business models for privacy:&lt;/p&gt;
&lt;p&gt;Collectives/cooperatives sharing data through PDSes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to incentivise membership? Dividends, social benefit (e.g. medical research)&lt;/li&gt;
&lt;li&gt;what currently exists where data controller has strong incentive not to leak/breach data e.g. Boots for brand loyalty, Apple/Facebook? So long as customer can switch effectively (portability, erasure)&lt;/li&gt;
&lt;li&gt;Power tool sharing at village level. Hang off existing structures e.g. local councils.&lt;/li&gt;
&lt;li&gt;New forms of micro-markets e.g. physical gatherings? Alternatives to currencies. Kickstarter? Distribution reduces risk of centralised architectures.&lt;/li&gt;
&lt;li&gt;What do syndicalist-anarchist models of data management look like?&lt;/li&gt;
&lt;li&gt;Current uses of data are optimising existing business practices. But what totally new practices could be enabled? Human-facing efficiencies?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What are types of biz models? Startups, personal profit, NGO, medical research, banks. Balanced investment portfolio.&lt;/p&gt;
</content><id>http://www.syslog.cl.cam.ac.uk/2013/10/02/liveblogging-the-first-human-data-interaction-workshop/</id><title type="text">Liveblogging the first Human Data Interaction workshop</title><updated>2013-10-02T09:35:08+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://anil.recoil.org/2013/09/30/travis-and-ocaml.html" rel="alternate"/><contributor><uri>http://anil.recoil.org/feeds/atom-ocaml.xml</uri><name>Anil Madhavapeddy</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://travis-ci.org&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/travis-mascot-200px.png&quot; style=&quot;padding-left: 15px; float:right;&quot;/&gt;&lt;/a&gt;
A few months ago, Mike Lin posted &lt;a href=&quot;http://blog.mlin.net/2013/02/testing-ocaml-projects-on-travis-ci.html&quot;&gt;instructions&lt;/a&gt; of how to bootstrap an OCaml testing environment within the &lt;a href=&quot;http://travis-ci.org&quot;&gt;Travis&lt;/a&gt; continuous integration tool.  I finally got around to integrating his prototype scripts properly using the latest OCaml and OPAM versions during my travels last week to ICFP.  It&amp;rsquo;s been an extraordinarily quick and pleasant experience to add the (free!) Travis test runs to my OCaml programs on GitHub, so here&amp;rsquo;s how you can do it too.  &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; and I have used this for about 15 of our own projects already, and I&amp;rsquo;m switching the whole of the &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage&lt;/a&gt; repo infrastructure over to it this week.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(edit: I&amp;rsquo;ve done a followup post about &lt;a href=&quot;http://anil.recoil.org/2013/10/06/travis-secure-ssh-integration.html&quot;&gt;integrating Travis with SSH&lt;/a&gt; to make secure deployments easier.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Getting started&lt;/h2&gt;

&lt;p&gt;Getting my first Travis build working with one of my OCaml projects took about 2 minutes in total:&lt;/p&gt;

&lt;p&gt;First, log into &lt;a href=&quot;http://travis-ci.com&quot;&gt;Travis&lt;/a&gt; and sign in via Twitter.  Click on the &lt;a href=&quot;https://travis-ci.org/profile&quot;&gt;Accounts&lt;/a&gt; button on the top-right and you should see a list of the all the GitHub repositories that you have access to.  Just click the &lt;i&gt;On&lt;/i&gt; switch for the one you want to start testing.  Nothing will actually happen until the next code push or pull request goes to that repository.  Behind the scenes, the &lt;i&gt;On&lt;/i&gt; button that you clicked use the GitHub APIs to turn on the Travis post-commit hook for your repository.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;.travis.yml&lt;/code&gt; file in your main repository (see below or &lt;a href=&quot;https://gist.github.com/avsm/6757425&quot;&gt;this gist&lt;/a&gt;).  Travis doesn&amp;rsquo;t have native support for OCaml, but it isn&amp;rsquo;t really needed since we can just use &lt;code&gt;C&lt;/code&gt; and write our own shell scripts.  The &lt;code&gt;env&lt;/code&gt; variables define a matrix of the different combinations of OCaml and OPAM that we want to test.  Just remove variations that you don&amp;rsquo;t care about to avoid wasting Travis&amp;rsquo; CPU time (open source projects are supported on a fair-use basis by them).
Here&amp;rsquo;s the &lt;code&gt;.travis.yml&lt;/code&gt; that I used for my &lt;a href=&quot;https://github.com/mirage/ocaml-uri&quot;&gt;ocaml-uri&lt;/a&gt; library: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bash -ex .travis-ci.sh&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OCAML_VERSION=4.01.0 OPAM_VERSION=1.0.0&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OCAML_VERSION=4.01.0 OPAM_VERSION=1.1.0&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OCAML_VERSION=4.00.1 OPAM_VERSION=1.0.0&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OCAML_VERSION=4.00.1 OPAM_VERSION=1.1.0&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OCAML_VERSION=3.12.1 OPAM_VERSION=1.0.0&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;OCAML_VERSION=3.12.1 OPAM_VERSION=1.1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you just need the &lt;code&gt;.travis-ci.sh&lt;/code&gt; shell to run the actual tests.  Travis provides an Ubuntu Precise/i386 VM that is destroyed after every test run, so we need to initialize it with the OCaml and OPAM binary packages.  Since you often want to test different versions of all of these, I created a series of stable Ubuntu PPAs that have OCaml 3.12,4.0,4.1 and OPAM 1.0 and the (currently beta) 1.1 package manager.  You can find them all on my &lt;a href=&quot;http://launchpad.net/~avsm&quot;&gt;Launchpad&lt;/a&gt; page, but the below script takes care of it all for you.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Edit this for your own project dependencies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OPAM_DEPENDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ocamlfind ounit re&amp;quot;&lt;/span&gt;
	 
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$OCAML_VERSION,$OPAM_VERSION&amp;quot;&lt;/span&gt; in
3.12.1,1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;avsm/ocaml312+opam10 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
3.12.1,1.1.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;avsm/ocaml312+opam11 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
4.00.1,1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;avsm/ocaml40+opam10 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
4.00.1,1.1.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;avsm/ocaml40+opam11 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
4.01.0,1.0.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;avsm/ocaml41+opam10 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
4.01.0,1.1.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;avsm/ocaml41+opam11 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
*&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Unknown &lt;span class=&quot;nv&quot;&gt;$OCAML_VERSION&lt;/span&gt;,&lt;span class=&quot;nv&quot;&gt;$OPAM_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
	 
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sudo add-apt-repository ppa:&lt;span class=&quot;nv&quot;&gt;$ppa&lt;/span&gt;
sudo apt-get update -qq
sudo apt-get install -qq ocaml ocaml-native-compilers camlp4-extra opam
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPAMYES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
opam init 
opam install &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPAM_DEPENDS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;opam config env&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
make
make &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now just do a push to your repository (a commit adding the Travis files above will do), and you will soon see the Travis web interface update.  For example, here&amp;rsquo;s the &lt;a href=&quot;https://travis-ci.org/mirage/ocaml-uri/builds/11899338&quot;&gt;output of ocaml-uri&lt;/a&gt; that the above example files are for.  Of course, you should tweak the scripts to run the tests that your own project needs.  Let me know if you make any useful modifications too, by forking the &lt;a href=&quot;https://gist.github.com/avsm/6757425&quot;&gt;gist&lt;/a&gt; or e-mailing me.&lt;/p&gt;

&lt;h2&gt;Testing pull requests in OPAM&lt;/h2&gt;

&lt;p&gt;Travis isn&amp;rsquo;t just for code pushes though; as of a few months ago it can also &lt;a href=&quot;http://about.travis-ci.org/blog/announcing-pull-request-support/&quot;&gt;test pull requests&lt;/a&gt;.  This is an incredibly useful feature for complex projects such as the OPAM repository that has lots of contributors.  You don&amp;rsquo;t need to do anything special to activate it: whenever someone issues a pull request, Travis will merge it locally and trigger the test runs just as if the code had been pushed directly.&lt;/p&gt;

&lt;p&gt;I did do some special scripting to make this work with the OPAM package repository.  Ideally, every new package or metadata change in OPAM will attempt to rebuild just that package set (rebuilding the entire repository would far exceed the 50 minute testing budget that Travis imposes).  I put together a &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/blob/master/.travis-ci.sh&quot;&gt;very hacked up shell script&lt;/a&gt; that greps the incoming diff and rebuilds the subset of packages.  This is now live, and you can see both &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/pull/1144&quot;&gt;successful&lt;/a&gt; and &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/pull/1131&quot;&gt;failed&lt;/a&gt; pull requests (once the request has been merged, there&amp;rsquo;s a tiny little green arrow beside the commit that was tested).&lt;/p&gt;

&lt;p&gt;This is a very unconservative estimate test matrix since a package update will also affect the reverse transitive cone of packages that depend on it, but it does catch several common typos and incompatibilities (for example, packages that use OPAM 1.1-only features by mistake).  The longer term plan is to use the &lt;a href=&quot;http://github.com/ocamllabs/ocamlot&quot;&gt;OCamlot&lt;/a&gt; command line tool to parse the pull request and compute an exact set of packages that need rebuilding.&lt;/p&gt;

&lt;h2&gt;Deployment&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://xkcd.com/303/&quot;&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/compiling.png&quot; style=&quot;padding-left: 15px; float:right;&quot; width=&quot;250px&quot;/&gt;&lt;/a&gt;
Travis has one last very cool feature up its sleeve.  When a project has successfully built, it can run a scripting hook in the VM, which can be used to trigger a further code push or service update.  If the service requires authentication, you can &lt;a href=&quot;http://about.travis-ci.org/docs/user/encryption-keys/&quot;&gt;encrypt a secret&lt;/a&gt; in the &lt;code&gt;travis.yml&lt;/code&gt; using their public key, and it will be available in the VM as an environment variable (but won&amp;rsquo;t be useful to anyone else looking at the code repository).&lt;/p&gt;

&lt;p&gt;There are quite a few uses for these Travis deployment scripts: automating the rebuilding of the &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt; website infrastructure, rebuilding the central &lt;a href=&quot;http://pw374.github.io/posts/2013-09-24-01-50-14-opamdoc-take1.html&quot;&gt;opam-doc&lt;/a&gt; &lt;code&gt;cmt&lt;/code&gt; file archive, or even autoupdating &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage&lt;/a&gt; microkernels to Amazon EC2 and Rackspace.&lt;/p&gt;

&lt;p&gt;So how does this tie into the ongoing work on &lt;a href=&quot;http://anil.recoil.org/2013/09/09/ocamlot-autotriaging.html&quot;&gt;OCamlot&lt;/a&gt;?  Quite simply, it&amp;rsquo;s saved us a ton of frontend work, and lets us focus on the more interesting OCaml-specific problems.  Travis is also somewhat reactive (since it only runs in response to pushes or pull requests), and we still need to be able to run complete repository sweeps to look for more systematic breakage. It also doesn&amp;rsquo;t support any non-Ubuntu operating systems yet.  However, Travis takes the burden off us for handling the steadily &lt;a href=&quot;http://anil.recoil.org/2013/09/20/opam-1-1-beta.html&quot;&gt;increasing&lt;/a&gt; number of package updates, and can be used to launch further OCamlot jobs on the other architectures and distributions.  All in all, I&amp;rsquo;m very grateful to Mike for taking the trouble to blog about it back in March!&lt;/p&gt;

&lt;h2&gt;And a little bit of cheeky ARM hackery&lt;/h2&gt;

&lt;p&gt;I couldn&amp;rsquo;t resist one final little hack to see if I could actually do some ARM/OCaml testing using the Travis infrastructure.  I adapted Ian Campbell&amp;rsquo;s excellent &lt;a href=&quot;http://www.hellion.org.uk/blog/posts/foreign-chroots-with-schroot-and-qemu/&quot;&gt;guide to ARM cross-chroots&lt;/a&gt;, and ended up with a &lt;a href=&quot;https://github.com/avsm/ocaml/blob/travis/.travis-ci.sh&quot;&gt;rough script&lt;/a&gt; that builds an unattended chroot and can run OCaml/OPAM installations there too.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t something I&amp;rsquo;m quite comfortable running on all of my repositories just yet though, since an OCaml cross-build using qemu took over 5 hours and was quite rightly terminated when running within Travis.  To mitigate this, I&amp;rsquo;ve built a &lt;a href=&quot;http://www.recoil.org/~avsm/debian-arm&quot;&gt;custom apt-repository&lt;/a&gt; for ARMel packages to install a binary toolchain, and you can see the results of &lt;a href=&quot;https://travis-ci.org/avsm/ocaml/jobs/11942786&quot;&gt;Lwt/ARM building successfully&lt;/a&gt;.  I&amp;rsquo;ll update on this as I get it working on more packages, as I&amp;rsquo;m quite interested in getting a solid Xen/ARM toolstack up and running for another &lt;a href=&quot;http://nymote.org&quot;&gt;exciting project&lt;/a&gt; over in OCaml Labs&amp;hellip;&lt;/p&gt;
</content><id>http://anil.recoil.org/2013/09/30/travis-and-ocaml.html</id><title type="text">Test your OCaml packages in minutes using Travis CI</title><updated>2013-09-30T01:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2013/09/28/ocaml-objects/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;m now written 15,000 lines of OCaml while migrating 0install to the language. So here&amp;rsquo;s another &amp;ldquo;things I&amp;rsquo;ve learned&amp;rdquo; post&amp;hellip;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://ocaml.org/tutorials/objects.html&quot;&gt;official objects tutorial&lt;/a&gt; offers a good introduction to using objects in OCaml, but it doesn&amp;rsquo;t explain a number of important issues. &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual005.html&quot;&gt;Chapter 3 of the OCaml manual&lt;/a&gt; does explain everything, but I had to read it a few times to get it.&lt;/p&gt;

&lt;p&gt;The manual notes that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the relation between object, class and type in OCaml is very different from that in mainstream object-oriented languages like Java or C++, so that you should not assume that similar keywords mean the same thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good advice. Coming from a Python/Java background, here are some surprising things about objects in OCaml:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An object&amp;rsquo;s type is not the same as its class.&lt;/li&gt;
  &lt;li&gt;A class A can inherit from B without being a subclass.&lt;/li&gt;
  &lt;li&gt;A class A can be a subclass of B without inheriting from it.&lt;/li&gt;
  &lt;li&gt;You don&amp;rsquo;t need to use classes to create objects.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I&amp;rsquo;m going to try explaining things in the opposite order to the official tutorial, starting with objects and adding classes later, as I think it&amp;rsquo;s clearer that way. Classes introduce a number of complications which are not present without them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#creating-objects&quot;&gt;Creating objects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#object-types&quot;&gt;Object types&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#a-puzzle&quot;&gt;A puzzle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#creating-many-objects&quot;&gt;Creating many objects&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#casting&quot;&gt;Casting&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#classes&quot;&gt;Classes&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#using-inheritance&quot;&gt;Using inheritance&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#problems-with-classes&quot;&gt;Problems with classes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Creating objects&lt;/h2&gt;

&lt;p&gt;In Python, you create a single object by first defining a class and then creating an instance of it. In OCaml, you can just create an instance directly (Java can do this with &lt;em&gt;anonymous classes&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;For example, 0install code that interacts with the system (e.g. getting the current time, reading files, etc) does so by calling methods on a &lt;code&gt;system&lt;/code&gt; object. For unit-testing, we pass mock system objects, while when running normally we pass a singleton object which interacts with the real system. We can define the singleton like this (simplified):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;code&gt;exit&lt;/code&gt; method is calling the built-in &lt;code&gt;exit&lt;/code&gt; function, not recursively calling itself. Calling a method has to be explicit, as in Python.&lt;/p&gt;

&lt;p&gt;To call a method, OCaml uses &lt;code&gt;#&lt;/code&gt; rather than &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;It is now %f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Initially, I defined time as &lt;code&gt;method time () = Unix.time ()&lt;/code&gt;, but this isn&amp;rsquo;t necessary. Unlike for regular function definitions, the body of a method is evaluated each time it is called, even if it takes no arguments, not once when the object is created.&lt;/p&gt;

&lt;h2&gt;Object types&lt;/h2&gt;

&lt;p&gt;OCaml will automatically infer the type of &lt;code&gt;real_system&lt;/code&gt; as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt; exit : int -&amp;gt; 'a; time : float &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(note: &lt;code&gt;exit&lt;/code&gt; never returns, so it can be used anywhere, which is why it gets the generic return type &lt;code&gt;'a&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; a class (nor even a &lt;em&gt;class type&lt;/em&gt;). It&amp;rsquo;s just a type.&lt;/p&gt;

&lt;p&gt;Any object providing these two methods will be compatible with &lt;code&gt;real_system&lt;/code&gt;. There is no need to declare that you implement the interface.&lt;/p&gt;

&lt;p&gt;You also don&amp;rsquo;t need to declare the type when using the object. For example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_with_error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;exit_with_error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_system&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;However, the automatic inference will often fail. In particular, if a method is defined with optional arguments then it will be incompatible:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_success&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;exit_success&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_system&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;Error: This expression has type &amp;lt; exit : ?code:int -&amp;gt; string -&amp;gt; 'a &amp;gt;
       but an expression was expected of type &amp;lt; exit : string -&amp;gt; 'b; .. &amp;gt;
       Types for method exit are incompatible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a similar way, using labelled arguments will fail unless you use them in the same order everywhere. To avoid these problems, it seems best to define the type explicitly:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real_system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;As in Python, &lt;code&gt;self&lt;/code&gt; is explicit. However, it&amp;rsquo;s attached to the object rather than to each method, and you can leave it out if you don&amp;rsquo;t need it. I added it here in order to constrain its type to &lt;code&gt;system&lt;/code&gt;. I used &lt;code&gt;_self&lt;/code&gt; rather than &lt;code&gt;self&lt;/code&gt; to avoid the compiler warning about unused variables.&lt;/p&gt;

&lt;h3&gt;A puzzle&lt;/h3&gt;

&lt;p&gt;It seems to me that some object types can be inferred but not defined. Consider this interactive session:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;However, we can&amp;rsquo;t actually use the type it prints:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengther&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unbound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;You can define this type:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengther&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;But that&amp;rsquo;s a different (and less useful) type:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengther&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengther&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specimen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specimen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengther&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;nc&quot;&gt;Types&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incompatible&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;m not sure what causes these problems. You can, however, use the cast operator (&lt;code&gt;:&amp;gt;&lt;/code&gt;) to convert to the required type if it happens.&lt;/p&gt;

&lt;p&gt;Update: &lt;code&gt;x&lt;/code&gt; does have a type, but it&amp;rsquo;s polymorphic: &lt;code&gt;'a lengther&lt;/code&gt;. OCaml has cleverly noticed that I don&amp;rsquo;t actually store any &lt;code&gt;'a&lt;/code&gt; values in the object, so it allows this single object to handle multiple types. For most objects, this will not be the case (for example, a mutable stack object could be an &lt;code&gt;int stack&lt;/code&gt; or a &lt;code&gt;string stack&lt;/code&gt;, but not both). For details, see my later post &lt;a href=&quot;http://roscidus.com/blog/blog/2013/12/20/polymorphism-for-beginners/&quot;&gt;Polymorphism for beginners&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Creating many objects&lt;/h2&gt;

&lt;p&gt;Usually, you&amp;rsquo;ll want to create many objects, sharing the same code. For example, when one 0install program depends on another, it may specify restrictions on the acceptable versions. Here&amp;rsquo;s how we make &lt;code&gt;version_restriction&lt;/code&gt; objects to represent this (simplified):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_version_restriction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meets_restriction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;version &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This is not a class. It&amp;rsquo;s just a function that creates objects.
It&amp;rsquo;s used like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_version_restriction&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2..!3&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python33_plus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_version_restriction&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3.3..&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Notice the &lt;code&gt;test&lt;/code&gt; variable, which is like a private field in Java. It cannot be used from anywhere else, simply because it is not in scope. You can define functions here in the same way. OCaml does not allow accessing an object&amp;rsquo;s fields from outside (e.g. &lt;code&gt;restriction.expr&lt;/code&gt; in Java or Python), but you can make a field readable by writing a trivial getter for it. e.g. to expose &lt;code&gt;expr&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_version_restriction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meets_restriction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;version &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Casting&lt;/h3&gt;

&lt;p&gt;You can cast to a compatible (more restricted) type using &lt;code&gt;:&amp;gt;&lt;/code&gt;. e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;However, OCaml does not store the type information at runtime, so you cannot cast in the other direction. That is, given a &lt;code&gt;printable&lt;/code&gt; object, you cannot find out whether it really has a &lt;code&gt;meets_restriction&lt;/code&gt; method. This doesn&amp;rsquo;t seem to be a problem, since the places where I wanted to check for several possibilities were better handled with variants.&lt;/p&gt;

&lt;h2&gt;Classes&lt;/h2&gt;

&lt;p&gt;OK, so we can create objects with public methods, constructors, internal functions and state, and define types (interfaces). So what are classes for? The key seems to be this: &lt;strong&gt;Classes are all about (implementation) inheritance.&lt;/strong&gt; If you don&amp;rsquo;t need inheritance, then you don&amp;rsquo;t need classes.&lt;/p&gt;

&lt;p&gt;Changing &lt;code&gt;make_version_restriction&lt;/code&gt; to a class would look like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version_restriction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meets_restriction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;version &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version_restriction&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2..!3&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;We just changed the &lt;code&gt;let&lt;/code&gt; to &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;make_version_restriction&lt;/code&gt; to &lt;code&gt;new version_restriction&lt;/code&gt; (in fact, there are some syntax restrictions when defining classes: a class body is a series of &lt;code&gt;let&lt;/code&gt; declarations followed by an object, whereas a function body is an arbitrary expression).&lt;/p&gt;

&lt;p&gt;When you define a class (e.g. &lt;code&gt;version_restriction&lt;/code&gt;), OCaml automatically defines three other things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a class type (&lt;code&gt;version_restriction&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;an object type (also called &lt;code&gt;version_restriction&lt;/code&gt;), defining the public methods&lt;/li&gt;
  &lt;li&gt;an object type for subtypes (&lt;code&gt;#version_restriction&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The object type just defines the public methods provided by instances of the class. The class type also defines the API the class provides to its subclasses. Confusingly, OCaml calls this the &amp;ldquo;private&amp;rdquo; API (Java uses the term &amp;ldquo;protected&amp;rdquo; for this).&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;method private&lt;/code&gt; to declare a method that is only available to subclasses, and &lt;code&gt;val&lt;/code&gt; to declare fields (fields are always private). Methods can be declared as &lt;code&gt;virtual&lt;/code&gt; if they must be defined in subclasses (this is like &lt;code&gt;abstract&lt;/code&gt; in Java). A class with virtual methods must itself be virtual.&lt;/p&gt;

&lt;h3&gt;Using inheritance&lt;/h3&gt;

&lt;p&gt;To inherit from a class, use:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s an example from 0install: a &lt;code&gt;distribution&lt;/code&gt; object provides access to the platform-specific package manager, allowing 0install to query the native package database for additional candidates. Each distribution subclasses the base class. Here&amp;rsquo;s my first (wrong) attempt to do this with classes (simplified):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distribution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distro_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distro_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_installed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python_fallback_distribution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distro_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distribution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distribution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distro_name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fallback_to_python&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_installed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fallback_to_python&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debian_distribution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python_fallback_distribution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python_fallback_distribution&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Debian&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_installed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_cache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_installed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The Python code in 0install maintains a cache of the dpkg database for quick access. The OCaml can query this cache, but can&amp;rsquo;t (currently) update it, so if the cache is out-of-date then it must fall back to the Python code.&lt;/p&gt;

&lt;p&gt;This code doesn&amp;rsquo;t compile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&amp;quot;super&amp;quot; in &amp;quot;super#is_installed package&amp;quot;)
Error: This expression has no method is_installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re used to other languages, you may have assumed, like me, that &lt;code&gt;class python_fallback_distribution : distribution&lt;/code&gt; means
&amp;ldquo;&lt;code&gt;python_fallback_distribution&lt;/code&gt; extends &lt;code&gt;distribution&lt;/code&gt;&amp;rdquo;. It doesn&amp;rsquo;t. It means that the class type of &lt;code&gt;python_fallback_distribution&lt;/code&gt; is identical to that of &lt;code&gt;distribution&lt;/code&gt;. Therefore, &lt;code&gt;python_distribution&lt;/code&gt; can&amp;rsquo;t see the &lt;code&gt;is_installed&lt;/code&gt; method, since it was virtual in &lt;code&gt;distribution&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The solution here is simple: remove the &lt;code&gt;: distribution&lt;/code&gt; bits.&lt;/p&gt;

&lt;p&gt;In fact, we don&amp;rsquo;t need a class for &lt;code&gt;debian_distribution&lt;/code&gt; at all: a simple object would do (we can still inherit, we just can&amp;rsquo;t let others inherit from us):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debian_distribution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distribution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python_fallback_distribution&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Debian&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_installed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_cache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_installed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Notice that we declare the type of the object as &lt;code&gt;#distribution&lt;/code&gt;, ensuring that this is a subtype of it. For a plain object (like this), we could also use just &lt;code&gt;distribution&lt;/code&gt;, which would prevent us from adding any extra methods. When defining a class, you&amp;rsquo;d get an error if you did that, because restricting the type to &lt;code&gt;distribution&lt;/code&gt; would prevent subclassing in some cases (e.g. adding additional methods). For some reason, if you don&amp;rsquo;t declare a type at all then it defaults to something strange that sometimes causes confusing errors at compile time.&lt;/p&gt;

&lt;h3&gt;Problems with classes&lt;/h3&gt;

&lt;p&gt;Using classes causes a few extra problems. For example, this object&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat_classifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;has type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt; classify : int -&amp;gt; [&amp;gt; `positive | `zero ] &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you try to turn it into a class, you get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: Some type variables are unbound in this type:
     class nat_classifier :
       object method classify : int -&amp;gt; [&amp;gt; `positive | `zero ] end
   The method classify has type int -&amp;gt; ([&amp;gt; `positive | `zero ] as 'a)
   where 'a is unbound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;s&gt;OCaml can see that this method only returns `positive` or `zero`, but that may be too restrictive for subclasses. e.g. an `int_classifier` subclass may wish to return `positive`, `negative` or `zero`. So you&amp;rsquo;ll need to declare the types explicitly in these cases.&lt;/s&gt;&lt;/p&gt;

&lt;p&gt;Update: Sorry, the above is nonsense (as pointed out in the comments). You&amp;rsquo;ll get the same error if you just try to name the type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# type t =  &amp;lt; classify : int -&amp;gt; [&amp;gt; `positive | `zero ] &amp;gt;;;
Error: A type variable is unbound in this type declaration.
In method classify: int -&amp;gt; ([&amp;gt; `positive | `zero ] as 'a)
the variable 'a is unbound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The type of the plain object is polymorphic (because it contains a &lt;code&gt;&amp;gt;&lt;/code&gt;, which indicates a (hidden) type variable). This allows it to adapt in certain ways. For example: if you had some code that expected to be given the type &lt;code&gt;[`positive | `negative | `zero]&lt;/code&gt; then our object would be compatible with that too (although it would never actually return &lt;code&gt;negative&lt;/code&gt;, of course).&lt;/p&gt;

&lt;p&gt;To fix it, we can either specify a closed (non-polymorphic) return type:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat_classifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Or we can list the type variable explicitly (allowing it to remain polymorphic):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nat_classifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classify&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Another example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;has type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt; read_with : (in_channel -&amp;gt; 'a) -&amp;gt; 'a &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(i.e. it passes the open file to the given callback function and returns whatever that returns)&lt;/p&gt;

&lt;p&gt;But if you try to use a class, you&amp;rsquo;ll get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: Some type variables are unbound in this type:
         class file : object method read_with : (in_channel -&amp;gt; 'a) -&amp;gt; 'a end
       The method read_with has type (in_channel -&amp;gt; 'a) -&amp;gt; 'a where 'a
       is unbound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, you need to give the type explicitly in this case. Here, we probably want to use &amp;ldquo;universal quantification&amp;rdquo; to make the class non-polymorphic:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_contents&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;The answer to Stack Overflow&amp;rsquo;s &lt;a href=&quot;http://stackoverflow.com/questions/10779283/when-should-objects-be-used-in-ocaml&quot;&gt;When should objects be used in OCaml?&lt;/a&gt; starts:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a general rule of thumb, don&amp;rsquo;t use objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed, the OCaml standard library doesn&amp;rsquo;t appear to use objects at all.&lt;/p&gt;

&lt;p&gt;However, they can be quite useful. In 0install, we use them to abstract over different kinds of restriction (version restrictions, OS restrictions, distribution restrictions), different platform package managers (Arch, Debian, OS X, Windows, etc), and to control access to the system, using &lt;code&gt;real_system&lt;/code&gt;, &lt;code&gt;dryrun_system&lt;/code&gt; (which wraps a system, forwarding read operations but just logging writes, for &lt;code&gt;--dry-run&lt;/code&gt; mode), and &lt;code&gt;fake_system&lt;/code&gt; for unit-testing.&lt;/p&gt;

&lt;p&gt;The main things to remember are that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You often need to declare types explicitly, as the automatic type inference often can&amp;rsquo;t infer the type, or infers an incompatible type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Classes and class types are about inheritance (the API exposed to subclasses), while object types are about the public API.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are still some things I&amp;rsquo;m not sure about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Is there any disadvantage to using plain objects rather than classes (when inheritance isn&amp;rsquo;t needed)? Is it considered good style to use classes everywhere, as the tutorial does?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When declaring argument types, whether to use &lt;code&gt;(system:system)&lt;/code&gt; (I need a &lt;code&gt;system&lt;/code&gt; object) or &lt;code&gt;(system:#system)&lt;/code&gt; (the type of objects from subclasses of &lt;code&gt;system&lt;/code&gt;). In general, I don&amp;rsquo;t understand why we need separate types for these concepts.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content><id>http://roscidus.com/blog/blog/2013/09/28/ocaml-objects/</id><title type="text">Experiences with OCaml objects</title><updated>2013-09-28T12:52:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://amirchaudhry.com/ocamlorg-request-for-feedback" rel="alternate"/><contributor><uri>http://amirchaudhry.com/tags/ocamllabs-atom.xml</uri><name>Amir Chaudhry</name></contributor><content type="html">
&lt;p&gt;There is a work-in-progress site at 
&lt;a href=&quot;http://ocaml-redesign.github.io&quot;&gt;ocaml-redesign.github.io&lt;/a&gt;, where we&amp;rsquo;ve 
been developing both the tools and design for the new ocaml.org pages.  This 
allows us to test our tools and fix issues before we consider merging 
changes upstream.&lt;/p&gt;

&lt;p&gt;There is a more detailed post coming about all the design work to date and 
the workflow we&amp;rsquo;re using, but in the meantime, feedback on the following 
areas would be most welcome.  Please leave feedback in the form of issues on 
the &lt;a href=&quot;https://github.com/ocamllabs/sandbox-ocaml.org/issues&quot;&gt;ocaml.org sandbox repo&lt;/a&gt;.  You can also raise points on the 
&lt;a href=&quot;http://lists.ocaml.org/listinfo/infrastructure&quot;&gt;infrastructure mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;OCaml Logo&lt;/strong&gt; - There was some feedback on the last iteration of the 
logo, especially regarding the font, so there are now several options to 
consider.  Please look at the images on the 
&lt;a href=&quot;https://github.com/ocaml/ocaml.org/wiki/Draft-OCaml-Logos&quot;&gt;ocaml.org GitHub wiki&lt;/a&gt; and then leave your feedback on 
&lt;a href=&quot;https://github.com/ocamllabs/sandbox-ocaml.org/issues/16&quot;&gt;issue #16 on the sandbox repo&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Site design&lt;/strong&gt; - Please do give feedback on the design and any glitches 
you notice. Text on each of the new landing pages is still an initial draft 
so comments and improvements there are also welcome (specifically: Home 
Page, Learn, Documentation, Platform, Community). There are already a few 
&lt;a href=&quot;https://github.com/ocamllabs/sandbox-ocaml.org/issues&quot;&gt;known issues&lt;/a&gt;, so do 
add your comments to those threads first.  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content><id>http://amirchaudhry.com/ocamlorg-request-for-feedback</id><title type="text">Feedback requested on the OCaml.org redesign</title><updated>2013-09-24T14:00:00+00:00</updated><author><email></email><name>Amir Chaudhry</name></author></entry><entry><link href="http://www.syslog.cl.cam.ac.uk/2013/09/24/liveblogging-ocaml-workshop-2013/" rel="alternate"/><contributor><uri>http://www.syslog.cl.cam.ac.uk/tag/ocamllabs/feed/atom</uri><name>SRG Syslog</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo10-e1380031931194.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo10-e1380031931194-225x300.jpg&quot; class=&quot;alignright size-medium wp-image-1466&quot; alt=&quot;photo&quot; width=&quot;100&quot;/&gt;&lt;/a&gt;I'm here bright and early at the &lt;a href=&quot;http://ocaml.org/meetings/ocaml/&quot;&gt;OCaml 2013&lt;/a&gt; workshop at ICFP with Heidi Howard, Leo White, Jeremy Yallop and David Sheets! &amp;nbsp;There's a packed session today with lots of us presenting, so we'll swap over editing this post as the day progresses. &amp;nbsp;I also need to pop out to attend a panel on the future of Haskell so I'll be missing the bindings session, sadly!&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Accessing and using weather data in OCaml&lt;/h2&gt;
&lt;p&gt;Hez Carty from MDA Information Systems on doing large-scale weather data processing.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo9-e1380049811789.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo9-e1380049811789-225x300.jpg&quot; class=&quot;alignright size-medium wp-image-1465&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;He started with OCaml in graduate school and was looking for something better than Python, whereas they are building systems that need to run for many years with high stability. &amp;nbsp;He's not from a formal CS background but from the physical sciences, and found that the static typing made it easy to explore the language features. &amp;nbsp;The native code output is also important, and he finds predictability very important in day-to-day engineering. &amp;nbsp;The simple FFI also made a big difference.&lt;/p&gt;
&lt;p&gt;They do weather data retrieval and use HTTP/zeromq as a message bus to do language interop, and a workflow management tool to handle dependency graphs. &amp;nbsp;They take weather models frmo all these sources, and do various analyses (principal component analysis, probability models for precipitation via Monte Carlo simulations with a first order Markov chains). &amp;nbsp;More generally, there is a bunch of processing for climatology and data extraction and insertion.&lt;/p&gt;
&lt;p&gt;A NAM forecast plots the geo data of the USA, and overlays semitransparent layers (e.g. clouds) that are stacked up to get a fake satellite view of the earth, and then there are simulated radar returns where the model (e.g.) rains. &amp;nbsp;In addition to the structured formats, there is raw streaming data from sensor stations that send back raw binary data such as precipitation events, which is written as a small OCaml library to parses them into more structured formats.&lt;/p&gt;
&lt;p&gt;The big data formats are HDF4 and GRIB, which are binary data formats. There are mature C libraries to parse them and lots of existing analysis tools (e.g. wgrib which can extract lat/longs from a big file). &amp;nbsp;However, the tools arent great for doing larger scale analysis, as shelling out all the time for thousands of points is not ideal -- therefore they bind to OCaml to do the analysis in-house.&lt;/p&gt;
&lt;p&gt;The GRIB bindings use int, float and float arrays and bindings are entirely hand-written &amp;lt;i&amp;gt;(I'm looking forward to the ctypes talk! --anil)&amp;lt;/i&amp;gt;. &amp;nbsp;They expose only an OCaml friendly interface that is safe for callers. &amp;nbsp;The speaker now shows several nice graphs from CloudSat tracks from earth orbit, and how they take intersecting profiles to deduce things about what multiple satellites are seeing.&lt;/p&gt;
&lt;p&gt;They're mixing lots of different tools and satellite sources -- derived information from teleconnections (air surface pressure and how it varies in terms of oscillations between the north and south Atlantic). &amp;nbsp;All the analysis is written in OCaml, and he had to work with several scientists who didn't have access to their initial source code in many cases, so the experience of working with his fresh system was very positive.&lt;/p&gt;
&lt;p&gt;Challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standard issues when interfacing with C (type mismatches between C and OCaml in particular, and the question of sharing vs copying). &amp;nbsp;The worst failure mode is silent failure with bad data, which leads to bad science!&lt;/li&gt;
&lt;li&gt;&amp;quot;Getting used to the functional way of life&amp;quot; can tough, as is knowing when to balance elegance with the speed benefits of not copying hundreds of megabytes of data around can be tough.&lt;/li&gt;
&lt;li&gt;Development environments other than Emacs and Vim are poorly supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The overall project has been very successful, and the bindings for HDF4/GRIB API bindings have been used to process 1TB+/day for over 5 years now. &amp;nbsp;It's based on Bigarray and mmap, and the FFI makes getting up and running quickly.&lt;/p&gt;
&lt;p&gt;He finds OPAM with local repositories fantastic, and used GODI and odb/oasis-db before that.&lt;/p&gt;
&lt;p&gt;Q: how did he do the cool plots?&lt;/p&gt;
&lt;p&gt;A: plplot bindings on github&lt;/p&gt;
&lt;p&gt;Q: Anil: did you move from Fortran&lt;/p&gt;
&lt;p&gt;Q: Nate Foster: terabytes of data makes me wonder about GC?&lt;/p&gt;
&lt;p&gt;A: going through and folding over data generates huge amount of garbage and slows things down considerably. If the project is one-off, he tweaks the GC or manually call the GC more often. Really depends on length of code.&lt;/p&gt;
&lt;p&gt;Q: The data processed is huge, so what was the parallel computation approach?&lt;/p&gt;
&lt;p&gt;A: The task distribution system doesn't need a lot of parallelism, as he can work on one file at a time or chunk the files manually and aggregate the results. &amp;nbsp;He's looking forward to doing some semi-shared memory parallelism.&lt;/p&gt;
&lt;p&gt;Q: Pierre Chambart: Is the numerical code in OCaml or C?&lt;/p&gt;
&lt;p&gt;A: LAPACK in OCaml, but the Monte Carlo is pure OCaml and interpolation is in pure OCaml too. &amp;nbsp;Unless speed is absolutely required, it's written in OCaml.&lt;/p&gt;
&lt;h2&gt;Frenetic Network Controller&lt;/h2&gt;
&lt;p&gt;Arjun Guha about their multiyear project to program software define networks. When he started on this, he thought that networks are just a series of tubes! The reality is very different though, as there are numerous intermediate boxes (firewalls, routers, wireless auth). The real problem is that each of these intermediate boxes runs specialized, vendor-specific software and are configured independently via some proprietary CLI. They're difficult to configure and difficult to statically reason about.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo13-e1380031705305.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo13-e1380031705305-225x300.jpg&quot; class=&quot;alignright size-medium wp-image-1480&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SDN helps with this by introducing standardized programmable that can deploy in-network features, and a logically centralized controller (a big beefy server) that enables reasoning about whole-network behaviour. SDN is a hot topic right now (lots of commercial startups, 200+ people at HotSDN, generally very busy).&lt;/p&gt;
&lt;p&gt;There are several Openflow controllers out there: Java (Floodlight), Python (Pox), C++ (Nox) and Haskell (Nettle), but Arjun introduces a novel OCaml programmable switch!&lt;/p&gt;
&lt;p&gt;Openflow works via a controller &amp;quot;faulting&amp;quot; in new packets that are routed to the controller when unknown packets show up on the wire. The source code consists of a generic Openflow packet parser (its a binary protocol), and a generic packet parser (e.g. TCP/IP) and a routing engine.&lt;/p&gt;
&lt;p&gt;First library: ocaml-packet that deals with deserializing TCP/IP/ARP/ICMP/Ethernet/802.1Q, and only depends on cstruct by Anil et al. (shows an example of a C struct for IPv4), and the nice thing that they get network byte order for free (thanks to Pierre Chambarts ocplib-endian of course).&lt;/p&gt;
&lt;p&gt;ocaml-openflow uses serialization for OpenFlow 1.0 and 1.3, and is based on a (cleaned up) fork of the mirage-openflow library, using ideas from Nettle about to structure the code. OpenFlow 1.3 is less complete currently but is still quite usable.&lt;/p&gt;
&lt;p&gt;The runtime systems for OpenFlow 1.0 and 1.3 listens for TCP connections from switches, and does the OpenFlow handles and keeps connections to switches alive.&lt;/p&gt;
&lt;p&gt;The source code uses Lwt and so exposes the monad to external users, e.g.:&lt;/p&gt;
&lt;pre&gt;type t
val connect : Lwt_unix.file_descr -&amp;gt; t option Lwt.t&lt;/pre&gt;
&lt;p&gt;They have a tutorial for non-OCaml hackers, and found teaching OCaml, Openflow AND Lwt was too much for new users. Therefore they built a new controller called Ox that hides much of the details of Lwt threading. It still uses them internally (Lwt, ocaml-openflow) but is inspired by Ox.&lt;/p&gt;
&lt;p&gt;Therefore they can build simple openflow tutorials using Ox, and advanced controller such as Frenetic can be built directly using the low level libraries. Good for beginners and weathered OCaml hackers alike!&lt;/p&gt;
&lt;p&gt;The problem with the controller seeing every bit of data is that it gets flooded by packets if it doesnt insert rules into the switches itself. Every switch has a &lt;i&gt;flow table&lt;/i&gt; that has priorities, patterns and actions, and tries to take action without bothering the controller. At start of day, the controller does see everything, but eventually flows settle down. The problem they are solving is avoiding having two copies of the program on both the controller and the switch, and figuring out how to deal with race conditions across the two. The simple, logical structure of the OCaml program gets torn apart if they try to write these two parallel logic rules by hand.&lt;/p&gt;
&lt;p&gt;They deal with this in the Frenetic network controller. This is a DSL for programming OpenFlow networks, and it has boolean predicates, several policy composition operations and compiles to OF flow rules. It implements ideas from several papers (ICFP/POPL/SIGCOMM/PLDI) and is fully open source on GitHub. (frenetic-lang/frenetic).&lt;/p&gt;
&lt;p&gt;They made a transition from Haskell to OCaml for a few reasons. They specified several parts of the Core compiler and runtime in Coq, and found Haskell/Coq extraction very painful (specifically, they had to abandon Coq functors, which had helped them discover key algebraic properties for their work on Kleene algebras). They found it easier for their collaborators to use OCaml than Haskell in general too.&lt;/p&gt;
&lt;p&gt;Lwt programming is mind boggling for beginners although the syntax extension does help, and the lack of multicore is a future problem as the controller needs scale up. Overall, they find that hacks at any layer are possible now and lots of projects have spun up!&lt;/p&gt;
&lt;p&gt;Q: multicore is a common criticism, but could you give an example of how you would actually solve this is you had shared memory vs a fork model?&lt;br/&gt;
A: There are several networking algorithms in the literature, and its a barrier for consumers. Nate notes that they could write one by hand but there's a time issue there and would rather have it automagically.&lt;/p&gt;
&lt;h2&gt;PHP Program analysis at Facebook&lt;/h2&gt;
&lt;p&gt;Pffff is all about deadcode removal, test coverage, checking for undefined function and use of undeclared variables, and syntactical grep rules. They also do taint analysis via abstract interpretation, type driven flow control and eventually (via Monoidics) a separation logic model (they use OCaml too).&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo11-e1380048991412.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo11-e1380048991412-225x300.jpg&quot; class=&quot;alignright size-medium wp-image-1478&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk is about static analysis of a huge codebase (5m lines+ of PHP code is scary!). Since he had a lot of big monitors, he built the tools to do analysis over huge codebases. He demonstrates this on the OCaml compiler itself &lt;i&gt;(camlp4 is huge! boo!!! -anil)&lt;/i&gt;. They can also zoom in in realtime to each box and eventually see the content of the file itself!&lt;/p&gt;
&lt;p&gt;The goal is NOT to build an editor, but to analyse and explore large code bases. It opens and editor if required any time. The idea is to transform semantic program analysis into a visual formt that's more easily digestible. Just like in Google Maps where you see the big important roads and only the details when you zoom in. He uses this tool all day on his own codebase too, and gradually realised that when you want to learn a new codebase, you want to start to learn the software architecture first, and then want to figure out the dependency graph before seeing details.&lt;/p&gt;
&lt;p&gt;He then shows an interactive grid map that explains the dependencies of whole subdirectories of the OCaml compiler, and drill down to understand what they're for.&lt;/p&gt;
&lt;p&gt;Audience q: did you consider a flare graph? a: others have done edge graphs and graphviz etc, and none of these scale to quite the heights that this particular grid done. The ordering of the grid is also the transitive order of dependencies, so it starts with the list of simple dependencies (stdlib) and ends with the toplevel (depends on everything). You can spot for example the OCaml dev rule that things in stdlib are only used by the compiler.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo14-e1380031776990.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo14-e1380031776990-225x300.jpg&quot; class=&quot;alignright size-medium wp-image-1481&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With good software, the top right of the grid is full, which is forbidden by OCaml (no cyclic module deps). With other software, the situation is far worse (audience laughter).&lt;/p&gt;
&lt;p&gt;There are many other tools (CodeQuery, stags, sgrep/spatch and scheck). &amp;nbsp;There are plugins for PHP, OCaml (using the cmt options) and Java (using Joust), C/C++ (using clang) getting all the semantic information from varied source code. &amp;nbsp;There is a plan to move it to the web (from a GTK interface) by using Ocsigen.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Conclusion: CodeMap is a scalable semantic source code vis/searcher for huge codebases, and codeGraph visualizes dependencies. &amp;nbsp; Future work is to minimize backward deps.&lt;/p&gt;
&lt;p&gt;All on Github at github.com/facebook/pfff.git&lt;/p&gt;
&lt;p&gt;Q: can you insert other metadata such as Linux perf output?&lt;/p&gt;
&lt;p&gt;A: yes! (I think)&lt;/p&gt;
&lt;h2&gt;Extension points: an alternative to camlp4&lt;/h2&gt;
&lt;p&gt;Leo White talking about alternatives to camlp4. Why? Camlp4 is very complex and it comes due to its support for an extensible grammar. Did a wg-camlp4 working group to figure out how to evolve common uses towards a more easily parsed standard, to reduce the day-to-day dependency on camlp4. After 400 emails, a consensum emerged.&lt;/p&gt;
&lt;p&gt;sexplib as an example: the old version was&lt;/p&gt;
&lt;pre&gt;type t = {
  float: int default(42);
  bar: float;
} with sexp&lt;/pre&gt;
&lt;p&gt;The annotated version is:&lt;/p&gt;
&lt;pre&gt;type t = {
  foo: int; [@default 42]
  bar: float
} [@@sexp]&lt;/pre&gt;
&lt;p&gt;This has annotation data that is passed straight through to a transformer, with no extensions to the grammar. Thus the sexplib transformer can understand with @default 42 means, and editors can easily hide or fold annotations without having to understand their details precisely.&lt;/p&gt;
&lt;p&gt;The compiler ignores any AST extension fragments that remain after all the transformers are done.&lt;/p&gt;
&lt;p&gt;sedlex&lt;/p&gt;
&lt;pre&gt;[%lexer
  match foo with
  (Range ('a','z') | Range(1000,1500)), 65 -&amp;gt; Foo
  | Star (Range('a','z')) -&amp;gt; Bar
]&lt;/pre&gt;
&lt;p&gt;These are genuine AST nodes and so if these aren't handled by the transformer, an error will result. Another example is&lt;/p&gt;
&lt;p&gt;properly foreign syntax, via COW (Caml on the Web)&lt;/p&gt;
&lt;pre&gt;let world = &amp;quot;world&amp;quot; in
let html =  [%html {|&amp;lt;h1&amp;gt;Hello $str:world$!&amp;lt;/h1&amp;gt;
|}]&lt;/pre&gt;
&lt;p&gt;There's also a shortcut convention for the syntax, such as:&lt;/p&gt;
&lt;pre&gt;match%lexer foo with
 {|&lt;/pre&gt;
&lt;p&gt;There's a shorthand form to avoid have lots of brackets due to deeply nested lets.&lt;/p&gt;
&lt;pre&gt;[%lwt let x = f () in
[%lwt let y = g () in&lt;/pre&gt;
&lt;p&gt;These have all been implemented by Alain Frisch and merged onto trunk (in OCaml 4.02.0dev). Thoughts and feedback are very welcome on the wg-camlp4 list&lt;/p&gt;
&lt;p&gt;Q: how does this affect the quality of error messages?&lt;br/&gt;
A: Leo -- do you mean error messages from the extension itself?&lt;br/&gt;
Q: what if there is an error in the extension?&lt;br/&gt;
A: The 42 that was in the default has an AST fragment and so the transformer will transplant the location. A sensible transformer will therefore be nonlossy.&lt;/p&gt;
&lt;p&gt;Q: can you chain transforms?&lt;br/&gt;
A: yes, thats why we are going with an AST fragment rather than a string, so chaining is easier. If youve got some macro expansion transformer and you want to use it with the sedlex example, they are executed in the other they are given on the command line. The next transformer will just see the resulting AST fragment, and therefore should compose between than camlp4 extensions have in the past.&lt;/p&gt;
&lt;p&gt;Q: do you have ideas about hygiene as Scheme does?&lt;br/&gt;
A: Not particularly in this case, although Leo has some ideas for future systems.&lt;/p&gt;
&lt;p&gt;Q: Ashish Agarwal -- do existing extensions need to be reimplemented&lt;br/&gt;
A: Good thing about all these existing extensions is that they have an existing parser, so you can take your existing implementation in camlp4 and mechanically translate into an extension_points version!&lt;/p&gt;
&lt;p&gt;Q: Yaron: is anyone thinking about good libraries (hygiene etc)&lt;br/&gt;
A: Alain Frisch has merged in ppxtools into OPAM stable (that depends on 4.02.0+)&lt;/p&gt;
&lt;p&gt;Q: Will this improve performance over camlp4&lt;br/&gt;
A: Parsing is an expensive process and this is still doing marshalling. The cost is often the case that we are shelling out to this other process, so we still need to look into improving performance in other ways.&lt;/p&gt;
&lt;h2&gt;GPGPU programming with SPOC&lt;/h2&gt;
&lt;p&gt;M Bourgoin presents his PhD work on SPOC.&lt;/p&gt;
&lt;p&gt;GPGPU is odd hardware: several mutiprocessors, dedicated memory, connected via PCI-E and transferred between a GPU and host using DMA. Currently hardware has 300-2000 cores vs 4-16 CPU cores (wow). However this demands a very specific progamming model to take advantage of all this hardware.&lt;/p&gt;
&lt;p&gt;Shows an example of a vector addition in openCL&lt;/p&gt;
&lt;pre&gt;__kernel vac_add(global const double *c, global const double *a, global double *b, int N)
int nIndex = get_global_id(0);
if (nIndex &amp;gt;= N)
  return;
c[nIndex] = a[nIndex] + b[nIndex]&lt;/pre&gt;
&lt;p&gt;To actually use this though, you need a massive program to set up the kernel and execute it. It does the transforms, initialization, scheduling and so forth.&lt;/p&gt;
&lt;p&gt;OCaml and GPGPU complement each other, since we have sequential high-level OCaml and highly parallel and low-level GPGPU. So the idea with SPOC is to use OCaml to develop high level abstractions in the GPGPU and program it from OCaml.&lt;/p&gt;
&lt;p&gt;SPOC is a stream processing engine in OCaml that emits Cuda but lets it be more hardware independent.&lt;/p&gt;
&lt;pre&gt;let dev = Devices.init ()
let n = 100000
let v1 = Vector.create Vector.float64 in
let v2 = Vector.create Vector.float64 in
let v3 = Vector.create Vector.float64 in

let k = vector_add (v1,v2,v3,n)
let block = {blockX = 1024; blockY=1; blockZ=1}
let grid={gridx=(n+1024-1)/1024; gridY=1; gridZ=1}

let main()=
random_fill v1;
random_fill v2;
Kernel.run k  (block,grid) dev.(0);
#printf of result&lt;/pre&gt;
&lt;p&gt;SPOC takes care of transferring the kernel to the GPU and back and handling the scheduling and exchange of data. Vectors are very similar to Bigarrays in that they are external memory.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo15-e1380048240290.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo15-e1380048240290-224x300.jpg&quot; class=&quot;alignright size-medium wp-image-1493&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We want: simple to express, predictable performance and extensible libraries, and for current high performance libraries to be usable more safely.&lt;/p&gt;
&lt;p&gt;Two solutions: interop with Cuda/OpenCL kernel (better perf and more compatible but less safe). There is also a DSL in OCaml called Sarek, which talk focusses on.&lt;/p&gt;
&lt;p&gt;Sarek vector addition has an ML like syntax, and the language features monomorphic, imperative, toplevel and statically typed checked (with type inference). Its statically compiled to OCaml code and dynamic compilation to Cuda and OpenCL.&lt;/p&gt;
&lt;p&gt;SPOC+Sarek achieves 80% of hand-tuned Fortran performance and SPOC+external kernels is on par with Fortran (93%). It's type safe, 30% code reduction, memory managed by the GC and there are fewer memory transfers. This is ready for the real world and has great performance! Available on OPAM.&lt;/p&gt;
&lt;p&gt;Great performance, portable, great for GPU and for multicore CPU and nice playground for future abstractions.&lt;br/&gt;
Who can benefit?&lt;/p&gt;
&lt;p&gt;OCaml programmers -&amp;gt; better performance&lt;br/&gt;
HPC programmers -&amp;gt; much more flexible and extensible than current state of the art.&lt;/p&gt;
&lt;p&gt;Future work: Sarek needs custom types, function decls, recursions, exceptions, and to build parallel skeletons using SPOC and Sarek.&lt;/p&gt;
&lt;p&gt;Why not use Sarek for multicore? Well, here's the results!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ParMap: data parallel and similar to OCaml mapfold&lt;/li&gt;
&lt;li&gt;OC4MC: posix threads, compatible with current OCaml code&lt;/li&gt;
&lt;li&gt;SPOC : GPGPU kernels on a CPU, mainly data parallel and needs OpenCL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simple program to calculate power series and matrix multiplication.&lt;/p&gt;
&lt;p&gt;Power: OCaml 11s14, Parmap 3s30 SPOC &amp;lt;1s&lt;br/&gt;
Matmul: OCaml 85s OC4MC 28s and SPOC 6.2s&lt;/p&gt;
&lt;p&gt;Significant improvements using SPOC -- 11x for power series and 12x for SPOC. Running on a quad core intel i7.&lt;/p&gt;
&lt;p&gt;SPOC is available via OPAM and compatible with x86_64 on Linux and MacOS X, and speaker would love feedback.&lt;/p&gt;
&lt;p&gt;Q: Anil - how hard is OpenCL to install&lt;br/&gt;
A: easy if you know your hardware model and to the vendor website. Harder with multiple GPUs though.&lt;/p&gt;
&lt;p&gt;A: if you want to target CPUs, you need to target OpenCL and not CUDA.&lt;/p&gt;
&lt;h2&gt;High level performance optimisations for OCaml&lt;/h2&gt;
&lt;p&gt;Pierre Chambart at OCamlPro (funded by Jane Street). OCaml is fast, but not an optimizing compiler (it has predictable performance, good generated code, but what can we do to make it go faster?).&lt;/p&gt;
&lt;p&gt;A small modification to high level code shouldnt influence the low level bits.&lt;/p&gt;
&lt;pre&gt;let f x = 
  let cmp = x &amp;gt; 3 in
  if cmp then A else B

let g x =
  if x &amp;gt; 3 then A else B&lt;/pre&gt;
&lt;p&gt;The second bit of code is faster than the first here since 'g' is spotted by the compiler peephole optimizer.&lt;/p&gt;
&lt;pre&gt;let g x = 
  let f v = x + v in
  f 3&lt;/pre&gt;
&lt;p&gt;Abstract code should be compiled less abstractly. Above, we want to inline f, but a closure is still allocated per call unnecessarily. But we also dont want the compiler to be too smart and lose predictability!&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo16-e1380048580650.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo16-e1380048580650-225x300.jpg&quot; class=&quot;alignright size-medium wp-image-1496&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently compiler pipeline has a parsetree - typed tree - lambda (untyped) - clambda (lambda+closures) - cmm (simple C like) and then mach (instruction graph similar to llvm) and then lin (assembly like).&lt;/p&gt;
&lt;p&gt;Details: typed tree to lambda (construct elimination) - lambda (high level simplication such as reference elimination and pattern matching generation) - lambda to clambda (inlining, constrant propagation and book keeping in an intricate recursive loop) - clambda to cmm (unboxing, lots of peep hole checks for boxing/unboxing and tagging/untagging) - cmm to mach (instruction selection and some more peephole) - mach (allocation fusion, register allocation and scheduling)&lt;/p&gt;
&lt;p&gt;Where do we do high level optimizations then? For example, where do we do inlining (since it allows other transformations to apply). typedtree is too complicate, lambda (want inlining, simpler with closures), clambda (is too difficult to improve, and Pierre did try) and cmm (good for local optimization but not global) and mach is architecture specific.&lt;/p&gt;
&lt;p&gt;They are adding a new intermediate form between lambda and clambda known as flambda. This needs a highlevel view of values, simple manipulations, explicit closures and explicit value dependencies. lambda to flambda introduces closures, and flambda to clambda is mainly book keeping (and preparing cross-module information). The magic for optimization will be in flambda-flambda passes, and not in the flambda to clambda layers.&lt;/p&gt;
&lt;p&gt;Shows several examples of inlining, simplication and dead code elimination and why its significantly easier in the flambda form for simple microexamples. Also shows lambda lifting!&lt;/p&gt;
&lt;p&gt;Change the performance model. Now its WYSIWYG, but we want some sort of understandable compile-time evaluation. For example, consider a map function as a metaprogramming function that you want to execute at compile time without all the intermediate closure allocation.&lt;/p&gt;
&lt;p&gt;Add build_test to your OPAM to make it easier to test the compiler, and Obj-using code is very likely to break if you do certain mutations behind the compiler, or dead code elimination might happen if you use a value behind the compiler's back.&lt;/p&gt;
&lt;p&gt;Q: SimonPJ: why is it easier to do closure conversion first, as it's a lot easier in GHC to do the opposite. There are now two ways to get a value in scope doing it the other way.&lt;br/&gt;
A: In Haskell you have everything in your closure, since you get the information from the closure.&lt;br/&gt;
Q: Think of lambda calculus with let&lt;br/&gt;
A: We do flow analysis to get around this!&lt;br/&gt;
Q: This is quite complex. Is it whole program analysis?&lt;br/&gt;
A: Restricted to a single compilation unit, and a few other cases, not cross-module yet.&lt;/p&gt;
&lt;p&gt;Q: Yoann: if the prediction is &amp;quot;its always faster&amp;quot; then why do you care about predictability?&lt;/p&gt;
&lt;h2&gt;Replacing the format string hack with GADTs&lt;/h2&gt;
&lt;p&gt;Benoit Vaugon talks about how to improve the typing of Format strings in OCaml by using GADT encodings. He stats with showing basic examples of the Printf module, and advanced examples that include the &amp;quot;%a&amp;quot; callback, date scanning and hex dumping.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo17-e1380051856191.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo17-e1380051856191-300x225.jpg&quot; class=&quot;alignright size-medium wp-image-1508&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The OCaml type checker has an inferred type that encodes the details of the format string in a &amp;quot;format6&amp;quot; type that has lots of type parameters that describe the format string contents.&lt;br/&gt;
During type checking, the literal string is parsed and there is manual inference of the format6 type parameters. At runtime, the format strings are represented by the string from the source code.&lt;/p&gt;
&lt;p&gt;During printing functions, it parses the format and count parameters and accumulates parameters. It then extracts and patches subformats, and finally calls the C printf function. Scanning is more complex but broadly similar.&lt;/p&gt;
&lt;p&gt;There are quite a few problems with this. There are 5 (!) format string parsers (two in Printf, two in Scanf, one in the type checker) and there are lots of little incompatibilities as a result. For example&lt;/p&gt;
&lt;pre&gt;Printf.printf &amp;quot;%1.1s&amp;quot; &amp;quot;hello&amp;quot;&lt;/pre&gt;
&lt;p&gt;Results in Invalid_argument exception despite the static type checking, with a useless error message.&lt;/p&gt;
&lt;p&gt;There is a weakness in the type checker too, for example&lt;/p&gt;
&lt;pre&gt;Printf.sprintf &amp;quot;%s.+f&amp;quot; 3.14&lt;/pre&gt;
&lt;p&gt;results in the format string being printed.&lt;/p&gt;
&lt;p&gt;You can also segfault from there, such as&lt;/p&gt;
&lt;pre&gt;Format.printf &amp;quot;@%d%s&amp;quot; 42 &amp;quot;hello&amp;quot;&lt;/pre&gt;
&lt;p&gt;will segfault.&lt;/p&gt;
&lt;p&gt;Speed is also a concern, as parsing the format at runtime is slow, and reparsing is required by another slow C printing function. Lots of memory allocation is required.&lt;/p&gt;
&lt;p&gt;The new implementation sorts all this out by using GADTs to represent the formats. The format6 type is now concrete and not magic predefined. Formats now also become statically allowed and not multiply passed around dynamically.&lt;/p&gt;
&lt;p&gt;The new implementation (which he shows) is a fairly epic GADT but quite regular when broken down into pattern clauses and examined with respect to the old implementation.&lt;/p&gt;
&lt;p&gt;Issues: evaluation order changes slightly, as for printing functions the parameters are accumulated before printing. String_of_format is implemented by &amp;quot;%identity&amp;quot; and in the new implementation, we need to change the representation (either regenerate the string from the GADT or implement formats by a tuple).&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo18-e1380051839961.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo18-e1380051839961-225x300.jpg&quot; class=&quot;alignright  wp-image-1509&quot; alt=&quot;photo&quot; width=&quot;158&quot; height=&quot;210&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's now only one format parser (down from 4-5) for the standard library and OCaml type checker&lt;/p&gt;
&lt;pre&gt;type ('b,'c,'e,'f) fmt_ebb = Fmt_EBB:
 ('a,'b,'c,'d,'e,'f) CamlinternalFormatBasics.fmt -&amp;gt;
 ('b,'c,'e,'f) fmt_ebb
val fmt_ebb_of_string : string -&amp;gt; ('b,'c,'e,'f) fmt_ebb
val type_format: ('x,'b,'c,'t,'u,'v) format6 -&amp;gt;
   ('a,'b,'c,'d,'e,'f) fmtty -&amp;gt; ('a,'b,'c,'d,'e,'f) format6&lt;/pre&gt;
&lt;p&gt;(this looks verbose but isnt really exposed outside of the compiler.&lt;/p&gt;
&lt;p&gt;Another issue is the &amp;quot;%(..%r..%)&amp;quot; construction, since we need to include a proof term of the number of &amp;quot;%r&amp;quot; occurrences. The encoding for this is quite complex.&lt;/p&gt;
&lt;p&gt;Performance of the new system is significantly better across the board. A hello world goes from (230ns to 55ns) timing and (732 to 24 bytes allocated) for example.&lt;/p&gt;
&lt;p&gt;Q: Oleg did it already in Haskell &lt;i&gt;(ha ha -- editor)&lt;/i&gt;. He notes that six parameters arent needed, as the GADT is the interpreter over the paramters.&lt;br/&gt;
A: yes can remove them if we split the Printf and Scanf format, and there is also a format4 which removes several parameters. We also have a problem with error messages since all the type parameters make things really complicated.&lt;br/&gt;
Q: Oleg: the work of interpreting the stream is pushed into the GADT, but if you write an interpreter over the GADT then we have simpler external types.&lt;br/&gt;
...discussion moves into offline discussion.&lt;/p&gt;
&lt;h2&gt;Dynamic types in OCaml&lt;/h2&gt;
&lt;p&gt;Gregoire Henry wants to do dynamic types in OCaml.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo19-e1380052996312.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo19-e1380052996312-150x150.jpg&quot; class=&quot;alignright size-thumbnail wp-image-1515&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Structural type introspection: generic I/O primitives, type-safe (unlike Marshal) and typed (not written in Camlp4) -- these are polytypic functions.&lt;/li&gt;
&lt;li&gt;Normal type introspection, for dynamic values (a k/v store or a DSL with dynamic typing), or extensible polytypic functions for abstract types.&lt;/li&gt;
&lt;li&gt;This would also give us a common type representation for (e.g.) Eliom services that will be converted to Javascript, or for FFI libraries, and to let the debugger explore the heap with exact typing information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probably isnt a single representation that fits all these use cases: We need to preserve abstraction when desired, but also to break abstraction when desired (e.g. by the debugger or a generic printer, but not by accident!), and it shouldn't impose a big performance hit.&lt;/p&gt;
&lt;p&gt;Gregoire gives a description of a polytypic printing function&lt;/p&gt;
&lt;pre&gt;let rec print (type t) (ty: t ty) (v:t) =
  match head ty with
  |Int -&amp;gt; print_int v
  | String -&amp;gt; print_string v
  | List ty -&amp;gt; print_list (print ty) v
  | Sum desc -&amp;gt;
  let (name, args) = sum_get desc v in
  print_string name 
  ...&lt;/pre&gt;
&lt;p&gt;We define a predefined type &amp;quot;t ty&amp;quot; and a syntax for type expressions &amp;quot;(type val t) of type &amp;quot;t ty&amp;quot;. We then introduce implicit type arguments which are optional arguments instantiated at call-site with the dynamic representation of the expected type.&lt;/p&gt;
&lt;pre&gt;val print : ?t:(typ val 'a) -&amp;gt; 'a -&amp;gt; string
let print ?(type val t) (v:t) = ...

type t = R of int * int | ...
let x = R (1,2)
let () = print x (* implicit arg is (type val t) *)&lt;/pre&gt;
&lt;p&gt;This is experimental syntax, but is shows how we can keep the representation abstract but the printer can still operate over it since the implicit argument passes the printer around.&lt;/p&gt;
&lt;p&gt;The main problem is now how we mix polytypic function and abstraction, without always printing &amp;quot;abstract&amp;quot; instead of the real underlying structure. One solution is an extensible polytypic function.&lt;/p&gt;
&lt;pre&gt;module M: sig
 type t
 val x: t
end = struct
  type t = R of int * int
  let x = R(22,7) let () = register_printer (external type val t) (fun x -&amp;gt; ... )

end
let () = print x&lt;/pre&gt;
&lt;p&gt;We register a printer internally in the module, without exposing its internal type externally, but still let it be printed. The internal and external types are different though. We do need to figure out a canonical name for types defined outside the current compilation unit (its absolute path).&lt;/p&gt;
&lt;p&gt;By default though, abstraction should consistently introduce new nominal types, but we're not sure how to reference all the of the external names of a given type within its initial compilation unit (open problem). A pragmatic approach to solving this is the manual or semi-automatic creation of runtime &amp;quot;type names&amp;quot;.&lt;/p&gt;
&lt;p&gt;In conclusion, they have a GADT for structural introspection and a RTT representation with global names. &amp;nbsp;There is also a type-constructor index association table. &amp;nbsp;Implicit type arguments (lightweight syntax for calling polytypic function, and explicit type parameters for polymorphic functions).&lt;/p&gt;
&lt;p&gt;Q: what's the gain of putting this into the compiler?&lt;/p&gt;
&lt;p&gt;A: you may miss language corners, such as firstclass modules or functors, as your &amp;quot;userspace&amp;quot; OCaml code has to pass a type witness into a functor or firstclass module. &amp;nbsp;Compiler support makes this passing much easier. &amp;nbsp;The other big benefit is clear error messages from this compiler integration in the long term. &amp;nbsp;It's not currently easy for beginners, and this is very important to get right if this becomes a supported feature.&lt;/p&gt;
&lt;h2&gt;On variation, injectivity and abstraction&lt;/h2&gt;
&lt;p&gt;Jacques Garrigue speaks about an interesting bug in the type checker that needs some language changes. There was PR#5985 which was a serious type checker bug that lost injectivity.&lt;/p&gt;
&lt;pre&gt;module F(S: sig type 'a s end) = struct
  include S
  type _ t = T : 'a -&amp;gt; 'a s t
end
module M = F (struct type 'a s = int end)
let M.T x = M.T 3 in x
- : 'a = &amp;lt;poly&amp;gt; &lt;i&gt;the type is lost!&lt;/i&gt;&lt;/pre&gt;
&lt;p&gt;After expanding &amp;quot;s&amp;quot;, the definition of &amp;quot;M.t&amp;quot; is actually &amp;quot;type _t = T : 'a -&amp;gt; int t&amp;quot; but &amp;quot;'a&amp;quot; is not marked as an existential.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo20-e1380054255495.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo20-e1380054255495-150x150.jpg&quot; class=&quot;alignright size-thumbnail wp-image-1521&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In order to protect against this unsoundness, all variables in type declarations must be bound, either by appearing inside the type parameters or be existentially bound (i.e. only present in GADTs). Inside type parameters, these variables must be &lt;b&gt;injective&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;OCaml doesnt do injectivity directly, since it relies of variance inference (since we have subtyping). The variance of a parameter is either &lt;i&gt;explicit&lt;/i&gt; for abstract and private types or constrained parameters, or its &lt;i&gt;inferred&lt;/i&gt; from its occurrences otherwise.&lt;/p&gt;
&lt;p&gt;Constrained type parameters have been present since the very start.&lt;/p&gt;
&lt;pre&gt;type 'a t = T of 'b constraint 'a = 'b list&lt;/pre&gt;
&lt;p&gt;Rules for checking variance in this case become much more complicated, since constrained parameters variance must now be &lt;b&gt;explicit&lt;/b&gt; The variance of type variables inside constrained parameters must also be weaker or equal the version inside the body of the definition.&lt;/p&gt;
&lt;pre&gt;type +'a t = T of 'b constraint 'a = 'b list (* 'b covariant *)
type 'a r = 'a -&amp;gt; int                        (* contravariant *)
type +'a t = T of 'b constraint 'a = 'b r    (* Fails *)
(* 'b is contravariant in parameters but covariant inside *)&lt;/pre&gt;
&lt;p&gt;In OCaml though, the variance of a parameter is allowed to be weakened through abstraction.&lt;/p&gt;
&lt;pre&gt;module M : sig
  type +'a u 
end = struct 
  type 'a u = int
end&lt;/pre&gt;
&lt;p&gt;This is correct for the types, but becomes incorrect when used for &lt;i&gt;type parameters&lt;/i&gt;.&lt;/p&gt;
&lt;pre&gt;module F(X: sig type 'a r end) = struct
  type +'a t = T ob 'b constraint 'a = 'b X.r
end
module N = F (struct type 'a r = 'a -&amp;gt; int end)&lt;/pre&gt;
&lt;p&gt;Even when we assume that r is invariant, 'b is inferred as invariant from the parameter of t, which overrides the covariance of the body. Meanwhile in the module N, the variance is now wrong.&lt;/p&gt;
&lt;p&gt;How do we fix this? We need to refine the definition of variance, as traditional variance subumption defines a lower bound on the variance, but we need to add some upper bound information too, to be sure that parameters cannot have a strong variance.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;(technical explanation of how to compose variances omitted here)&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;In OCaml 4.01, full variance inference is done using 7 flags (the last is a special case required for principality). Some uses will no longer type check so programs may be rejected for safety.&lt;/p&gt;
&lt;p&gt;In the future, Jeremy Yallop, Leo White and Jacques would like to add injectivity annotations for abstract types.&lt;/p&gt;
&lt;pre&gt;type #'a s
type _ t = T : 'a -&amp;gt; 'a s t&lt;/pre&gt;
&lt;p&gt;Add new types for isomorphic abbreviations, as Haskell does&lt;/p&gt;
&lt;pre&gt;module M : sig type #'a t val f : int -&amp;gt; ['pos] t end = struct
  type 'a t = new int
  let f x = (abs x : int :&amp;gt; 'a t)
end&lt;/pre&gt;
&lt;p&gt;This is similar to private, but subtyping will work in both directions -- this is useful for efficiency, encoding runtime types and allows coercions to be delayed until the signature rather than in the both (in the example above, the coercion in &amp;quot;f&amp;quot; could be omitted) due to the signature.&lt;/p&gt;
&lt;p&gt;Another problem is that one cannot prove the uniqueness of abstract types, and we dont know whether an abstract type is contractive (so even if you use rectypes, the following functor can never be defined)&lt;/p&gt;
&lt;pre&gt;module Fixpoint (M: sig type 'a t end) = struct
  type fix = fix M.t 
end
Error: the type abbreviation fix is cyclic&lt;/pre&gt;
&lt;p&gt;One also never knows whether an abstract type may be a float, so the float array optimization may be mismatched.&lt;/p&gt;
&lt;h2&gt;OCamlot: lots of OCaml testing!&lt;/h2&gt;
&lt;p&gt;(will post David's slides on the OCaml Labs website since it's one of our talks. Will edit this post when that happens).&lt;/p&gt;
&lt;h2&gt;Merlin: editor support for OCaml&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo21-e1380057773342.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo21-e1380057773342-225x300.jpg&quot; class=&quot;alignright size-medium wp-image-1530&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://github.com/def-lkb/merlin&quot;&gt;Merlin&lt;/a&gt; is a sophisticated editor assistant for OCaml that provides autocompletion in vim and emacs. They leap straight into an interactive demo that's awesome: autocompletion, module introspection when writing a functor, and so on.&lt;/p&gt;
&lt;p&gt;Unlike other tools, this doesn't rely on a CMT file, so code doesn't need to compile (except for source browsing). Your project can have type errors when using Merlin!&lt;/p&gt;
&lt;p&gt;It integrates with the ecosystem and has direct support for Findlib. There is no direct support for camlp4 however, with specific support for some extensions. If you want a new shiny extension then talk directly to them&lt;/p&gt;
&lt;p&gt;There is build system support for running either omake or Jenga in polling mode (for iterative recompilation). Omake rules can inform Merlin to get a consistent state of the project!&lt;/p&gt;
&lt;p&gt;A typical session: Parsing is done in two stages and the OCaml parser has been modified to be much more resilient to errors. The usual typing rules are applied, but passed onto a more &amp;quot;relaxed&amp;quot; typers in case of errors to give some support for incremental parsing.&lt;/p&gt;
&lt;p&gt;Coming soon is documentation (ha!) as well as retrieval for ocamldoc comments to further augment hints, as well as even more error recovery heuristics. Some of the patches will also be submitted upstream to improve error handling (by accumulating them instead of printing them directly).&lt;/p&gt;
&lt;p&gt;It's available on OPAM under an MIT license via &amp;quot;opam install merlin&amp;quot; and thanks to Jane Street for letting them work on it during an internship there, and all the bug reporters!&lt;/p&gt;
&lt;p&gt;Q: Have you considered running Merlin on a remote system and speak the same JSON protocol?&lt;br/&gt;
A: They haven't, but it really shouldn't be a problem.&lt;/p&gt;
&lt;p&gt;Q: Julien V: do we have to build first?&lt;br/&gt;
A: No you dont have to build first&lt;br/&gt;
Q: What happens when you change branches in a project&lt;br/&gt;
A: For project-wide information you need to compile and rebuild.&lt;/p&gt;
&lt;p&gt;Q: in the second pass of type checking, what does &amp;quot;relaxed&amp;quot; mean&lt;br/&gt;
A: When typing fails for some branch of the AST, in the simple case we introduce a fresh type variable and attempt to do unification with the result of this. This will never be sound, but lets it make progress and give SOME feedback to the user.&lt;/p&gt;
&lt;p&gt;Q: is this a new type checker?&lt;br/&gt;
A: No its the original type checker with augmented error handling paths to do more unification.&lt;/p&gt;
&lt;p&gt;Q: is the relaxed checking really worthwhile? It wasnt a lot of use in gcc since you get a lot of followon errors that are meaningless.&lt;br/&gt;
A: lots of discussion, opinions split, it can be disabled!&lt;/p&gt;
&lt;h2&gt;Understanding memory behaviour of programs&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo22-e1380058304144.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo22-e1380058304144-150x150.jpg&quot; class=&quot;alignright size-thumbnail wp-image-1533&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;br/&gt;
Cagdas B doing a PhD on memory profiling. He wants to study the behaviour of OCaml programs and work on decreasing memory footprint and generally reduce GC pressure on real OCaml programs.&lt;/p&gt;
&lt;p&gt;Shows Why3 graph (see photograph) and they're running nice finegrained analysis over it on real world analyses. How do they generate these graphs?&lt;/p&gt;
&lt;pre&gt;$ opam switch 4.00.1+ocp-memprof
$ opam install why3
$ OCAMLRUNPARAM=m why3replayer.opt -C why3.conf p9_16&lt;/pre&gt;
&lt;p&gt;Patched compiler and then the OCAMLRUNPARAM will generate a lot of sampled snapshots of the OCaml heap. There's no need to change the code or the compilation options. Then install analysis tools&lt;/p&gt;
&lt;pre&gt;$ opam install ocp-memprof
$ ocp-memprof -loc -sizes PID&lt;/pre&gt;
&lt;p&gt;The final step analyses all the snapshots. But what is a snapshot? It's a compressed version of the OCaml heap, with location ids, a graph with pointers, and has saved globals (toplevel modules). We obtain the snapshots by computing a linear scan of all the heap values.&lt;/p&gt;
&lt;p&gt;The OCAMLRUNPARAM=m forces the program to generate a snapshot after every major GC, or request the program to generate a snapshot via a HUP signal, or via a new &amp;quot;dump_heap&amp;quot; function that's been added to the GC module.&lt;/p&gt;
&lt;p&gt;It works by reserving some space inside the standard OCaml value block, and so there is minimal runtime performance impact except when dumping out snapshots after a GC. There's no space overhead since the header size isnt changed. However, it's only available on 64-bit platforms and reduces block size to 64GB. Ran experiment with OPAM and location identifiers are limited.&lt;/p&gt;
&lt;p&gt;There's one tool based on the snapshot identifiers and the &amp;quot;memprof&amp;quot; tool gets all identifiers from the heap and the corresponding location, and then looks up the right types from a specific location using cmt files (the typed AST).&lt;/p&gt;
&lt;p&gt;Plan for this work is to improve the current framework (aggregate information by type and location) and to recover more types, and build more tools around it!&lt;/p&gt;
&lt;p&gt;Q: Roshan: one common usecase is when grabbing locations, its boring to see Array.create and it would be nice to see a backtrace of the execution to see &lt;i&gt;where&lt;/i&gt; the allocation happened.&lt;br/&gt;
A: this is a problem indeed (discussion about the ongoing Mark Shinwell patches too, and previous talk about backtrace analysis from last years workshop).&lt;/p&gt;
&lt;h2&gt;Benchmarking in Core&lt;/h2&gt;
&lt;p&gt;Roshan James about microbenchmarking in JS Core. Precise measurementis essential for performance critical code. We want to measure the execution cost of functions that are relatively cheap. Functions with a short execution time that run millions of times in a tight loop.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo23-e1380059673542.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo23-e1380059673542-150x150.jpg&quot; class=&quot;alignright size-thumbnail wp-image-1538&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The essence of benchmarking is to run a time loop (like Time.now) a lot of times. We need to figure out how to compute a batch size to account for the time it takes to run the actual timing measurement. Similar to Criterion for Haskell, where they loop Time.now to figure out how long it takes to compute the time itself, and then run the benchmark function, and compute a full estimate. This works ok, but it requires density plots to let you visualise the form of the error (bimodal, or something else, for example).&lt;/p&gt;
&lt;p&gt;There is a lot of noise in microbenchmarking, such as delayed costs due to GC, and variance in execution times is affected by batch sizes. So if we vary the batch size, the variance changes quite a bit since the GC is running in different intervals during the batches. The GC noise has a periodicity though!&lt;/p&gt;
&lt;p&gt;They treat microbenchmarking as a linear regression, and then fit execution time to a batch size. They vary the batch size geometrically to get a better linear fit (shows a very linear graph). Theres now no need to estimate the clock and other constant errors, since they are accounted for by the y-intercept which shows the constant costs.&lt;/p&gt;
&lt;p&gt;Other costs can also be predicted in the same way, such as estimate memory allocations and promotions using batch size too. This also allows measuring a goodness of fit by using R2 and bootstrapping techniques.&lt;/p&gt;
&lt;p&gt;Example use of Core_bech is really easy:just&lt;/p&gt;
&lt;pre&gt;open Core.Std
open Core_bench.Std
let t1 = Bench.Test.create ~name:&amp;quot;id&amp;quot; (fun () -&amp;gt; ())&lt;/pre&gt;
&lt;p&gt;Is the identity run for example, and just put something more complex in there. Output is an Ascii_table with lots of columns showing interesting results.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo24-e1380059880672.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo24-e1380059880672-150x150.jpg&quot; class=&quot;alignright size-thumbnail wp-image-1539&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some functions have a strange execution time, and the observation isnt a great fit. Between runs, they also directly query the GC and directly query how many times some things have happened (minor collections and so on), and include these along with the batch size in the predictor. With multiple predictors, they are really close to the observed results indeed.&lt;/p&gt;
&lt;p&gt;(lots of interesting maths about how they perform runtime cost decomposition)&lt;/p&gt;
&lt;p&gt;Its available via &amp;quot;opam install core_bench&amp;quot; and they want to expose more predictors by measuring the effect of live words on performance, and counters for major collection work per minor gc. Accuracy of results is interesting as least-squares is susceptible to outliers so they can incorporate the knowledge that the measurement is heavy-tailed.&lt;/p&gt;
</content><id>http://www.syslog.cl.cam.ac.uk/2013/09/24/liveblogging-ocaml-workshop-2013/</id><title type="text">Liveblogging OCaml Workshop 2013</title><updated>2013-09-24T13:16:30+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://www.syslog.cl.cam.ac.uk/2013/09/22/liveblogging-cufp-2013/" rel="alternate"/><contributor><uri>http://www.syslog.cl.cam.ac.uk/tag/ocamllabs/feed/atom</uri><name>SRG Syslog</name></contributor><content type="html">&lt;p&gt;I'm here at the &lt;a href=&quot;http://cufp.org/conference/schedule&quot; title=&quot;CUFP 2013&quot;&gt;Commercial Users of Functional Programming&lt;/a&gt; workshop at &lt;a href=&quot;http://icfpconference.org/icfp2013/&quot;&gt;ICFP 2013&lt;/a&gt;) with Heidi Howard, David Sheets and Leo White.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/marius1-300x292.jpg&quot; class=&quot;size-medium wp-image-1410 alignright&quot; alt=&quot;marius1&quot; width=&quot;150&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Marius Eriksen and Michael Sperber are co-chairing this year. Functional programming is a hot topic these days, and this&amp;nbsp;year's program reflects the maturing nature of the program. Record number of submissions, and we could easily have made this a multi-day&amp;nbsp;program. &amp;nbsp;Videos will be available online after the event.&lt;/p&gt;
&lt;p&gt;Keynote is from &lt;a href=&quot;http://www.davethomas.net&quot;&gt;Dave Thomas&lt;/a&gt; on what we can learn from the &amp;quot;language wars of the past&amp;quot;. &amp;nbsp;His talk will cover the business, social and technical ends of building Smalltalk and his &amp;quot;objaholic&amp;quot; experiences with pushing language technology into businesses, where they never had any intention of changing in this regard. &amp;nbsp;This worked over the years because it made a material difference to these businesses. &amp;nbsp;Dave still uses the &lt;a href=&quot;http://en.wikipedia.org/wiki/K_(programming_language)&quot;&gt;K&lt;/a&gt; programming a lot at work.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/clark1.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/clark1-300x294.jpg&quot; class=&quot;size-medium wp-image-1409 alignright&quot; alt=&quot;clark1&quot; width=&quot;150&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dave is responsible for the Eclipse IDE and the IBM Java virtual machines, and has delivered software on everything from mainframes to wristwatches.&lt;/p&gt;
&lt;p&gt;Rush in the 70s with Symbolics and the amazingly cool hardware, followed by the rush to logic programming that led to his grants disappearing. Midway through the 80s, they discovered we wouldnt get parallelism for free with all this magic. After that came the era of machine learning and knowledge ontology crusades, but they are very specialised bits of tech. There remain sectors where ontologies are useful. Nowadays its the multicore crusades, and FP is emerging as useful.&lt;/p&gt;
&lt;p&gt;Every road leads to some form of FP, because the principles underlying it apply. Dave does vector programming, Haskell does this with array transformation.&lt;/p&gt;
&lt;p&gt;Dave was talking to Simon PJ outside and claimed that &amp;quot;FP has won!&amp;quot;, at which point Simon replied &amp;quot;really?&amp;quot; (laughter). OO techniques can also lead to a lot of tangled code: witness the evolution of Smalltalk to the current generation of languages.&lt;/p&gt;
&lt;p&gt;FP technical challenges: what happens when you have a lot of functions, and a group of consenting adults are doing it together. This is called software engineering, or at worst, IT!&lt;/p&gt;
&lt;p&gt;Lots of good work in the community on approaching large scale programming. Scala is a bit too complex for Dave (and audience rumbles in agreement or disagreement?). Java and JNI should just die. Erlang and actors are successful to decouple software. But do we really need to hide all our queues, and do we really need to hide our queues? Static analysis of queues are desired.&lt;/p&gt;
&lt;p&gt;Want to go fast? Computers like rectangles, all the way down! Array operations and vector processing is the way to go in the long-term.&lt;/p&gt;
&lt;p&gt;To go to industry, we need end-to-end toolchains. If you use MS Project, then you probably shouldn't introduce any new tools.&lt;/p&gt;
&lt;p&gt;The first commercial customer for Smalltalk in the 1980s was Techtronix, who wanted to embed reusable tech in their oscilloscopes. If you're building a serious product like this, it needed language interop between C++ (the logic sensor) and the Smalltalk. Respect the language cultures among components (anyone remember s-records?). ROM had to be replaced with Flash because noone can write code that doesn't need upgrading (groans from the audience).&lt;/p&gt;
&lt;p&gt;With the right tools, programmers will be able to go as quickly as Smalltalk, or at worse Java. We need the work of Simon [PJ] and colleagues on Haskell. Scala is so complex will become the Java (which is the Cobol of tomorrow).&lt;/p&gt;
&lt;p&gt;When shipping products, you need to track all the versions of language components in the toolchain. Too many FP toolchains are monolithic and make it hard to track components in the field. JVMs are so slow because they don't have a good sharing model (DLLs).&lt;/p&gt;
&lt;p&gt;What Dave would like is version-to-version transformation in languages. Y2K was a problem not because IBM hadn't fixed it in their OS, but because customers had modified their local installations and were pinned 6-10 versions behind! The same will happen for existing FPs that fragment into multiple implementations, so will they descend into multiple version hell or will standards emerge from the community?&lt;/p&gt;
&lt;p&gt;Also, lets not leave the data behind. Can we alias data from existing legacy sources into our new languages, and not aim for the perfect representations? Most of our programs are dealing with problems with existing data, not code.&lt;/p&gt;
&lt;p&gt;Onto deployment issues. Erlang works very well for the problem domain that it's designed for, but more complex domains exist like OSGI. Hot codeswap and live updates are often viewed as &amp;quot;boring problems&amp;quot; but are vital to real world deployments. Space usage must be paid attention to: how long can a given JVM stay up without leaking? Serialization is important to persist data across versions. If we're going to use &amp;quot;esoteric control structures&amp;quot; like CallCC, tailcalls or tags, the JVM isn't going to get us there.&lt;/p&gt;
&lt;p&gt;These days, if you can't stay in your local cache, you will lose several orders of magnitude performance... you'll need directly connected CPU (or SSD!) memory, and static initalization, and language interop (eagerly vs laziness). Functional data structures and immutable collections are still immature, but need more work to convince doubting Thomas' about their scalability in real applications.&lt;/p&gt;
&lt;p&gt;Hardware support for these are important. Intel Haswell has hardware transaction support (hence can be used by Azul JVMs etc) but we need more for functional langauge performance. There have been $2bn put into speeding up the JVM to make it as fast as C++. Google has a technology called Pinnacle which uses software write barriers that use VMs that execute directly, with a register model and not a stack model (which is easy to put together but hard to make fast). The new generation of language VMs will support direct execution and support modern functional programming languages.&lt;/p&gt;
&lt;p&gt;&amp;quot;We all love types&amp;quot; -- Dave on objects, but not variables (&amp;quot;its easy to be cooperative with that definition!&amp;quot;). Pluggable types by Gilad are really cute, because they move us towards a world where particular features (Dave likes behavioural types) can be woven in. Perhaps can be done in a dependently typed world. Another good candidate are approximate types and dimensional types. When all these are put together though, it all needs to fit together with sound compositional semantics.&lt;/p&gt;
&lt;p&gt;When using an interesting PL, Dave wants warnings to be emitted when the compiler makes space/time tradeoffs so that the programmer can decide between elegance and performance (also mentioned that Haskell programmers do this for .&lt;/p&gt;
&lt;p&gt;How does language evolution work? Arthur Whitney maintains K, and he ensures that every version of K is incompatible with the previous one. This is a blessing (!) since it avoids a kitchen sink language and ensures a high quality set of libraries. Quite often there's a tussle between languages and libraries because there's not enough coevolution. For example, are closures in Java really useful for the tradeoff in the complexity of the VM? Perhaps we should be looking towards a collection of small correct languages instead of a few partly right and largely wrong languages such as Ada or Java (the Java hate is strong here -- editor).&lt;/p&gt;
&lt;p&gt;Those of us that have programmed in vector languages (going back to APL) are largely write once read once languages because the code is so hard to read. One trick Dave does with K is to annotate comments inside expressions and use cold-folding without a point-free style to understand vector codeflow better. Also seeing the environment and current name bindings is extremely useful for teaching new languages.&lt;/p&gt;
&lt;p&gt;The real problem is: comprehensions, folds, monads -- WTF? Yet to see anyone from the monad community give a talk to understand monads. It's typically &amp;quot;you dont need monads&amp;quot; and then the word is used multiple times in the talk. If it's not important, why mention it so often? Quite often, the FP experience makes normal programmers feel stupid because they don't break through this terminology barrier. We as a community need to help people break through the barrier of not being formally trained in mathematics for whatever reason (&amp;quot;category theory for breakfast?&amp;quot;) and *be productive* in FPs.&lt;/p&gt;
&lt;p&gt;Smalltalk was like this in the early days. People see a blank window and aren't sure what to do next. Objects irritated people when they came out, but FP scares people. This is a danger as we go through and wow people with what we can do, but make it look like magic. People change their habits are different rates and we need to understand that. With Haskell, it was odd that he had to get the program &amp;quot;right&amp;quot; (or right/wrong) before it work, as opposed to not working.&lt;/p&gt;
&lt;p&gt;Bill Buxton (UI researcher friend) pointed out that people can't much get beyond programming a VCR. 4GLs were pretty much their limit. Dave's done a lot of work on evangelizing Smalltalk, but feels it was still too hard. People just didn't understand how to separate behavior, as the best practices on how to build objects were foreign to most of them. This all settled on some mix of SQL and some glue code, which doesn't require learning a lot of new technologies.&lt;/p&gt;
&lt;p&gt;Given there are many different types of programmers, do they all really need the full power of FP? Some subset of features is more useful, with one way to do things that doesn't change from release to release. For example, a simple dictionary keeps changing from Hashmap to concurrent Hashmap to something else, but ultimately is still a dictionary. How do we separate the reasoning over performance and structure and not scare people with both at the same time. Knuth started doing this decades ago with literate code, and we *still* dont have a decent way of writing documentation and code in the same place.&lt;/p&gt;
&lt;p&gt;We are still missing a pure FP book that is built in the same style and comprehension as &lt;a href=&quot;http://mitpress.mit.edu/sicp/&quot;&gt;SICP&lt;/a&gt;. We need thinks that you look the code and represent things more densely (for example, why don't we use Unicode in the same style as APL symbols to increase the succinctness?). They are working on J programs that move glyphs around on the iPad as an example of this 4GL density.&lt;/p&gt;
&lt;p&gt;We need to take all these ideas and *talk more* about metaphors in FP. Where's the &amp;quot;Scala, F#, Clojure, the good parts&amp;quot; and a frank exposition about the antipatterns? Don't lie about where the dragons are, but colour code them appropriately to not surprise programmers.&lt;/p&gt;
&lt;p&gt;We need to understand how to design with types. In the vector languages, this is called &amp;quot;shape shifting&amp;quot; as they don't have types, but similar concept. It's also hard to get the community people to talk about shape shifting, and as a result the art is being lost in the new generation of languages. For FP, can the Yodas in the audience help their audience to &amp;quot;trust the types&amp;quot; ?&lt;/p&gt;
&lt;p&gt;Q: In the top 20 languages, every language has a free-or-open-source runtime. This will make a huge difference as it lets people experiment.&lt;/p&gt;
&lt;p&gt;A: It's not been a barrier in experimentation for Dave, but it has been a barrier for commercial use. Dave would not attribute a particular significance to open source as it's never been a real problem for him (using trial versions and so forth). Open source is a mixed sword, as it tends to product impoverished language teams that don't have enough resources to move forward. The really good virtual machine implementors are commercially polished (c.f. the $2bn behind the JVM performance from earlier). Clojure is a great example where they appealed to the community to pay on their own behalf to donate for a production version. To build a serious production PL, you need a lot of government research money or a major commercial sponsor.&lt;/p&gt;
&lt;p&gt;Q: Marius asks about mobile and embedded and why FP hasn't cracked it.&lt;/p&gt;
&lt;p&gt;A: they are often late to the game, and it's often not easy to target the runtimes with a high performance runtime. You have to be willing to understand the interface.&lt;/p&gt;
&lt;p&gt;Q: Phil Walder says the scariest thing is that if you become a success, then Smalltalk takes the form of C++&lt;/p&gt;
&lt;p&gt;A: (or Java!). Being able to maintain the independence of the language creators vs a major player is crucial to conceptual integrity. (Phil) Tools that will migrate between version X and Y and a sustainable ecosystem. It's important to ensure that the creators get paid to maintain -- even the JVM only has 10-20 people in the core team and a vast ecosystem.&lt;/p&gt;
&lt;h3&gt;OCaml at Facebook via the Hack language&lt;/h3&gt;
&lt;p&gt;Julien Verlauget is talking about how Facebook is adopting OCaml.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/1148380_10151682552766094_1789859397_n.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/1148380_10151682552766094_1789859397_n-300x225.jpg&quot; class=&quot;alignright size-medium wp-image-1458&quot; alt=&quot;1148380_10151682552766094_1789859397_n&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why PHP is good: fast installation times, lots of libraries, easy to learn, and scales in a parallel way (multiple instances).&lt;/p&gt;
&lt;p&gt;However, Facebook doesn't care about any of these features. What Facebook wants is a fast feedback loop between writing code and having it appear on screen. There's no good way to write a unit test for an experience, and instead a fast feedback loop between code and a live site is how people still work at Facebook today.&lt;/p&gt;
&lt;p&gt;Performance at the scale of Facebook really matters. 1% can be a huge bump, but PHP is really hard to optimize due to all the dynamic features in the language. Aside from runtime performance, the other concern is development time for engineers, who need to avoid security problems and general bugs in an incredibly large codebase.&lt;/p&gt;
&lt;p&gt;The first attempt at this was to scale the runtime via HipHop. The first attempt was to compile PHP into an interpreter (via sandboxes) and then compile production code to C++. Unfortunately this lead to a huge divergence in performance characteristics between the interpreter and compiled code which led to confusion in production.&lt;/p&gt;
&lt;p&gt;The current one is HHVM which is a combined model via JIT runtime that patches code at runtime and helps merge these models.&lt;/p&gt;
&lt;p&gt;HHVM is still a PHP platform, and a new model called Hack provides a *new programming language* that targets HHVM (which is essentially a PHP runtime).&lt;/p&gt;
&lt;p&gt;Hack is a &lt;b&gt;statically typed language for HHVM&lt;/b&gt;. It's compatible with PHP and interoperates with no overhead and has the same runtime representation as PHP. It has evolved from PHP, and so if you know PHP, you know Hack. It's designed for &lt;i&gt;incremental adoption&lt;/i&gt; via introducing gradual typing (c.f. keynote talk about not scaring programmers not used to types).&lt;/p&gt;
&lt;pre&gt;function foo(): void {
  $x = 'hello';
  return $x;
}&lt;/pre&gt;
&lt;p&gt;This returns a readable error message in the style of a statically typed language, since the inference algorithm keeps a witness about every value's type and shows counter examples.&lt;/p&gt;
&lt;p&gt;The Hack type system must be annotated with class members, function parameters and return types. Everything else is inferred to minimize programmer burden.&lt;/p&gt;
&lt;p&gt;Hack types include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nullable such as
&lt;pre&gt;?int&lt;/pre&gt;
&lt;p&gt;mainly because of the huge code base that had no pattern matching, so null propagation is important&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Tuples&lt;/li&gt;
&lt;li&gt;Closures&lt;/li&gt;
&lt;li&gt;Collections such as
&lt;pre&gt;Vector&amp;lt;int&amp;gt;&lt;/pre&gt;
&lt;p&gt;that have generics too&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Constraints&lt;/li&gt;
&lt;li&gt;Type Aliasing&lt;/li&gt;
&lt;li&gt;Extensible Records&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Demo of a simple mailbox demo follows. HH has a command line mode that lets you syntax highlight which parts of the source code are dynamically checked, by outputing the code with red if it's potentially unsafe. Awesome!&lt;/p&gt;
&lt;pre&gt;class Mailbox {
  private $data;
  public function send($data) {
    $this-&amp;gt;data = $data
  }
  public function fetch() {
    return $this-&amp;gt;data;
  }
}&lt;/pre&gt;
&lt;p&gt;(very PHP like but now he annotates it with specific types)&lt;/p&gt;
&lt;pre&gt;class Mailbox {
  private string $data;
  public function send($data) : void {
    $this-&amp;gt;data = $data
  }
  public function fetch() : string {
    return $this-&amp;gt;data;
  }
}&lt;/pre&gt;
&lt;p&gt;As a programmer, I now want to know if this has all been statically checked (since the previous checking mode showed several red sections which were potentially unsafe). He runs the compiler with a strict mode that rejects the source if there is any unsafe bits.&lt;/p&gt;
&lt;p&gt;He then demonstrates how to propagate null types through the code, and then introduces several subtle errors that are all caught.&lt;/p&gt;
&lt;p&gt;An audience members asks what happens if you send both an int and a string to a mailbox, and Julien demonstrates a &amp;quot;mixed&amp;quot; type that covers both (is this some sort of row polymorphism? -- editor).&lt;/p&gt;
&lt;p&gt;The response time of the type checker is close to instantaneous (for the developer loop). Even with a thousand files, the type checkers gets back in a second or less with an error message.&lt;/p&gt;
&lt;p&gt;To get the tooling right, Hack uses js_of_ocaml to compile &lt;i&gt;the entire OCaml type checker&lt;/i&gt; to Javascript and then run in a complete web-based IDE (demonstrates a full cloud9-like IDE they use internally at FB). To work at scale, they created a server that runs persistently in the background and type checks all the files and responds from a memory cache.&lt;/p&gt;
&lt;p&gt;At scale, the the autocomplete requires very lowlatency in the webbased editor, and users also use version control (e.g. switching between branches). The server also has to use a reasonable amount of RAM and have a reasonable initalization time. Fundamentally it has to be stable as developers have to depend on their tools.&lt;/p&gt;
&lt;p&gt;A vast amount of code is written in OCaml for the tools. Good choice because it is ideal for symbolic computation, excellent performance and can be compiled to Javascript. Good C interop is really good. The main challenge is the lack of multicore, although Facebook works around it with their multiprocess architecture.&lt;/p&gt;
&lt;p&gt;Architecture: the master process has multiple processes which uses shared memory to avoid having to go through the master. The underlying buffers are lock free (similar to our Xen shared memory ring! -- editor).&lt;/p&gt;
&lt;p&gt;Advice on OCaml at scale:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IPC -- use lockfree structures and think about sockets/pipes instead of just TCP&lt;/li&gt;
&lt;li&gt;GC small heap and shared memory is compacted by master&lt;/li&gt;
&lt;li&gt;OCaml makes you think hard about shared objects, which is a good thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q: is it open source??&lt;br/&gt;
A: soon, this is the first time Facebook has talked about it publically.&lt;/p&gt;
&lt;h2&gt;OpenX and Erlang ads&lt;/h2&gt;
&lt;p&gt;What is OpenX: (i) An opensource PHP ad server (ii) OpenX is a global company with an ad service featuring a big ad exchange written in Erlang. This talk is about the transition from PHP to Erlang.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo-1.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo-1-300x300.jpg&quot; class=&quot;size-medium wp-image-1401 alignright&quot; alt=&quot;photo 1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1998-2007. it was a conventional PHP management system and MySQL. The company started using it as an EC2-based SaaS ad server and serving up clients successfully.&lt;/p&gt;
&lt;p&gt;In 2008, they wanted to mix in an ad exchange, to add liquidity to marketplaces that have empty ads. At the same time, they moved offices to Pasadena and looked at new tech. Switched to Hadoop (Java) and Postgres (for some reason). Poor technical choices were made, such as writing to the database for every request (sometimes multiple times!).&lt;/p&gt;
&lt;p&gt;In 2009 as the customers increased, there was a big push to scaling things up for performance (this is when the speaker joined the company). Switched Postgres to Cassandra to move from a relational database to a more NoSQL approach that had the appropriate consistency properties. At this time, the architecture was also decomposed to give them headroom to scale for a while, particularly by adding HTTP load balancers and so on.&lt;/p&gt;
&lt;p&gt;They wanted to add even more low latency stuff, such as spot bids for immediate bids on empty slots. Anthony decides that the model was a good fit for Erlang, since one request needed to fan out to multiple backend services with a soft-realtime limit to return a response to the user. It took a few months to prototype an Erlang based solution which worked very well.&lt;/p&gt;
&lt;p&gt;After this first experience with Erlang and evangelising it, and pointing it out to his coworkers, they came up with another good problem: analyzing the frequency of how often someone looks at an ad. This required a new database that would hold bespoke data efficiently, and also integrated Riak from Basho to interface with the database to run the query engine. This now holds on the order of billions of keys.&lt;/p&gt;
&lt;p&gt;In 2007, they ran into problems with Cassandra due to making an incompatible upgrade which would have required OpenX to shut down their business to upgrade, which was unacceptable. Since they had a good experience with Riak core, they developed a new system to move away from Cassandra and add more Erlang for management stack.&lt;/p&gt;
&lt;p&gt;In 2011, they decided to split their UI layer into a more Web 2.0-like UI API. The API continues to be implemented in PHP (with a Javascript UI clientside), but the Erlang evolution continued with a gateway service and marketplace service that are both pure Erlang. The basic problem is ad selection, and the logic for this is written as a DSL implemented in both Erlang and Java to enable code reuse across the tools.&lt;/p&gt;
&lt;p&gt;However, Cassandra was still sticking around, and they wanted to move away from it. They implemented a data service layer to abstract away from the database. From the early days, they made a bad (but fast) choice to have clients directly call Cassandra via Thrift, as it was easy. They moved away to a more abstract model to get away from Thrift, and so could change clients. The new system could call both Cassandra and Riak to help evolve with both services running simultaneously and provide a &lt;i&gt;seamless migration path&lt;/i&gt; to the new service (in stark contrast to the Cassandra upgrade story from earlier).&lt;/p&gt;
&lt;p&gt;They also decided that the PHP use for the API was a bad idea, and so switched to Python. They engaged Erlang Solutions to write them an API router since their core team was busy (an example of external consultants coming in and being useful -- editor). The current system involved RabbitMQ coordination, and Riak's replication logic to move out to the colos for publication.&lt;/p&gt;
&lt;p&gt;Currently they have 14-15 services in Erlang 7-8 in Java, and a blend of Python/PHP.&lt;/p&gt;
&lt;p&gt;How did a PHP shop end up with so much Erlang? Well, they laid off all the PHP developers when they moved offices (lots of audience laughter).&lt;/p&gt;
&lt;p&gt;More seriously, the architectural choices are important:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloud based (generic hardware, automated bootstrap, deployment, package oriented development and fault tolerance).&lt;/li&gt;
&lt;li&gt;Service based (loosely coupled, single purpose components, pools of components, polyglot so multiple languages/&lt;/li&gt;
&lt;li&gt;Cross language tools: Thrift (RPC between components), protobuf (RTB and Riak) and &lt;a href=&quot;http://www.lwes.org&quot;&gt;Lwes&lt;/a&gt; (logging and monitoring) which was open sourced by Yahoo after being originally written at Goto.com. A system called Framework that provides templates for code layout, builds RPMs/debs and integrates with autotools. It enforces versioning and reproducibility across languages.&lt;/li&gt;
&lt;li&gt;Finally, evangelism is really important. If possible fix the game via architectural choices to set the scene for change. Find a project to showcase the technology, and be responsible for the project's success. Make sure to share work, and remember that tools are &lt;i&gt;really important&lt;/i&gt; to make it easy for others to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Really important is figuring out build toolchain -- it can be so arcane. They did spend time on integrating with Erlang (erlrc inegrates with packaging system, erlstart to manage lifecycle, erlnode for ?).&lt;/p&gt;
&lt;p&gt;Hiring: train people rather than trying to hire knowledgeable. Operations have unfamiliar systems to manage, and developers have new concepts and patterns.&lt;/p&gt;
&lt;p&gt;How did Erlang help OpenX developers? The language fit the service model very well. The let-it-crash philosphy and supervision trees led to fewer real service outages.&lt;/p&gt;
&lt;p&gt;OpenX is doing really well as a business, too: 250+ billion monthly transactions, 12+ billion daily bids, thousands of machines in 5 colos, 300 employees and $150m+ revenue in 2012.&lt;/p&gt;
&lt;p&gt;Q: Marius: with a service based solution, how do you library them up?&lt;br/&gt;
A: Their services aren't hugely fine grained and so usually a module or two (not a lot of state)&lt;/p&gt;
&lt;p&gt;Q: Anil: is framework usable from languages? RPM integration seems killer&lt;br/&gt;
A: It's still esoteric and internals not docced, but would welcome a chat!&lt;/p&gt;
&lt;h3&gt;BAE systems on Redesigning the Computer for Security&lt;/h3&gt;
&lt;p&gt;Tom Hawkins speaking on DARPA funded project.&lt;/p&gt;
&lt;p&gt;SAFE is a codesign of:&lt;br/&gt;
a new application langauge (breezE)&lt;br/&gt;
a new systems programming language (Tempest)&lt;br/&gt;
A new OS&lt;br/&gt;
A new processor&lt;br/&gt;
and security at every level for defense in depth.&lt;/p&gt;
&lt;p&gt;Emphasising hardware enforced security since dynamic checking is too much overhead in software, for example for fine-grained information flow control. Hardware IFC handles the most general attack model (scripting down to machine code injection).&lt;/p&gt;
&lt;p&gt;Hardware overview: every word of data contains a tuple of (group 5 bits, tag 59 bits and payload 64 bit). The Atomic Group Unit checks atom typs (e.g. instructions, data pointers and streams). The Fat Pointer Unit (confusingly, FPU) checks pointer operations, and tag management unit (TMU).&lt;/p&gt;
&lt;p&gt;The label model can be used for efficient hardware typing, and more recently they are using labels for Control Flow Integrity (e.g. to prevent return oriented attacks). Register file is 32 elements deep, memory is accessed through load/store, and every bit of data in the system is a well-formed atom (and so has tag/groups associated with it).&lt;/p&gt;
&lt;p&gt;FPU deals with buffer range checks (e.g. underflow or overflows for a buffer).&lt;/p&gt;
&lt;p&gt;The TMU is where the magic is. It combines all the operations from the various operations being worked on (instructions, memory) and the TMU acts as a &amp;quot;database&amp;quot; checking that the operation is consistent with local policy, and the machine can continue execution or raise a security exception.&lt;/p&gt;
&lt;p&gt;At day 1, they had an outline for an ISA but nothing else. TIARA project was a baseline (Howie Shrobe, Andrw DeHon, Tom Knight) and they had no languages, no hardware and no toolchain.&lt;/p&gt;
&lt;p&gt;They started by sketching out an assembly language and then building an ISA simulator. They simulated simple assembly programs, and HW researchers started coding in Bluespec (a Haskell-like FP that Lennart keynoted about at CUFP 2011 in Japan).&lt;/p&gt;
&lt;p&gt;The PL researchers started designing Breeze. Plan was to &amp;quot;steal&amp;quot; Andrew Meyers work on JIF, and &amp;quot;Breeze should be done in a couple of months&amp;quot;!. It didn't quite work out that short (laughter).&lt;/p&gt;
&lt;p&gt;SAFE assembly is as low level as expected, but it adds some new properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;frames manage fat pointer bounds&lt;/li&gt;
&lt;li&gt;Atomic group declarations on data mark critical sections&lt;/li&gt;
&lt;li&gt;Tags on data can be marked (e.g. bootloader private)&lt;/li&gt;
&lt;li&gt;Secure closures is code/data with the authority to run code over the data (they call it gates)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assembly is tedious and so they started with macros. The Breeze interpreter is now running and there was pressure to start building the compiler. The OS guys wanted a language to build the higher level components.&lt;/p&gt;
&lt;p&gt;Solution: a SAFE assembly DSL embedded in Haskell that uses Haskell as the macro language and becomes the library for the future Breeze compiler.&lt;/p&gt;
&lt;p&gt;Breeze Language: version 7 -- just the datatypes for Booleans was hard and took 4-5 weeks (&amp;quot;this IFC stuff is kind of tricky&amp;quot;). The convenience and modularity of lexical authority passing and one-principal per module is extremely inconvenient!&lt;/p&gt;
&lt;p&gt;SAFE Assembly in Haskell looks like a typical EDSL. A monad captures program descriptions, and macros set up data tags and also for better control flow (such as a while loop or ifelse conditionals in the asssembly).&lt;/p&gt;
&lt;p&gt;At Year 1.5, the EDSL is still assembly language, no matter how many macros there are. Manual register allocation, calling conventions and data structures. Meanwhile the Breeze compiler was inching off the ground, but there is an awkward transition from high level CPS IR to assembly. There needs to be an intermediate form somewhere. However, the SAFE EDSL in Haskell works great in the compiler backend plugged in seamlessly with the Breeze code generator, which was nice.&lt;/p&gt;
&lt;p&gt;Breeze Language is now on Version 12 and continues to answer questions. &amp;quot;What do we do on an access violation?&amp;quot;. Simply stopping the machine isn't enough, since &amp;quot;What if I maliciously send you data that you can't access?&amp;quot;. &amp;quot;Simple I'll just check the label before I attempt to read it?&amp;quot;. &amp;quot;But what if the label itself is private?&amp;quot;. This was the big &amp;quot;aha&amp;quot; moment in IFC, since private labels end up being a poison pill in IFC.&lt;/p&gt;
&lt;p&gt;At Year 2.0, the Breeze compiler is going through a major overhaul since it needs improvements (the middle IR is improved but not enough). They temporarily shelve the compiler and they realize it wont come to the rescue of the OS. They really needed a higher low-level language than just assembly.&lt;/p&gt;
&lt;p&gt;Breeze language v23 has a solution to poison pills: make all labels public! To label data you must specify the label in advance (brackets), but public labels are not compatible with lexical authority passing so they had to relax their original vision a little.&lt;/p&gt;
&lt;p&gt;Year 2.5: Tempest is started as the systems PL for SAFE. Imperative with register allocation and optimizations and control of assembly with inlining and user specified calling conventions. It uses the SAFE EDSL to generate assembly (that was a successful DSL) and nicely fills the Breeze IR gap in the compiler for when that is resurrected.&lt;/p&gt;
&lt;p&gt;Breeze language 34: delayed exceptions with not-a-value values (Nav).&lt;/p&gt;
&lt;p&gt;The Tempest EDSL with inline assembly has a SAFE assembly sublanguage. The SAFE flow isnow the Breeze, Templest and Safe Assembly layers, with EDSLs of each gluing the compiler pipeline together. There is a SAFE ISA simulator and debugger, along with a Bluespec simulator to save on the FPGA debugging cycles. The TMU is an elaborate piece of hardware (an exotic CAM and cache structure) that a lot of the effort has gone into.&lt;/p&gt;
&lt;p&gt;Lessons learnt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;designing a higher order IFC language is &lt;i&gt;very hard&lt;/i&gt; even with some of the most brilliant PL researchers in the world. Optimal number of researchers is 2-7 rather than any more :) Ben Pierce and Greg Morrisett arguing over very hard problems was a lot of fun in a hard problem space.&lt;/li&gt;
&lt;li&gt;Day 1 should have started with Tempest, not assembly. Hard to be productive with assembly code, and tempest is the right level of runtime/processor codesign. Level of indirection provides insulation from a changing ISA.&lt;/li&gt;
&lt;li&gt;EDSLs are great for bootstrapping a language and make excellent backend libraries. However, engineers must be comfortable with the host language and not all the engineers were comfortable with Haskell when they started. EDSLs are hard to debug (line number information apparently hard to get out of error messages vs a concrete syntax).&lt;/li&gt;
&lt;li&gt;Concrete syntax is more relevnt for some languages than others (e.g. Tempest vs SAFE assembly). The best transition point to a concrete syntax is after developer pressure for modular programming. Once language has modularity, then the switch can be made without disruption.&lt;/li&gt;
&lt;li&gt;Would a DSL have helped hardware design? Forever debugging ISS and FPGA instead of raw Bluespec. A DSL describing ISA semantics would have kept is synchronized by generating Bluespec, ISS and SAFE EDSL and Coq documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This has been a huge project spanning a vast number of layers. It has produces a large number of interesting &lt;a href=&quot;http://www.crash-safe.org/papers&quot;&gt;papers&lt;/a&gt; including one at ICFP this week on testing non-interference quickly by using QuickCheck to generate programs that don't violate non-interference properties.&lt;/p&gt;
&lt;h2&gt;FRP at Netflix by Jafar Hussain&lt;/h2&gt;
&lt;p&gt;Netflix used to have tight coupling between the middle tier and the UI teams. One-sized fits all messages and led to inefficient call patterns.&lt;/p&gt;
&lt;p&gt;The plan was to decouple this by giving UI developers the ability to decouple components (or &amp;quot;force!&amp;quot;).&lt;/p&gt;
&lt;p&gt;Two developer personas at Netflix: Cloud and UI people. Netflix deals with a third of all US broadband traffic, so they need to think at scale but also to run on really tiny cheap devices that eke out all performance. How do they turn UI developers into effective cloud developers who think at scale?&lt;/p&gt;
&lt;p&gt;Gave them UI comforts: Groovy, OO API and a Reactive API. Most UI developers (or indeed any developers) can't be trusted with locks. This means that reactive programming isn't enough, which leads to &amp;quot;how do we make parallel programs safe for developers&amp;quot;&lt;/p&gt;
&lt;p&gt;Enter Erik Meijer, the legend himself! He asked &amp;quot;Whats the difference between a database query and a mouse drag event?&amp;quot;. Database would use functional code and a mouse drag might be imperative. Erik points out that they are both collections.&lt;/p&gt;
&lt;p&gt;New JS closure syntax in ES6 is fantastic to make them easier to use. If you imagine a query for well-rated movies, then you need to map over video lists. He then shows a mouse drag event, but points out that the structure of the code is very simpler. Instead of a &amp;quot;filter&amp;quot; operator, he uses &amp;quot;takeUntil&amp;quot; which stops the operation after some predicate has been satisfied.&lt;/p&gt;
&lt;p&gt;The iterator pattern is similar to the observer, except for the bidirectional signalling. Iterators can throw next/hasNext/Throwable, but Observers dont have a similar completion semantic. What happens when we add these to the Observer? We end up with &amp;quot;onNext&amp;quot; and &amp;quot;onCompleted&amp;quot; and &amp;quot;onError&amp;quot;, so now the Observer has comparable semantics to Iterator, so the only thing that changes is the direction of the errors.&lt;/p&gt;
&lt;p&gt;Some platforms also have an Iterable. There is now also an Observable to which you can pass an Observer, in the same vein as passing an iterator to a Java Iterable. We also add a Disposable to both, so that when the IO stream has terminated, it can be stopped immediately without having to junk the rest of the data.&lt;/p&gt;
&lt;p&gt;Erik and his team at MSR demonstrated that these patterns are dual, so that Iterable and Observable are dual! These are the Reactive Extensions libraries that is a combinator library for the Observable type. It's open source and has been ported to a number of other languages than C# (including Java).&lt;/p&gt;
&lt;p&gt;Observable Monad is a Vector version of the Continuation monad. Null propagation semantics of the Maybe monad and Error propgation semantics of the Either monad. Produced and consumed with side-efects and acts as a fault line between pure and impure code. It can be composed functionally and cancellation semantics are clean. It can be synchronous or asynchronous which is a common mistake (to assume that Iterable is async -- either can also be sync simply by calling the functions immediately).&lt;/p&gt;
&lt;p&gt;If you Map over Observable, then&lt;/p&gt;
&lt;pre&gt;(rapid transcript)
var map = (observable, func) =&amp;gt;
  { forEach: observer =&amp;gt; 
    {
    var subscription =
     observable.forEach
       onNext : item =&amp;gt; oserver.onNext(func(item))
       onError : error =&amp;gt; observer.onError (error)
       onCompleted () =&amp;gt; observer.onCompleted()&lt;/pre&gt;
&lt;p&gt;We can use this to come up with a single reactive type for cloud and UI developers! Jafar demonstrates example of social notifications in the middle tier, but using Observable to filter notifications from a composition of the socialService and messageService. Both underlying services are returning observables, and are non-blocking and completely parallel. Both can execute synchronously or asynchronously and decide which knobs to turn for their particular scheduling needs. The programmer doesn't need to care about the details.&lt;/p&gt;
&lt;p&gt;Another example is search autocomplete, which is surprisingly hard. Need to decide how often to send requests (throttle them to be not per-key) and also deal with concurrent responses from keypresses coming in out of order.&lt;/p&gt;
&lt;pre&gt;var res = 
  keyPresses.throttle(20).flatMap(
    search =&amp;gt; 
      getSearchResults(search).takeUntil(keypresses));

res.forEach(resultSet =&amp;gt; listBox.setItems(resultSet)&lt;/pre&gt;
&lt;p&gt;This code fragment does all this composably and handles all that logic. It's throttled, ordered correctly and terminates until the keypresses stop (with respect to the throttling policy.&lt;/p&gt;
&lt;p&gt;The full tier is a UI (huge amount of mutable state), dropping in to a distributed functional style, and heading into the data tier. Recall this is at huge scale.&lt;/p&gt;
&lt;p&gt;Wins: Rx is open sourced from MS and ported to Java (Observable) and generally better tooled now.&lt;br/&gt;
Evangelism comes up again since you can't assume the best technical solution will win. Practice public speaking and focussing on soft skills! Speaker got better in a short amount of time at distilling the essence of the benefits, and explaining to the target audience why something matters (e.g. to a UI developer vs a cloud developer as he explained earlier).&lt;/p&gt;
&lt;p&gt;Challenges: Training/Hiring. Netflix didn't fire all their UI developers as the previous speaker did (audience laughter). Instead, they leveraged their skills at eking out mobile performance, and taught them alternatives: functional programming, vector programming and reactive programming. Be available to help out people (developers work weird hours!) and interactive training exercises really help too. Also help them understand &lt;i&gt;when&lt;/i&gt; to apply each technqique for a particular programming task.&lt;/p&gt;
&lt;p&gt;Some of the Javascript programmers had some intuition for these techniques from things like Promises. It wasn't quite the right answer, as sometimes you need vector versions for performance instead (since it degenerates to a scalar version by passing a vector of size 1). Netflix dont bother teaching scalar, only vector.&lt;/p&gt;
&lt;p&gt;Although the programmers are used to mapreduce, the embedded version of this is a lot harder for them to grasp -- it's just a programming style and not just magic in Hadoop. Hiring process adapts to spot the competent functional programmer.&lt;/p&gt;
&lt;p&gt;bind/flatMap/concatMap/mapcat/mapMany are all monadic versions with subtle semantics and so they use interactive training exercises to train developers in their runtime semantics.&lt;/p&gt;
&lt;p&gt;Challenges: performance needs some chunking for lowend devices (vector a manually chunked scalar monad) and is best applied to less chatty event streams. It worked for search on lowend devices since it takes so damn long to type anything in, so a less chatty UI stream (audience laughter). &amp;quot;We are screwed if the hardware UIs improve&amp;quot;.&lt;/p&gt;
&lt;p&gt;Type-unsafe flatMap is easier to understand but needs to be used carefully, but is useful on lowend deviecs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/Reactive-Extensions/RxJS&quot;&gt;http://github.com/Reactive-Extensions/RxJS&lt;/a&gt; has all the source, so give it a try!&lt;/p&gt;
&lt;p&gt;Q: How do Databinding in Rx?&lt;br/&gt;
A: No templates, but many other tiers before the view layer are bound together. We introduce an Observable with both pure and impure code (an Observable type with a value property). However they learnt how to do this directly since Observable's lazy default is the wrong for data binding. Implementing a different type that is strict and publishes the result directly.&lt;/p&gt;
&lt;h3&gt;Medical Device Automation using message passing concurrency in Scheme&lt;/h3&gt;
&lt;p&gt;What does a molecular diagnostic device do and what does Scheme have to do with all this?&lt;/p&gt;
&lt;p&gt;Detects the presence of specific strands of DNA/RNA in sample and then does necleic acid extractions and purification. Sample are excited using lasers as they undergo PCR which results in spectrographs.&lt;br/&gt;
Device contains 19 boards with temp, motor control with many parts that move simultaneously at very high precisions. (author shows demos of the motors running and playing music from the system!)&lt;/p&gt;
&lt;p&gt;Client is written in C# and WPF and is thin/stateless. Sever is written in Scheme and Erlang with OTP embedded. Supervision structure to isolate hardware failures. A DSL provides the glue logic.&lt;/p&gt;
&lt;p&gt;Scheme is exceptionally clear and simple syntax, and they love the hygeinic syntactic abstractions for their DSL and the first-class functions and continuations are key. Arbitrary precision arithmetic is important for result calculations.&lt;/p&gt;
&lt;p&gt;The Erlang embedding in Scheme is how they interop. They embed records by referring to structured data by field name instead of field index. This allows for copying a record and changing particular fields.&lt;/p&gt;
&lt;p&gt;There's no pattern matching built into Scheme and enables matching on all the usual datatypes (strings, lists, vectors and records). It also allows matching the value against a local variable and/or binding values to local variables in the pattern itself, which is new in Scheme (but quite ML-like? -- editor)&lt;/p&gt;
&lt;p&gt;Processes are on-shot continuations with software timer interrupts. The Gen-server patterns provide a functional way of serializing messages and mutating state. The init/handle-call/handle-cast/handle-info and terminate are all encoded, and so it's all done except code-change (the FDA wouldnt appreciate code changing on the fly!)&lt;/p&gt;
&lt;p&gt;The event manager is responsible for event logging and subscriptions, and supervisors monitor processes and execute a restart or clean shutdown semantic (with enough logging for a field debug cycle).&lt;/p&gt;
&lt;p&gt;How it works in the instrument server: &amp;quot;let is crash&amp;quot; throughout and a notable lack of defensive programming due to the actor model. They manage some big hardware which fails all the time and this architecture directly addresses that reality.&lt;/p&gt;
&lt;p&gt;Easy assay is executed via a DSL which defines the pipeline in a &lt;i&gt;confirm mode&lt;/i&gt; to estimate running time, suggest missing resources and warn about a lack of timeslots. Once satisfied this is all taken care of, the queuing is done via a Tetris-style binpacking heuristic. Each action has its own process for fault tolerance. The DSL exposes an option to ignore action failures which is important for test runs and debugging (also during hardware development).&lt;/p&gt;
&lt;p&gt;Some examples of device failures are very bad: &lt;b&gt;Therac 25&lt;/b&gt; was a RTOS that gave people fatal radiation doses. It was tracked down to bad use of mutable state and integer overflow (taken care of in their system with FP and arbitrary precision math). &lt;b&gt;Ariane 5&lt;/b&gt; was due to interger overflow due to conversion precision, which also doesn't happen in their Scheme system which has non-lossy conversion. And finally the space shuttle simulator crashed due to memory unsafety (a restart was unclean), which cannot happen in Scheme. The supervision hierarchy in Erlang/Scheme can handle crashes with a stable strategy at any layer.&lt;/p&gt;
&lt;p&gt;Why a DSL? The assay developers need to write their own recipes such as &amp;quot;which recipes for this instrument, and in which order?&amp;quot;. The scientists shouldn't need software engineers to help them work, so the DSL sorts that out. Mechanical engineers need to check reliability and timing/variability on the hardware, which they can do by configuring DSL parameters.&lt;/p&gt;
&lt;p&gt;There are a few bits to the DSL: an extraction/purification language (tip loading, pipetting, moving magnets) and the protocol language (aspirating, dispensing, etc) and finally the motor language.&lt;/p&gt;
&lt;p&gt;Shows an example of the PCR language, which is a complex recipe involving baking, thermal cycling in loops. The DSL follows the logic flow of the English language version of the recipe very closely (with more brackets).&lt;/p&gt;
&lt;p&gt;Wrote a web server that supports HTTP requests and JSON/jQuery and an sexpression-based HTML code generator. Can render pages with Scheme logic and render to webbrowsers. Use by engineers for debugging and prototyping without having to touch the real UI, and non-engineers use it to map data sources from instruments into JSON (which can be fed into validation tools, for example to send to the FDA for regulation).&lt;/p&gt;
&lt;p&gt;Lessons learnt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Message passing is great but not a silver bullet. Gen servers can deadlock between each other despite being deadlock free internally. Timeouts in genservers and supervisor logging makes this possible to catch at a higher level, which is crucial!&lt;/li&gt;
&lt;li&gt;Not much on the web about a design pattern for the supervisor structure, so they had to pioneer it (didnt really want to pioneer it though)&lt;/li&gt;
&lt;li&gt;Automated unit test frameworks also built by them by hand&lt;/li&gt;
&lt;li&gt;Hiring remains hard into this unique environment.&lt;/li&gt;
&lt;li&gt;Existing quality metrics like bug density are problematic, since Scheme is terse and so looks artificially worse than more verbose languages!&lt;/li&gt;
&lt;li&gt;FDA has more scrutiny into this system since this is different from the usual C/C++/C# codebases and also the large number of open source tools such as Sqlite/Emacs/git. Unique to this regulated problem space of course.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Message passing concurrency makes reasoning about semantics of concurrent process easier, ass well as debugging problems via fault isolation. Let-it-crash leads to shorter, less defensive code with fewer branch points and test cases. Strong typing and runtime checks provide cognizant failure instead of silent corruption (crucial to avoid in this medical space).&lt;/p&gt;
&lt;p&gt;Mixing languages has been nice, since they can pick the good bits of Scheme (macros, arbitrary precision math) and Erlang (OTP). DSLs provide the glue here, and rapid prototyping for non-expert software developers.&lt;/p&gt;
&lt;h2&gt;Gilt and Scala microengines&lt;/h2&gt;
&lt;p&gt;Clothing group, and they need to customize the website with per-user targetting. The customer facing stuff is the tip of the iceberg with a bunch of backoffice features that need to be plumbed through. The traffic patterns are all about flash traffic that spike massively during sales, and if they go down in these times they lose lots of money.&lt;/p&gt;
&lt;p&gt;Gilt is about six years old, and it was built as a Rails app in the beginning that was quite large. It had unclear ownership, complex dependencies, lengthy test cycles, and unexpected performance impacts from small changes. Rails encourages to &amp;quot;throw everything into one directory -- a thousands models in one directory&amp;quot; which is really unscalable as the number of engineers grew. Some bad production issues came out of this problem.&lt;/p&gt;
&lt;p&gt;Then they started to transition to microservices by transitioning a few core critical pieces into microserviecs such as inventory management. The number of services grew to over 300 services in just 4 years (each HTTP microprotocols), all built using Scala. They developed an architecture to support this sort of growth of microservices.&lt;/p&gt;
&lt;p&gt;Cornerstones of infrastructure (goal==cool stuff for customers!)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Build system:&lt;/b&gt; SBT is a &amp;quot;simple build tool&amp;quot; which then turned into &amp;quot;Scala build tool&amp;quot; due to its complex mental model. Configuring everything correctly can be tricky if you have a number of dependencies. Gilt wanted to abstract developers from this so they could focus on writing appliction code. They solved it via a large SBT plugin that takes care of dependency management that provides a standardized configuration for everything.&lt;br/&gt;
A complete build specification is shown which is very succinct: it just has a combinator for adding dependencies. Behind the scenes, the plugin provides a huge amount of support (testing, rpms, dependency, continuous builds, and many more)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Configuration&lt;/b&gt; is handled by a Zookeeper cluster and can be overridden with local files or system properties. It's mapped into strongly-typed classes in Scala and validated via Hibernate so that configuration must match up with service expectations.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Testing&lt;/b&gt; is the most challenging part of a microservice architecture. Functional tests are the gold standard, but hard for developers to run 300 services on their local laptops. Unit tests can run locally, but there's no mocking service for these (and overmocking results in useless testing that in non representative). They use the Cake pattern for dependency injection, which enables type-safe and scalable composition. It uses Scala's self-types and multiple trait inheritance. Things like object repositories or configuration providers can be expressed in this way. The pattern lets them mixin different sources and weave in real/mocked sources.&lt;b&gt;UI Testing&lt;/b&gt; is handled via Selenium and is built on ScalaTest. Automated browser testing with reusable components works well, and leverages Scala's type system well to reject invalid tests/code/configuration.&lt;/li&gt;
&lt;li&gt;Continuous Delivery lets them deliver 20 to 30 service versions every day using the aforementioned structures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some cool stuff: on their website, there are badges on their website showing inventory for each item. The inventory badges update in realtime as you look at the page, which really motivates people to buy as they spot inventory dropping down. Shoppers get excited and feel like they're in a Black Friday sale and are engaged in the shopping activity! Building this stuff was quite easy to do using event-driven Play application and Akka actors.&lt;/p&gt;
&lt;p&gt;They build on this for &amp;quot;freefall sales&amp;quot;. Essentially a Dutch auction and is also web sockets and Play based. It initiates a sale that lasts for a fixed time with the price dropping regularly. The highlight is a $16000 purse that leads to audience laughter.&lt;/p&gt;
&lt;p&gt;Q: how to deal with production side of microservices such as service discovery or log aggregation?&lt;br/&gt;
A: no service discovery as Zookeeper tracks where everything is (which ports something is on). Log aggregation isnt great at the moment, so they're working on centralized collection atm.&lt;/p&gt;
&lt;p&gt;Q: what's the greatest win of FP here? Is type safety really important or something like that?&lt;br/&gt;
A: in the context of the company development and the technical stack, one nice thing about Scala is that it combines the &amp;quot;good parts&amp;quot; of Ruby (concise, expressive) with type safety and performance (as they had in Java). Scala provided a balance between Java and Ruby by giving them type safety, performance and conciseness, which is a big win in terms of expressivity and reuse of components.&lt;/p&gt;
&lt;p&gt;Q: how do you handle versioning of microservices?&lt;br/&gt;
A: each service maintains back compat in its API until they ensure all their clients are upgraded. The URI path has the version number, so service providers bump the version number for new clients and keep the old version working. They then migrate all the clients of the service as quickly as is practical.&lt;/p&gt;
&lt;h2&gt;PalletOpts and infrastructure automation&lt;/h2&gt;
&lt;p&gt;(I missed a lot of this talk due to a lunch chat spilling over. I'll fill it in later --editor)&lt;/p&gt;
&lt;p&gt;A Clojure DSL that runs shell scripts and handles very complex infrastructure automation.&lt;/p&gt;
&lt;p&gt;Q: Yaron: How do you handle error propagation through scripts (the equiv of set -e in sh)&lt;br/&gt;
A: Each combinator propagates errors and there are different run strategies that handle errors differently depending on needs.&lt;/p&gt;
&lt;h2&gt;Streaming data at Twitter with Summingbird&lt;/h2&gt;
&lt;p&gt;Speaker is &lt;a href=&quot;http://twitter.com/sritchie&quot;&gt;@sritchie&lt;/a&gt; (&lt;a href=&quot;https://speakerdeck.com/sritchie/summingbird-at-cufp&quot;&gt;his slides&lt;/a&gt;). &lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo-3.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo-3-300x300.jpg&quot; class=&quot;size-medium wp-image-1399 alignright&quot; alt=&quot;photo 3&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Summingbird is how to do streaming Map Reduce at the scale they have at Twitter (scale is &amp;quot;staggering&amp;quot;). It has been open sourced since Sep 3rd and a bunch of internal systems at Twitter run on it. Mainly three people: @posco @sritchie and Ashu -- small teams.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Vision&lt;/b&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;&amp;quot;Write your logic once&amp;quot;&lt;/b&gt;: Twitter has a number of 1000+ host Hadoop clusters and a lot of their data is done via k/v processing with Hadoop. Going streaming had to be done evolutionary by letting it be done either on Hadoop or on some new streaming service. Programmers experimenting with data shouldn't have to make systems decisions early on in the process. Twitters scale: 200m+ active users, 500M tweets/day and scale is pervasive.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Solve systems problems once&lt;/b&gt; so that systems that are scaling stay fixed.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Make non-trivial realtime compute as accessible as Scalding&lt;/b&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This leads onto Summingbird: a declarative map/reduce streaming DSL. It's a realtime platform that runs on Storm, and a batch platform that runs on Hadoop. The datastructures that come out of the DSL can be run on either platform (so you can choose between batch/streaming very late in the process).&lt;/p&gt;
&lt;p&gt;One of the big concepts that Summingbird embraces is the idea of &amp;quot;associative plus&amp;quot; operations -- the monoid.&lt;br/&gt;
The 4 S' of Summingbird (&amp;quot;you know you're onto something when they all have something in common!&amp;quot;):&lt;/p&gt;
&lt;pre&gt;Source[+T]
Store[-K,V]
Sink[-T]
Service[-K,+V]&lt;/pre&gt;
&lt;p&gt;Source is where data comes from, Store is a k/v store that is being aggregated into. Sink is a dump as processing items, and Service permits k/v lookups during a job.&lt;/p&gt;
&lt;p&gt;Store: what values are allowed? What constraints can we place on a MR job such that any valid value can make progress.&lt;/p&gt;
&lt;pre&gt;trait Monoid[V] {
  def zero: V
  def plus(l:V, r:V):V
}&lt;/pre&gt;
&lt;p&gt;&amp;quot;less scary than a monad!&amp;quot;. If you can take any two values and smash them together, you have a monoid -- e.g. integers. Also Sets have a monoid (concat) and lists (concat) and maps (recursively pull in the monoid on the value). Others include: HyperLogLog, CMS, ExponentialMA, BloomFilter, Moments,MinHash,Topk. All you need to do is find a datastructure with a monoid and you can use Summingbird. There is an open source library called Algebird (birds birds birds!).&lt;/p&gt;
&lt;p&gt;It took some convincing (the words like &amp;quot;monoid&amp;quot; still scared people at Twitter, sadly).&lt;/p&gt;
&lt;p&gt;Monoids are amazing due to Associativity. If you know that the values you are reducing are associative, then it's easy to parallelise since they can be built &amp;quot;in any order&amp;quot;.&lt;/p&gt;
&lt;p&gt;Even though realtime is important at Twitter, noones wanted to dip in due to the difficulty of getting started. Summingbird can pull in data from an existing static Hadoop cluster and then union it with a realtime feed. If you give the logic to Summingbird, it will run the logic on Hadoop (consuming discrete batches of data) and the client will keep track of how far it's gone. The realtime comes from partial aggregations over fixed time buckets, and is merged together in the client using the monoid to aggregate them together to look like a proper realtime feed.&lt;/p&gt;
&lt;p&gt;One cool feature: when you visit a tweet, you want the reverse feed of things that have embedded the tweet. The MR graph for this comes from: when you see an impression, find the key of the tweet and emit a tuple of the tweetid and Map[URL,Long]. Since Maps have a monoid, this can be run in parallel, and it will contain a list of who has viewed it and from where. The Map has a Long since popular tweets can be embedded in millions of websites and so they use an &amp;quot;accountment sketch&amp;quot; which is an approximate data structure to deal with scale there. The Summingbird layer which the speaker shows on stage filters events, and generates KV pairs and emits events.&lt;/p&gt;
&lt;p&gt;Twitter advertising is also built on Summingbird. Various campaigns can be built by building a backend using a Monoid that expresses the needs, and then the majority of the work is on the UI work in the frontend (where it should be -- remember, solve systems problems once is part of the vision).&lt;/p&gt;
&lt;p&gt;Future plans:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Akka, Spark, Tez platforms&lt;/li&gt;
&lt;li&gt;Pluggable graph optimizations since various planners do improved filter push&lt;/li&gt;
&lt;li&gt;Metadata publishing with HCatalog -- in OSS, this means better tooling for EC2 and other cloud platforms.&lt;/li&gt;
&lt;li&gt;And of course, more tutorials&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All work happens on Github so contributors are welcome.&lt;/p&gt;
&lt;p&gt;Summingbird is working well for the majority of realtime apps at Twitter. It's all about the Monoid! Data scientists who arent familiar with systems can deploy realtime systems, and 90%+ of the code is reused across the realtime and batch systems.&lt;/p&gt;
&lt;p&gt;Q: Did Hadoop need any changes to cope with the interfacing with Summingbird.&lt;br/&gt;
A: Scalding (written at Twitter) handles much of the interfacing with Hadoop. Hadoop is really the classical k/v store now. Real problem is figuring out which operations can work on both the batch and realtime and only admitting realtime.&lt;/p&gt;
&lt;p&gt;Q: Yaron: associativity is one nice thing about Monoid, but what about commutativity is also important. Are there examples of non-commutative datastructures&lt;br/&gt;
A: Good examples. It should be baked into the algebra (non-commutativity). This helps with data skew in particular. An important non-commutative application is Twitter itself! When you want to build the List monoid, the key is userid,time and the value is the list of tweets over that timeline (so ordering matters here). It's not good to get a non-deterministic order when building up these lists in parallel, so that's a good example of when associativity and commutativity are both important.&lt;/p&gt;
&lt;h2&gt;Functional Probabilistic Programming&lt;/h2&gt;
&lt;p&gt;Avi from Charles River, introducing the Figaro language.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Problem&lt;/b&gt;: Suppose you have some information (&amp;quot;suppose Brian ate pizza last night&amp;quot;) and you want to answer some questions based on this (&amp;quot;is Brian a student or a programmer?&amp;quot;) and keep track of the uncertainty in the answers.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Solution&lt;/b&gt;: Create a joint probability distribution over the variables, assert the evidence and use probabilistic inference to get the answer back.&lt;/p&gt;
&lt;p&gt;One common way to do this generative models. Probabilistic models in which variables are generated in order. Later values can depend on previous variables with a binding. This is a v popular approach with several implementations available over the years.&lt;/p&gt;
&lt;p&gt;Developing a new model requires figuring out a representation, an inference algorithm and a learning algorithm. All of these are significant challenges with each of them still being considered paper-worthy.&lt;/p&gt;
&lt;p&gt;The dominant paradigm is functional probabilistic programming. An expression describes a computation that produces a value.&lt;/p&gt;
&lt;pre&gt;let student = true in
let programmer = student in
let pizza = student &amp;amp;&amp;amp; programer in 
(student, programmer, pizza)

let student = flip 0.7 in
let programmer = if student flip(0.2) else flip(0.1) in
let pizza = if student &amp;amp;&amp;amp; programmer flip(0.9) else flip(0.3)
(student, programmer, pizza)&lt;/pre&gt;
&lt;p&gt;How are we supposed to understand this kind of program. Sampling semantics: run this program many times, each with a sample outcome. In each run, each outcome has some probability of being generated. The program defines a probability distribution over all the outcomes.&lt;/p&gt;
&lt;p&gt;This is a powerful approach since we are taking a Turing powerful language and probabilistic primitives are added, and this naturally expresses a wide range of models.&lt;/p&gt;
&lt;p&gt;Structured variable elimination, Markov chain Monte Carlo, importance sampling and so forth can all be built using functional probabilistic programming. PPLs aim to &amp;quot;democratize&amp;quot; model building -- one shouldn't need extensive training in ML or AI to build such models, or use them effectively.&lt;/p&gt;
&lt;p&gt;IBAL (2000-2007) is the first practical PPL, implemented in OCaml but not embedded in OCaml. Exact inference using structured variable elimination and later had intelligence important sampling. However, it was hard to integrate it with applications and data (in IBAL the data had to be hardcoded into the data, which wasnt practical). It also lacked continuous variables. Therefore the speaker built Figaro to work around the limitations.&lt;/p&gt;
&lt;p&gt;Figaro (2009-present) is a EDSL in Scala and allows distributions over any data type. It has a highly expressive constraint system that allows it to express non-generative models. There is an extensible library of inference algorithms that contains many of the popular probabilistic inference algorithms (eg. variable elimination).&lt;/p&gt;
&lt;p&gt;The goals of Figaro are to implement a PPL in a widely used library: Scala is the interop language as Java compat is a prime goal. Figaro provides various good abstractions such as OO that come out of Scala (not sure, he skipped slide rapidly here? -- editor)&lt;/p&gt;
&lt;p&gt;Figaro has an &lt;code&gt;Element[T]&lt;/code&gt; which is a class of probablistic models over type T. Atomic elements (Constant,Flip, Uniform, Geometric) are combined with compound elements &lt;code&gt;(If (Flip(0.9), Constant(0.5)...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Under the hood, there is a probability monad to track the state. The Constant is the monadic unit and Chain(T,U) implements the monadic bind. Apply(T,U) implements monadic fmap. Most elements in Figaro are implemented using this monad.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo-4.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo-4-300x300.jpg&quot; class=&quot;size-medium wp-image-1400 alignright&quot; alt=&quot;photo 4&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example 1: Probabilistic walk over a graph. In Figaro, we start by defining datastructures over the webpage graph (Edge, Node, Graph) and then we define some parameters of the random walk.&lt;/p&gt;
&lt;p&gt;Example 2: Friends and smokers. Create a person with a smokes variable. Friends are three times as likely to have the same smoking habit than different, so this is a constraint variable. Finally this is applied to all pairs of friends by adding constraints to the pairs. This is then instantiated in a particular situation by building a set of people (alice, bob, clara) and running the inference algorithm (VariableElimination) to calculate the probability that Clara smokes.&lt;/p&gt;
&lt;p&gt;Example 3: Hierarchical reasoning. We observe an object (say a vehicle on a road, or a person, or something) and we want to know what type of object it is. We have some observations about this object (its size, color or shape) and we want to know if its something we should be interested in. It's very natural to think of these objects via an inheritance hierarchy. In Figaro, every element has a name and belongs to an element collection. A reference is a sequence of names (such as vehicle size). Starting with an element collection, we can get to the vehicle associated with an element (go through through the sequence of nested element collections). However, there may be uncertainty in the identity of a reference (e.g. you dont know what vehicle1 is). Figaro resolve the element to the actual element.&lt;/p&gt;
&lt;p&gt;Obtaining Figaro is free and open source (cra.com/figaro) but v2 is on GitHub (like everything else today, it seems).&lt;/p&gt;
&lt;p&gt;Q: What are the limitations of Figaro, such as non-terminating Bernoulli tasks and what constraints cant be encoded?&lt;br/&gt;
A: Anything you can express can be put in constraints since any code can go in there. It's very easy to express something that you cant compute. Figaro is working on helping the programmer that can be computed over, such as via rejection sampling or simply rejecting the bad constraint.&lt;/p&gt;
&lt;p&gt;Q: Similar to Norman Ramsey's work (such as Church), whats the relationship&lt;br/&gt;
A: The languages fall into categories: their own languages and embedded libraries. The latter is Figaro and Infer.NET and Factory. INFER.NET is limited in expressivity and so can be compiled into a factor graph so is very efficient. Similarly Factory is lowlevel and compiles to factor graph. Lots to discuss here.&lt;/p&gt;
&lt;h2&gt;Haskell and FPComplete&lt;/h2&gt;
&lt;p&gt;Company exists to fix Haskell development tools. All the tools are cloud-based and run in a web browser. Content can be browsed anonymously. This talk will not have the Monad word in it!&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo4.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo4-300x300.jpg&quot; class=&quot;alignright size-medium wp-image-1425&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There exists a feature to create tutorials and embed code within those tutorials.&lt;/p&gt;
&lt;p&gt;Latest product (being announced today) is a Haskell IDE that is a web based tool which requires no setup and no download. It has a number of cool features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Errors are displayed immediately as it compiled as you type&lt;/li&gt;
&lt;li&gt;Git based so full version control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Company goals: increase Haskell adoption and make it more accessible. Offer commercial grade tools and support and simplify Haskell development. Also to support the Haskell community and leverage the community to improve FP Complete's own products.&lt;/p&gt;
&lt;p&gt;The FP Haskell Center (released in Sep 2013) has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a web front end (no setup,access to help and integrated with Haskell)&lt;/li&gt;
&lt;li&gt;Haskell backend has project management, developer feedback with errors, build system and a cloud based execution and deployment platform. The cloud allows for faster product evolution!&lt;/li&gt;
&lt;li&gt;Soon to have a personal version and version that will work behind firewalls etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is all implemented in a Haskell web framework like Yesod. Lots of library support via conduits, and the UI uses Javascript (via Fay). All the heavy lifting is done in the backend and not via Javascript. Very few issues surfaced using Yesod and no major modifications were required to build their product.&lt;/p&gt;
&lt;p&gt;Challenges were outside the scope of Haskell usually, but Haskell was used to fix them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Javascript coding was significant in the frontend&lt;/li&gt;
&lt;li&gt;Stable set of libraries are important&lt;/li&gt;
&lt;li&gt;Compiler integration (feedback and errors) must be available as a library to let the IDE spot identifier location problems&lt;/li&gt;
&lt;li&gt;Uses LXC containers to created isolation containers -- ephemeral storage and containers can run on either shared or dedicated systems.&lt;/li&gt;
&lt;li&gt;IDE uses isolation git state to separate users from each other. When projects are created, there is a visual representation of projects (in git repositories each, in S3) and each repo is accessed via Gitlib-2. Interesting is that this offers multiple backends for git access: Git C library, GitHub C library, IDE local repo in S3 or others in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For building projects, code is being precompiled continuously in the backend and so bytecode can generated quickly and run within the IDE. Bytecode runs in the GHC frontend container and exceptions dont break the IDE. Keter and Chef provide deployment assistance to get it into a shared application server or container, and FP Complete offers this deployment as part of their product.&lt;/p&gt;
&lt;p&gt;Billing Processor provides SOAP APIs. Added SOAP Haskell libraries to Haskell via C++ bindings.&lt;/p&gt;
&lt;h2&gt;Mobile gaming from Japan&lt;/h2&gt;
&lt;p&gt;They normally built mobile games using Ruby, PHP, etc, but have switched to FP in recent years for reliability, high performance and productivity. However, they've suffered from memory leak (blaming Haskell's laziness, to audience laughter), and some data loss and performance degradation.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo3.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo3-300x300.jpg&quot; class=&quot;alignright size-medium wp-image-1424&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gree is one of the largest mobile games platforms, with 37 million users and 2000 games as of June 2013. They develop social games and a platform for 3rd party games. They also do social media and advertising and licensing, and also venture capital.&lt;/p&gt;
&lt;p&gt;Employees are 2582 with a significant number of engineers (cant disclose exact numbers). On client side, it's normally Java, ObjC, Javascript and Unity/C#. Server side is usually PHP, MySQL and Flare (a KV store written in C++ developed internally at Gree). They started a Haskell project in Jun 2012 and they have 6 Scala and 4 Haskell engineers.&lt;/p&gt;
&lt;p&gt;They developed a KVS management system using Haskell, to setup and destroy KVS nodes in response to hardware faults and sudden access spikes. It's used in a large social game application. Another example is an image storage gateway, which converts WebDAV to memcached/S3 for the SNS photo uploader to store images. It uses Warp and http-conduit to do this conversion.&lt;/p&gt;
&lt;p&gt;Some pitfalls they faced with Haskell:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory leaks via lazy evaluation: frontend server keeps a list of active thread ids in a TVar for monitoring. When deleting from the thread list, the function didnt reduce the function to a normal form and so held onto a reference. This led to a serious memory leak that took the service down. It was fixed easily by evaluating to the normalform and forcing sequentialisation. They felt it is too easy to mix up TVar/MVar writes with other IO operations (which do reduce to normal form and avoid the leak). There is much confusion over the strict/lazy alternatives for non-IO functions&lt;/li&gt;
&lt;li&gt;Race conditions: Data put in a queue is very rarely lost. The reason is that the timeout functions can be used only once safely with an IO function. (details omitted)&lt;/li&gt;
&lt;li&gt;Performance degradation: from forking a lot of threads to do monitoring. This was easy to fix but happens often since Haskell libraries are developed actively and the implications of changes are not always obvious.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to fix all this? Better &lt;b&gt;testing&lt;/b&gt; to start with. Haskell has a great QuickCheck framework and they developed HUnit. This lets services be started in the setup (in their example, memcached using a spare port), and then run services against it and make sure its torn down in a timely fashion. They used this to extensively test their KVS system and Flare (written in C++). Over 150 system tests and a control server with 5000+ assertions, so this is a big scale test.&lt;/p&gt;
&lt;p&gt;Next up is documentation in Haskell. A problem report describes details of the problem and linked from a bug tracker. The timeline, workaround, impact and details caused must all be captured and are mixed up with a number of other reports, so none of the Haskell people read it. They collected up the aggregation and summarised it for other Haskell products. Despite this, other Haskell programmers still dont read it (audience laughter). To sort this out, they do automated checking using hlint. They customize hlint to &amp;quot;grep&amp;quot; for their particular pitfall, and then check for Emacs. hlint isnt quite good enough for a lot of their pitfalls though, such as the timeout issue from earlier, so they had some workarounds to deal with this. The good thing is that hlint is integrated into their text editor. Not all pitfalls can be caught by hlint: high level design issues will remain problematic.&lt;/p&gt;
&lt;p&gt;Education is also important. They have a brown bag (lunch? -- editor) FP meeting where they &amp;quot;Make GREE a better place through the power of FP&amp;quot;. They cover both Scala and Haskell topics. They also run an education program for new graduates, and they have a Haskell code puzzle series from Project Euler to help the new graduates.&lt;/p&gt;
&lt;p&gt;They conclude that they love FP and they develop some key components of our service using FP. But there are many pitfalls, and they are developing tools to assist them sort them out.&lt;/p&gt;
&lt;h2&gt;Haskell for distributed systems&lt;/h2&gt;
&lt;p&gt;Jeff Epstein (formerly a masters student in the Cambridge SRG, so it's good to see him again!) talks about their new distributed system that they are building in Haskell. His company is also available for hiring!&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo5.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo5-300x300.jpg&quot; class=&quot;alignright size-medium wp-image-1428&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HA middleware manages networked clusters, aiming for exabyte-scale clusters. It's architected by Mathieu Boespflug and Peter Braam (who has spoken about their FPGA work &lt;a href=&quot;http://cufp.org/videos/parallel-scientific-awesome-haskell-fpga-compiler&quot;&gt;at past CUFPs&lt;/a&gt;). It manages 10000+ nodes and creates consensus in the cluster about the location of active services. It can handle events due to failures, recovery time should be approx. 5 seconds.&lt;/p&gt;
&lt;p&gt;Zookeeper didn't scale &lt;i&gt;(audience interruption: why didnt Zookeeper scale? Jeff says he doesn't know and should chat offline, audience member notes that they maintain Zookeeper and wants to know more)&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Events are sent by nodes and aggregated at a proxy node, and enqueued at an HA station. Events are processed by the hA coordinator and updates a node state graph (which is also replicated -- everything is replicated and is a key theme in the talk). The HA coordinator is the decision maker which decides what to do on failure. Its main action is updating the node state graph to reflect the new strategy after failure.&lt;/p&gt;
&lt;p&gt;Key components are: Haskell, Cloud Haskell and Paxos.&lt;/p&gt;
&lt;p&gt;How we used Haskell:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional Data structures result in a purely functional graph and replicated (impurely) between cluster managers. Most of the feels imperative though, which was important.&lt;/li&gt;
&lt;li&gt;Refactoring being easier was important due to strong typing.&lt;/li&gt;
&lt;li&gt;Laziness was yet again a problem causer in IO due to space leaks in low-level networking code. He notes that distribution is a natural barrier to laziness, since the act of serializing a message forces its evaluation. He also notes that processes much behave the same between processes on the same host as between hosts, and so even local communication must be forced.&lt;i&gt;Phil Walder interjects to ask &amp;quot;why did you use Haskell? It's a bad fit! Jeff replies that &amp;quot;we like Haskell&amp;quot;&lt;/i&gt; and introduces Cloud Haskell, the topic of his MPhil thesis.Cloud Haskell is a library for distributed concurrency in Haskell and provides an actor-style message-passing interface, similarly to Erlang. It provides a &amp;quot;typed erlang&amp;quot;.Cloud Haskell is a good fit for this project in terms of interacting communicating components. Refactoring is easy, and this isn't a &amp;quot;big data&amp;quot; project in the sense of data size. There is a huge amount of communication messages though.CH has a pluggable transport layer such as TCP, but also for different underlying networks (they built Infiniband). However, CH requires ordered delivery of packets and this was a poor fit (they want out of order delivery, which could be built with UDP, but CH requires an ordering for some reason). Space leaks are a real problem in this layer.Cluster bringup is tough for CH, since nodes need to find each other at start of day, and there some hacks in there to work around a morning storm of messages.&lt;i&gt;(Interjection from audience: why not use Erlang? Jeff: performance wasnt up to par, and static types are important for them). Possibly the native code / bytecode erlang might be useful but speaker wasn't sure if it would work.&lt;/i&gt;
&lt;p&gt;Paxos: is all about making systems agree (well-known proven algorithm for consensus). They implemented this as a general purpose library on top of CH. The algorithm is a good match for the programming model, with the client, acceptor, proposer learning and leader all built as CH processes. It ended up being a small readable implementation (1.5kLOC) that closely matched the pseudocode in the original Paxos paper (made them feel better about correctness). It's used for synchronizing the state graph and for the distributed message queue.&lt;/p&gt;
&lt;p&gt;Challenges: Paxos is hard and untyped messages in CH make it worse. Getting reasonable performance from it also requires the modified variants. Liveness also is tricky to avoid overapproximations to prevent nodes being fenced out of the consensus unnecessarily. Multipaxos is something that solves some of this, and they're working on more specific stuff also.&lt;/p&gt;
&lt;p&gt;Debugging: The CH programming model makes it tractable to debug a distributed application on a single machine. Nevertheless, distributed code is still parallel and involves race conditions and mixing messages. They would like a distributed &lt;a href=&quot;http://www.haskell.org/haskellwiki/ThreadScope&quot;&gt;ThreadScope&lt;/a&gt; but instead mainly used oldskool logging.&lt;/p&gt;
&lt;p&gt;They did build a deterministic CH thread scheduler to replace CH's core message handling primitives, and they also used PROMELA&lt;/p&gt;
&lt;p&gt;Q: how much is open source or will be?&lt;br/&gt;
A: none as far as speaker knows&lt;/p&gt;
&lt;p&gt;Q: Marius: how are non-deterministic sources composed with the deterministic scheduler?&lt;br/&gt;
A: deterministic scheduler is for testing only, so timeouts also so deterministic.&lt;/p&gt;
&lt;h2&gt;IQ: Functional Reporting&lt;/h2&gt;
&lt;p&gt;Speaker is Edward Kmett on how they got FP in the door at S&amp;amp;P Capital in the door, their extensions to Haskell and generally how they're working on opensourcing their tech. SAP is huge and have a number of products (S&amp;amp;P Capital IQ Platform, ClariFI, AlphaWorks, Compustat).&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo6.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo6-300x300.jpg&quot; class=&quot;alignright size-medium wp-image-1434&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Getting FP in the door:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monoids (introduced as with the Summingbird talk, for easy parallelisation)&lt;/li&gt;
&lt;li&gt;Reducers are another really powerful abstraction which can take a container full of values and give you back a structure, and it has a comonadic structure that lets you (e.g.) pass it many containers full of structures and generally compose things nicely. Reduction can also be done simultaneously across monoidal structures and essentially &amp;quot;we dont see the wiring hanging out of our code any more&amp;quot;.&lt;/li&gt;
&lt;li&gt;Performance attribution: This is a model that breaks down the reasons why you make money (what did you do that was significant). The old and busted model (implemented in Java, full dataset in memory, hard to extend) was horrible, and the new hotness is implemented in Scala, runs in constant space, is really fast and results are flattened elegantly via combinators to a database backend. In other words: better, but some details are glossed over (multipass algorithms, iteratees, caching layers, and handling missing data) -- but all this was sorted out and really sold Scala to the bigger company as a real asset.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They developed Ermine, which is Haskell with Row Types. It's not quite Haskell, but it's main feature is that it's not Scala either (audience laughter). Writing functional programs in Scala is quite painful (e.g. not blowing stack with monads requires trampolining everything and is labour intensive just to get by day to day). They wrote Ermine in both Scala and Haskell with a portable Core that can run on the JVM.&lt;/p&gt;
&lt;p&gt;Ermine has a strong type system, with novel row types and polymorphic and constraint kinds (&amp;quot;they were just coming into GHC at the time and I wanted to understand them&amp;quot;) and Rank-N types via a derivative of HMF. It fit their domain requirements really wel, and has builtin database support, can be exposed to end users, a structured code editor that can only generate type-safe code as you're defining, and full control over error messages.&lt;/p&gt;
&lt;p&gt;Row types are a powerful way of describing the presence of a particular field. Its modelled via has, lacks and/or subsumes constraints. This is easily checked, but now inference flows unidirectionally through a join.&lt;br/&gt;
In Ermine, they have existentials in their constraint types &lt;i&gt;(technical explanation follows, not shown here --editor)&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Their reporting layer has one declarative specification to do all the relational algebra specifications they want, and push it into specific backends (SQL Server, etc) and ensure they run their queries as close to the data as possible. They can also create extensive HTML reports that render pretty consistently across different target platforms. Their example of Ermine was written by a functional programmer that had done no functional programming previously, which required a little hand holding to work through some of the more obscure type errors, but generally it worked ok.&lt;/p&gt;
&lt;p&gt;All the code is being stuck onto Hackage/Github etc.&lt;/p&gt;
&lt;p&gt;Q: has it been rolled out to a lot of users?&lt;br/&gt;
A: being used on the main S&amp;amp;P website. One big client facing page for users. The next gen stuff is using Ermine more widely. The desktop app coming soon has Ermine and will be used by a huge number of users. Trend is to use it in an increasing number of their products.&lt;/p&gt;
&lt;h2&gt;Enterprise scheduling with Haskell at skedge.me&lt;/h2&gt;
&lt;p&gt;They have a cloud-based scheduling platform that takes care of complex enterprise scheduling. It has a branded customer experience (like Google Apps does), a flexible workflow and deep integration with backend systems and in-store workflow (e.g. on iPads).&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo7.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo7-300x300.jpg&quot; class=&quot;alignright size-medium wp-image-1445&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example is Sephora who do makeup, and their appointment system is integrated via skedge.me that is embedded in an iFrame that looks like a seamless part of their site so that endusers cant tell the difference.&lt;/p&gt;
&lt;p&gt;When speaker started at skedge.me, there was a lot of fire fighting. It was 43k lines of Groovy on Grails, and several major intractable bugs were affecting the business: timezones, double bookings, recurring events not firing and notifications being delayed. Performance was an issue, as things that were interactive were sometime taking minutes to load. There was also a lot of inflexibility -- hilariously, they had to sometimes ask clients to change their business model to fit with the skedge.me model.&lt;/p&gt;
&lt;p&gt;After some careful though, they decided they had to rewrite skedge.me to cope with growth and better service. The author had done Haskell before, but not specifically was with building a website using it.&lt;/p&gt;
&lt;p&gt;Haskell had the perfect model for fixing their scaling problems. At the lowest level, they built a RawDB on top of the IO monad that did everything necessary to maintain ACID guarantees during transactions. An example is that once an effect gets committed (e.g. an email gets sent confirming an appointment and then is cancelled, which happened on their old racy platform). This RawDB layer gives them stronger consistency guarantees with tracked effects and automatic retries on temporary failure.&lt;/p&gt;
&lt;p&gt;On top of the RawDB, they build a DB monad which provides a higher level than SQL via algebraic data types, caching and data validation. They then layer a security monad on top of the DB monad to guarantee that all accesses have been checked. Finally there is a business logic layer to enforce local policy and customise per customer (which was a real problem in the past).&lt;/p&gt;
&lt;p&gt;Security is complex due to all the customization, and they needed roles by client (owner, staff, customer) but also because clients can customise their &lt;i&gt;verbs&lt;/i&gt; that only make sense within the component (Appointments can be joined, rescheduled, or notifications can be sent, edit cancelled). Haskell lets all this fit within a multiparameter type class, instead of doing OO-style inheritance that will rapidly get out of control. They map customisations from the customer onto a more standard schema that they can manipulate generically on a component-by-component basis, and it's all statically checked and generally easy to read (important for security critical code).&lt;/p&gt;
&lt;p&gt;Haskell &amp;quot;lets them build code for the long run&amp;quot;. Sometimes though, you need to write code quickly and not care about longevity. This was the case for the importer, which is a quick-and-dirty hack to get code into their system. It has a limited set of inputs, the &amp;quot;end user&amp;quot; is the developer, and it's thrown away once the job's done. (shows epic type). Often when people need to do this sort of thing, they resort to bash or dynamically typed systems. In this case, even for this &amp;quot;quick hack&amp;quot;, they couldnt have achieved what they did &amp;quot;as badly as they did, without the help of the type system&amp;quot;. Generally very positive!&lt;/p&gt;
&lt;p&gt;Libraries help them not have to write code. Haskell is generally lower in terms of package count, but their *use* of Hackage libraries has been a lot higher than Javascript. They use 9 Javascript libraries, and 71 unique Hackage libraries (+87 dependencies). Its a lot harder to find a quality library that works in the dynamically typed land. Only one of their Haskell libraries had to be replaced due to bugs. This is because Hackage is well-organized, and it's easier to vet a library since the purely functional ones are less risky (fewer sideeffects through other code). In contrast, Javascript libraries can sideeffect (e.g. on the DOM) very late in the QA process. So: fewer Haskell libraries, but the number of useful libraries seems to be higher.&lt;/p&gt;
&lt;p&gt;Problems: cyclic module dependencies with hs-boot files are unwieldy, so avoid them. Scalability with 4+cores was limited, but they havent tested GHC 7.8 (which apparently fixes a lot of this). Idle GC can cause issues with long pauses, so disable this feature -- it depends on your workload but it was ok for their server based workload.&lt;/p&gt;
&lt;p&gt;Debugging production problems without stack traces is really hard, so consider using profiling mode for all libraries.&lt;/p&gt;
&lt;p&gt;Bottom line: 8200 lines of Haskell from 40k+ lines of Groovy. No recurring bugs and very good performance and flexibility for customer needs. Used daily by thousands of people. Check out the &lt;a href=&quot;http://skedge.me&quot;&gt;website&lt;/a&gt;!.&lt;/p&gt;
&lt;p&gt;Q: what about testing (QuickCheck?)&lt;br/&gt;
A: they've done some QuickCheck on critical components (such as an map from times to events). Overall though, just putting Haskell together in the most obvious way led to improvements over their previous platform. Their QA guys are now writing unit tests in Haskell (because their Selenium bindings were harder).&lt;/p&gt;
&lt;h2&gt;Integration of Mathematica with MapReduce&lt;/h2&gt;
&lt;p&gt;From Paul-Jean Letourneau, a data scientist at Wolfram Research. &lt;i&gt;Started with a show of hands: most of the audience has used Mathematica and had heard of Wolfram.&lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo8.jpg&quot;&gt;&lt;img src=&quot;http://www.syslog.cl.cam.ac.uk/wp-content/uploads/2013/09/photo8-300x300.jpg&quot; class=&quot;alignright size-medium wp-image-1450&quot; alt=&quot;photo&quot;/&gt;&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The speaker has been responsible for a lot of the personal analytics posts on the Wolfram blog (the email analysis, genomics and several others). The theme of all his projects has been to work on large data. Mathematica has always kept its data oncore, which is a problem with very large data sets, and so this talk is about how they migrate over to a more big-data model to run offcore.&lt;/p&gt;
&lt;p&gt;Fundamental principles of Mathematica: everything is an expression, expressions are transformed until they stop changing, and transformation rules are in the form of patterns. Expressions are data structures (actually m-expressions in Lisp parlance). &lt;i&gt;(full explanation of these in Mathematica demonstrated but omitted here)&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Expressions in Mathematica are immutable data structures (&amp;quot;program as data&amp;quot;) and so expressions can be rebound. Homoiconicity is pervasive as expressions are the data structure, even internally during evaluation (where it's represented as a tree).&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&amp;quot;everything is a one-liner in Mathematica... for a sufficiently long line&amp;quot; (Theo Gray).&lt;/i&gt; (audience laughter). He demonstrates some cool oneliners that are Tweetable (&amp;lt;140chars) and demonstrates how to construct an image recursively out of itself (wow).&lt;/p&gt;
&lt;p&gt;He views it as a gateway drug to declarative programming&lt;/p&gt;
&lt;pre&gt;y = 0
For[i=1; i&amp;lt;=10; i++,y+=i^2]; y
385&lt;/pre&gt;
&lt;p&gt;(and then they discover Fold and all the advanced topics such as scoping, evaluation control and the MathLink protocol for IPC).&lt;/p&gt;
&lt;p&gt;HadoopLink is how they link Mathmetica to Hadoop. Example is WordCount, wherein he shows code to do it on a single core first (to test the output), and then an export to HDFS so that Hadoop can see the code. This looks fairly straightforward via a DFSExport command from HadoopLik.&lt;/p&gt;
&lt;p&gt;The Mapper looks something like:&lt;/p&gt;
&lt;pre&gt;Function[{k,v},
  With[{words=ToLowerCase 
    /@ StringSplit [k,RegularExpression[], ...&lt;/pre&gt;
&lt;p&gt;The reduces is similar, as it users an iterator to sum up each of the inputs. It actually communicates to the JVM to ensure that they dont have to load all the values into memory. Running the job is just a special HadoopMapReduceJob along with all the relevant expressions, and it goes ahead and submits it to Hadoop.&lt;/p&gt;
&lt;p&gt;Used this to build a genome search engine using all this. He shows how to prep data using Mitochondrian genomic data. The mapper only knows about a single base in the genome and its position, and the query sequence, how can it possibly align the query sequence with the genome? Algorithm scales with the size of the query, and not the size of the dataset. Hadoop can be used to handle the full dataset so getting local algorithm right in Mathematica can be focussed on rather than the bigger problem.&lt;/p&gt;
&lt;p&gt;Challenges: when this scaled up to search the entire human genome, my Hadoop cluster blows up. Nodes start dying, Nagios alerts, the works! After drilling down on these cryptic errors, the &amp;quot;garbage collector overhead was exceeded&amp;quot; which was hard to interpret. The memory consumption on each worker node when running with both Mathematica and the slave is quite high. This is a setting that's made on a clusterwide basis and so is problematic to tweak just for this. What he'd like to do is add job-specific options to run things like heap size.&lt;/p&gt;
&lt;p&gt;Its on GitHub and open source (github.com/shadanan/HadoopLink) so go for it.&lt;/p&gt;
&lt;h2&gt;Announcements&lt;/h2&gt;
&lt;p&gt;Ashish Agarwal is organizing BoFs! On Monday @ 6pm there will be a bioinformatics session with Jeff Hammerbacher with location on the CUFP website.&lt;/p&gt;
&lt;p&gt;On Tuesday there will be a BoF about organizing local events for FP. In the same way that politics is local, this BoF will help you figure out strategies for local events.&lt;/p&gt;
&lt;p&gt;Yaron Minsky announces that 17 organizations have sponsored CUFP this year, which helps students. Industry attention to FP is really amazing to see how FP is moving into the mainstream. Industrial reception at 1830 on Monday downstairs.&lt;/p&gt;
&lt;p&gt;Our thanks to Marius Eriksen and Mike Sperber for an amazing program!&lt;/p&gt;
</content><id>http://www.syslog.cl.cam.ac.uk/2013/09/22/liveblogging-cufp-2013/</id><title type="text">Liveblogging CUFP 2013</title><updated>2013-09-22T14:05:32+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://anil.recoil.org/2013/09/20/opam-1-1-beta.html" rel="alternate"/><contributor><uri>http://anil.recoil.org/feeds/atom-ocaml.xml</uri><name>Anil Madhavapeddy</name></contributor><content type="html">&lt;p&gt;&lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas&lt;/a&gt; just announced the availability of the &lt;a href=&quot;http://opam.ocamlpro.com&quot;&gt;OPAM&lt;/a&gt; beta release.  This has been a huge amount of work for him and &lt;a href=&quot;http://louis.gesbert.fr/&quot;&gt;Louis&lt;/a&gt;, so I&amp;rsquo;m excited to see this release!  Aside from general stability, the main highlights for me are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A switch to the &lt;a href=&quot;http://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;CC0&lt;/a&gt; public-domain-like license for the repository, and LGPL2+linking exception for OPAM itself.  The &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/issues/955&quot;&gt;cutover to the new license&lt;/a&gt; was the first non-gratuitous use of GitHub&amp;rsquo;s fancy issue lists I&amp;rsquo;ve seen, too!  As part of this, we&amp;rsquo;re also beginning a transition over to hosting it at &lt;code&gt;opam.ocaml.org&lt;/code&gt;, to underline our committment to maintaining it as an OCaml community resource.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Much-improved support for package pinning and updates.  This is the feature that makes OPAM work well with &lt;a href=&quot;http://openmirage.org&quot;&gt;MirageOS&lt;/a&gt;, since we often need to do development work on a low-level library (such as a &lt;a href=&quot;https://github.com/mirage/ocaml-xen-block-driver&quot;&gt;device driver&lt;/a&gt; and recompile all the reverse dependencies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Support for post-installation messages (e.g. to display &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/pull/1100&quot;&gt;licensing information&lt;/a&gt; or configuration hints) and better support for the external library management issues I explained in an earlier post about &lt;a href=&quot;http://anil.recoil.org/2013/09/09/ocamlot-autotriaging.html&quot;&gt;OCamlot testing&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Better library structuring to let tools like &lt;a href=&quot;http://github.com/OCamlPro/opam2web&quot;&gt;Opam2web&lt;/a&gt; work with the package metadata.  For instance, my group&amp;rsquo;s &lt;a href=&quot;http://ocaml.io&quot;&gt;OCaml Labs&lt;/a&gt; has a comprehensive list of &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/pkg/index.html&quot;&gt;the software packages that we work on&lt;/a&gt; generated directly from an OPAM remote.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A growing set of administration tools (via the &lt;code&gt;opam-admin&lt;/code&gt; binary) that run health checks and compute statistics over package repositories.   For example, here&amp;rsquo;s the result of running &lt;code&gt;opam-admin stats&lt;/code&gt; over the latest package repository to show various growth curves.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table width=&quot;90%&quot; align=&quot;center&quot;&gt;
&lt;tr&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/opam11-beta-contributors.png&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/opam11-beta-contributors.png&quot; border=&quot;0&quot; width=&quot;220&quot;/&gt;&lt;/a&gt;&lt;br/&gt;Number of unique contributors to the main OPAM package repository.&lt;/td&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/opam11-beta-packages.png&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/opam11-beta-packages.png&quot; border=&quot;0&quot; width=&quot;220&quot;/&gt;&lt;/a&gt;&lt;br/&gt;Total number of unique packages (including multiple versions of the same package).&lt;/td&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/opam11-beta-unique-packages.png&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/opam11-beta-packages.png&quot; border=&quot;0&quot; width=&quot;220&quot;/&gt;&lt;/a&gt;&lt;br/&gt;Total packages with multiple versions coalesced so you can see new package growth.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Is it a &lt;a href=&quot;http://www.theatlantic.com/technology/archive/2013/05/the-hockey-stick-the-most-controversial-chart-in-science-explained/275753/&quot;&gt;hockey stick&lt;/a&gt; graph?  Only time will tell!
See Thomas&amp;rsquo; &lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2013-09/msg00300.html&quot;&gt;full release announcement&lt;/a&gt; and let us know how you get along with this new release&amp;hellip;&lt;/p&gt;
</content><id>http://anil.recoil.org/2013/09/20/opam-1-1-beta.html</id><title type="text">OPAM 1.1 beta available, with pretty colours</title><updated>2013-09-20T01:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://ocamllabs.github.com/compiler-hacking/2013/09/17/compiler-hacking-july-2013" rel="alternate"/><contributor><uri>http://ocamllabs.github.io/compiler-hacking/rss.xml</uri><name>Compiler Hacking</name></contributor><content type="html">&lt;p&gt;&lt;img src=&quot;http://ocamllabs.github.io/compiler-hacking/imgs/2013-09-17.jpg&quot; alt=&quot;Compiler Hacking&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The first OCaml Labs compiler hacking session brought together around twenty people from &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/&quot;&gt;OCaml Labs&lt;/a&gt;, the wider &lt;a href=&quot;http://www.cl.cam.ac.uk&quot;&gt;Computer Lab&lt;/a&gt;, and &lt;a href=&quot;http://www.citrix.com/&quot;&gt;various&lt;/a&gt; &lt;a href=&quot;http://www.arm.com/&quot;&gt;companies&lt;/a&gt; around Cambridge for an enjoyable few hours learning about and improving the OCaml compiler toolchain, fuelled by &lt;a href=&quot;http://www.cherryboxpizza.co.uk&quot;&gt;pizza&lt;/a&gt; and home-made ice cream (thanks, &lt;a href=&quot;http://philippewang.info/CL/&quot;&gt;Philippe&lt;/a&gt;!).&lt;/p&gt;

&lt;p&gt;We benefited from the presence of a few &lt;a href=&quot;http://www.x9c.fr/&quot;&gt;experienced&lt;/a&gt; &lt;a href=&quot;http://danmey.org/&quot;&gt;compiler&lt;/a&gt; &lt;a href=&quot;http://lpw25.net/&quot;&gt;hackers&lt;/a&gt;, but for most of us it was the first attempt to modify the OCaml compiler internals.&lt;/p&gt;

&lt;p&gt;The first surprise of the day was the discovery that work on the &lt;a href=&quot;https://github.com/ocamllabs/compiler-hacking/wiki/Things-to-work-on&quot;&gt;list of projects&lt;/a&gt; was underway before we even arrived!  Keen collaborators from The Internet had apparently spotted our triaged bug reports and &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=4323&quot;&gt;submitted&lt;/a&gt; &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=4737&quot;&gt;patches&lt;/a&gt; to Mantis.&lt;/p&gt;

&lt;h3&gt;Standard library and runtime&lt;/h3&gt;

&lt;p&gt;There was an exciting moment early on when it emerged that two teams had been working independently on the same issue!  When &lt;a href=&quot;https://github.com/jonludlam&quot;&gt;Jon Ludlam&lt;/a&gt; and &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/euan.html&quot;&gt;Euan Harris&lt;/a&gt; submitted a patch to add a &lt;code&gt;get_extension&lt;/code&gt; function to the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Filename.html&quot;&gt;&lt;code&gt;Filename&lt;/code&gt;&lt;/a&gt; module they found that they had been pipped to the post by &lt;a href=&quot;https://github.com/mcclurmc/&quot;&gt;Mike McClurg&lt;/a&gt;.  There's still the judging stage to go, though, as the patches wait &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5807&quot;&gt;on Mantis&lt;/a&gt; for official pronouncement from the Inria team. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/vbmithr&quot;&gt;Vincent Bernardoff&lt;/a&gt; also spent some time improving the standard library, &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=4919&quot;&gt;fleshing out the interface for translating between OCaml and C error codes&lt;/a&gt;, starting from a patch by Goswin von Brederlow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stedolan&quot;&gt;Stephen Dolan&lt;/a&gt; looked at a &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=1956&quot;&gt;long-standing issue&lt;/a&gt; with names exported by the OCaml runtime that can clash with other libraries, and submitted a patch which hides the sole remaining offender for the runtime library.  As he noted in the comments, there are still a &lt;a href=&quot;https://gist.github.com/stedolan/6115403&quot;&gt;couple of hundred&lt;/a&gt; global names without the &lt;code&gt;caml_&lt;/code&gt; prefix in the &lt;code&gt;otherlibs&lt;/code&gt; section of the standard library.&lt;/p&gt;

&lt;h3&gt;Tools&lt;/h3&gt;

&lt;p&gt;There was a little flurry of work on new command-line options for the standard toolchain.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6102&quot;&gt;Mantis issue&lt;/a&gt; submitted by &lt;a href=&quot;http://gallium.inria.fr/~scherer/&quot;&gt;Gabriel Scherer&lt;/a&gt; suggests adding options to stop the compiler at certain stages, to better support tools such as &lt;a href=&quot;http://projects.camlcity.org/projects/findlib.html&quot;&gt;OCamlfind&lt;/a&gt; and to make it easier to debug the compiler itself.  The Ludlam / Harris team looked at this, and submitted a patch which provoked further thoughts from Gabriel.&lt;/p&gt;

&lt;p&gt;Vincent looked at extending &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/depend.html&quot;&gt;ocamldep&lt;/a&gt; with support for suffixes other than &lt;code&gt;.ml&lt;/code&gt; and &lt;code&gt;.mli&lt;/code&gt;.  Since &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=3725&quot;&gt;the issue&lt;/a&gt; was originally submitted, &lt;code&gt;ocamldep&lt;/code&gt; has acquired &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/depend.html#sec288&quot;&gt;&lt;code&gt;-ml-synonym&lt;/code&gt; and &lt;code&gt;-mli-synonym&lt;/code&gt; options&lt;/a&gt; that serve this purpose, so Vincent looked at supporting other suffixes in the compiler, and submitted a patch as a &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6110&quot;&gt;new issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The OCaml top level has a simple feature for setting up the environment &amp;mdash;  when it starts up it looks for the file &lt;code&gt;.ocamlinit&lt;/code&gt;, and executes its contents.  It's sometimes useful to skip this stage and run the top level in a vanilla environment, so &lt;a href=&quot;https://github.com/dsheets&quot;&gt;David Sheets&lt;/a&gt; submitted a &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6071&quot;&gt;patch&lt;/a&gt; that adds a &lt;code&gt;-no-init&lt;/code&gt; option, &lt;a href=&quot;https://github.com/ocaml/ocaml/blob/fadcc73c50b89ca80ecc11131c9a23dbd2c1e67a/Changes#L35&quot;&gt;due for inclusion&lt;/a&gt; in the next release.&lt;/p&gt;

&lt;h3&gt;Error-handling/reporting&lt;/h3&gt;

&lt;p&gt;Error handling issues saw a good deal of activity.  &lt;a href=&quot;http://www.cl.cam.ac.uk/~rp452/&quot;&gt;Rapha&amp;euml;l Proust&lt;/a&gt; submitted a patch to improve the &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6112&quot;&gt;reporting of error-enabled warnings&lt;/a&gt;; David investigated &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=3582&quot;&gt;handling out-of-range integer literals&lt;/a&gt; and &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5350&quot;&gt;return-code checking of C functions in the runtime&lt;/a&gt;, leading to some discussions on Mantis.  Stephen submitted a patch to improve the &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6182&quot;&gt;diagnostics for misuses of &lt;code&gt;virtual&lt;/code&gt;&lt;/a&gt;.  &lt;a href=&quot;http://www.cl.cam.ac.uk/~gk338/&quot;&gt;Gabriel Kerneis&lt;/a&gt; and Wojciech looked at some &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6109&quot;&gt;typos in ocamlbuild error messages&lt;/a&gt;, and Mike opened an &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6108&quot;&gt;issue to clarify the appropriate use of the &lt;code&gt;compiler-libs&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Language&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;open&lt;/code&gt; operation on modules can make it difficult for readers of a program to see where particular names are introduced, so its use is sometimes discouraged.  The basic feature of making names available without a module prefix is rather useful, though, so various new features (including &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual021.html#toc77&quot;&gt;local opens&lt;/a&gt;, &lt;a href=&quot;https://github.com/ocaml/ocaml/commit/f51bc04b55fbe22533f1075193dd3b2e52721f15&quot;&gt;warnings for shadowing&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ocaml/ocaml/commit/a3b1c67fffd7de640ee9a0791f1fd0fad965b867&quot;&gt;explicit shadowing&lt;/a&gt;) have been introduced to tame its power. Stephen looked at adding a further feature, making it possible to open modules under a particular signature, so that &lt;code&gt;open M : S&lt;/code&gt; will introduce only those names in &lt;code&gt;M&lt;/code&gt; that are specified with &lt;code&gt;S&lt;/code&gt;.  There's an &lt;a href=&quot;https://github.com/lpw25/ocaml/tree/signatured-open&quot;&gt;initial prototype&lt;/a&gt; already, and we're looking forward to seeing the final results.&lt;/p&gt;

&lt;p&gt;The second language feature of the evening was support for infix operators (such as the List constructor, &lt;code&gt;::&lt;/code&gt;) for user-defined types, a feature that is definitely not in any way motivated by envy of Haskell.  Mike's &lt;a href=&quot;https://github.com/mcclurmc/ocaml/tree/infix-constructors&quot;&gt;prototype implementation&lt;/a&gt; is available, and there's an &lt;a href=&quot;https://github.com/mcclurmc/ocaml/pull/1&quot;&gt;additional patch&lt;/a&gt; that brings it closer to completion.&lt;/p&gt;

&lt;h3&gt;Next session&lt;/h3&gt;

&lt;p&gt;The next session is planned for 6pm on Wednesday 18th September 2013 at
&lt;a href=&quot;http://makespace.org/&quot;&gt;Makespace, Cambridge&lt;/a&gt;.  If you're planning to come along it'd be
helpful if you could add yourself to the &lt;a href=&quot;http://doodle.com/k6y2tiihkrb5vuw4&quot;&gt;Doodle Poll&lt;/a&gt;.  Hope to see
you there!&lt;/p&gt;
</content><id>http://ocamllabs.github.com/compiler-hacking/2013/09/17/compiler-hacking-july-2013</id><title type="text">Inaugural compiler hackers meeting</title><updated>2013-09-17T13:49:04+00:00</updated><author><email>cl-ocamllabs@lists.cam.ac.uk (OCaml Labs)</email><name>Compiler Hacking</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=352" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;Today&amp;rsquo;s OCaml Labs Monthly Meeting is all about practise talks for OCaml2013 so in that spirit, I&amp;rsquo;ll practising a bit of live-blogging too.&lt;/p&gt;
&lt;p&gt;13:53 &amp;ndash; Today&amp;rsquo;s SRG Meeting is over and its time for some work before the OCaml Labs meeting at 4:00, see you then &amp;hellip;&lt;/p&gt;
&lt;p&gt;16:02 Techincal difficulties delayed the start&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;16:02 Intro from Anil&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;introducing Gabriel Scherer who is visiting us this week and going we are going to Maypole after this meeting. We had a cash prise from ASPLOS after winning the HiPEAC paper award and the money will go towards SRG wine for XMAS party. Signpost paper was accepted to FOCI and a HotNet paper on Trevi was also just accepted&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OCL Website&lt;/strong&gt; &amp;ndash; Too much manual management at the moment, moving to an &lt;a href=&quot;http://planet.ocamlcore.org/&quot;&gt;ocaml planet&lt;/a&gt; feed of blog posts. David has been busy hacking on &lt;a href=&quot;https://github.com/OCamlPro/opam2web&quot;&gt;OPAM2web&lt;/a&gt;, OPAM has 512 packages, Opam2web takes a subset of the OPAM packages and makes the metadata into a minisite, like on OPAM. Doesn&amp;rsquo;t require manual updates, like an ATOM feed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Upcoming events&lt;/strong&gt; &amp;ndash; Tomorrow is the 2nd &lt;a href=&quot;http://www.meetup.com/Makespace/events/138103982/&quot;&gt;compiler hacking event&lt;/a&gt;, at the &lt;a href=&quot;http://makespace.org/&quot;&gt;makespace&lt;/a&gt;. Anil will be talking at QCon on Mirage, Mirage 1.0 release date is October 22nd, so maybe a workshop before. We 3 talks for Ocaml2013 (Platform, OcamlOT and Ctypes) so here we go &amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;16:09 Anil practice talk on OCaml Platform 1.0&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Languages take many difference approaches to platform, but what does platform even mean? As a late mover in this field, we can learn from other languages. A platforms is NOT a group of temporarily motivated hackers to build a replacement standard library. Its hard to adopt a particular approach without a domain specific purpose, there are too many opinions, we need objective way to determine what belongs in the platform, we need a genie community that is sustainable (even if a large party leaves). A platform is a bundle of tools that interoperate, with quantitative metric to judge success, built in agility and supporting developers thought the whole development life cycle. Industrial partners have a range of needs, as each work in different domains.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tooling&lt;/strong&gt; &amp;ndash; Overview of 5 areas: OPAM from OCamlPro, IDE Tools, OPAM-DOC, OCaml compiler itself and Ocaml.org.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OPAM&lt;/strong&gt; &amp;ndash; 1.1 released today (maybe), over 100 contributors to OPAM, &amp;nbsp;500+ packages, 1500+ unique versions, external dependency solver using CUDF&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDE Support&lt;/strong&gt; &amp;ndash; OCaml has many intermediate files. In OCaml 4.0 onwards, we have a binary format of an abstract syntax tree with type annotations&amp;nbsp;called cmt (and cmti for interface files), we can now create external tools to query this like opam-doc. ocp-index and ocp-indent from OCamlPro, and Merlin (I thinks this is EPIC)&amp;nbsp;are also now available&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;opam-doc&lt;/strong&gt; &amp;ndash; Now we have cmt files, we need unified documentation across packages, this is much harder than it sounds as it touches every part of the tool stack. Not all packages can be installed at once due to conflicts. Module inclusion is tough to code in static html. (Need to make a demo) bindoc takes the Typed AST (in cmt) and generates cmd, which include the ocamldoc comments, Opamdoc takes the cmt database for opam and output a single website with your universe of packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ocaml.org&lt;/strong&gt; &amp;ndash;&amp;nbsp;Demo of ocaml.org at &lt;a href=&quot;http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/ocaml-redesign.github.io/pkg/index.html&quot;&gt;ocaml-redesign.github.io/pkg/index.html&lt;/a&gt;, feedback is welcome says amir&lt;/p&gt;
&lt;p&gt;Now we have the tools, what metrics can we extract to see how well our tools are doing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Portability&lt;/strong&gt; &amp;ndash; windows compatibility ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maintainer&lt;/strong&gt; &amp;ndash; is there a place for docs and will people response to issues/comments/emails, where can issues be submitted ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt; &amp;ndash; code coverage, multi variant benchmarking&amp;nbsp;in &lt;a href=&quot;https://ocaml.janestreet.com/ocaml-core/latest/doc/core_bench/index.html&quot;&gt;core-bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stability&lt;/strong&gt; &amp;ndash; OPAM support pining, how stable are the interfaces of libraries ?&lt;/p&gt;
&lt;p&gt;opam tracks compiler constraint, statically analyses the build system from logs (OCamlOT)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Agility&lt;/strong&gt; &amp;ndash; Building a platform is EXHAUSTING. We want to ask &amp;ldquo;WANT IF&amp;rdquo; questions:&amp;nbsp;&lt;a href=&quot;http://gallium.inria.fr/blog/monomorphic_let/&quot;&gt;what if let was monomophic&lt;/a&gt;? what if we removed &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-camlp4/manual002.html&quot;&gt;camlp4&lt;/a&gt;? what is the syntax precedence changes ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Distrusted workflow&lt;/strong&gt; &amp;ndash; build on git, distributing tasks between 3 actors: Author (library writers), OCamlOL workers and maintainers. As we become more stable we move from staging to stable to inclusion in the platform.&lt;/p&gt;
&lt;p&gt;We are building a tussle, we want to launch a game in janurary and let people put standard libraries into the ring, running OCamlOT to discover the winner&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No clear winner&lt;/strong&gt;: Lwt &amp;ndash; portability, Batteries &amp;ndash; free of syntax extensions, core &amp;ndash; comprehensive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;16:36 &amp;nbsp;Discussion over the battle of the standard libraries and talk feedback&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C: talk is a bit long, not sure what to cut..&lt;/p&gt;
&lt;p&gt;C: OPAM was dicussed last year at OCaml2013, we want to update everyone and follow on without overlapping too much&lt;/p&gt;
&lt;p&gt;Q: Haven&amp;rsquo;t we already decided&amp;nbsp;on JS&amp;rsquo;s core ?&lt;/p&gt;
&lt;p&gt;A: No, we use all of them, i.e. Mirage used lwt extensively&lt;/p&gt;
&lt;p&gt;Q: What if we don&amp;rsquo;t want any of the new standard libraries ? maybe I just want to use domain specific libraries from OPAM as and when I need them&lt;/p&gt;
&lt;p&gt;A: We are not forcing the new standard libraries on anyone, but they are useful for beginners, nice to have consistent style, interoperability and few open statements e.g. Open Core.Std&lt;/p&gt;
&lt;p&gt;Q: What if I have already decided which standard library I want to use ?&lt;/p&gt;
&lt;p&gt;A: Again we are not forcing standard libraries on anyone, we are just trying to force effort more directly.&amp;nbsp;OCaml tools will always be standard library agnoctic&lt;/p&gt;
&lt;p&gt;C: the diagram of OCamlOT is confustion&lt;/p&gt;
&lt;p&gt;C: how to not overlap with david talks&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;16:41 Davids talk on OCamlOT&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;State for the open source OCaml community&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Outline:&lt;/strong&gt; what is quality software?&amp;nbsp;what is the user experience?&amp;nbsp;what is feedback loop for package authors?&amp;nbsp;How do we represent the thing underneath this all?&amp;nbsp;utopian&amp;nbsp;future ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quality:&lt;/strong&gt; Work on every core (ANIL: We want multi-core &lt;img src=&quot;http://hh360.user.srcf.net/blog/wp-includes/images/smilies/icon_razz.gif&quot; alt=&quot;:P&quot; class=&quot;wp-smiley&quot;/&gt; ), consistent results: work or die nicely with obvious solution, not more &amp;ldquo;What have I forgotten?&amp;rdquo; questions, it should just tell you. We need addictive actions (not sure what they are), consistency, quality functions&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Universal concerns:&lt;/strong&gt; compiler hypothesis &amp;ldquo;what if&amp;rdquo; questions (anil already said this), build system hypotheses &amp;ldquo;what strange assumuptions is the buid system making?&amp;rdquo;, package manager hypothesis&amp;nbsp;and environmner&amp;nbsp;hypothesis&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Workflow:&lt;/strong&gt; Make a pull request, curator observes the proposal, predict the future, proposes amendments, feedback loop and finally agreement is reached. Core is release weekly for example, we are trying to work like linux kernal patches&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New workflow:&lt;/strong&gt; promote&amp;nbsp;health of OCaml community,&amp;nbsp;preaching&amp;nbsp;compatibility, &amp;ldquo;observe, orient, decide and act&amp;rdquo;, Computer assisted curator will help a human, to run the loop faster, human can pose questions to the computer assisted curator e.g &amp;nbsp;&amp;ldquo;will this run on ARM ?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repository Observation:&lt;/strong&gt; github binding with web hooks but we are not tied to github. We&amp;nbsp;merge into the world and we need dependences from each possible users&amp;nbsp;prospective of the world&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependency Orientation:&lt;/strong&gt; capabilities with environmental&amp;nbsp;dependances, packages with constriant-based&amp;nbsp;dependencies, repositories&amp;nbsp;with revision dependencies and artifact dependencies. example of the android repo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Triage Decisions:&lt;/strong&gt; taking plain text error and parsing them into categories such as unsatisfiability (can&amp;rsquo;t have these two packages), dependencies (if my dependency is broken, then I am broken), transient (network down), system, metadata, external dependences (you forgot to write a dependency), build errors and a combo of many of the above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State Action:&lt;/strong&gt; commit intention, build, error analysis and buid results&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Internet res:&lt;/strong&gt; The agents negotiates over REST API on HTTPS, independent metadata layers (not sure about this) ,everythings an s-exp, branch consistent store explained, like git or&amp;nbsp;&lt;a href=&quot;https://github.com/samoht/irminsule&quot;&gt;Irminsule&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Current state:&lt;/strong&gt; github web hooks, we are conservative so&amp;nbsp;one byte changes and we rebuild everything, basic triage heuristics completed, no amendment are proposed by the system atm, we don&amp;rsquo;t commit the outcome but the evidence, simple reactions to results, a website with green and red boxes in the large table&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;History:&lt;/strong&gt; we have found&amp;nbsp;lots of metadata issues&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;, many packages bugs, some tool bugs like a non relocatable&lt;/span&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;&amp;nbsp;compiler and &lt;/span&gt;ocamlbuild&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt; PATH &lt;/span&gt;ignorer&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;, we currently have 30+ &lt;/span&gt;x84-64&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt; 30+&lt;/span&gt;x84-32&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;, 8 ARMs , many&amp;nbsp;&lt;/span&gt;Linux&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;&amp;nbsp;distros&lt;/span&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;&amp;nbsp;, &lt;/span&gt;dead&amp;nbsp;&lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt;, panicking&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;&amp;nbsp;*nix &lt;/span&gt;filesystems&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt; and lots of people have set warning as error&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future:&lt;/strong&gt;&amp;nbsp;opamfu for DAG analysis, schema&amp;nbsp;migration overhead, lower overhead for administrating exotic workers contributed to OCamlOT, we need to authenticate machines using ocaml-sodium, we need more advanced automation, proposed&amp;nbsp;amendments, lets have a dialogue, better website integration, benchmarking your upgrades (how much improves cost), run experiments on whole OPAM universe&amp;nbsp;with differential analysis and VM-based test system, to specific the worker finely.&lt;/p&gt;
&lt;p&gt;What I think quantity is, vision of the future, how its represented underneath&amp;nbsp;and what&amp;rsquo;s next,&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Discussions&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;C: that was 20mins, feedback to David regarding content to be cut,&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;17:23 Ctypes by Jeremy&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is a update not a practice talk&lt;/p&gt;
&lt;p&gt;An examples of puts from C, how we can write no C and link in OCaml,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEW things in Ctypes:&lt;/strong&gt;&lt;br/&gt;
prettyprinting &amp;ndash; for C types and C values, making it much eaiser to examine values for debuygging&lt;/p&gt;
&lt;p&gt;biarray &amp;ndash; support for lump of C memory&lt;/p&gt;
&lt;p&gt;More type &amp;ndash; nullable string, complex numbers&lt;/p&gt;
&lt;p&gt;String conversions &amp;ndash; much faster&lt;/p&gt;
&lt;p&gt;Memory management issues &amp;ndash; ctypes now gives the programmer more control over lifetime of OCaml passed to C,&lt;/p&gt;
&lt;p&gt;finaliser &amp;ndash; which you can attach to memory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;stub generation &amp;ndash; instead of dynamically binding, it will generate stub code to act to the API&lt;/p&gt;
&lt;p&gt;capability-style&amp;nbsp;memory&amp;nbsp;safty &amp;ndash; one rogue pointer in a C library, can cause hell, loading each C library in a seperate address space so i library can only kill itself, you can then even&amp;nbsp;run on C library on a foreign host or on a virtual machine&lt;/p&gt;
&lt;p&gt;static strcut/union layout &amp;ndash; checking layout of structures and unions against the API&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;17:40 Amir demo of&amp;nbsp;ocaml-resdesign.githuib.io/docs/opam,&lt;/span&gt;&lt;/strong&gt; (its look great :))&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://hh360.user.srcf.net/blog/wp-content/uploads/2013/09/ocaml.png&quot;&gt;&lt;img src=&quot;http://hh360.user.srcf.net/blog/wp-content/uploads/2013/09/ocaml-253x300.png&quot; class=&quot;size-medium wp-image-363 aligncenter&quot; alt=&quot;ocaml&quot; width=&quot;253&quot; height=&quot;300&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</content><id>http://hh360.user.srcf.net/blog/?p=352</id><title type="text">OCaml Monthly Meeting – Live Blog</title><updated>2013-09-17T12:54:53+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="http://anil.recoil.org/2013/09/16/camlpdf-the-end-of-sucky-pdf-tools.html" rel="alternate"/><contributor><uri>http://anil.recoil.org/feeds/atom-ocaml.xml</uri><name>Anil Madhavapeddy</name></contributor><content type="html">&lt;p&gt;The fine folks at O&amp;rsquo;Reilly have been proof-reading the &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; book
that I&amp;rsquo;ve been working on.  My heart leapt with joy when the copyeditor commented that she thought it was very well written,
but my joy was short-lived when it turns out that all her comments were safely ensconced as PDF comments.  A few
hundreds comments that required a response from us, too.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;No problem! MacOS X Preview can handle these!&amp;rdquo;&lt;/em&gt; was of course my first response, but it turns out it&amp;rsquo;s totally
broken with PDF notes.  The first note that you select will appear as the content of all the other subsequent notes.
Yaron Minsky then experimented with Adobe Acrobat, which I&amp;rsquo;ve sworn never to install again after an unfortunate
incident involving the uninstaller a couple of years ago.  That turned out to be incredibly slow.  I tried a
few open-source tools such as &lt;a href=&quot;http://en.wikipedia.org/wiki/Skim_(software)&quot;&gt;Skim&lt;/a&gt; which, while otherwise an
excellent bit of software, couldn&amp;rsquo;t render these particular annotations.&lt;/p&gt;

&lt;table style=&quot;float:right; padding: 10px&quot;&gt;
&lt;tr&gt;&lt;td&gt;
&lt;a href=&quot;http://anil.recoil.org/images/anil-jumping-acropolis.jpg&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/anil-jumping-acropolis-thumb.jpg&quot; style=&quot;float:right&quot; width=&quot;207&quot;/&gt;&lt;/a&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td width=&quot;210&quot;&gt;&lt;i&gt;&lt;small&gt;I &lt;a href=&quot;http://www.theguardian.com/media/mind-your-language/2012/jan/29/literally-a-much-misused-word&quot;&gt;literally&lt;/a&gt; jumped off my seat upon discovering cpdf.&lt;/small&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Meanwhile, John Whitington just announced the release of the &lt;a href=&quot;http://coherentpdf.com/blog/?p=68&quot;&gt;Coherent PDF&lt;/a&gt; command-line tools.
Since these are all written in OCaml (and have been developed over quite a few years now), he also sent in an
OPAM &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/pull/977&quot;&gt;pull request&lt;/a&gt; to add it to the database.
And most conveniently, this ended up solving my little PDF conundrum in less than an hour of hacking, and
has almost cured me of my lifelong fear of dealing with anything in a PDF-like format.  Here&amp;rsquo;s what I did:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I installed the tools via &lt;code&gt;opam install cpdf&lt;/code&gt;.  This installed the library but not the binary (&lt;a href=&quot;https://github.com/OCamlPro/opam-repository/pull/1100&quot;&gt;swiftly fixed&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reading the license told me that it&amp;rsquo;s for non-commercial use only, so I bought a license from the
&lt;a href=&quot;http://coherentpdf.com&quot;&gt;Coherent PDF&lt;/a&gt; website (a bargain price, given how much it does!).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I ran &lt;code&gt;cpdf -list-annotations&lt;/code&gt; over the PDF, and it dumped out all the comments as a text file to stdout.
This wasn&amp;rsquo;t quite enough for me, since I needed to match the annotation to a page number.  But since
John has released it as open-source, I forked the repository and patched the support directly into the
command-line tools, and sent a &lt;a href=&quot;https://github.com/johnwhitington/cpdf-source/pull/2&quot;&gt;pull request&lt;/a&gt;
back over to John.  Since it&amp;rsquo;s under a non-standard license, I decided to place my patch in the public
domain to make it easier for him to accept it if he chooses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My co-authors can just run &lt;code&gt;opam pin cpdf git://github.com/avsm/cpdf-source#annotation-page-numbers&lt;/code&gt;
to pin their local copy of CPDF to my forked branch in their own OPAM installations, and easily use my
copy until John gets a chance to integrate my changes properly upstream.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Total time including this blog post: 40 minutes. Now, onto fixing the author
responses comments for Real World OCaml now.  I&amp;rsquo;m so happy to have &lt;code&gt;cpdf&lt;/code&gt; as a
simple, hackable PDF utility, as it does things like page combining and rotations
that have always been a little flaky in other tools for me.  It&amp;rsquo;s the
&lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;Pandoc&lt;/a&gt; of PDFs!&lt;/p&gt;
</content><id>http://anil.recoil.org/2013/09/16/camlpdf-the-end-of-sucky-pdf-tools.html</id><title type="text">Camlpdf, the first good command-line PDF tool I've found</title><updated>2013-09-16T01:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=153" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;This is a quick run-through of how I set up my development environment in vim:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install&amp;nbsp;pathogen.vim&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;mkdir&lt;/span&gt; &lt;span style=&quot;color: #660033;&quot;&gt;-p&lt;/span&gt; ~&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;.vim&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;autoload ~&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;.vim&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;bundle; \
curl &lt;span style=&quot;color: #660033;&quot;&gt;-Sso&lt;/span&gt; ~&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;.vim&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;autoload&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;pathogen.vim \
    https:&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;//&lt;/span&gt;raw.github.com&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;tpope&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;vim-pathogen&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;master&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;autoload&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;pathogen.vim&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Add the following to ~/.vimrc:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;vim&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #804040;&quot;&gt;execute&lt;/span&gt; pathogen#infect&lt;span style=&quot;color: #000000;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #804040;&quot;&gt;syntax&lt;/span&gt; &lt;span style=&quot;color: #25BB4D;&quot;&gt;on&lt;/span&gt;
&lt;span style=&quot;color: #804040;&quot;&gt;filetype&lt;/span&gt; &lt;span style=&quot;color: #25BB4D;&quot;&gt;plugin&lt;/span&gt; &lt;span style=&quot;color: #25BB4D;&quot;&gt;indent&lt;/span&gt; &lt;span style=&quot;color: #25BB4D;&quot;&gt;on&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Install Syntastic &lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;cd&lt;/span&gt; ~&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;.vim&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;bundle
&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;git clone&lt;/span&gt; https:&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;//&lt;/span&gt;github.com&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;scrooloose&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;syntastic.git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Then quit vim and used :Helptags to check installs so far have worked.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install Merlin&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family:monospace;&quot;&gt;opam switch 4.01.0dev+trunk
opam update
opam upgrade
opam &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;install&lt;/span&gt; merlin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Add the following to ~/.vimrc&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;vim&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #804040;&quot;&gt;set&lt;/span&gt; &lt;span style=&quot;color: #668080;&quot;&gt;rtp&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;+&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;~/.&lt;/span&gt;opam&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;4&lt;span style=&quot;color: #000000;&quot;&gt;.&lt;/span&gt;01&lt;span style=&quot;color: #000000;&quot;&gt;.&lt;/span&gt;0dev&lt;span style=&quot;color: #000000;&quot;&gt;+&lt;/span&gt;trunk&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;share&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;ocamlmerlin&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;vim
&lt;span style=&quot;color: #000000;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #804040;&quot;&gt;set&lt;/span&gt; &lt;span style=&quot;color: #668080;&quot;&gt;rtp&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;+&lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt;~/.&lt;/span&gt;opam&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;4&lt;span style=&quot;color: #000000;&quot;&gt;.&lt;/span&gt;01&lt;span style=&quot;color: #000000;&quot;&gt;.&lt;/span&gt;0dev&lt;span style=&quot;color: #000000;&quot;&gt;+&lt;/span&gt;trunk&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;share&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;ocamlmerlin&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;vimbufsync
&lt;span style=&quot;color: #804040;&quot;&gt;let&lt;/span&gt; g&lt;span style=&quot;color: #000000;&quot;&gt;:&lt;/span&gt;syntastic_ocaml_checkers=&lt;span style=&quot;color: #000000;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #C5A22D;&quot;&gt;'merlin'&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;:SyntasticInfo will return a list of syntax checkers available to Syntastic, check that this now includes merlin&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install OCP Indent&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family:monospace;&quot;&gt;opam &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;install&lt;/span&gt; ocp-indent&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Add the following to ~/.vimrc&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;vim&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #804040;&quot;&gt;autocmd&lt;/span&gt; &lt;span style=&quot;color: #25BB4D;&quot;&gt;FileType&lt;/span&gt; ocaml source &lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;home&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;heidi&lt;span style=&quot;color: #000000;&quot;&gt;-&lt;/span&gt;ann&lt;span style=&quot;color: #000000;&quot;&gt;/.&lt;/span&gt;opam&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;4&lt;span style=&quot;color: #000000;&quot;&gt;.&lt;/span&gt;01&lt;span style=&quot;color: #000000;&quot;&gt;.&lt;/span&gt;0dev&lt;span style=&quot;color: #000000;&quot;&gt;+&lt;/span&gt;trunk&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;share&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;typerex&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;ocp&lt;span style=&quot;color: #000000;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #25BB4D;&quot;&gt;indent&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;/&lt;/span&gt;ocp&lt;span style=&quot;color: #000000;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #25BB4D;&quot;&gt;indent&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.&lt;/span&gt;vim&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

</content><id>http://hh360.user.srcf.net/blog/?p=153</id><title type="text">OCaml Development in Vim</title><updated>2013-09-09T07:51:03+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="http://anil.recoil.org/2013/09/09/ocamlot-autotriaging.html" rel="alternate"/><contributor><uri>http://anil.recoil.org/feeds/atom-ocaml.xml</uri><name>Anil Madhavapeddy</name></contributor><content type="html">&lt;p&gt;The new release of OCaml (4.01.0) was just &lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2013-09/msg00173.html&quot;&gt;announced&lt;/a&gt;!
The runup to a major release like this is normally a frantic time to test that
your favourite applications don&amp;rsquo;t break unexpectedly due to some incompatible
language feature.  This release cycle has a little different though, as we&amp;rsquo;ve
been working hard on using the &lt;a href=&quot;http://opam.ocamlpro.com&quot;&gt;OPAM&lt;/a&gt; package
database to build an online regression testing infrastructure to mechanize much
of this process.&lt;/p&gt;

&lt;p&gt;I wanted to share some of what OCamlot does today, some of the results from
about 3 months worth of runs that may help OCaml package maintainers, and
finally where we&amp;rsquo;re going with future developments.  This work has been
done in collaboration with &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/people/sheets.html&quot;&gt;David Sheets&lt;/a&gt; (who
built the OCamlot daemon) and the OPAM team ably led by &lt;a href=&quot;http://gazagnaire.org&quot;&gt;Thomas Gazagnaire&lt;/a&gt; at &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt;.
We&amp;rsquo;ve also had a lot of help from &lt;a href=&quot;https://github.com/diml&quot;&gt;Jeremie Dimino&lt;/a&gt; and &lt;a href=&quot;https://github.com/ysulsky&quot;&gt;Yury Sulsky&lt;/a&gt; from Jane Street
and &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; and &lt;a href=&quot;http://jon.recoil.org&quot;&gt;Jon Ludlam&lt;/a&gt; from Citrix acting as guinea pigs for their respective regular releases of the &lt;a href=&quot;https://github.com/janestreet&quot;&gt;Core&lt;/a&gt;
and &lt;a href=&quot;https://github.com/xapi-project&quot;&gt;Xen/XAPI&lt;/a&gt; releases to OPAM.&lt;/p&gt;

&lt;h2&gt;Towards a truely portable OCaml&lt;/h2&gt;

&lt;p&gt;The upstream OCaml toolchain is built on very UNIX-like principles, with a
number of command-line tools that form a build pipeline.  This process usually
ends with linking the intermediate object files with a &lt;a href=&quot;https://github.com/ocaml/ocaml/tree/trunk/byterun&quot;&gt;runtime library&lt;/a&gt; that provides the
garbage collector and other intrinsic OS functions.&lt;/p&gt;

&lt;p&gt;Given these raw compiler tools, it&amp;rsquo;s very easy to compile OCaml into all
sorts of weird and wonderful architectures.  We&amp;rsquo;ve seen it run on
&lt;a href=&quot;http://www.algo-prog.info/ocaml_for_pic/web/index.php&quot;&gt;8-bit PICs&lt;/a&gt;,
several efficient Javascript backends (originally &lt;a href=&quot;http://jaked.github.io/ocamljs/&quot;&gt;ocamljs&lt;/a&gt; and more recently &lt;a href=&quot;http://ocsigen.org/js_of_ocaml&quot;&gt;js_of_ocaml&lt;/a&gt;),
and of course my own &lt;a href=&quot;http://openmirage.org&quot;&gt;Mirage&lt;/a&gt; Xen unikernel.&lt;/p&gt;

&lt;p&gt;While the compiler tools themselves are quite portable and work on almost any
UNIX-like system, the build system scaffolding around third-party packages is
less portable.  Some features such as C bindings often contribute to build
breakage on some less-used operating systems such as FreeBSD or OpenBSD, as
they usually require probing for header file locations or adding custom &lt;code&gt;CFLAGS&lt;/code&gt;
before building.&lt;/p&gt;

&lt;table width=&quot;90%&quot; align=&quot;center&quot;&gt;
&lt;tr&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/dreamplug-nest-1.jpg&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/dreamplug-nest-1-thumb.jpg&quot; border=&quot;0&quot; width=&quot;200&quot;/&gt;&lt;/a&gt;&lt;br/&gt;Every Internet of Things starts with a tangled pile of ARM Dreamplugs.&lt;/td&gt;
&lt;td width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/sparc-macppc-openbsd-1.jpg&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/sparc-macppc-openbsd-1-thumb.jpg&quot; border=&quot;0&quot; width=&quot;200&quot;/&gt;&lt;/a&gt;&lt;br/&gt;And in our server room, venerable Sparc and PowerPC G4 OpenBSD boxen still live.&lt;/td&gt;
&lt;td style=&quot;vertical-align:bottom&quot; width=&quot;30%&quot; class=&quot;bimg&quot;&gt;&lt;a href=&quot;http://anil.recoil.org/images/macppc-desktop-1.jpg&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/macppc-desktop-1-thumb.jpg&quot; border=&quot;0&quot; width=&quot;200&quot;/&gt;&lt;/a&gt;&lt;br/&gt;Finding older machines is getting tough, but here's &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave's&lt;/a&gt; old iMac G5 running Linux.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Most OCaml developers use x86-based machines and so foreign architectures also
get less day-to-day testing (OCaml has superb support for fast native code
compilation on ARM, PowerPC, Sparc32, and we&amp;rsquo;re working on MIPS64 here as part
of the &lt;a href=&quot;http://www.cl.cam.ac.uk/research/security/ctsrd/cheri.html&quot;&gt;CHERI&lt;/a&gt;
project).&lt;/p&gt;

&lt;p&gt;We want to make sure that OCaml and its package ecosystem works just as well in
the embedded ecosystem as well as it does on vanilla x86 Linux.  This includes running on my
Linux iMac G5, my &lt;a href=&quot;https://wiki.freebsd.org/FreeBSD/arm/Raspberry%20Pi&quot;&gt;FreeBSD Raspberry Pi&lt;/a&gt;, my &lt;a href=&quot;http://www.openbsd.org/beagle.html&quot;&gt;OpenBSD Pandaboard&lt;/a&gt;, or even on a
bytecode-only architecture like an &lt;a href=&quot;http://www.openbsd.org/sparc64.html&quot;&gt;OpenBSD/Sparc64&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the longer term, this paves the way to reliable cross-compiled packages for Windows, &lt;a href=&quot;https://github.com/vouillon/ocaml-android&quot;&gt;Android&lt;/a&gt; and &lt;a href=&quot;http://psellos.com/ocaml/compile-to-iphone.html&quot;&gt;iPhone&lt;/a&gt; (all of which have OCaml ports, but aren&amp;rsquo;t heavily tested with the full package database).  The only practical way to get started on this is by building an automated test infrastructure for OCaml that explores the feature matrix (which eerily for me, happened in the early days of Xen too, via &lt;a href=&quot;http://blogs.citrix.com/2013/08/30/xenserver-automated-testing-and-lab-orchestration-introducing-xenrt/&quot;&gt;XenRT&lt;/a&gt; to stabilize the hypervisor).&lt;/p&gt;

&lt;h3&gt;Why not Jenkins or Travis?&lt;/h3&gt;

&lt;p&gt;When we first started hacking on the OPAM testing infrastructure earlier this
year, I maintained a local &lt;a href=&quot;http://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt; installation that
monitored the repository.  While Jenkins is a superb tool for many continuous
integration tasks, it fell over badly when trying to use it on the non-x86 and
non-Linux (or Windows) operating systems.  Jenkins requires a full Java runtime
stack to be available on each of the client machines, which was taking up more
time to get up and running than a simple OCaml-based client and server that
could compile to both portable bytecode or fast native code.&lt;/p&gt;

&lt;p&gt;The other difficulty with OPAM is selecting which packages actually need to be
tested, as it has a constraint-based package solver that supports expressive
forwards and backwards version restrictions.  While basic tests of the latest
packages worked with Jenkins, we needed to increasingly customize it to
automate interfacing directly with the OPAM libraries and calculating test
schedules based on incoming change requests.&lt;/p&gt;

&lt;p&gt;Another factor that ruled out depending on hosted services such as
&lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis&lt;/a&gt; is that they tend to support x86-only
architectures, whereas we really want to test the full spectrum of CPU
variants supported by OCaml.  This doesn&amp;rsquo;t mean that there&amp;rsquo;s no place for
Travis of course, and in fact Mike Lin has already &lt;a href=&quot;http://blog.mlin.net/2013/02/testing-ocaml-projects-on-travis-ci.html&quot;&gt;made this work&lt;/a&gt;
with OPAM.&lt;/p&gt;

&lt;p&gt;For our full testing needs though,
&lt;a href=&quot;https://github.com/ocamllabs/ocamlot&quot;&gt;OCamlot&lt;/a&gt; was born: an OCaml client
and server system which coordinates different versions of the compiler,
architectures and OPAM versions and records the results for triage and
fixing issues.&lt;/p&gt;

&lt;h3&gt;Running OCamlot&lt;/h3&gt;

&lt;p&gt;The latest alpha release of OCamlot is pretty straightforward to run locally,
if you are so inclined.  First start a server process:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/ocamllabs/ocamlot
$ cd ocamlot
$ ./install_deps.sh
$ oasis setup
# (edit lib/config.ml if you need to change ports)
$ make
$ ./_build/lib/ocamlot_cmd.native --help
$ ./_build/lib/ocamlot_cmd.native serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server listens on localhost only by default, and normally an SSL-to-TCP
proxy is deployed to listen for external connections (I use
&lt;a href=&quot;https://github.com/bumptech/stud&quot;&gt;stud&lt;/a&gt;, which is fast and easy to configure).&lt;/p&gt;

&lt;p&gt;The OCamlot clients require a local compilation of OCaml, and they autodetect
their local CPU architecture and operating system.  I&amp;rsquo;ve put a &lt;a href=&quot;https://gist.github.com/avsm/6393649&quot;&gt;gist
script&lt;/a&gt; together that automates this on
most Linux and BSD variants.  Just customize the top variables (set &lt;code&gt;MAKE&lt;/code&gt; to
&lt;code&gt;gmake&lt;/code&gt; under BSD) and set the hostname to your server process.&lt;/p&gt;

&lt;h3&gt;The results repository and auto-triage&lt;/h3&gt;

&lt;p&gt;Once the client is running, the server dispatches tasks from its test matrix,
which is calculated from the OPAM package repository.  The server maintains a
&lt;a href=&quot;https://github.com/ocamlot/ocamlot-state&quot;&gt;results repository&lt;/a&gt;, which is a Git
filesystem database that records the build results and logs via an
s-expression per task.  It also uses &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;Cohttp&lt;/a&gt;
to serve up the results for a web browser.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very convenient using Git repositories like this since we can use GitHub
(or any other Git host) to coordinate and record results, and restart the
server without needing any local state.  So convenient, in fact, that Thomas
and I have been working on a more formal engine for this called
&lt;a href=&quot;https://github.com/samoht/irminsule&quot;&gt;Irminsule&lt;/a&gt; (more on that in a later post,
though).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s almost unheard of to have a full OCamlot run go by without some errors,
and so David put together the &lt;code&gt;ocamlot triage&lt;/code&gt; command.  This takes the
state repository and runs a set of regular expressions over it to classify them
into common errors.  The full file is
&lt;a href=&quot;https://github.com/ocamllabs/ocamlot/blob/master/lib/result.ml&quot;&gt;here&lt;/a&gt;, but an
excerpt should give you an idea of what we look for:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* ordered minor to severe *)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analysis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solver&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver_error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dep&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analysis&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Transient&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transient_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ext_dep&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext_dep_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_error&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Multiple&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analysis&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sexp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The errors are ordered by severity to aid in color highlighting. They start with
OPAM solver failures and dependency failures (e.g. due to trying to build a
package that requires a specific OCaml version that isn&amp;rsquo;t available), and
move onto missing package dependencies or system libraris.&lt;/p&gt;

&lt;h2&gt;Testing the run up to OCaml 4.01&lt;/h2&gt;

&lt;p&gt;Of course, running all these tests is useless without taking action on the results. I&amp;rsquo;ve been
keeping track of them in &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/issues/1029&quot;&gt;issue #1029&lt;/a&gt;.
The nice thing about GitHub issues is that when this bug is referenced in commits (even in
other repositories) a cross-reference shows up on that webpage and lets everything be tracked
nicely.&lt;/p&gt;

&lt;p&gt;So what were the most common failures in the runup to 4.01, and what should you avoid when
writing your own code?&lt;/p&gt;

&lt;h3&gt;Different standard library module signatures&lt;/h3&gt;

&lt;p&gt;There have been a few changes to some of the functor signatures in the standard library, such as
adding a &lt;code&gt;find&lt;/code&gt; function to Set (&lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5864&quot;&gt;mantis #5864&lt;/a&gt;).
A third-party library that tries to match the functor signature will fail to compile with a type error, such
as this one below for &lt;a href=&quot;http://anil.recoil.org/feeds/atom-ocaml.xml&quot;&gt;zipperposition.0.2&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: The implementation src/ptset.ml
       does not match the interface src/ptset.cmi:
       ...
       In module Big:
       The field `find' is required but not provided
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The relevant code in &lt;code&gt;zipperposition&lt;/code&gt; makes it clear what the problem is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Big-endian Patricia trees *)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Big&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This particular bug was &lt;a href=&quot;https://github.com/c-cube/zipperposition/issues/1&quot;&gt;reported
upstream&lt;/a&gt;, and the fix
requires implementing the &lt;code&gt;find&lt;/code&gt; function for the Patricia-tree-based &lt;code&gt;Set&lt;/code&gt;.
Since the OPAM package will always be broken on OCaml 4.01, it was marked with
a &lt;a href=&quot;https://github.com/ocamlpro/opam-repository/commit/e45530205987f67d4316a958446d3dcc954b19ec&quot;&gt;compiler version constraint&lt;/a&gt;
to prevent it being selected for installation under that compiler.  When a new
version with the fix is uploaded to OPAM, it will always be selected in
preference to this broken one.&lt;/p&gt;

&lt;p&gt;One other 4.01 change that temporarily broke most of the bigger networking libraries such as
&lt;a href=&quot;https://github.com/janestreet/core&quot;&gt;Core&lt;/a&gt;, &lt;a href=&quot;https://ocsigen.org/lwt&quot;&gt;Lwt&lt;/a&gt; and &lt;a href=&quot;http://batteries.forge.ocamlcore.org&quot;&gt;Batteries&lt;/a&gt;
was the addition of the &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=5568&quot;&gt;close-on-exec&lt;/a&gt; flag to the &lt;code&gt;Unix&lt;/code&gt; module.
This change only affects upstream packages that redefine the UNIX module for their own purposes (such as adding an asynchronous I/O monad as Lwt does),
hence it affects the standard library replacement packages.&lt;/p&gt;

&lt;p&gt;The fix here was to locally add patches into the relevant OPAM packages to
immediately unbreak things when the fix when into the 4.01 branch of the
compiler, and notify upstream maintainers to release new versions of their
projects.  There&amp;rsquo;s a subtle problem here: when a patch such as this goes into
an unreleased branch of the compiler (such as &lt;code&gt;4.01.0dev&lt;/code&gt;), it&amp;rsquo;s hard to
reliably detect if the user has got the very latest version of the compiler or
not.
If you do have problems like this in the future, try recompiling via &lt;code&gt;opam switch reinstall &amp;lt;version&amp;gt;&lt;/code&gt; to the latest branch.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very useful to be able to drop in bleeding-edge compiler tools into the
OPAM repository using compiler constraints like this.  For an example, see
Alain Frisch&amp;rsquo;s &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/blob/master/packages/ppx_tools.0.1/opam&quot;&gt;ppx_tools&lt;/a&gt;,
that require the very latest 4.02dev trunk release to compile his new
extension-points feature.&lt;/p&gt;

&lt;h3&gt;Multiple object definitions&lt;/h3&gt;

&lt;p&gt;OCaml 4.01 also restricts multiple method definitions with the same name in the
same object.  This leaves only inheritance as the way to override method names,
but some packages such as OCamlnet and Mlorg had minor uses of the old mechanism.&lt;/p&gt;

&lt;p&gt;You can see this by using &lt;code&gt;opam switch&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ opam switch 4.00.1
$ eval `opam config env`
$ ocaml
# object method x = 1 method x = 2 end;;
- : &amp;lt; x : int &amp;gt; = &amp;lt;obj&amp;gt;
$ opam switch 4.01.0
$ eval `opam config env`
$ ocaml
# object method x = 1 method x = 2 end;;
Error: The method `x' has multiple definitions in this object
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;New warnings, and the dreaded warnings-as-errors&lt;/h3&gt;

&lt;p&gt;After a decade of being deprecated, the &lt;code&gt;(or)&lt;/code&gt; and &lt;code&gt;(&amp;amp;)&lt;/code&gt; operators
finally had a warning turned on by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ocaml
# true or false;;
Warning 3: deprecated feature: operator (or); you should use (||) instead
- : bool = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This wouldn&amp;rsquo;t normally be so bad, except that a surprising number of
released packages also turn warnings into fatal errors (by using the
&lt;code&gt;-w @&lt;/code&gt; flags explained in the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/comp.html&quot;&gt;manual&lt;/a&gt;).
Warnings-as-errors is extremely useful when &lt;em&gt;developing&lt;/em&gt; code but is
rather harmful in released code, since a future compiler can choose
to emit new warnings that aren&amp;rsquo;t necessarily fatal bugs.&lt;/p&gt;

&lt;p&gt;Packages that failed like this include ocamlgraph, spotlib, quickcheck,
OPA, Lablgtk-extras and many more.  Please do make an effort to not
leave this option turned on in your packages, or else it makes life
more difficult for testing your code on bleeding edge versions of the
compiler in the future.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth noting here that OCaml 4.01 has introduced a fair number
of new and very useful warnings across a number of areas, mainly to do
with detecting unexpected ambiguation or shadowing of values.  I&amp;rsquo;ll
cover more on these in a future post about the new 4.01 goodies.&lt;/p&gt;

&lt;h3&gt;External system dependencies&lt;/h3&gt;

&lt;p&gt;While there any many packages in OPAM that are pure OCaml, there are
also a substantial number that require other system tools to be installed.
The Lablgtk GUI library obviously requires the C &lt;code&gt;gtk&lt;/code&gt; library to be
installed.&lt;/p&gt;

&lt;p&gt;Determining if these libraries are installed on a particular OS is
well beyond the scope of OPAM, as there are almost as many package
managers as there are operating systems.  However, it&amp;rsquo;s important for
automated testing and user-friendly error messages to have some notion
of detecting if the environment is ready for the OCaml package or not.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re solving this by using a &lt;code&gt;depexts&lt;/code&gt; field in OPAM that consists
of a set of tags that identify OS-specific packages that need to be
present.  A separate script can query these tags from OPAM and do the
OS-specific tests or installation.&lt;/p&gt;

&lt;p&gt;For example, here&amp;rsquo;s the &lt;code&gt;sqlite3-ocaml&lt;/code&gt; OPAM description:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;opam-version: &amp;quot;1&amp;quot;
maintainer: &amp;quot;markus.mottl@gmail.com&amp;quot;
build: [
  [&amp;quot;ocaml&amp;quot; &amp;quot;setup.ml&amp;quot; &amp;quot;-configure&amp;quot;]
  [&amp;quot;ocaml&amp;quot; &amp;quot;setup.ml&amp;quot; &amp;quot;-build&amp;quot;]
  [&amp;quot;ocaml&amp;quot; &amp;quot;setup.ml&amp;quot; &amp;quot;-install&amp;quot;]
]
remove: [ [&amp;quot;ocamlfind&amp;quot; &amp;quot;remove&amp;quot; &amp;quot;sqlite3&amp;quot;] ]
depends: [&amp;quot;ocamlfind&amp;quot;]
depexts: [
  [ [&amp;quot;debian&amp;quot;  ] [ &amp;quot;libsqlite3-dev&amp;quot;]    ]
  [ [&amp;quot;freebsd&amp;quot; ] [ &amp;quot;database/sqlite3&amp;quot;]  ]
  [ [&amp;quot;openbsd&amp;quot; ] [ &amp;quot;database/sqlite3&amp;quot;]  ]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;depexts&lt;/code&gt; field here lists APT package for Debian, and the ports
tree locations for FreeBSD and OpenBSD.  It could also list more specialised
tags for particular versions of an OS.  You can query this from OPAM
as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ opam install -e debian sqlite3-ocaml
libsqlite3-dev
$ opam install -e openbsd sqlite3-ocaml
database/sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OCamlot therefore needs to query the &lt;code&gt;depexts&lt;/code&gt; field from the package and
run the right &lt;code&gt;apt&lt;/code&gt; or &lt;code&gt;pkg_add&lt;/code&gt; commands.  I&amp;rsquo;ll write about this in more
detail when it&amp;rsquo;s fully baked, as we&amp;rsquo;ve modified the semantics of the tag
querying between OPAM 1.0 and OPAM 1.1 to make it easier to use in OCamlot.&lt;/p&gt;

&lt;h3&gt;Portable shell scripts&lt;/h3&gt;

&lt;p&gt;Once we&amp;rsquo;ve gotten past the hurdle of the compiler version causing failures, there is the
small matter of testing non-Linux operating systems, as well as non-x86
CPU architectures.  The &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/issues/1029&quot;&gt;#1029 overview&lt;/a&gt;
lists many of these failures under the Portability section.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.openbsd.org&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/ppuf200X181.gif&quot; style=&quot;float:right&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Damien Doligez made some excellent points about how to write &lt;a href=&quot;http://gallium.inria.fr/blog/portable-conditionals-in-makefiles/&quot;&gt;portable
Makefiles&lt;/a&gt;
that works across both GNU and BSD makes.  This is why the carefully crafted
OCaml Makefiles do not require GNU make to be installed when compiling on
FreeBSD or OpenBSD (MacOS X gave up the fight a long time ago and installs GNU
make as its default &lt;code&gt;make&lt;/code&gt; command).&lt;/p&gt;

&lt;p&gt;OPAM tries to help out BSD by providing a &lt;code&gt;make&lt;/code&gt; macro in &lt;code&gt;opam&lt;/code&gt; files that
is substituted with either &lt;code&gt;&amp;quot;make&amp;quot;&lt;/code&gt; (by default) or &lt;code&gt;&amp;quot;gmake&amp;quot;&lt;/code&gt; (for BSD).
While this works for for the toplevel invocation of the Makefile, it fails
if the Makefile recursively invokes further targets without using the &lt;code&gt;$(MAKE)&lt;/code&gt;
variable instead of directly calling the command.
Patching these sorts of things is easy but tedious: see the &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/blob/master/packages/facile.1.1/files/bsdmake.patch&quot;&gt;patchfile&lt;/a&gt; for the
Facile constraint programming library for an example.&lt;/p&gt;

&lt;p&gt;The real problem here, of course, is that package maintainers cannot be reasonably
expected to test their code on systems that they don&amp;rsquo;t normally use&amp;ndash;if we demanded
perfect portability to be present in the main OPAM repository, we would&amp;rsquo;t get
any submissions!&lt;/p&gt;

&lt;p&gt;OCamlot automates this nicely though, by finding lots of portability bugs
automatically, and maintainers are by-and-large very responsive when we report
the problem upstream.&lt;/p&gt;

&lt;h2&gt;The emerging distributed workflow&lt;/h2&gt;

&lt;p&gt;The big drawback to OCamlot in its current form is the amount of triage effort
it puts on the OPAM maintainers.  The package database has now exceeded 500
packages in just a short few months, and has over 1500 unique versions that
all need build testing and more accurate constraints.  The wider community has
been &lt;em&gt;really&lt;/em&gt; keen to participate in helping with triage (just look at all the
other people that leapt in on &lt;a href=&quot;https://github.com/OCamlPro/opam-repository/issues/1029&quot;&gt;bug #1029&lt;/a&gt;),
so its our immediate priority to make OCamlot more transparent for people that
want to use it to improve their own packages, and in the future also use it
to test various hypotheses about all the available open-source OCaml code
(see Jacques&amp;rsquo; experiment with &lt;a href=&quot;http://gallium.inria.fr/blog/monomorphic_let/&quot;&gt;monomorphic let&lt;/a&gt; as
an example of something that can benefit from wider automated compilation).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll talk more about how we&amp;rsquo;re solving this in my upcoming &lt;a href=&quot;http://ocaml.org/meetings/ocaml/2013/&quot;&gt;OCaml 2013
Workshop&lt;/a&gt; talk about the Platform.  I
don&amp;rsquo;t want spoil it too much, but it involves a lovely distributed Git
workflow, an enhanced &lt;a href=&quot;https://github.com/OCamlPro/opam2web&quot;&gt;opam2web&lt;/a&gt;, and a
brand new metadata overlay system for OPAM that lets us enhance the package
database with extra information such as statistics, portability and test
results, but without polluting the main Git repository with all this extra
non-essential data.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re really curious to know right now, then you can see the outline of the
new system at Amir&amp;rsquo;s &lt;a href=&quot;http://amirchaudhry.com/wireframe-demos-for-ocamlorg/&quot;&gt;new ocaml.org
wireframes&lt;/a&gt; blog post,
where Part III contains the continuous integration workflow.  A lot of infrastructure
work has gone into building all of this over the summer, and now it&amp;rsquo;s all
starting to be deployed in a very satisfying way&amp;hellip;&lt;/p&gt;
</content><id>http://anil.recoil.org/2013/09/09/ocamlot-autotriaging.html</id><title type="text">OCamlot--exploring the edges of OPAM packages</title><updated>2013-09-09T01:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2013/08/31/option-handling-with-ocaml-polymorphic-variants/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;After we &lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/&quot;&gt;selected OCaml&lt;/a&gt; as the new language for 0install, I&amp;rsquo;ve been steadily converting the old Python code across. We now have more than 10,000 lines of OCaml, so I thought it&amp;rsquo;s time to share what I&amp;rsquo;ve learnt.&lt;/p&gt;

&lt;p&gt;OCaml is actually a pretty small language. Once you&amp;rsquo;ve read the short &lt;a href=&quot;http://ocaml.org/tutorials/&quot;&gt;tutorials&lt;/a&gt; you know most of the language. However, I did skip one interesting feature during &lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/20/replacing-python-round-2/&quot;&gt;my first attempts&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are also &amp;ldquo;polymorphic variants&amp;rdquo; which allow the same field name to be used in different structures, but I haven&amp;rsquo;t tried using them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve since found a good use for these for handling command-line options&amp;hellip;&lt;/p&gt;



&lt;h2&gt;The problem&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;0install&lt;/code&gt; command has many subcommands (&lt;code&gt;0install run&lt;/code&gt;, &lt;code&gt;0install download&lt;/code&gt;, etc), which accept different, but overlapping, sets of options. Running a command happens in two phases: first we parse the options, then we pass them to a handler function. We split the parsing and handling because the tab-completion and help system also need to know which options go with which command.&lt;/p&gt;

&lt;p&gt;Using plain (non-polymorphic) variants I originally implemented it a bit like this (simplified). I had a single type which listed all the possible options:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zi_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Refresh&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;(* --refresh *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;(* --show *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wrapper&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;(* --wrapper=echo *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Each command handler takes a list of options and processes them:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;ListLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;(* can't happen *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* use refresh/wrapper... *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_download&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;ListLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;(* can't happen *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* use refresh/show... *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Each handler function has the same type: &lt;code&gt;zi_option list -&amp;gt; unit&lt;/code&gt; (they take a list of options and return nothing).&lt;/p&gt;

&lt;p&gt;Finally, there is a table of sub-commands, giving the parser and handler for each one:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;run&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;download&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_download&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_download&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;But those &lt;code&gt;assert false&lt;/code&gt; lines are worrying. An &lt;code&gt;assert false&lt;/code&gt; means the programmer believes the code can&amp;rsquo;t be executed, but didn&amp;rsquo;t manage to convince the compiler. If we declare that a subcommand accepts a flag, but forget to implement it, the program will crash at runtime (this isn&amp;rsquo;t as unlikely as it sounds, because we declare options in groups, so adding an option to a group affects several subcommands).&lt;/p&gt;

&lt;h2&gt;Polymorphic variants&lt;/h2&gt;

&lt;p&gt;Polymorphic variants are written with a back-tick/grave before them, and you don&amp;rsquo;t need to declare them before use. For example, we can declare
&lt;code&gt;handle_run&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;ListLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Wrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* use refresh/wrapper... *)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;OCaml will automatically infer the type of this function as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt; `Refresh | `Wrapper of string ] list -&amp;gt; unit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is, &lt;code&gt;handle_run&lt;/code&gt; takes of list of options, where the options are a subset of &lt;code&gt;Refresh&lt;/code&gt; and &lt;code&gt;Wrapper&lt;/code&gt;. Notice that the &lt;code&gt;assert&lt;/code&gt; is gone.&lt;/p&gt;

&lt;p&gt;Now you can call &lt;code&gt;handle_run (parse_run argv)&lt;/code&gt;, and it&amp;rsquo;s a compile-time error if &lt;code&gt;handle_run&lt;/code&gt; doesn&amp;rsquo;t handle every option that &lt;code&gt;parse_run&lt;/code&gt; may produce.&lt;/p&gt;

&lt;p&gt;There is, however, a problem when we try to put these functions in the &lt;code&gt;subcommands&lt;/code&gt; list. OCaml wants every list item to have the same type, and so wants every subcommand to handle every option. The compile then fails because they don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;My first thought to fix this was to declare an existential type. e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option_parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option_parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;m trying to say that each subcommand has a parser and a handler and, while we don&amp;rsquo;t know what subset of the options they process, the subsets are the same.
Sadly, OCaml doesn&amp;rsquo;t have existential types.&lt;/p&gt;

&lt;p&gt;However, we can get the same effect by declaring a class or closure:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option_parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_and_run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option_parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;run&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;download&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_download&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_download&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This works because the &lt;code&gt;subcommand&lt;/code&gt; function has a for-all type (for all types &lt;code&gt;a&lt;/code&gt;, it accepts an &lt;code&gt;a parser&lt;/code&gt; and an &lt;code&gt;a handler&lt;/code&gt; and produces an object that doesn&amp;rsquo;t expose the type &lt;code&gt;a&lt;/code&gt; in its interface: &lt;code&gt;parse_and_run&lt;/code&gt; just has the type &lt;code&gt;string list -&amp;gt; unit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, if we want to expose the parser on its own (e.g. for the tab-completion) we have to cast it first. Here, the &lt;code&gt;parse&lt;/code&gt; method simply returns a &lt;code&gt;zi_option list&lt;/code&gt;, losing the information about exactly which subset of the options it might return (which is fine for the completion code). This allows all subcommand objects to expose the same interface:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zi_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Refresh&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Wrapper&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option_parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option_parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zi_option&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_and_run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option_parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;run&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;download&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subcommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_download&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_download&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;So, I think this is rather nice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Every option displayed in the help for a command is accepted by that command.&lt;/li&gt;
  &lt;li&gt;We don&amp;rsquo;t need any asserts in the handlers (indeed, adding the assert destroys the safety, since the handler will then accept any option).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One final trick: when matching variants you can use the &lt;code&gt;#type&lt;/code&gt; syntax to match a set of options. e.g. the real &lt;code&gt;handle_run&lt;/code&gt; looks more like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;ListLabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;common_option&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Common_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_common_option&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_option&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_opts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_opts&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Wrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;That is, it processes the run-specific options itself, while delegating common options (&lt;code&gt;--offline&lt;/code&gt;, etc) and storing selection options (&lt;code&gt;--version&lt;/code&gt;, etc) in a separate list to be passed to the selection code. The &lt;code&gt;select_opts&lt;/code&gt; list gets the correct sub-type (&lt;code&gt;select_option list&lt;/code&gt;).&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2013/08/31/option-handling-with-ocaml-polymorphic-variants/</id><title type="text">Option handling with OCaml polymorphic variants</title><updated>2013-08-31T11:35:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=25" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;I&amp;rsquo;m busy planning my first trip across the&amp;nbsp;Atlantic to attend ICFP, CUFP and OCaml 2013. Today, I&amp;rsquo;ve been given the duty of &amp;ldquo;live blogging&amp;rdquo; the event, over at the &lt;a href=&quot;http://www.syslog.cl.cam.ac.uk/&quot; title=&quot;syslog&quot;&gt;syslog&lt;/a&gt;, the Cambridge&amp;nbsp;Systems Research Group blog.&lt;/p&gt;
&lt;p&gt;My other job for the event is to improve the documentation for &lt;a href=&quot;http://janestreet.github.io/guide-async.html&quot;&gt;Janestreet&amp;rsquo;s Async&lt;/a&gt; library. if anyone else is keen, I would love to organise a doc-a-thon to populate the .mli files&lt;/p&gt;
</content><id>http://hh360.user.srcf.net/blog/?p=25</id><title type="text">ICFP, CUFP &amp; OCaml2013</title><updated>2013-08-28T20:05:23+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="https://mirage.io/blog/introducing-vchan" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;em&gt;Editor&lt;/em&gt;: Note that some of the toolchain details of this blog post are
now out-of-date with Mirage 1.1, so we will update this shortly.&lt;/p&gt;
&lt;p&gt;Unless you are familiar with Xen's source code, there is little chance
that you've ever heard of the &lt;em&gt;vchan&lt;/em&gt; library or
protocol. Documentation about it is very scarce: a description can be
found on vchan's
&lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git%3Ba=blob%3Bf=xen/include/public/io/libxenvchan.h%3Bhb=HEAD&quot;&gt;public header file&lt;/a&gt;,
that I quote here for convenience:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Originally borrowed from the
&lt;a href=&quot;http://www.qubes-os.org&quot;&gt;Qubes OS Project&lt;/a&gt;, this code (i.e. libvchan)
has been substantially rewritten [...]
This is a library for inter-domain communication.  A standard Xen ring
buffer is used, with a datagram-based interface built on top.  The
grant reference and event channels are shared in XenStore under a
user-specified path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This protocol uses shared memory for inter-domain communication,
i.e. between two VMs residing in the same Xen host, and uses Xen's
mechanisms -- more specifically,
&lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=1160234&amp;amp;seqNum=3&quot;&gt;ring buffers&lt;/a&gt;
and
&lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git%3Ba=blob%3Bf=tools/libxc/xenctrl.h%3Bh=f2cebafc9ddd4815ffc73fcf9e0d292b1d4c91ff%3Bhb=HEAD#l934&quot;&gt;event channels&lt;/a&gt;
-- in order to achieve its aims. &lt;em&gt;Datagram-based interface&lt;/em&gt; simply
means that the
&lt;a href=&quot;http://xenbits.xen.org/gitweb/?p=xen.git%3Ba=blob%3Bf=tools/libvchan/libxenvchan.h%3Bh=6365d36a06f8c8f56454724cefc4c2f1d39beba2%3Bhb=HEAD&quot;&gt;interface&lt;/a&gt;
resembles UDP, although there is support for stream based communication (like
TCP) as well.&lt;/p&gt;
&lt;p&gt;Over the last two months or so, I worked on a &lt;a href=&quot;http://github.com/mirage/ocaml-vchan&quot;&gt;pure OCaml
implementation&lt;/a&gt; of this library, meaning
that Mirage-based unikernels can now take full advantage of &lt;em&gt;vchan&lt;/em&gt; to
communicate with neighboring VMs! If your endpoint -- a Linux VM or another
unikernel -- is on the same host, it is much faster and more efficient to use
vchan rather than the network stack (although unfortunately, it is currently
incompatible with existing programs written against the &lt;code&gt;socket&lt;/code&gt; library under
UNIX or the &lt;code&gt;Flow&lt;/code&gt; module of Mirage, although this will improve). It also
provides a higher level of security compared to network sockets as messages
will never leave the host's shared memory.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Building the vchan echo domain&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Provided that you have a Xen-enabled machine, do the following from
dom0:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    opam install mirari mirage-xen mirage vchan&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install the library and its dependencies. &lt;code&gt;mirari&lt;/code&gt; is
necessary to build the &lt;em&gt;echo unikernel&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    git clone git://github.com/mirage/ocaml-vchan
    cd test
    mirari configure --xen --no-install
    mirari build --xen
    sudo mirari run --xen&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will boot a &lt;code&gt;vchan echo domain&lt;/code&gt; for dom0, with connection
parameters stored in xenstore at &lt;code&gt;/local/domain/&amp;lt;domid&amp;gt;/data/vchan&lt;/code&gt;,
where &lt;code&gt;&amp;lt;domid&amp;gt;&lt;/code&gt; is the domain id of the vchan echo domain. The echo
domain is simply an unikernel hosting a vchan server accepting
connections from dom0, and echo'ing everything that is sent to it.&lt;/p&gt;
&lt;p&gt;The command &lt;code&gt;xl list&lt;/code&gt; will give you the domain id of the echo
server.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Building the vchan CLI from Xen's sources&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can try it using a vchan client that can be found in Xen's sources
at &lt;code&gt;tools/libvchan&lt;/code&gt;: Just type &lt;code&gt;make&lt;/code&gt; in this directory. It will
compile the executable &lt;code&gt;vchan-node2&lt;/code&gt; that you can use to connect to
our freshly created echo domain:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    ./vchan-node2 client &amp;lt;domid&amp;gt;/local/domain/&amp;lt;domid&amp;gt;/data/vchan&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything goes well, what you type in there will be echoed.&lt;/p&gt;
&lt;p&gt;You can obtain the full API documentation for &lt;em&gt;ocaml-vchan&lt;/em&gt; by doing a
&lt;code&gt;cd ocaml-vchan &amp;amp;&amp;amp; make doc&lt;/code&gt;. If you are doing network programming
under UNIX, vchan's interface will not surprise you. If you are
already using vchan for a C project, you will see that the OCaml API
is nearly identical to what you are used to.&lt;/p&gt;
&lt;p&gt;Please let us know if you use or plan to use this library in any way!
If you need tremedous speed or more security, this might fit your
needs.&lt;/p&gt;

   </content><id>https://mirage.io/blog/introducing-vchan</id><title type="text">Introducing vchan</title><updated>2013-08-23T17:43:00+00:00</updated><author><email></email><name>Vincent Bernardoff</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=86" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;Beta3 of RWO is now available:&amp;nbsp;&lt;a href=&quot;https://realworldocaml.org/&quot;&gt;https://realworldocaml.org/&lt;/a&gt;&amp;nbsp;and anil (one of the co-authors) comments on the release&amp;nbsp;&lt;a href=&quot;http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2.html&quot;&gt;http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2.html&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;width: 190px&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img src=&quot;https://realworldocaml.org/media/img/oreilly-cover.gif&quot; alt=&quot;&quot; width=&quot;180&quot; height=&quot;236&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Cover of RWO&lt;/p&gt;&lt;/div&gt;
</content><id>http://hh360.user.srcf.net/blog/?p=86</id><title type="text">Real World OCaml beta3 release</title><updated>2013-08-19T10:39:34+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="https://mirage.io/blog/oscon13-trip-report" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;Now that Mirage OS is rapidly converging on a
&lt;a href=&quot;http://github.com/avsm/mirage/issues/102&quot;&gt;Developer Preview Release 1&lt;/a&gt;, we
took it for a first public outing at
&lt;a href=&quot;http://www.oscon.com/oscon2013/&quot;&gt;OSCON'13&lt;/a&gt;, the O'Reilly Open Source
Conference. OSCON is in its 15th year now, and is a meeting place for
developers, business people and investors. It was a great opportunity to show
MirageOS off to some of the movers and shakers in the OSS world.&lt;/p&gt;
&lt;p&gt;Partly because MirageOS is about synthesising extremely specialised guest
kernels from high-level code, and partly because both Anil and I are
constitutionally incapable of taking the easy way out, we self-hosted the
slide deck on Mirage: after some last-minute hacking -- on content not Mirage
I should add! -- we built a self-contained unikernel of the talk.&lt;/p&gt;
&lt;p&gt;This was what you might call a &amp;quot;full stack&amp;quot; presentation: the custom
unikernel (flawlessly!) ran a type-safe
&lt;a href=&quot;https://github.com/mirage/mirage-platform/blob/master/xen/lib/netif.ml&quot;&gt;network device driver&lt;/a&gt;,
OCaml &lt;a href=&quot;http://github.com/mirage/mirage-net&quot;&gt;TCP/IP stack&lt;/a&gt; supporting an OCaml
&lt;a href=&quot;http://github.com/mirage/ocaml-cohttp&quot;&gt;HTTP&lt;/a&gt; framework that served slides
rendered using &lt;a href=&quot;http://lab.hakim.se/reveal-js/&quot;&gt;reveal.js&lt;/a&gt;. The slide deck,
including the turbo-boosted
&lt;a href=&quot;http://www.youtube.com/watch?v=2Mx8Bd5JYyo&quot;&gt;screencast&lt;/a&gt; of the slide deck
compilation, is hosted as another MirageOS virtual machine at
&lt;a href=&quot;http://decks.openmirage.org/&quot;&gt;decks.openmirage.org&lt;/a&gt;. We hope to add more
slide decks there soon, including resurrecting the tutorial! The source code
for all this is in the &lt;a href=&quot;http://github.com/mirage/mirage-decks&quot;&gt;mirage-decks&lt;/a&gt;
GitHub repo.&lt;/p&gt;
&lt;h3&gt;The Talk&lt;/h3&gt;

&lt;p&gt;The talk went down pretty well -- given we were in a graveyard slot on Friday
after many people had left, attendance was fairly high (around 30-40), and the
&lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/detail/28956&quot;&gt;feedback scores&lt;/a&gt;
have been positive (averaging 4.7/5) with comments including &amp;quot;excellent
content and well done&amp;quot; and &amp;quot;one of the most excited projects I heard about&amp;quot;
(though we are suspicious that just refers to Anil's usual high-energy
presentation style...).&lt;/p&gt;
&lt;iframe allowfullscreen=&quot;1&quot; frameborder=&quot;0&quot; src=&quot;//www.youtube-nocookie.com/embed/2Mx8Bd5JYyo&quot; height=&quot;235&quot; width=&quot;420&quot; style=&quot;margin-left: 10px;&quot; align=&quot;right&quot;&gt; &amp;nbsp; &lt;/iframe&gt;

&lt;p&gt;Probably the most interesting chat after the talk was with the Rust authors
at Mozilla (&lt;a href=&quot;http://twitter.com/pcwalton&quot;&gt;@pcwalton&lt;/a&gt; and
&lt;a href=&quot;https://github.com/brson&quot;&gt;@brson&lt;/a&gt;) about combining the Mirage
&lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;unikernel&lt;/a&gt; techniques
with the &lt;a href=&quot;http://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt; runtime. But perhaps the most
surprising feedback was when Anil and I were stopped in the street while
walking back from some well-earned sushi, by a cyclist who loudly declared
that he'd really enjoyed the talk and thought it was a really exciting project
-- never done something that achieved public acclaim from the streets before
:)&lt;/p&gt;
&lt;h3&gt;Book Signing and Xen.org&lt;/h3&gt;

&lt;p&gt;Anil also took some time to sit in a book signing for his forthcoming
&lt;a href=&quot;http://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; O'Reilly book.  This is
really important to making OCaml easier to learn, especially given that
all the Mirage libraries are using it.  Most of the dev team (and especially
thanks to &lt;a href=&quot;https://twitter.com/heidiann360&quot;&gt;Heidi Howard&lt;/a&gt; who bravely worked
through really early alpha revisions) have been giving
us feedback as the book is written, using the online commenting system.&lt;/p&gt;
&lt;p&gt;The Xen.org booth was also huge, and we spent quite a while plotting the
forthcoming Mirage/Xen/ARM backend. We're pretty much just waiting for the
&lt;a href=&quot;http://cubieboard.org&quot;&gt;Cubieboard2&lt;/a&gt; kernel patches to be upstreamed (keep an
eye &lt;a href=&quot;http://linux-sunxi.org/Main_Page&quot;&gt;here&lt;/a&gt;) so that we can boot Xen/ARM VMs
on tiny ARM devices.  There's a full report about this on the
&lt;a href=&quot;http://blog.xen.org/index.php/2013/07/31/the-xen-project-at-oscon/&quot;&gt;xen.org&lt;/a&gt;
blog post about OSCon.&lt;/p&gt;
&lt;h3&gt;Galois and HalVM&lt;/h3&gt;

&lt;p&gt;We also stopped by the &lt;a href=&quot;http://corp.galois.com&quot;&gt;Galois&lt;/a&gt; to chat with &lt;a href=&quot;https://twitter.com/acwpdx&quot;&gt;Adam
Wick&lt;/a&gt;, who is the leader of the
&lt;a href=&quot;http://corp.galois.com/halvm&quot;&gt;HalVM&lt;/a&gt; project at Galois. This is a similar
project to Mirage, but, since it's written in Haskell, has more of a focus
on elegant compositional semantics rather than the more brutal performance
and predictability that Mirage currently has at its lower levels.&lt;/p&gt;
&lt;p&gt;The future of all this ultimately lies in making it easier for these
multi-lingual unikernels to be managed and for all of them to communicate more
easily, so we chatted about code sharing and common protocols (such as
&lt;a href=&quot;https://github.com/vbmithr/ocaml-vchan&quot;&gt;vchan&lt;/a&gt;) to help interoperability.
Expect to see more of this once our respective implementations get more
stable.&lt;/p&gt;
&lt;p&gt;All-in-all OSCON'13 was a fun event and definitely one that we look forward
returning to with a more mature version of MirageOS, to build on the momentum
begun this year!  Portland was an amazing host city too, but what happens in
Portland, stays in Portland...&lt;/p&gt;

   </content><id>https://mirage.io/blog/oscon13-trip-report</id><title type="text">MirageOS travels to OSCON'13: a trip report</title><updated>2013-08-08T16:00:00+00:00</updated><author><email></email><name>Richard Mortier</name></author></entry><entry><link href="http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2.html" rel="alternate"/><contributor><uri>http://anil.recoil.org/feeds/atom-ocaml.xml</uri><name>Anil Madhavapeddy</name></contributor><content type="html">&lt;p&gt;The second and final public beta of Real World OCaml is now available:
  &lt;a href=&quot;https://realworldocaml.org&quot;&gt;https://realworldocaml.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Release notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Over 2,000 comments from proofreaders have been resolved.  We realize that
reading early content is hard work, and hugely appreciate the spirited
feedback!  The book is now a week away from being handed over to the
O&amp;rsquo;Reilly production team for copyediting, so the window for changes are
limited after that.  Comments reset between milestones and so beta2 is a
clean slate; we&amp;rsquo;re still working through some remaining older issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The chapters on first-class modules, parsing with Menhir, and objects
and classes have been significantly revised from beta1. Our thanks to
Leo White for contributing significantly to the latter two chapters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All the code snippets and terminal outputs are now mechanically generated.
The source code is as close to public domain as practical, at:
    &lt;a href=&quot;https://github.com/realworldocaml/examples&quot;&gt;https://github.com/realworldocaml/examples&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The final version will have the installation chapter moved to be online
only, and we intend to publish updates there to elaborate on installation
and packaging mechanisms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Exercises will be available after we go into production, and also only be
available online. We really like the collaborative spirit of the commenting
system, and will likely extend this to collecting exercises from our readers
on an ongoing basis.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s been quite a bit of feedback and conversation about the book, so this
also seemed like a good point to checkpoint the process somewhat.&lt;/p&gt;

&lt;h2&gt;Crowd sourcing community feedback&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://realworldocaml.org&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/oreilly-cover.gif&quot; style=&quot;padding-left:15px&quot; align=&quot;right&quot;/&gt;&lt;/a&gt;
&lt;em&gt;Good&lt;/em&gt;: The decision to crowdsource feedback has been exhausting but very
worthwhile, with over 2,200 &lt;a href=&quot;http://github.com/ocamllabs/rwo-comments&quot;&gt;comments&lt;/a&gt; posted (and over 2,000
resolved by us too!).  O&amp;rsquo;Reilly has a similar platform called
&lt;a href=&quot;http://atlas.labs.oreilly.com&quot;&gt;Atlas&lt;/a&gt; that wasn&amp;rsquo;t quite ready when we started
our book, but I&amp;rsquo;d highly encourage new authors to go down this route and not
stick with a traditional editorial scheme.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s simply not possible for a
small group of technical reviewers to notice as many errors as the wider
community has. Having said this, it&amp;rsquo;s interesting how much more focussed and
critical the comments of our editor &lt;a href=&quot;http://radar.oreilly.com/andyo&quot;&gt;Andy Oram&lt;/a&gt;
were when compared to most of the wider community feedback, so the commenting system is
definitely a complement and not a replacement to the editorial process.&lt;/p&gt;

&lt;h3&gt;The GitHub requirement&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Bad&lt;/em&gt;: After the first beta, we got criticized on a &lt;a href=&quot;https://news.ycombinator.com/item?id=5893168&quot;&gt;Hacker News&lt;/a&gt; thread
for passing around Github oAuth tokens without SSL.
This was entirely my fault, and I corrected the site to be pure-SSL within 24 hours.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ugly&lt;/em&gt;: In my defence though, I &lt;em&gt;dont want&lt;/em&gt; the authority that all the
reviewers have granted to me for their Github accounts!  We need just two
things to enable commenting: an identity service to cut down on spam comments,
and the ability to create issues in a &lt;a href=&quot;http://github.com/ocamllabs/rwo-comments&quot;&gt;public repository&lt;/a&gt;.  Unfortunately, Github&amp;rsquo;s
&lt;a href=&quot;http://developer.github.com/v3/oauth/#scopes&quot;&gt;scope&lt;/a&gt; API requires you to also
grant us access to commit to public code repositories.  Add on the fact that
around 6,000 people have clicked through the oAuth API to review RWO, and you
start to see just how much code we potentially have access to.
I did try to reduce the damage by not actually storing the oAuth tokens on the
server-side.  Instead, we store it in the client using a secure cookie, so you
can easily reset your browser to log out.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not just about authentication either: another reader
&lt;a href=&quot;http://www.reddit.com/r/ocaml/comments/1gil84/public_beta_of_real_world_ocaml/cal811r&quot;&gt;points out&lt;/a&gt;
that if they use GitHub during work hours, they have no real way of separating
the news streams that result.&lt;/p&gt;

&lt;p&gt;Much of the frustration here is that there&amp;rsquo;s nothing I can do to fix this except
wait for GitHub to hopefully improve their service.  I very much hope that GitHub
is listening to this and has internal plans to overhaul their privilege management
APIs.&lt;/p&gt;

&lt;h3&gt;Infrastructure-free hosting&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Good&lt;/em&gt; and &lt;em&gt;Bad&lt;/em&gt;: One of my goals with the commenting infrastructure was to try
and eliminate all server-side code, so that we could simply publish the book
onto Github Pages and use JavaScript for the comment creation and listing.&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;almost&lt;/em&gt; worked out. We still need a tiny HTTP proxy for comment creation,
as we add contextual information such as a milestone to every new comment to
make it easier to index.  Setting a milestone requires privileged access to the
repository and so our server-side proxy creates the issue using the
user-supplied oAuth token (so that it originates from the commenter), and then
updates it (via the &lt;a href=&quot;http://github.com/bactrian&quot;&gt;bactrian&lt;/a&gt; account) to add the
milestone add insert a little contextual comment pointing back to the book
paragraph where the comment originated from.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Good&lt;/em&gt;: The other criticism from the &lt;a href=&quot;http://www.reddit.com/r/programming/comments/1gipea/first_public_beta_of_real_world_ocaml_book/cakmeuz&quot;&gt;online
feedback&lt;/a&gt;
was the &lt;em&gt;requirement&lt;/em&gt; to have a Github login to read the book at all.  This is a
restriction that we intend to lift for the final release (which will be freely
available online under a &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/us/&quot;&gt;CC-BY-NC-ND&lt;/a&gt; license),
but I think it&amp;rsquo;s absolutely the right decision to gateway early adopters to get
useful feedback.  Even if we lost 90% of our potential reviewers through the
Github auth wall, I don&amp;rsquo;t think we could have coped with another 10,000
comments in any case.&lt;/p&gt;

&lt;p&gt;On the positive side, we didn&amp;rsquo;t have a single spam comment or other abuses of
the commenting system at all.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve had quite a few queries been open-sourcing the
&lt;a href=&quot;http://github.com/realworldocaml/scripts&quot;&gt;scripts&lt;/a&gt; that drive the server-side
commenting, and this on my TODO list for after the final book has gone to
production.&lt;/p&gt;

&lt;h2&gt;Auto-generating the examples&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Bad&lt;/em&gt;: We tried for far too long during the book writing to stumble through
with manual installation instructions and hand-copied code snippets and 
outputs.  Some of our alpha reviewers pointed out &lt;a href=&quot;https://github.com/ocamllabs/rwo-comments/issues/236&quot;&gt;vociferously&lt;/a&gt;
that spending time on installation and dealing with code typos was not a good
use of their time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Good&lt;/em&gt;: &lt;a href=&quot;http://bolinfest.com&quot;&gt;Michael Bolin&lt;/a&gt; was entirely correct in his
criticism (and incidentally, one of our most superstar reviewers).  The latest
beta has an entirely mechanically generated toolchain that lets us regenerate
the entire book output from a cold start by cloning the &lt;a href=&quot;https://github.com/realworldocaml/examples&quot;&gt;examples&lt;/a&gt;
repository.  In retrospect, I should have written this infrastructure a year ago,
and I&amp;rsquo;d recommend any new books of this sort focus hard on automation from
the early days.&lt;/p&gt;

&lt;p&gt;Luckily, my automation &lt;a href=&quot;https://github.com/realworldocaml/scripts&quot;&gt;scripts&lt;/a&gt;
could crib heavily from existing open-source OCaml projects that had portions
of what we needed, such as &lt;a href=&quot;https://github.com/diml/utop&quot;&gt;uTop&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ocaml/ocaml.org&quot;&gt;ocaml.org&lt;/a&gt; (and my thanks to
&lt;a href=&quot;https://github.com/diml&quot;&gt;Jeremie Dimino&lt;/a&gt; and &lt;a href=&quot;https://github.com/Chris00&quot;&gt;Christophe Troestler&lt;/a&gt; for
their help here).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Awesome&lt;/em&gt;: We&amp;rsquo;re hacking on a little surprise for the final online version of the
book, based on this build infrastructure.  Stay &lt;a href=&quot;http://try.ocamlpro.com&quot;&gt;tuned&lt;/a&gt;!&lt;/p&gt;
</content><id>http://anil.recoil.org/2013/08/06/real-world-ocaml-beta2.html</id><title type="text">Final Real World OCaml beta; the good, the bad and the ugly</title><updated>2013-08-06T01:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=99" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;I just wanted to share these sildes from&amp;nbsp;Yaron Minsky guest lecture at Princeton on &amp;ldquo;Abstractions and Types&amp;nbsp;for Concurrent&amp;nbsp;Programming&amp;rdquo;: [&lt;a href=&quot;http://www.cs.princeton.edu/~dpw/courses/cos326-12/lec/asynch-and-rpc.pdf&quot;&gt;pdf&lt;/a&gt;] &amp;nbsp;to the &lt;a href=&quot;http://www.cs.princeton.edu/~dpw/courses/cos326-12/&quot;&gt;COS 326&lt;/a&gt; class and the notes from Cornell&amp;rsquo;s OCaml course called &amp;ldquo;&lt;a href=&quot;http://www.cs.cornell.edu/Courses/cs3110/2011sp/lecturenotes.asp&quot;&gt;Data Structures and Functional Programming&lt;/a&gt;&amp;ldquo;, edit the URL to see notes from different years&lt;/p&gt;
</content><id>http://hh360.user.srcf.net/blog/?p=99</id><title type="text">OCaml Lecture Notes</title><updated>2013-08-01T14:40:42+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="https://mirage.io/blog/xen-block-devices-with-mirage" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;&lt;a href=&quot;http://www.openmirage.org/&quot;&gt;MirageOS&lt;/a&gt; is a
&lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;unikernel&lt;/a&gt;
or &amp;quot;library operating system&amp;quot; that allows us to build applications
which can be compiled to very diverse environments: the same code can be linked
to run as a regular Unix app, relinked to run as a &lt;a href=&quot;https://github.com/pgj/mirage-kfreebsd&quot;&gt;FreeBSD kernel module&lt;/a&gt;,
and even linked into a
self-contained kernel which can run on the &lt;a href=&quot;http://www.xenproject.org/&quot;&gt;Xen
hypervisor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mirage has access to an extensive suite of pure OCaml &lt;a href=&quot;https://github.com/mirage&quot;&gt;libraries&lt;/a&gt;,
covering everything from Xen &lt;a href=&quot;https://github.com/mirage/ocaml-xen-block-driver&quot;&gt;block&lt;/a&gt; and &lt;a href=&quot;https://github.com/mirage/mirage-platform/blob/master/xen/lib/netif.ml&quot;&gt;network&lt;/a&gt; virtual device drivers,
a &lt;a href=&quot;https://github.com/mirage/mirage-net&quot;&gt;TCP/IP stack&lt;/a&gt;, OpenFlow learning switches and controllers, to
SSH and &lt;a href=&quot;https://github.com/mirage/ocaml-cohttp&quot;&gt;HTTP&lt;/a&gt; server implementations.&lt;/p&gt;
&lt;p&gt;I normally use Mirage to deploy applications as kernels on top of
a &lt;a href=&quot;http://www.xenserver.org/&quot;&gt;XenServer&lt;/a&gt; hypervisor. I start by
first using the Mirage libraries within a normal Unix userspace
application -- where I have access to excellent debugging tools --
and then finally link my app as a high-performance Xen kernel for
production.&lt;/p&gt;
&lt;p&gt;However Mirage is great for more than simply building Xen kernels.
In this post I'll describe how I've been using Mirage to create
experimental virtual disk devices for existing Xen VMs (which may
themselves be Linux, *BSD, Windows or even Mirage kernels).
The Mirage libraries let me easily
experiment with different backend file formats and protocols, all while
writing only type-safe OCaml code thats runs in userspace in a normal
Linux domain 0.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disk devices under Xen&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The protocols used by Xen disk and network devices are designed to
permit fast and efficient software implementations, avoiding the
inefficiencies inherent in emulating physical hardware in software.
The protocols are based on two primitives:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;shared memory pages&lt;/em&gt;: used for sharing both data and metadata&lt;/li&gt;&lt;li&gt;&lt;em&gt;event channels&lt;/em&gt;: similar to interrupts, these allow one side to signal the other&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;In the disk block protocol, the protocol starts with the client
(&amp;quot;frontend&amp;quot; in Xen jargon) sharing a page with the server (&amp;quot;backend&amp;quot;).
This single page will contain the request/response metadata, arranged
as a circular buffer or &amp;quot;ring&amp;quot;. The client (&amp;quot;frontend&amp;quot;) can then start
sharing pages containing disk blocks with the backend and pushing request
structures to the ring, updating shared pointers as it goes. The client
will give the server end a kick via an event channel signal and then both
ends start running simultaneously. There are no locks in the protocol so
updates to the shared metadata must be handled carefully, using write
memory barriers to ensure consistency.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Xen disk devices in MirageOS&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like everything else in Mirage, Xen disk devices are implemented as
libraries. The ocamlfind library called &amp;quot;xenctrl&amp;quot; provides support for
manipulating blocks of raw memory pages, &amp;quot;granting&amp;quot; access to them to
other domains and signalling event channels. There are two implementations
of &amp;quot;xenctrl&amp;quot;:
&lt;a href=&quot;https://github.com/mirage/mirage-platform/tree/master/xen/lib&quot;&gt;one that invokes Xen &amp;quot;hypercalls&amp;quot; directly&lt;/a&gt;
 and one which uses the &lt;a href=&quot;https://github.com/xapi-project/ocaml-xen-lowlevel-libs&quot;&gt;Xen userspace library libxc&lt;/a&gt;.
Both implementations satisfy a common signature, so it's easy to write
code which will work in both userspace and kernelspace.&lt;/p&gt;
&lt;p&gt;The ocamlfind library
&lt;a href=&quot;https://github.com/mirage/shared-memory-ring&quot;&gt;shared-memory-ring&lt;/a&gt;
provides functions to create and manipulate request/response rings in shared
memory as used by the disk and network protocols. This library is a mix of
99.9% OCaml and 0.1% asm, where the asm is only needed to invoke memory
barrier operations to ensure that metadata writes issued by one CPU core
appear in the same order when viewed from another CPU core.&lt;/p&gt;
&lt;p&gt;Finally the ocamlfind library
&lt;a href=&quot;https://github.com/mirage/ocaml-xen-block-driver&quot;&gt;xenblock&lt;/a&gt;
provides functions to hotplug and hotunplug disk devices, together with an
implementation of the disk block protocol itself.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Making custom virtual disk servers with MirageOS&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let's experiment with making our own virtual disk server based on
the Mirage example program, &lt;a href=&quot;https://github.com/mirage/xen-disk&quot;&gt;xen-disk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, install &lt;a href=&quot;http://www.xen.org/&quot;&gt;Xen&lt;/a&gt;, &lt;a href=&quot;http://www.ocaml.org/&quot;&gt;OCaml&lt;/a&gt;
and &lt;a href=&quot;http://opam.ocamlpro.com/&quot;&gt;OPAM&lt;/a&gt;. Second initialise your system:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  opam init
  eval `opam config env`&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the time of writing, not all the libraries were released as upstream
OPAM packages, so it was necessary to add some extra repositories. This
should not be necessary after the Mirage developer preview at
&lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/detail/28956&quot;&gt;OSCON 2013&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  opam remote add mirage-dev git://github.com/mirage/opam-repo-dev
  opam remote add xapi-dev git://github.com/xapi-project/opam-repo-dev&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the unmodified &lt;code&gt;xen-disk&lt;/code&gt; package, this will ensure all the build
dependencies are installed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  opam install xen-disk&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When this completes it will have installed a command-line tool called
&lt;code&gt;xen-disk&lt;/code&gt;. If you start a VM using your Xen toolstack of choice
(&amp;quot;xl create ...&amp;quot; or &amp;quot;xe vm-install ...&amp;quot; or &amp;quot;virsh create ...&amp;quot;) then you
should be able to run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  xen-disk connect &amp;lt;vmname&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which will hotplug a fresh block device into the VM &amp;quot;&amp;lt;vmname&amp;gt;&amp;quot; using the
&amp;quot;discard&amp;quot; backend, which returns &amp;quot;success&amp;quot; to all read and write requests,
but actually throws all data away. Obviously this backend should only be
used for basic testing!&lt;/p&gt;
&lt;p&gt;Assuming that worked ok, clone and build the source for &lt;code&gt;xen-disk&lt;/code&gt; yourself:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  git clone git://github.com/mirage/xen-disk
  cd xen-disk
  make&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Making a custom virtual disk implementation&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;xen-disk&lt;/code&gt; program has a set of simple built-in virtual disk implementations.
Each one satisifies a simple signature, contained in
&lt;a href=&quot;https://github.com/mirage/xen-disk/blob/master/src/storage.mli&quot;&gt;src/storage.mli&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type configuration = {
  filename: string;      (** path where the data will be stored *)
  format: string option; (** format of physical data *)
}
(** Information needed to &amp;quot;open&amp;quot; a disk *)

module type S = sig
  (** A concrete mechanism to access and update a virtual disk. *)

  type t
  (** An open virtual disk *)

  val open_disk: configuration -&amp;gt; t option Lwt.t
  (** Given a configuration, attempt to open a virtual disk *)

  val size: t -&amp;gt; int64
  (** [size t] is the size of the virtual disk in bytes. The actual
      number of bytes stored on media may be different. *)

  val read: t -&amp;gt; Cstruct.t -&amp;gt; int64 -&amp;gt; int -&amp;gt; unit Lwt.t
  (** [read t buf offset_sectors len_sectors] copies [len_sectors]
      sectors beginning at sector [offset_sectors] from [t] into [buf] *)

  val write: t -&amp;gt; Cstruct.t -&amp;gt; int64 -&amp;gt; int -&amp;gt; unit Lwt.t
  (** [write t buf offset_sectors len_sectors] copies [len_sectors]
      sectors from [buf] into [t] beginning at sector [offset_sectors]. *)
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's make a virtual disk implementation which uses an existing disk
image file as a &amp;quot;gold image&amp;quot;, but uses copy-on-write so that no writes
persist.
This is a common configuration in Virtual Desktop Infrastructure deployments
and is generally handy when you want to test a change quickly, and
revert it cleanly afterwards.&lt;/p&gt;
&lt;p&gt;A useful Unix technique for file I/O is to &amp;quot;memory map&amp;quot; an existing file:
this associates the file contents with a range of virtual memory addresses
so that reading and writing within this address range will actually
read or write the file contents.
The &amp;quot;mmap&amp;quot; C function has a number of flags, which can be used to request
&amp;quot;copy on write&amp;quot; behaviour. Reading the
&lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.Genarray.html&quot;&gt;OCaml manual Bigarray.map_file&lt;/a&gt;
it says:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If shared is true, all modifications performed on the array are reflected
in the file. This requires that fd be opened with write permissions. If
shared is false, modifications performed on the array are done in memory
only, using copy-on-write of the modified pages; the underlying file is
not affected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we should be able to make a virtual disk implementation which memory
maps the image file and achieves copy-on-write by setting &amp;quot;shared&amp;quot; to false.
For extra safety we can also open the file read-only.&lt;/p&gt;
&lt;p&gt;Luckily there is already an
&lt;a href=&quot;https://github.com/mirage/xen-disk/blob/master/src/backend.ml#L63&quot;&gt;&amp;quot;mmap&amp;quot; implementation&lt;/a&gt;
in &lt;code&gt;xen-disk&lt;/code&gt;; all we need to do is tweak it slightly.
Note that the &lt;code&gt;xen-disk&lt;/code&gt; program uses a co-operative threading library called
&lt;a href=&quot;http://ocsigen.org/lwt/&quot;&gt;lwt&lt;/a&gt;
which replaces functions from the OCaml standard library which might block
with non-blocking variants. In
particular &lt;code&gt;lwt&lt;/code&gt; uses &lt;code&gt;Lwt_bytes.map_file&lt;/code&gt; as a wrapper for the
&lt;code&gt;Bigarray.Array1.map_file&lt;/code&gt; function.
In the &amp;quot;open-disk&amp;quot; function we simply need to set &amp;quot;shared&amp;quot; to &amp;quot;false&amp;quot; to
achieve the behaviour we want i.e.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  let open_disk configuration =
    let fd = Unix.openfile configuration.filename [ Unix.O_RDONLY ] 0o0 in
    let stats = Unix.LargeFile.fstat fd in
    let mmap = Lwt_bytes.map_file ~fd ~shared:false () in
    Unix.close fd;
    return (Some (stats.Unix.LargeFile.st_size, Cstruct.of_bigarray mmap))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The read and write functions can be left as they are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  let read (_, mmap) buf offset_sectors len_sectors =
    let offset_sectors = Int64.to_int offset_sectors in
    let len_bytes = len_sectors * sector_size in
    let offset_bytes = offset_sectors * sector_size in
    Cstruct.blit mmap offset_bytes buf 0 len_bytes;
    return ()

  let write (_, mmap) buf offset_sectors len_sectors =
    let offset_sectors = Int64.to_int offset_sectors in
    let offset_bytes = offset_sectors * sector_size in
    let len_bytes = len_sectors * sector_size in
    Cstruct.blit buf 0 mmap offset_bytes len_bytes;
    return () &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we rebuild and run something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  dd if=/dev/zero of=disk.raw bs=1M seek=1024 count=1
  losetup /dev/loop0 disk.raw
  mkfs.ext3 /dev/loop0
  losetup -d /dev/loop0

  dist/build/xen-disk/xen-disk connect &amp;lt;myvm&amp;gt; --path disk.raw&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the VM we should be able to do some basic speed testing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # dd if=/dev/xvdb of=/dev/null bs=1M iflag=direct count=100
  100+0 records in
  100+0 records out
  104857600 bytes (105 MB) copied, 0.125296 s, 837 MB/s&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plus we should be able to mount the filesystem inside the VM, make changes and
then disconnect (send SIGINT to xen-disk by hitting Control+C on your terminal)
without disturbing the underlying disk contents.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So what else can we do?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Thanks to Mirage it's now really easy to experiment with custom storage types
for your existing VMs. If you have a cunning scheme where you want to hash block contents,
and use the hashes as keys in some distributed datastructure -- go ahead, it's
all easy to do. If you have ideas for improving the low-level block access protocol
then Mirage makes those experiments very easy too.&lt;/p&gt;
&lt;p&gt;If you come up with a cool example with Mirage, then send us a
&lt;a href=&quot;https://github.com/mirage&quot;&gt;pull request&lt;/a&gt; or send us an email to the
&lt;a href=&quot;http://www.openmirage.org/about/&quot;&gt;Mirage mailing list&lt;/a&gt; -- we'd
love to hear about it!&lt;/p&gt;

   </content><id>https://mirage.io/blog/xen-block-devices-with-mirage</id><title type="text">Creating Xen block devices with MirageOS</title><updated>2013-07-18T11:20:00+00:00</updated><author><email></email><name>Dave Scott</name></author></entry><entry><link href="http://hh360.user.srcf.net/blog/?p=64" rel="alternate"/><contributor><uri>http://hh360.user.srcf.net/blog/category/pl/ocaml/feed/</uri><name>Heidi Howard</name></contributor><content type="html">&lt;p&gt;&amp;ldquo;Perf&amp;rdquo; is a common command line linux tool used for code profiling, (&lt;a href=&quot;https://perf.wiki.kernel.org/index.php/Tutorial&quot;&gt;perf wiki&lt;/a&gt;). A alpha version of a OCaml native code compiler that output code, that can be analysis by perf is now avalaible in OPAM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Installing the perf compatible OCaml compiler is straight forward with OPAM, though quite time-consuming due to the need to re-install many packages&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family:monospace;&quot;&gt;$ opam remote add perf git:&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;//&lt;/span&gt;github.com&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;mshinwell&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;opam-repo-dev
$ opam switch &lt;span style=&quot;color: #000000;&quot;&gt;4.01&lt;/span&gt;-perf-annotate
$ &lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;eval&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;`&lt;/span&gt;opam config &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;env&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;`&lt;/span&gt;
$ opam &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;install&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Installing perf was also straight forward, in fact I already had it via the linux-tools package in apt-get for Ubuntu.&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;sudo&lt;/span&gt; &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;apt-get install&lt;/span&gt; linux-tools&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;br/&gt;
Compiling with the new perf-compatable Ocaml compiler was beautifully simple, running make within an existing project working first time without any further changes necessary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basics&lt;/strong&gt;&lt;br/&gt;
Basic reporting is collected and viewed using:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;sudo&lt;/span&gt; perf record .&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;myprogram.native &lt;span style=&quot;color: #660033;&quot;&gt;-o&lt;/span&gt; myreport.data
&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;sudo&lt;/span&gt; perf report &lt;span style=&quot;color: #660033;&quot;&gt;-i&lt;/span&gt; myreport.data
&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;sudo&lt;/span&gt; perf script &lt;span style=&quot;color: #660033;&quot;&gt;-i&lt;/span&gt; myreport.data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Similarly basic stats can be collected using:&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family:monospace;&quot;&gt;&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;sudo&lt;/span&gt; perf &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;stat&lt;/span&gt; .&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;/&lt;/span&gt;myprogram.native &lt;span style=&quot;color: #660033;&quot;&gt;-o&lt;/span&gt; myreport.data
&lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;sudo&lt;/span&gt; &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;cat&lt;/span&gt; myreport.data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;When finished you can switch back to your normal compiler version, i.e.&lt;/p&gt;

&lt;div class=&quot;wp_syntax&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre class=&quot;bash&quot; style=&quot;font-family:monospace;&quot;&gt;$ opam switch 4.00.1
$ &lt;span style=&quot;color: #7a0874; font-weight: bold;&quot;&gt;eval&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;`&lt;/span&gt;opam config &lt;span style=&quot;color: #c20cb9; font-weight: bold;&quot;&gt;env&lt;/span&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

</content><id>http://hh360.user.srcf.net/blog/?p=64</id><title type="text">Profiling OCaml – Getting Started Guide</title><updated>2013-07-10T07:10:37+00:00</updated><author><email></email><name>Heidi Howard</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2013/07/07/ocaml-binary-compatibility/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;In the &lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/&quot;&gt;initial language analysis&lt;/a&gt;, OCaml did well in most areas except for diagnostics (which turned out to have an easy solution) and shared libraries / binary compatibility. Now it&amp;rsquo;s time to look for a solution to that.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#distribution-packages&quot;&gt;Distribution packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#upstream-packages&quot;&gt;Upstream packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#ocaml-library-compatibility&quot;&gt;OCaml library compatibility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#windows--linux-compatibility&quot;&gt;Windows / Linux compatibility&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#statically-linking-both-versions&quot;&gt;Statically-linking both versions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#using-the-ocaml-interpreter-to-link&quot;&gt;Using the ocaml interpreter to link&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#using-dynlink&quot;&gt;Using Dynlink&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#timings&quot;&gt;Timings&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#update-2013-07-14&quot;&gt;Update (2013-07-14)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;0install 2.3 was released last week with an (optional) OCaml front-end. This code can handle the startup-time-critical operations of running applications and generating shell tab-completions by itself, and will fall back to the Python version for any other case.&lt;/p&gt;

&lt;p&gt;Converting the Python to OCaml was mostly straight-forward. The only difficulty was getting access to the &lt;code&gt;SHGetFolderPath&lt;/code&gt; function on Windows. The standard library doesn&amp;rsquo;t include this function, so I had to write a wrapper for it in C, and use the OCaml pre-processor to make the OCaml use my wrapper only on Windows.&lt;/p&gt;

&lt;p&gt;However this OCaml front-end means we now have some duplicated code, which must be kept in sync and creates extra opportunities for bugs. So the next step is to eliminate the duplicated Python code and use the OCaml in all cases. This means that the OCaml part of 0install will no longer be optional, which in turn means that it has to work for everyone.&lt;/p&gt;

&lt;p&gt;There are three ways people end up running the 0install code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They install the &lt;code&gt;zeroinstall-injector&lt;/code&gt; package from their distribution.&lt;/li&gt;
  &lt;li&gt;They install manually using a generic tarball or Windows installer from 0install.net.&lt;/li&gt;
  &lt;li&gt;They run a tool (e.g. 0compile) that depends on 0install (and will often require a newer version than was provided by their distribution).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last case may seem a little confusing. The user is using their local (probably distribution-provided) 0install to run 0compile with its libraries, one of which happens to be another version of 0install.&lt;/p&gt;

&lt;h2&gt;Distribution packages&lt;/h2&gt;

&lt;p&gt;Distribution packages are the simplest from a binary-compatibility point of view. Each distribution runs a build farm, which builds separate binary packages for each supported architecture. Even here, compatibility can be an issue however. For example, if someone hits a bug in the version of 0install in the stable/LTS version of the distribution, we often tell them to try the package from a newer release.&lt;/p&gt;

&lt;p&gt;OCaml provides two options when compiling:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ocamlc&lt;/code&gt; compiles to bytecode.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ocamlopt&lt;/code&gt; compiles to native platform-specific code. This is not available on all platforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;http://pkg-ocaml-maint.alioth.debian.org/ocaml_packaging_policy.html/x264.html&quot;&gt;Debian OCaml packaging guide&lt;/a&gt; says that &amp;ldquo;The bytecode versions are portable. In order to spare the buildds and the Debian archive, bytecode versions should be compiled once for all for big packages (which either take a lot of place on disks or take a lot of time to build).&amp;rdquo;&lt;/p&gt;

&lt;p&gt;However, this turned out &lt;a href=&quot;http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=714996&quot;&gt;not to be the case&lt;/a&gt;. Packages compiled on 64-bit systems didn&amp;rsquo;t install on 32-bit systems. I had to change the Debian source package to build a different binary for each architecture (and since I had to do that anyway, I also changed it to compile to native code where possible, since that&amp;rsquo;s slightly faster and more portable between distribution releases).&lt;/p&gt;

&lt;h2&gt;Upstream packages&lt;/h2&gt;

&lt;p&gt;For making upstream packages, we don&amp;rsquo;t have the ability to build (or test) native binaries for multiple platforms. It would be far more convenient to release a single package containing bytecode and have it work everywhere, the way we currently do with the Python. However, there are some problems to solve here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The 64-bit issue which affected the Debian packages, as noted above.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/17315402/how-to-make-ocaml-bytecode-that-works-on-windows-and-linux&quot;&gt;OCaml bytecode compiled on Linux doesn&amp;rsquo;t run on Windows&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Even backwards compatible changes to OCaml libraries prevent bytecode from linking (see next section). This includes e.g. OCaml adding a new function to its standard library.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried to reproduce the 64-bit issue by building the bytecode on a 32-bit Ubuntu Raring VM and then running it on a 64-bit Arch Linux system. It worked fine. So, I&amp;rsquo;m going to assume for now that this is an unnecessary incompatibility introduced by &lt;a href=&quot;http://upsilon.cc/~zack/blog/posts/2009/11/Enforcing_type-safe_linking_using_package_dependencies/&quot;&gt;Debian&amp;rsquo;s OCaml packaging system&lt;/a&gt;, and not a genuine problem with the bytecode.&lt;/p&gt;

&lt;h2&gt;OCaml library compatibility&lt;/h2&gt;

&lt;p&gt;To understand how OCaml checks bytecode compatibility, let&amp;rsquo;s look at a simple example (based on the one in
&lt;a href=&quot;http://upsilon.cc/~zack/blog/posts/2009/11/Enforcing_type-safe_linking_using_package_dependencies/&quot;&gt;Enforcing type-safe linking using package dependencies&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;Say you have a library providing a function:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lib.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;You can compile it to bytecode like this, getting a &lt;code&gt;lib.cmo&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ocamlc -c lib.ml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can compile a program using the library in the same way (note that module
names are capitalised in OCaml code):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;prog.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Result: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;$ ocamlc -c prog.ml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can link them together and run like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ocamlc -o prog lib.cmo prog.cmo
$ ./prog
Result: 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you change the implementation of the function, it still works:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lib.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;$ ocamlc -c lib.ml
$ ocamlc -o prog lib.cmo prog.cmo
$ ./prog
Result: 105
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, if you add a new function to the library then it breaks:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lib.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;$ ocamlc -c lib.ml
$ ocamlc -o prog lib.cmo prog.cmo
File &amp;quot;_none_&amp;quot;, line 1:
Error: Files prog.cmo and lib.cmo
   make inconsistent assumptions over interface Lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason is that OCaml calculates a hash over the module&amp;rsquo;s
signature. You can see a .cmo file&amp;rsquo;s dependencies (with their hashes)
like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ocamlobjinfo prog.cmo
File prog.cmo
Unit name: Prog
Interfaces imported:
    265928798c0b8a63fa48cf9ac202f0ce        Int32
    10fca44c912c9342cf3d611984d42e34        Printf
    3f6c994721573c9f8b5411e6824249f4        Buffer
    ad977b422bbde52cd6cd3b9d04d71db1        Obj
    5c4b312910d7250e3a67621b317619f0        Prog
    4836c254f0eacad92fbf67abc525fdda        Pervasives
    8ce323e7f6c1a7ba1b604d93cde0af3d        Lib
Uses unsafe features: no
Force link: no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hash for &amp;ldquo;Lib&amp;rdquo; covers the &amp;ldquo;inc&amp;rdquo; and &amp;ldquo;dec&amp;rdquo; functions together and
OCaml refuses to link prog with the new library, even though all the
functions it needs are still there, unchanged.&lt;/p&gt;

&lt;p&gt;At first, I thought we could just disable the hash checks and use some cleverer
tools to check that libraries remained backwards compatible. However, OCaml doesn&amp;rsquo;t
use symbol names to find functions in OCaml libraries. A module is just an array of
values (the &lt;code&gt;inc&lt;/code&gt; and &lt;code&gt;dec&lt;/code&gt; closures in this case) and &lt;code&gt;prog&lt;/code&gt; locates the function it
wants by index. Here&amp;rsquo;s &lt;code&gt;prog&lt;/code&gt; and its compiled bytecode (comments added by me):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;prog.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Result: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;$ dumpobj prog.cmo
## start of ocaml dump of &amp;quot;prog.cmo&amp;quot;
   0  CONSTINT 5
   2  PUSHGETGLOBALFIELD Lib, 0		(* Lib[0] = Lib.inc *)
   5  APPLY1 				(* Call inc with 1 argument *)
   6  PUSHGETGLOBAL &amp;quot;Result: %d\n&amp;quot;
   8  PUSHGETGLOBALFIELD Printf, 1	(* Printf[1] = Printf.printf *)
  11  APPLY2 				(* Call printf with 2 arguments *)
  12  ATOM0 				(* The empty array *)
  13  SETGLOBAL Prog			(* Prog = [] *)
## end of ocaml dump of &amp;quot;prog.cmo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, it&amp;rsquo;s as if we&amp;rsquo;d written:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;prog.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[1]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; (Lib.[0] 5)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Therefore, OCaml cannot cope with any change to the signature of a library.
For example, if the &lt;code&gt;inc&lt;/code&gt; and &lt;code&gt;dec&lt;/code&gt; functions are switched around so that &lt;code&gt;dec&lt;/code&gt;
is defined first, &lt;code&gt;prog&lt;/code&gt; will then call the &lt;code&gt;dec&lt;/code&gt; function instead. The hashes
allow OCaml to detect such changes and refuse to run the bytecode.&lt;/p&gt;

&lt;p&gt;To allow dynamic linking, there are several options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Disable the hash checks and then ensure that we never make a backwards incompatible change
(e.g. we only add new methods at the end of a module, never change signatures, etc). That would require
a bit of care, and it wouldn&amp;rsquo;t help with changes to libraries we don&amp;rsquo;t control.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Export a series of submodules: ZeroInstall.APIv1, ZeroInstall.APIv2, etc. Then we only ever
create new modules; we never change existing ones. That works with OCaml&amp;rsquo;s existing hash scheme, but it
also doesn&amp;rsquo;t support third-party libraries (e.g. Libxmlm and the standard library).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a front-end for ocamlrun that dynamically compiles and caches everything on demand. That&amp;rsquo;s rather 
inefficient for users, though, and requires installing a complete development environment everywhere. Also, 
it may make the first run of an upgraded program very slow, with potentially no way to display a progress 
indicator.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make the compiler add a map of symbol names to each module and use that for dynamic linking, based on
the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Dynlink.html&quot;&gt;Dynlink module&lt;/a&gt; module.
That would be the most useful, but also the most difficult to implement. You&amp;rsquo;d also need extra code to
handle extensions to class interfaces, new tags in variant types, etc. Not impossible (languages like
Java and C# do this well), but not simple either.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For now, we can just statically link all bytecode (which OCaml does by default) and build all libraries from source on the build system. That&amp;rsquo;s not a long-term solution, because every time we made a new release of 0install we&amp;rsquo;d have to make new releases of all the tools that depend on it (0compile, 0test, 0release, etc). But we&amp;rsquo;re not yet trying to provide an OCaml API to other tools, just a portable OCaml binary. We won&amp;rsquo;t get automatic updates to the libraries we use (e.g. Xmlm and Yojson), but we can probably live with that for now.&lt;/p&gt;

&lt;h2&gt;Windows / Linux compatibility&lt;/h2&gt;

&lt;p&gt;The cause of the Windows / Linux incompatibility is the &amp;ldquo;Unix&amp;rdquo; module in the standard library. Despite the name, this includes general-purpose operating system functions such as &lt;code&gt;rename&lt;/code&gt;, &lt;code&gt;create_process&lt;/code&gt;, etc, and is used on Windows too.&lt;/p&gt;

&lt;p&gt;However, there are actually two separate &lt;code&gt;unix.ml&lt;/code&gt; modules in the OCaml source: &lt;code&gt;./otherlibs/unix/unix.ml&lt;/code&gt; and &lt;code&gt;./otherlibs/win32unix/unix.ml&lt;/code&gt;. When you compile OCaml bytecode, it will statically link one of these versions, which means that the generated bytecode will support only the platform on which it was built.&lt;/p&gt;

&lt;p&gt;In the short-term, we could create separate binaries of 0install for Windows and Linux. However, that makes the release process more complicated and error-prone. And if we provide an OCaml API to other tools, everyone developing tools would need to produce separate binaries too.&lt;/p&gt;

&lt;p&gt;The two modules implement the same interface (i.e. they have the same hash), so code compiled for one would work with the other if it could find it. I experimented with several approaches here:&lt;/p&gt;

&lt;h3&gt;Statically-linking both versions&lt;/h3&gt;

&lt;p&gt;My first attempt was to make a single module that contained code to support both Windows and Linux. The most natural thing to do here would be to create a class type (interface) with two implementing classes. However, the Unix interface is a module, not a class, and I wanted it to be compatible with existing code. &lt;a href=&quot;http://tech.groups.yahoo.com/group/ocaml_beginners/message/13921&quot;&gt;Asking on the Ocaml Beginners group&lt;/a&gt;, Gabriel Scherer recommended the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/manual021.html#toc81&quot;&gt;first-class modules extension&lt;/a&gt;, which allows treating modules as values (it&amp;rsquo;s called an &amp;ldquo;extension&amp;rdquo;, but it&amp;rsquo;s supported by the standard compiler). So here&amp;rsquo;s my first attempt, which defines &lt;code&gt;RealUnix&lt;/code&gt; and &lt;code&gt;Win32&lt;/code&gt; submodules and then sets &lt;code&gt;Unix&lt;/code&gt; to the correct one at runtime (&lt;code&gt;Posix&lt;/code&gt; contains the current &lt;code&gt;Unix&lt;/code&gt; API):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;portable_unix.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Posix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Posix&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RealUnix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Posix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Win32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Posix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;win32unix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os_type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Win32&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Win32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Posix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RealUnix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Posix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;One problem with this is that it needs to link against all the C symbols for both versions, so you need to provide stubs for &lt;code&gt;win_waitpid&lt;/code&gt; on Unix and for &lt;code&gt;unix_waitpid&lt;/code&gt; on Windows, etc. Only the OCaml code is linked statically into the executable; C libraries are resolved dynamically on the target platform. Turns out, there are quite a lot of stub symbols to define. For testing, I just hacked it to stop complaining about missing C primitives.&lt;/p&gt;

&lt;p&gt;It almost worked, expect that I got a strange error on Windows trying to resolve the hostname &amp;ldquo;0.0.0.0&amp;rdquo; (which the Win32 version does during initialisation). However, I didn&amp;rsquo;t track it down because I got a better suggestion&amp;hellip;&lt;/p&gt;

&lt;h3&gt;Using the ocaml interpreter to link&lt;/h3&gt;

&lt;p&gt;Gerd Stolpmann suggested just compiling to a library (not an executable) and then &lt;a href=&quot;http://tech.groups.yahoo.com/group/ocaml_beginners/message/13924&quot;&gt;using a script to load the modules dynamically&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;launcher.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#!/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ocaml&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unix.cma&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;myprog.cma&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The advantage here is that we don&amp;rsquo;t ship copies of &lt;code&gt;unix.ml&lt;/code&gt; with our code; we just use the one that comes with the runtime. However, this also has a few problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It&amp;rsquo;s a bit slower.&lt;/li&gt;
  &lt;li&gt;It depends on the &lt;code&gt;ocaml&lt;/code&gt; binary (1.3 MB), not just &lt;code&gt;ocamlrun&lt;/code&gt; (170 KB).&lt;/li&gt;
  &lt;li&gt;For other libraries (e.g. Xmlm, Yojson), if we want to link statically, we have to include the whole library archive, not just the modules we need, because the OCaml compiler only knows what we need when it does the final link to generate an executable, which we&amp;rsquo;re not doing here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Still, if &lt;code&gt;ocaml&lt;/code&gt; can link &lt;code&gt;unix.cma&lt;/code&gt; dynamically, why can&amp;rsquo;t we?&lt;/p&gt;

&lt;h3&gt;Using Dynlink&lt;/h3&gt;

&lt;p&gt;OCaml comes with the &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/libref/Dynlink.html&quot;&gt;Dynlink&lt;/a&gt; module, which allows loading bytecode at runtime. However, it has quite a few limitations. Unlike &lt;code&gt;ocaml&lt;/code&gt;, it doesn&amp;rsquo;t search for the library in the default paths (easy enough to fix), doesn&amp;rsquo;t load dependencies recursively, and doesn&amp;rsquo;t let you access the module after you&amp;rsquo;ve loaded it (it&amp;rsquo;s intended for plugins, where the plugin knows the API for the main system, not for libraries where the main program knows the API of the library).&lt;/p&gt;

&lt;p&gt;I had a dig through the &lt;code&gt;ocaml&lt;/code&gt; code to see how it does it. It seems to find the names using the &lt;code&gt;Symtable&lt;/code&gt; module. I couldn&amp;rsquo;t find a public API for that, so I hacked the &lt;code&gt;Dynlink&lt;/code&gt; module to export a &lt;code&gt;lookup_module&lt;/code&gt; function (it needs better error reporting; this is just for testing):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;dynlink.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Symtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_global_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_persistent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Symtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Symtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report_error&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err_formatter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pp_print_flush&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err_formatter&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Not_found&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Now you can find modules after loading them, and use the first-class modules stuff to treat the result as a regular module:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;test_dyn.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Load Unix module dynamically *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dynlink&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Win32&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;c:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ocamlmgw&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;lib&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/opt/ocaml/lib/ocaml&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;allow_unsafe_modules&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;Dynlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unix.cma&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnixType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unix&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup_module&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Unix&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnixType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Use Unix module in the normal way *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unix&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;create_process&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;gpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;--version&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nn&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Child %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WEXITED&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Success!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failure!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Yes, there are some hard-coded paths in there. We could fix that easily enough, or get 0install to set them for you. The dummy reference to &lt;code&gt;Callback.register&lt;/code&gt; is to ensure &lt;code&gt;Callback&lt;/code&gt; gets linked (it&amp;rsquo;s a dependency of &lt;code&gt;Unix&lt;/code&gt;, but &lt;code&gt;Dynlink&lt;/code&gt; doesn&amp;rsquo;t handle dependencies).&lt;/p&gt;

&lt;p&gt;I also had to modify the &lt;code&gt;Dll&lt;/code&gt; module to use the correct extension (&lt;code&gt;.so&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt;) based on the current platform.
The original version used whatever extension was correct for the platform where the code was compiled.&lt;/p&gt;

&lt;p&gt;With that, it&amp;rsquo;s now working: code compiled on Linux runs on Windows and vice versa!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/talex5/ocaml&quot;&gt;GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Timings&lt;/h3&gt;

&lt;p&gt;All approaches are reasonably fast (faster than Python, anyway, and this use isn&amp;rsquo;t speed critical):&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Time&lt;/th&gt;
      &lt;th&gt;Method&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7 ms&lt;/td&gt;
      &lt;td&gt;Static native code (not portable)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10 ms&lt;/td&gt;
      &lt;td&gt;Static bytecode (not portable)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11 ms&lt;/td&gt;
      &lt;td&gt;Bytecode using Dynlink&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20 ms&lt;/td&gt;
      &lt;td&gt;Using &lt;code&gt;#load&lt;/code&gt; with &lt;code&gt;ocaml&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;26 ms&lt;/td&gt;
      &lt;td&gt;Python 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;60 ms&lt;/td&gt;
      &lt;td&gt;Python 3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;On balance, I think we should go for the &lt;code&gt;#load&lt;/code&gt; trick for now. It&amp;rsquo;s a bit less efficient than using Dynlink, but it doesn&amp;rsquo;t require any modifications to the OCaml libraries and it handles recursive dependencies. Also, it doesn&amp;rsquo;t require any changes to code.&lt;/p&gt;

&lt;p&gt;The times above are for the &amp;ldquo;gpg &amp;ndash;version&amp;rdquo; test script. This shell script and launcher can be used to test the actual 0install OCaml code:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;launch.sh &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;line&quot;&gt;ocaml &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ocamlfind query -r -i-format yojson xmlm&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; ./launch.ml &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;launch.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;easy_format.cmo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;biniou.cma&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;yojson_biniou.cmo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;yojson.cmo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;xmlm.cmo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;str.cma&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unix.cma&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;main.cma&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Times are around 40 ms, compared to 10 ms for static byte-code and 5 ms for native code. We should be able to get 0install to pass the -I flags itself, if we want to avoid calling &lt;code&gt;ocamlfind&lt;/code&gt; and using a shell script.&lt;/p&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;I think that dynamically linking the &lt;code&gt;Unix&lt;/code&gt; module, as described above, is sufficient for the next step in converting 0install: we should be able to ship cross-platform bytecode that statically links all libraries except &lt;code&gt;Unix&lt;/code&gt; and which works everywhere. It will run with an unmodified &lt;code&gt;ocaml&lt;/code&gt; and &lt;code&gt;unix.cma&lt;/code&gt;, providing the runtime versions match exactly the compile-time ones. Essentially, that means that we ship binaries of &lt;code&gt;ocaml&lt;/code&gt; though 0install and just stick with a single version for as long as possible. Fixing that will have to wait for later.&lt;/p&gt;

&lt;h2&gt;Update (2013-07-14)&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;#load&lt;/code&gt; isn&amp;rsquo;t safe. When you do &lt;code&gt;ocaml /path/to/script.ml&lt;/code&gt;, it adds the current directory (not the directory containing the script) to the start of the search path. Thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /tmp
$ /usr/bin/myprog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will first try to load myprog&amp;rsquo;s libraries (e.g. &lt;code&gt;unix.cma&lt;/code&gt;) from &lt;code&gt;/tmp&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Looks like we will need to do something with &lt;code&gt;Dynlink&lt;/code&gt; after all.&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2013/07/07/ocaml-binary-compatibility/</id><title type="text">OCaml binary compatibility</title><updated>2013-07-07T10:28:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2013/06/20/replacing-python-round-2/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;In the &lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install&quot;&gt;first post&lt;/a&gt;, I took a brief look at the programming
languages &lt;strong&gt;ATS&lt;/strong&gt;, &lt;strong&gt;C#&lt;/strong&gt;, &lt;strong&gt;Go&lt;/strong&gt;, &lt;strong&gt;Haskell&lt;/strong&gt;, &lt;strong&gt;OCaml&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt; and &lt;strong&gt;Rust&lt;/strong&gt; to try to decide which would be the best language in which to write 0install (which is currently implemented in Python). Now it&amp;rsquo;s time to eliminate a few candidates and look in more detail at the others.&lt;/p&gt;

&lt;p&gt;Last time, I converted 4 lines of Python code from 0install into each language. This time I&amp;rsquo;m converting 576 lines, so this should
give a more accurate picture of how each performs for a real-world task.&lt;/p&gt;



&lt;p&gt;As before, note that I&amp;rsquo;m a beginner in these languages. Please post corrections or suggestions of better ways of doing things
in the comments. Thanks.&lt;/p&gt;

&lt;p&gt;(this post also &lt;a href=&quot;http://www.reddit.com/r/haskell/duplicates/1m5xlc/0install_python_vs_ocaml_vs_haskell/&quot;&gt;appeared on reddit&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=6464127&quot;&gt;on Hacker News&lt;/a&gt;, where there are more comments)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions-from-last-time&quot;&gt;Conclusions from last time&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#test-case&quot;&gt;Test case&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#the-run-module&quot;&gt;The &amp;ldquo;run&amp;rdquo; module&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#data-structures&quot;&gt;Data structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#variants&quot;&gt;Variants&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#using-the-data-structures&quot;&gt;Using the data structures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#handling-xml&quot;&gt;Handling XML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#building-lists&quot;&gt;Building lists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#string-processing&quot;&gt;String processing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#finding-resources&quot;&gt;Finding resources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#api-docs&quot;&gt;API docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#speed&quot;&gt;Speed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusions from last time&lt;/h2&gt;

&lt;p&gt;Based on the initial evaluation and feedback (thanks everyone!), I&amp;rsquo;m not going to look any further at these:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;ATS&lt;/dt&gt;
  &lt;dd&gt;I&amp;rsquo;m glad I included ATS. Its excellent performance and tiny binary put the other languages into perspective. Still, it&amp;rsquo;s
too hard to use, and makes it too difficult to separate safe code from unsafe code.&lt;/dd&gt;
  &lt;dt&gt;C#&lt;/dt&gt;
  &lt;dd&gt;Although C# is widely used, has an excellent cross-platform bytecode format and many libraries available, it is too
large and too slow to start for 0install (to the people who suggested profiling: when even &amp;ldquo;Hello World&amp;rdquo; is too slow,
there isn&amp;rsquo;t much you can do).&lt;/dd&gt;
  &lt;dt&gt;Go&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Although many Go users complained that Go&amp;rsquo;s score was unfairly low, they didn&amp;rsquo;t seem to disagree that it was the worst of
the candidates for our requirements, only about by how much it was the worst. To summarise the discussion briefly:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Go is good because errors are handled where they occur. Maybe, but ATS, Haskell, OCaml and Rust do that too, and they
help you get it right.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;You can write pretty reliable code in Go. No doubt, since you can do it in C too. But maybe I can write even better code
with less effort using the other languages?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;It&amp;rsquo;s OK to ignore errors silently in some places, because handling all errors would clutter the code up too much. This
seems like a trade-off the other languages don&amp;rsquo;t require me to make.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Rust&lt;/dt&gt;
  &lt;dd&gt;Rust has excellent safety and a familiar imperative syntax. It also has excellent support for shared libraries, which I
didn&amp;rsquo;t understand when I wrote the previous post (although I don&amp;rsquo;t feel too bad about this as it seems that almost no-one
else in the Rust community understood it either). Speed is OK but not great, though likely to improve. Rust&amp;rsquo;s main
weakness is its immaturity. The language is likely to change in incompatible ways in the near future and there are few
libraries available (for example, there is no XML library for Rust). It will be a few years before this is usable in
production (and the developers make no secret of this).&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;So, here are the remaining candidates and a summary of the conclusions from last time:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://www.haskell.org&quot;&gt;Haskell&lt;/a&gt; (7.6.3)&lt;/dt&gt;
  &lt;dd&gt;Haskell is fast, but it has problems with shared libraries: libraries are only compatible when compiled by the
exact same version of the compiler. Its pure functional style may make it very difficult to convert the existing code
to Haskell. Diagnostics (e.g. getting stack-traces) may be a problem too.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://ocaml.org/&quot;&gt;OCaml&lt;/a&gt; (4.00.1)&lt;/dt&gt;
  &lt;dd&gt;OCaml is also fast and had good safety, but its support for shared libraries seems limited. Getting good diagnostics from
production code may be tricky, as enabling stack-traces has a performance cost (OCaml code assumes exceptions are cheap).&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;http://www.python.org/&quot;&gt;Python&lt;/a&gt; (2.7.5 and 3.3.2)&lt;/dt&gt;
  &lt;dd&gt;Python is much slower than the other candidates, but it does have the advantages of an excellent standard library,
easy distribution (no need to make platform-specific binaries), being the language we&amp;rsquo;re
currently using, and being very well known. But it has no static type
checking, which means a lot of work writing unit-tests for even trivial code (e.g. testing &lt;code&gt;__repr__&lt;/code&gt; methods
and logging in obscure error paths to make sure it won&amp;rsquo;t crash due to a typo).&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Several people said that &lt;a href=&quot;http://dlang.org&quot;&gt;D&lt;/a&gt; has improved a lot in the last
few years. I didn&amp;rsquo;t have time to look at it carefully again, though. It&amp;rsquo;s a nice
language, but probably too low-level/unsafe for us. For example, it&amp;rsquo;s trivial to make
it segfault by dereferencing a null pointer.&lt;/p&gt;

&lt;h2&gt;Test case&lt;/h2&gt;

&lt;p&gt;0install collects information about all available versions of a program and its libraries from around the
web. Then it runs a solver to determine the best valid combination and writes the results to an XML
&lt;a href=&quot;http://0install.net/selections-spec.html&quot;&gt;selections document&lt;/a&gt;. For an app, &lt;em&gt;foo&lt;/em&gt;, the current
selections can be found in &lt;strong&gt;~/.config/0install.net/apps/foo/selections.xml&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When it&amp;rsquo;s time to run an application, we read this XML, set up a suitable environment for the process
and then exec it. As before, this should happen as quickly as possible.&lt;/p&gt;

&lt;p&gt;The test program can be given either the name of an app (e.g. &amp;ldquo;foo&amp;rdquo;) or the path to a selections document.&lt;/p&gt;

&lt;p&gt;This task involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using the &lt;a href=&quot;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG basedir spec&lt;/a&gt; to
find the current selections and the cached software.&lt;/li&gt;
  &lt;li&gt;Parsing XML into a suitable data structure.&lt;/li&gt;
  &lt;li&gt;Manipulating pathnames, files, directories and symlinks.&lt;/li&gt;
  &lt;li&gt;Updating environment variables based on the requested bindings.&lt;/li&gt;
  &lt;li&gt;String manipulation.&lt;/li&gt;
  &lt;li&gt;Creating launcher executables (as in the previous test).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can&amp;rsquo;t go over every line in this post, so I&amp;rsquo;ll just highlight the most interesting bits.
The full version in each language is in &lt;a href=&quot;https://github.com/talex5/lang-tests&quot;&gt;this GitHub repository&lt;/a&gt;.
If you get bored, there&amp;rsquo;s a &lt;a href=&quot;http://roscidus.com/blog/atom.xml#conclusions&quot;&gt;summary at the end&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Syntax&lt;/h2&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;p&gt;I guess most people are familiar with Python. It&amp;rsquo;s clear, simple and straight-forward. It uses indentation
to see when a block ends, which means that the structure of a program is exactly what it looks like.
Here&amp;rsquo;s a sample of the Python main module:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_default_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Syntax: runsels.py [APP | SELECTIONS] [ARGS]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;app_or_sels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;app_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;app_mgr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppMgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;app_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_mgr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_or_sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;missing_ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;sels_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;selections.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_or_sels&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sels_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qdom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute_selections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Note: The real Python code uses the &amp;ldquo;optparse&amp;rdquo; module to handle option parsing and generate help text. However,
because the Haskell/OCaml code developed here will be used as a front-end to the real Python, we don&amp;rsquo;t want any
special handling. For example, if invoked with &lt;code&gt;--help&lt;/code&gt; they should fall back to the Python version instead of
handling it themselves. So proper option parsing isn&amp;rsquo;t part of this task.&lt;/p&gt;

&lt;h3&gt;OCaml&lt;/h3&gt;

&lt;p&gt;OCaml syntax is very compact, but somewhat prone to confusing syntax errors. Often an error reported at a
particular line means you used &amp;ldquo;;&amp;rdquo; rather than &amp;ldquo;;;&amp;rdquo; 20 or 30 lines earlier. Here&amp;rsquo;s the OCaml main module:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_default_config&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;usage: runsels selections.xml arg...&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_or_sels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Apps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup_app&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_or_sels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_or_sels&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+/&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;selections.xml&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Qdom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels_path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Selections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute_selections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Some useful things to know when reading the examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;let a = b in ...&lt;/code&gt; assigns a variable (well, constant), like &lt;code&gt;a = b; ...&lt;/code&gt; in Python.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;let foo a b = ...&lt;/code&gt; defines a function, like &lt;code&gt;def foo(a, b): ...&lt;/code&gt; in Python.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;foo (a + 1) b&lt;/code&gt; means to call &lt;code&gt;foo&lt;/code&gt; with two arguments, like &lt;code&gt;foo(a + 1, b)&lt;/code&gt; in Python.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;foo a&lt;/code&gt; creates a partially applied function, like &lt;code&gt;functools.partial(foo, a)&lt;/code&gt; in Python.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;()&lt;/code&gt; means no data (you can think of it as an empty tuple).&lt;/li&gt;
  &lt;li&gt;Module names start with a capital letter (e.g. &lt;code&gt;Run.execute_selections&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We assign the result of &lt;code&gt;Run.execute_selections&lt;/code&gt; to &lt;code&gt;()&lt;/code&gt; just to check that it didn&amp;rsquo;t return anything (so if it
did, we&amp;rsquo;d get a type error rather than just ignoring it).&lt;/p&gt;

&lt;p&gt;The syntax tends to emphasise the body of functions while minimising the signature, which I&amp;rsquo;m not
convinced is a good thing. Consider:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_attribute_opt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;insert&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Missing 'insert' or 'value'&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InsertPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Can't use 'insert' and 'value' together&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;What is the argument &lt;code&gt;b&lt;/code&gt; here? What is the return type? These things are inferred by the compiler.
&lt;code&gt;b&lt;/code&gt; is an &lt;code&gt;element&lt;/code&gt; because &lt;code&gt;ZI.get_attribute_opt&lt;/code&gt; takes an &lt;code&gt;element&lt;/code&gt; as its last argument. The
return type is &lt;code&gt;env_source&lt;/code&gt;, because &lt;code&gt;InsertPath&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt; are constructors for &lt;code&gt;env_source&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;You can include the types, but generally you don&amp;rsquo;t and that makes it hard to know the type of a
function just by looking at its definition in the source code.&lt;/p&gt;

&lt;p&gt;Update: ygrek points out that most text editors can tell you the type of an OCaml identifier, e.g. see these
&lt;a href=&quot;http://stackoverflow.com/a/17234163/50926&quot;&gt;instructions for Vim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It also tends to bulk out the code: e.g. &lt;code&gt;Map.find key map&lt;/code&gt; rather than the more
object-oriented &lt;code&gt;map.find key&lt;/code&gt;. OCaml does support objects if you want them, but
the normal style seems to be to avoid them. On the other hand, it does make it very easy to
see which bit of code is being called, which isn&amp;rsquo;t so obvious in an object-oriented style.&lt;/p&gt;

&lt;p&gt;One thing to watch out for in OCaml is that, unlike Python and Haskell, it doesn&amp;rsquo;t look at your indentation. Consider the following
code (this is a simplified version of a mistake I actually made):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Start&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;many&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;End&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This code never prints &amp;ldquo;End&amp;rdquo;, because it treats that as part of the &amp;ldquo;many&amp;rdquo;
branch, even with all warnings enabled. It would be nice if it would issue a
warning if a single block (e.g. the last match case) contains lines with
different levels of indentation.&lt;/p&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;p&gt;Like Python, Haskell uses whitespace for indentation and generally avoids semi-colons and braces. Here&amp;rsquo;s the
main function in Haskell:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progPath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFullProgName&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;n&quot;&gt;absProgPath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute_path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progPath&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDefaultConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropFileName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absProgPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getArgs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	       &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Syntax: runsels [APP | SELECTIONS] [ARGS]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appOrSels&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookupApp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appOrSels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selsPath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appOrSels&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;selections.xml&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadSelections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selsPath&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;n&quot;&gt;executeSelections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Some things you should know to help you read the examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;::&lt;/code&gt; means &amp;ldquo;has type&amp;rdquo;. Functions typically declare their type at the top.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;myfunc :: String -&amp;gt; Int -&amp;gt; Bool&lt;/code&gt; means that &lt;code&gt;myFunc&lt;/code&gt; takes a &lt;code&gt;String&lt;/code&gt; argument and then an &lt;code&gt;Int&lt;/code&gt; argument
and returns a &lt;code&gt;Bool&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;do&lt;/code&gt; notation means that the expressions inside are connected together in some type-specific way (this is quite
confusing). Since &lt;code&gt;main&lt;/code&gt; has the type &lt;code&gt;IO ()&lt;/code&gt;, these statements are connected by the &amp;ldquo;IO monad&amp;rdquo;, which does
them one at a time, interacting with the system for each one.
If the do block had a different type, it might do something completely different.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a $ b $ c d&lt;/code&gt; means &lt;code&gt;a (b (c d))&lt;/code&gt; (without them it means &lt;code&gt;((a b) c ) d&lt;/code&gt;). It helps to avoid having lots of close brackets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The &amp;ldquo;run&amp;rdquo; module&lt;/h2&gt;

&lt;p&gt;Once we&amp;rsquo;ve loaded the selections XML document, the basic steps to execute the program are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For each selection, get the path to its directory (for packages not provided by the distribution).&lt;/li&gt;
  &lt;li&gt;Scan the XML and collect all the bindings (things we need to set up).&lt;/li&gt;
  &lt;li&gt;Ensure the launcher helper utility is installed (see last post).&lt;/li&gt;
  &lt;li&gt;Set up environment variables requested in the bindings.&lt;/li&gt;
  &lt;li&gt;Set up any launchers requested in the bindings.&lt;/li&gt;
  &lt;li&gt;Build the argv for the new process and exec it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;OCaml&lt;/h3&gt;

&lt;p&gt;This is all very straight-forward:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute_selections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_current_env&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_selection_map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stores&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect_bindings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;ensure_runenv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* Do &amp;lt;environment&amp;gt; bindings *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_env_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(* Do &amp;lt;executable-in-*&amp;gt; bindings *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_exec_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_attribute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_attribute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;interface&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;p&gt;This is rather complicated. Haskell functions can&amp;rsquo;t have side effects (like, say, creating a launcher or execing a
process). Instead, the function returns an &lt;code&gt;IO&lt;/code&gt; request to &lt;code&gt;main&lt;/code&gt;, which returns it to whatever is driving Haskell.
The IO request is basically a request to perform an operation and a callback to invoke when done. To avoid this becoming
a syntax nightmare, Haskell&amp;rsquo;s &lt;code&gt;do&lt;/code&gt; notation lets you write it in an imperative style:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;executeSelections&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Selections&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;executeSelections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;origEnv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getEnvironment&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvePath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathMap&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catMaybes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doEnv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;envWithExec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doExecBindings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envWithExec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commandName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userArgs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;executeFile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envWithExec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectBindings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	      &lt;span class=&quot;n&quot;&gt;doEnv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doEnvBinding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	      &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commandName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	      &lt;span class=&quot;n&quot;&gt;resolvePath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	      				    &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPath&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;						    &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;						    &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;For example, take the first line: &lt;code&gt;origEnv &amp;lt;- getEnvironment&lt;/code&gt;. &lt;code&gt;getEnvironment&lt;/code&gt; is a request to get the current environment.
It has the type &lt;code&gt;IO [(String, String)]&lt;/code&gt; - a request for a list of (name, value) mappings. The rest of the do block is
effectively a function which takes an argument &lt;code&gt;origEnv&lt;/code&gt;, of type &lt;code&gt;[(String, String)]&lt;/code&gt; (i.e. an actual list of mappings).
When this is returned by main, the system gets the mappings and then calls this function with the results. The same thing then
happens with the second line, and so on.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one tricky bit: &lt;code&gt;resolvePath&lt;/code&gt; takes a single selection and finds where it&amp;rsquo;s stored (which requires access to the filesystem).
It returns an IO request to check whether some paths exist. But when we loop over all the selections, we get a list of IO operations, not an
IO operation. So you need to use &lt;code&gt;mapM&lt;/code&gt; (monadic map), which turns a list of IO requests into an IO request for a list. That&amp;rsquo;s a lot
of thinking to do something quite simple.&lt;/p&gt;

&lt;p&gt;Doing IO in Haskell is hard. Here&amp;rsquo;s another example (reading an environment variable):&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getEnvOpt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VarName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getEnvOpt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;maybe_value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tryIOError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getEnv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maybe_value&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isDoesNotExistError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I want to do a &lt;code&gt;getEnv&lt;/code&gt; operation and return &lt;code&gt;Nothing&lt;/code&gt; if the variable isn&amp;rsquo;t set. At first, I tried calling &lt;code&gt;getEnv&lt;/code&gt; and
catching the exception using the normal exception handing function. That doesn&amp;rsquo;t work. The reason is that &lt;code&gt;getEnv&lt;/code&gt; doesn&amp;rsquo;t
throw an exception; it successfully returns an IO request for an environment variable. You have to use the special &lt;code&gt;tryIOError&lt;/code&gt;
function to get a request for either an environment variable or an error, and then pattern-match on that.&lt;/p&gt;

&lt;p&gt;The benefit of all this extra work is that you can instantly see which functions do (or rather request) IO by looking at their
type signature. Take the XML parsing function, for example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;parseXMLDoc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Just by looking at the type, we can see that it does no IO (and, therefore, isn&amp;rsquo;t vulnerable to attacks which might try to trick
it into loading local files while parsing the DTD). It also, incidentally, suggests that we&amp;rsquo;re not going the get any useful error
message if it doesn&amp;rsquo;t parse: it will just return &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Data structures&lt;/h2&gt;

&lt;p&gt;We need to store the user&amp;rsquo;s configured search paths,
following the &lt;a href=&quot;http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specification&lt;/a&gt;.
We need a list of directories to search for configuration settings, cached data (e.g. downloads) and &amp;ldquo;data&amp;rdquo; (which
we use mainly for binaries we&amp;rsquo;ve compiled).&lt;/p&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;p&gt;For storing general records, Python provides a choice of classes and tuples. Here&amp;rsquo;s a typical class and an example of
creating an instance and accessing a field:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Basedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Basedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.../share&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.../cache&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.../config&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;When calling any Python function or constructor, you can use the (optional) &lt;code&gt;name = value&lt;/code&gt; syntax so you don&amp;rsquo;t have to
remember the order of the arguments.&lt;/p&gt;

&lt;p&gt;Python also provides named tuples, which saves some boilerplate code when you just want pure data with no
methods attached. The syntax isn&amp;rsquo;t great, though, and you can&amp;rsquo;t do pattern matching on the names, only by
remembering the order:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;Basedirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Basedirs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cache&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;config&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Basedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.../share&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.../cache&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.../config&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Pattern matching&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;three&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;OCaml&lt;/h3&gt;

&lt;p&gt;OCaml provides classes, unnamed tuples and records (essentially named tuples). A record would be the obvious choice here:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basedirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;};;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.../share&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.../cache&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.../config&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;};;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Curiously, there&amp;rsquo;s no need to tell it the type of the records you&amp;rsquo;re building. It works it out from the field
names. However, this does mean that you can&amp;rsquo;t define two different record types with the same field name in the
same module. Also, if you want to access a field from a record defined in a
different module, you need to qualify the field name, e.g.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Basedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;There are also &amp;ldquo;polymorphic variants&amp;rdquo; which allow the same field name to be used in different structures, but
I haven&amp;rsquo;t tried using them. &lt;a href=&quot;http://caml.inria.fr/pub/docs/manual-ocaml/manual006.html#htoc42&quot;&gt;The manual&lt;/a&gt;
notes that the compiler can do a better job of finding errors with plain variants, however.&lt;/p&gt;

&lt;p&gt;A big win over Python is the ability to pattern-match on field names. e.g. to extract the &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt;
fields:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Update: if you compile with warnings on (and you should), it will complain that you&amp;rsquo;re ignoring the &lt;code&gt;data&lt;/code&gt; field. This is a really useful check because if you add a new field later it will tell you all the places that might need updating. You can use &lt;code&gt;data = _&lt;/code&gt; to ignore that field explicitly, or just &lt;code&gt;_&lt;/code&gt; to ignore all remaining fields.&lt;/p&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;p&gt;Haskell doesn&amp;rsquo;t have classes (in the Python / OCaml sense), but it does provide named tuples:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Basedirs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Basedirs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			 &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			 &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Basedirs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.../share&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.../cache&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.../config&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;share&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Note that the syntax for accessing a field is &lt;code&gt;field record&lt;/code&gt;, not &lt;code&gt;record.field&lt;/code&gt; as in other languages.
Like OCaml, you can&amp;rsquo;t use the same field name in different structures. Pattern matching works:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Basedirs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheDirs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configDirs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheDirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configDirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;However, it doesn&amp;rsquo;t have OCaml&amp;rsquo;s short-cut for the common case where the field you
want to match has the same name as the variable you want to store it in (to use Python terms). In fact,
doing that is strongly discouraged, because if you matched with &lt;code&gt;config = config&lt;/code&gt;, then that would
shadow the &lt;code&gt;config&lt;/code&gt; function used to access the record.&lt;/p&gt;

&lt;h2&gt;Variants&lt;/h2&gt;

&lt;p&gt;Sometimes, a value can be one of several sub-types. Bindings in 0install are a good example of this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There are two types of binding: an &lt;code&gt;EnvironmentBinding&lt;/code&gt; sets an
environment variable to tell a program where some resource is, while an
&lt;code&gt;ExecutableBinding&lt;/code&gt; gives the program an executable launcher for another
program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;code&gt;EnvironmentBinding&lt;/code&gt; can be used to find a path within the selected component,
or to provide a constant value.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;code&gt;EnvironmentBinding&lt;/code&gt; can affect its variable in three different ways:
it can append the new value to the end of the old value, prepend
it at the start, or replace the old value completely.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;code&gt;ExecutableBinding&lt;/code&gt; can
store the launcher&amp;rsquo;s location in a variable or
add the launcher&amp;rsquo;s directory to the application&amp;rsquo;s &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s an example of an environment binding which prepends a package&amp;rsquo;s &lt;code&gt;lib&lt;/code&gt; directory to &lt;code&gt;CLASSPATH&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;environment&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'CLASSPATH'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;insert=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lib'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'prepend'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The code that parses the XML and generates a list of bindings needs to store different values depending on
which kind it is. For example, &amp;ldquo;append&amp;rdquo; and &amp;ldquo;prepend&amp;rdquo; bindings let you specify optional separator and default
values, while &amp;ldquo;replace&amp;rdquo; ones don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Then, the code that applies the bindings needs to handle each of the separate cases. We&amp;rsquo;d like to make sure
that we didn&amp;rsquo;t forget to handle any case, and that we don&amp;rsquo;t try to access a field that&amp;rsquo;s only defined for a
different case.&lt;/p&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;p&gt;The traditional object-oriented way to handle this is with subclasses (e.g.
&lt;code&gt;ExtendEnvironment&lt;/code&gt; with &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;separator&lt;/code&gt; fields, and
&lt;code&gt;ReplaceEnvironment&lt;/code&gt; without; &lt;code&gt;InsertPath&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt;, etc). However, that&amp;rsquo;s a lot of classes to
write, so 0install actually does everything in just two classes:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnvironmentBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;PREPEND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'prepend'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;APPEND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'append'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'replace'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PREPEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathsep&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExecutableBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;IN_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'path'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;IN_VAR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'var'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_type&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Note the use of strings (&lt;code&gt;PREPEND&lt;/code&gt;, &lt;code&gt;APPEND&lt;/code&gt;, &lt;code&gt;REPLACE&lt;/code&gt;) in place of a proper enum, as Python
doesn&amp;rsquo;t have them.&lt;/p&gt;

&lt;h3&gt;OCaml&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a definition in OCaml. Variants use &lt;code&gt;|&lt;/code&gt; to separate the various possibilities:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;which_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;};;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InsertPath&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_binding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_source&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;};;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InVar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_binding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;exec_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;};;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnvironmentBinding&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_binding&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExecutableBinding&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_binding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s far more useful than the Python. It accurately describes the possible combinations, and is clear
about the types and which bits are optional. Using &lt;code&gt;varname&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt; as aliases for &lt;code&gt;string&lt;/code&gt; doesn&amp;rsquo;t
add any type safety, but it does make the signatures easier to read and gives better error messages.&lt;/p&gt;

&lt;p&gt;Note that the extra &lt;code&gt;|&lt;/code&gt; on the first line after &lt;code&gt;type binding&lt;/code&gt; isn&amp;rsquo;t strictly necessary, but it helps to
line things up.&lt;/p&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VarName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WhichEnd&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Append&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AddMode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AddMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WhichEnd&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		       &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultValue&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		       &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AddMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Replace&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EnvSource&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InsertPath&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExecBindingType&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InVar&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Binding&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EnvironmentBinding&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VarName&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mode&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EnvSource&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExecutableBinding&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExecBindingType&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This is essentially the same as the OCaml, except that I used tuples rather than records in &lt;code&gt;Binding&lt;/code&gt;,
because handling records is more awkward in Haskell due to the pattern matching problems noted above.
Using tuples (which I could have done in OCaml too) makes the definitions shorter, because the
definition of a tuple can be done in-line instead of with a separate structure.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deriving Show&lt;/code&gt; causes Haskell to automatically generate code to convert these types to strings,
which is handy for debugging (and sadly missing from OCaml).&lt;/p&gt;

&lt;h2&gt;Using the data structures&lt;/h2&gt;

&lt;p&gt;To apply the bindings, a runner module needs to collect all the bindings and then:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Process each &lt;code&gt;EnvironmentBinding&lt;/code&gt;, updating the environment.&lt;/li&gt;
  &lt;li&gt;Process each &lt;code&gt;ExecutableBinding&lt;/code&gt;, using the new environment to create the launchers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here, we&amp;rsquo;ll look at the code to process an &lt;code&gt;EnvironmentBinding&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s the Python code for applying an &amp;lt;environment&amp;gt; binding:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnvironmentBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;PREPEND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'prepend'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;APPEND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'append'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'replace'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Calculate the new value of the environment variable after applying this binding.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;sd&quot;&gt;		@param path: the path to the selected implementation; None for native packages&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;sd&quot;&gt;		@param old_value: the current value of the environment variable&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;sd&quot;&gt;		@return: the new value for the environment variable&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnvironmentBinding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnvironmentBinding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PREPEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;The code for getting the value to append to is a bit messy. We&amp;rsquo;re trying to say:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use the current value of the environment variable. Or, if not set:&lt;/li&gt;
  &lt;li&gt;Use the &lt;code&gt;default&lt;/code&gt; from the &amp;lt;environment&amp;gt; element. Or, if not set:&lt;/li&gt;
  &lt;li&gt;Use the built-in default value for this variable.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Python often makes this easy with its &lt;code&gt;a or b or c&lt;/code&gt; syntax, but had to use the longer &lt;code&gt;if&lt;/code&gt; syntax for
this case because &lt;code&gt;or&lt;/code&gt; treats the both &lt;code&gt;None&lt;/code&gt; and the empty string as false,
whereas we want to treat an empty string as a valid value.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;old_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Actually, I noticed while writing this post that I got that wrong in the Python (I used the shorter &lt;code&gt;or&lt;/code&gt; in one
place) and had to fix it; a common mistake in Python.&lt;/p&gt;

&lt;p&gt;The two binding types must be handled differently. In the run code, we (rather messily) check the type to
decide what to do:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnvironmentBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutableBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This isn&amp;rsquo;t a very object-oriented way to do it. But it made more sense to put the logic for handling
the bindings all together in the run module rather than in the module which defines the data types
(which I prefer to keep side-effect free). Also, the rule that we need to
process all the EnvironmentBindings before all of the ExecutableBindings can&amp;rsquo;t
easily go in the classes themselves.&lt;/p&gt;

&lt;p&gt;So, the existing Python code is really pretty poor. We&amp;rsquo;re using strings to simulate enums (simple variants),
a single class with a load of &lt;code&gt;if&lt;/code&gt; statements in place of variants for the different ways of setting an
environment variable, and messy &lt;code&gt;isinstance&lt;/code&gt; checks to let us keep the logic for applying bindings together
in the &lt;code&gt;run&lt;/code&gt; module. If we add or change binding classes, there&amp;rsquo;s several places we need to check, and no
static checking to help us. Let&amp;rsquo;s see if the other languages can help us do better&amp;hellip;&lt;/p&gt;

&lt;h3&gt;OCaml&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s the code to apply an &lt;code&gt;EnvironmentBinding&lt;/code&gt; in OCaml:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc_new_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Replace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Prepend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Append&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_opt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;(* add to current value of variable *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;(* or to the specified default *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;(* or to the standard default *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;                   &lt;span class=&quot;c&quot;&gt;(* no old value; use new value directly *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_env_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnvironmentBinding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putenv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calc_new_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InsertPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;(* a PackageSelection; skip binding *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s not bad, and it&amp;rsquo;s nice to see all the different cases laid out.&lt;/p&gt;

&lt;p&gt;By the way &lt;code&gt;let do_env_binding env impls = function ...&lt;/code&gt; is a convenient way to pattern match on the
last (unnamed) argument. It means the same as &lt;code&gt;let do_env_binding env impls
binding = match binding with ...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I initially thought that the Python version was easier to read. On reflection, however, I think it&amp;rsquo;s more subtle. It&amp;rsquo;s easier
to see &lt;em&gt;what&lt;/em&gt; the Python version does, but it&amp;rsquo;s not easy to see that what it does is correct.
By contrast, it&amp;rsquo;s easy to see that the OCaml version handles every case (the compiler checks this), and you can just check that each individual case is handled correctly.&lt;/p&gt;

&lt;p&gt;As in the Python, getting &lt;code&gt;old_value&lt;/code&gt; is a bit messy as there&amp;rsquo;s no &lt;a href=&quot;http://en.wikipedia.org/wiki/Null_coalescing_operator&quot;&gt;null coalescing operator&lt;/a&gt; in OCaml:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_opt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;p&gt;And here is the code to apply an &lt;code&gt;EnvironmentBinding&lt;/code&gt; in Haskell:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WhichEnd&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prepend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Append&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;doEnvBinding&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FilePath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Binding&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;doEnvBinding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EnvironmentBinding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InsertPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InsertPath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;kt&quot;&gt;Replace&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AddMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whichEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultValue&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whichEnd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mplus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				 &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mplus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standardDefault&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;doEnvBinding&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s a good bit shorter than both the Python and the OCaml, because I was able to use
&lt;code&gt;a `mplus` b&lt;/code&gt; handle the defaults easily. That&amp;rsquo;s &amp;ldquo;monadic plus&amp;rdquo;, in case you
were wondering whether mplus is a bit of a silly name.&lt;/p&gt;

&lt;h2&gt;Handling XML&lt;/h2&gt;

&lt;p&gt;We need to parse the XML into some kind of internal representation. Originally, 0install parsed the XML
into custom classes, but it turns out that we often want to write XML back out again, preserving attributes
and elements we didn&amp;rsquo;t understand. So we&amp;rsquo;ve been slowly moving towards using generic XML trees as the in-memory
representation, which saves having to write code to serialise our data structures as XML (which then requires
ensuring that they&amp;rsquo;re consistent with the parsing code).&lt;/p&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;p&gt;Python&amp;rsquo;s standard library includes a selection of XML parsers: minidom, pulldom, ElementTree, expat and SAX.
Disappointingly, the &lt;a href=&quot;http://docs.python.org/2.7/library/xml.html&quot;&gt;documentation&lt;/a&gt; says that none of them is safe
with untrusted data.
0install uses the low-level &amp;ldquo;expat&amp;rdquo; parser, which isn&amp;rsquo;t in the vulnerabilities table, so hopefully we&amp;rsquo;re OK
(many of the vulnerabilities are denial of service attacks, which isn&amp;rsquo;t a big problem for us).&lt;/p&gt;

&lt;p&gt;We build our own &amp;ldquo;qdom&amp;rdquo; tree structure rather than use the more standard
minidom module because &lt;code&gt;import xml.dom.minidom&lt;/code&gt; takes too long to be used in this
speed-critical code (or at least, it did when I wrote the qdom code, I haven&amp;rsquo;t tested it recently).
One of the nice things about writing in the other languages is not having to worry about speed all
the time.&lt;/p&gt;

&lt;h3&gt;OCaml&lt;/h3&gt;

&lt;p&gt;OCaml doesn&amp;rsquo;t include an XML parser in the standard libraries, so I Googled for one. The first one I
found was Xml-Light, but it turned out that it didn&amp;rsquo;t support XML namespaces. Then I tried the PXP parser,
which is enormous, and &lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/6912/focus=6926&quot;&gt;parsed the test document I gave it incorrectly&lt;/a&gt; (but they have fixed that now - thanks!). Finally, I
tried Xmlm, which is small and works.&lt;/p&gt;

&lt;p&gt;Xmlm doesn&amp;rsquo;t generate a tree structure, just events (like SAX), so you have to build your own structure.
That could be a problem in some cases (it&amp;rsquo;s convenient to have a standard data structure in case you
want to pass documents between modules). On the other hand, we already use our own document structure
(&amp;ldquo;qdom&amp;rdquo;) in Python and the standard &amp;ldquo;DOM&amp;rdquo; interface is awkward anyway.&lt;/p&gt;

&lt;p&gt;Xmlm suggests the following structure:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xmlm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;However, this is quite annoying to process, because every time someone gives you a &lt;code&gt;tree&lt;/code&gt; you have
to pattern match and handle the case of them giving you a &lt;code&gt;D&lt;/code&gt; (a text node). Instead, I used
ElementTree&amp;rsquo;s trick of attaching text to element nodes:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xmlm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xmlm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text_before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;(** The text node immediately before us *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_text_inside&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;(** The last text node inside us with no following element *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;};;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;With this, it&amp;rsquo;s easy to iterate over all the elements and ignore text, and you don&amp;rsquo;t have to
worry about getting two text nodes next to each other.&lt;/p&gt;

&lt;p&gt;You generally don&amp;rsquo;t need &lt;code&gt;text_before&lt;/code&gt; unless you&amp;rsquo;re using mixed content, but having it here means we don&amp;rsquo;t
lose any data if we read a document and then write it out again.&lt;/p&gt;

&lt;p&gt;It was convenient to have the structure be mutable while building it, and in other code we may want to
manipulate nodes, so I marked most of the fields as mutable.&lt;/p&gt;

&lt;p&gt;I made a serious mistake in my first attempt at pattern matching on elements. I wanted to match the elements
&lt;code&gt;&amp;lt;arg&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;for-each&amp;gt;&lt;/code&gt; in the 0install namespace:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns_feed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://zero-install.sourceforge.net/2004/injector/interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Qdom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmlns_feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;arg&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_arg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmlns_feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;for-each&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_for_each&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;This is the worst kind of mistake: the kind that seems to work fine when you test it. I made the same mistake in Haskell, but
luckily I decided to enable warnings (&lt;code&gt;ghc -Wall&lt;/code&gt;) and spotted the problem. The code above doesn&amp;rsquo;t check that the namespace is
equal to &lt;code&gt;xmlns_feed&lt;/code&gt;. Instead, it creates a new &lt;code&gt;xmlns_feed&lt;/code&gt; binding with whatever the namespace actually was. Obvious in
hindsight (note: turning on warnings in OCaml also catches the mistake, because it complains that &lt;code&gt;xmlns_feed&lt;/code&gt; is unused).&lt;/p&gt;

&lt;p&gt;So, how can we fix this? Dealing with namespaces all the time when processing XML is annoying even when you get it right, so
I decided to make a helper interface for doing queries in a particular namespace. Of course, I&amp;rsquo;d like this to generalise to
other namespaces. I found an OCaml feature called &amp;ldquo;functors&amp;rdquo;, which seem to be basically module templates. Here&amp;rsquo;s how I made
a namespace-specific query interface:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NsType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sig&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NsQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NsType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** Return the local name part of this element's tag.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      Returns [None] if it's in a different namespace. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem_ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem_ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** Apply [fn] to each child node in our namespace&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      with local name [tag] *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_nodes&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;c&quot;&gt;(** Get the value of the non-namespaced attribute [attr].&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;      Throws an exception if [elem] isn't in our namespace. *)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_attribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Then I create a specialised version of this module for our namespace in &lt;code&gt;constants.ml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZI_NS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://zero-install.sourceforge.net/2004/injector/interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Qdom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NsQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZI_NS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;With this, &lt;code&gt;ZI.map&lt;/code&gt; applies a function to all elements in the 0install namespace and with the given name. &lt;code&gt;ZI.tag&lt;/code&gt; returns the
local name for 0install elements or &lt;code&gt;Nothing&lt;/code&gt; for others, etc. Now the original code becomes:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;arg&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_arg&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;for-each&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_for_each&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Much better!&lt;/p&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;p&gt;Again, there&amp;rsquo;s a choice of library. I went for &lt;code&gt;Text.XML.Light&lt;/code&gt; which seems to work well.&lt;/p&gt;

&lt;p&gt;Dealing with namespaces is fairly painful; I&amp;rsquo;m not convinced that I&amp;rsquo;m using it right. Here&amp;rsquo;s
how I find the &amp;lt;runner&amp;gt; element inside a &amp;lt;command&amp;gt;, for example:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getRunnerElement&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getRunnerElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commandElem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterChildName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isRunner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commandElem&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isRunner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qname&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qURI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns_feed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;runner&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Using pattern matching doesn&amp;rsquo;t seem to improve things:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getRunnerElement&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getRunnerElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commandElem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterChildName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isRunner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commandElem&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isRunner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;QName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;runner&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qURI&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns_feed&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	      &lt;span class=&quot;n&quot;&gt;isRunner&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I didn&amp;rsquo;t find any way to create a namespace-specific interface as in OCaml (Haskell &amp;ldquo;functors&amp;rdquo; do something
different).&lt;/p&gt;

&lt;p&gt;Testing it on malformed XML, it sometimes just returns Nothing, which is rather unhelpful, and sometimes
it successfully parses it anyway! For reference, here is a test document that Haskell loads happily:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;'h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Python and OCaml, by contrast, both detect the problem and report the location of the error.&lt;/p&gt;

&lt;h2&gt;Building lists&lt;/h2&gt;

&lt;p&gt;We need to walk the XML tree and return all the bindings, in document order. The places where a binding may be found are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;selection&amp;gt; / [binding]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;selection&amp;gt; / [dependency] / [binding]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;selection&amp;gt; / &amp;lt;command&amp;gt; / [binding]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;selection&amp;gt; / &amp;lt;command&amp;gt; / [dependency] / [binding]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For bindings in a dependency, we need to know the dependency&amp;rsquo;s interface. For other bindings, we want the selection&amp;rsquo;s own interface.&lt;/p&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;p&gt;Python&amp;rsquo;s easy syntax for sets provides one way to do it, and its &lt;code&gt;append&lt;/code&gt; method on lists makes it easy to collect the results:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;binding_elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'environment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'executable-in-var'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'executable-in-path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;dep_elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'requires'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'runner'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collect_bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'command'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding_elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;n&quot;&gt;dep_iface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_iface&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding_elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'environment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnvironmentBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'executable-in-var'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'executable-in-path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutableBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;selection&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'command'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding_elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I liked the ZI namespace query thing I made in OCaml so much, I made a Python class to do the same thing.&lt;/p&gt;

&lt;h3&gt;OCaml&lt;/h3&gt;

&lt;p&gt;I originally wrote this in a purely functional style, threading the results list through all the functions using &lt;code&gt;fold_left&lt;/code&gt;.
That was pretty messy. Then I decided to take advantage of OCaml&amp;rsquo;s support for imperative programming and just mutate a single
list (&lt;code&gt;bindings&lt;/code&gt;), as in the Python, which worked much better.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collect_bindings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;requires&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;runner&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_iface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_attribute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;interface&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep_iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_binding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_sel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_attribute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;interface&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;ZI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_with_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_sel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;selection&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindings&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Note the use of named arguments (&lt;code&gt;process ~deps:true&lt;/code&gt;) to avoid confusion between the two boolean arguments.
This works like &lt;code&gt;process(deps = true)&lt;/code&gt; in Python.&lt;/p&gt;

&lt;p&gt;A strange aspect of OCaml is that you generally write loops backwards, first declaring the code to
handle each item and then calling an &lt;code&gt;iter&lt;/code&gt; function to say what you want to loop over. OCaml does have
a &lt;code&gt;for&lt;/code&gt; loop, but it&amp;rsquo;s one of those old-fashioned BBC BASIC style ones that just updates a counter in
that particular way that programmers never actually want to do.&lt;/p&gt;

&lt;p&gt;Note also that in OCaml you add to the start of a list, not the end, so we need to reverse it as the
last step.&lt;/p&gt;

&lt;p&gt;Update: You can use the pipe operator (&lt;code&gt;|&amp;gt;&lt;/code&gt;) to make loops easier to write. It lets you write the input to a function first:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;collectBindings&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Selections&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InterfaceURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;collectBindings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterChildrenName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasZName&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;selection&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requireAttr&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;interface&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                          &lt;span class=&quot;n&quot;&gt;getBindings&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getBindings&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ziChildren&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;s&quot;&gt;&amp;quot;command&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getBindings&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;requires&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;runner&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depIface&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requireAttr&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;interface&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depIface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getBindings&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depIface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- Optional dependency which was not selected&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processBinding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Nice and short again, but again it requires some explanation. The &lt;code&gt;do&lt;/code&gt; expressions here (unlike the previous one)
have the list type, so they do the lines of the block in a way appropriate for lists. For lists, &lt;code&gt;x &amp;lt;- items&lt;/code&gt; means
to run the rest of the do block once for each item in the list &lt;code&gt;items&lt;/code&gt;, producing a list for each one, and then join
the resulting lists together end-to-end. So these do blocks are actually nested loops.&lt;/p&gt;

&lt;p&gt;There are no named arguments, so we just have to remember what the &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; mean here.&lt;/p&gt;

&lt;p&gt;Also, the &lt;code&gt;|&lt;/code&gt; in the matches doesn&amp;rsquo;t separate alternatives (as in OCaml), but instead gives a condition which
must also be true for it to match, like &lt;code&gt;when&lt;/code&gt; in OCaml.&lt;/p&gt;

&lt;h2&gt;String processing&lt;/h2&gt;

&lt;p&gt;We need to expand environment variables in arguments. In the XML, it looks like this:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;arg&amp;gt;&lt;/span&gt;-X${item}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/arg&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-X${item}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substitute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;I guess that&amp;rsquo;s cheating, since I picked Python&amp;rsquo;s preferred syntax when I designed the XML format. Here&amp;rsquo;s
how to do it without using Template:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;re_expand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;quot;\$(\$|([a-zA-Z_][a-zA-Z0-9_]*)|{[^}]*})&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expandArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expand_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'$'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re_expand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;Easy. Notice the handy &lt;code&gt;r&amp;quot;...&amp;quot;&lt;/code&gt; syntax for raw strings, which avoids the need to escape backslashes everywhere.&lt;/p&gt;

&lt;p&gt;Oh, and I seem to have written an OCaml-style backwards loop here. Guess they&amp;rsquo;re not unique to OCaml after all.&lt;/p&gt;

&lt;h3&gt;OCaml&lt;/h3&gt;

&lt;p&gt;The regex is looking a bit ugly, but still pretty good. Oddly, instead of getting some kind of &lt;code&gt;MatchResult&lt;/code&gt; object
passed to &lt;code&gt;expand&lt;/code&gt;, we just get the original string and then pass that to the global &lt;code&gt;match&lt;/code&gt; function. I guess that&amp;rsquo;s
just how the underlying library works.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re_template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;([a-zA-Z_][a-zA-Z0-9_]*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|{[^}]*}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand_arg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove_braces&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'{'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched_group&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Error: empty variable name in template: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_braces&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;nn&quot;&gt;Str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_substitute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re_template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;p&gt;This was hard, but stackoverflow to the rescue!&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;expandArg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Env&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;expandArg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replaceAll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeRegex&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$|([a-zA-Z_][a-zA-Z0-9_]*)|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{[^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}]*})&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	      &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	      			&lt;span class=&quot;s&quot;&gt;&amp;quot;$$&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;$&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;sc&quot;&gt;'$'&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'{'&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replaceVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;sc&quot;&gt;'$'&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replaceVar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;regex failed&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	      &lt;span class=&quot;n&quot;&gt;replaceVar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	      				&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Variable '%s' not set!&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Based on http://stackoverflow.com/a/9072362/50926&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Use the given function to replace each occurance of 're' in 's'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;replaceAll&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Regex&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;replaceAll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foldl'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAllMatches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitAt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toRead&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Finding resources&lt;/h2&gt;

&lt;p&gt;When shipping stand-alone binaries or 0install packages, it&amp;rsquo;s useful if the program can find other resources
in its own code directory. In our case, we need to find the launcher program so we can symlink to it.&lt;/p&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;p&gt;In Python, this is really easy. Every module has an attribute &lt;code&gt;__file__&lt;/code&gt; which has the location of that module:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;my_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;OCaml&lt;/h3&gt;

&lt;p&gt;When called as a binary, we can get the path from argv[0] and use that. If we&amp;rsquo;re being used as a library then
we&amp;rsquo;re either installed as a system package (and can look in some hard-coded path) or being run as a 0install
dependency (and can get 0install to set an environment variable for us). Easy enough, but &lt;code&gt;abspath&lt;/code&gt; (and
&lt;code&gt;realpath&lt;/code&gt;) are missing from the standard library.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;my_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;p&gt;Wow. I have no idea how this works.&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;cm&quot;&gt;{-# LANGUAGE ForeignFunctionInterface #-}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Foreign&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Foreign.C&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Directory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getCurrentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progPath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFullProgName&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;n&quot;&gt;absProgPath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute_path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progPath&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dropFileName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absProgPath&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- From http://hackage.haskell.org/trac/ghc/ticket/3199&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getFullProgName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;getFullProgName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;alloca&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_argc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;alloca&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_argv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;n&quot;&gt;getFullProgArgv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_argc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_argv&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p_argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peekCString&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ccall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;getFullProgArgv&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;getFullProgArgv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ptr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CInt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ptr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- From http://hackage.haskell.org/packages/archive/MissingH/1.2.0.0/doc/html/System-Path-NameManip.html&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;absolute_path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;absolute_path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;absolute_path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;n&quot;&gt;cwd&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentDirectory&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;API docs&lt;/h2&gt;

&lt;p&gt;All three languages make it easy to generate cross-referenced API docs. I didn&amp;rsquo;t bother to fill in many
strings for the OCaml and Haskell, but the linked sample pages show what it looks like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://0install.net/python-api/html/&quot;&gt;Python API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/resources/ocaml-api-sample/Qdom.NsQuery.html&quot;&gt;OCaml API sample&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/resources/haskell-api-sample/Run.html&quot;&gt;Haskell API sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python and Haskell require you to document the types in the code if you want them to appear in the docs.
The Python syntax for this is a bit awkward.
OCaml infers the types automatically.&lt;/p&gt;

&lt;h2&gt;Speed&lt;/h2&gt;

&lt;p&gt;My test case is running 0release (which has the largest selections.xml of all
my apps), except that I edited the selections so it runs /bin/echo at the end
rather than /usr/bin/python2. Otherwise we&amp;rsquo;re just measuring the speed of Python.
Running &lt;code&gt;echo&lt;/code&gt; directly with a trivial (hard-coded) C program takes 2-3 ms, so that&amp;rsquo;s the
theoretical best time.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Language&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Time / ms&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Lines of code&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Non-blank chars&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;(baseline)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;OCaml&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;678&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;17,201&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Haskell&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;543&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16,818&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Python (test)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;45 / 76&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;576&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;14,685&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Python (real)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;64 / 109&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;21,427&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;609,082&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Enabling stack traces in OCaml (&lt;code&gt;OCAMLRUNPARAM=b&lt;/code&gt;) increased the time from 7ms to 8ms.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Python (test)&amp;rdquo; is a version I wrote for this comparison to get a feel for the number of
lines. It doesn&amp;rsquo;t do as much checking as the real version and lacks some
features. &amp;ldquo;Python (real)&amp;rdquo; is the regular &amp;ldquo;0launch&amp;rdquo; command. The first number is
the time with Python 2, the second with Python 3. It&amp;rsquo;s interesting how much faster the
test version is!&lt;/p&gt;

&lt;p&gt;By the way, if you&amp;rsquo;re thinking &amp;ldquo;parsing XML just to set up environment variables is inefficient; I&amp;rsquo;ll just
use a shell script to start my program&amp;rdquo;, a &lt;code&gt;/bin/sh&lt;/code&gt; script which just execs &amp;ldquo;echo&amp;rdquo; takes 10 ms.&lt;/p&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;All three languages are easy to read, avoiding verbose boilerplate code, and ending up fairly similar in length.
No doubt an expert in OCaml or Haskell would write much shorter code than I did.
OCaml&amp;rsquo;s syntax is simple, but the indentation doesn&amp;rsquo;t necessarily match up with OCaml&amp;rsquo;s interpretation of the code,
which is a concern. In Python and Haskell, the compiler always sees the same structure as the programmer.&lt;/p&gt;

&lt;p&gt;Haskell provides all kinds of special notations for writing shorter code.
This means that reading other people&amp;rsquo;s Haskell code can be very difficult.
Also, the same structure (e.g. &lt;code&gt;do&lt;/code&gt;) can mean
wildly different things in different contexts. OCaml syntax is easy to learn and easy to understand.&lt;/p&gt;

&lt;p&gt;Many things that are simple in Python or OCaml become very complex in Haskell. In this example: reading an environment
variable that may be unset, doing any kind of IO, reporting errors in XML documents, search-and-replace in strings and
reading &lt;code&gt;argv&lt;/code&gt;. And although not part of this test, I think the converting 0install&amp;rsquo;s solver to Haskell would be very difficult.&lt;/p&gt;

&lt;p&gt;Haskell&amp;rsquo;s ability to control where IO happens is useful, but other languages (e.g. E and (hopefully) OCaml with Emily) achieve
the same thing without all the complexity.&lt;/p&gt;

&lt;p&gt;Python&amp;rsquo;s data structures are very limited and error prone. OCaml and Haskell record and variant types significantly improve
the code. OCaml makes working with record types easier, while Haskell simplifies debugging by making it easy to convert
structures to strings.&lt;/p&gt;

&lt;p&gt;XML handling was easiest in OCaml, though I did have to make my own tree structure.
Python&amp;rsquo;s XML libraries aren&amp;rsquo;t safe and Haskell&amp;rsquo;s doesn&amp;rsquo;t report (or even detect, in some cases) errors.&lt;/p&gt;

&lt;p&gt;Walking the XML tree and building a list was easy in all three languages. In Python and OCaml, because they let us mutate a single
list while walking the tree, and in Haskell thanks to its List monad which handles everything behind the scenes.&lt;/p&gt;

&lt;p&gt;A major benefit of OCaml and Haskell is the ease of refactoring. In Python, once the code is working it&amp;rsquo;s best not to change
things, in case you break something that isn&amp;rsquo;t covered by the unit-tests. In OCaml and Haskell, you can rename a function, delete
old code or change a data structure and rely on the compiler to check that everything&amp;rsquo;s still OK. The static typing in OCaml and
Haskell also gives me more confidence that that various untested error reporting code paths will actually work. Untested Python
code is buggy code, generally.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure how stable the OCaml library APIs are (I assume they don&amp;rsquo;t change much), but it&amp;rsquo;s clear that Haskell&amp;rsquo;s APIs change
frequently: code samples and documentation I found on the &amp;lsquo;net were frequently out of date and wouldn&amp;rsquo;t compile without changes.
Python is generally pretty good, if you overlook the massive changes in Python 3.&lt;/p&gt;

&lt;p&gt;In the previous (trivial) test, OCaml and Haskell had very similar performance, but here OCaml clearly moves into the lead. Python is
far behind, and only getting slower with the move to Python 3. Being able to write code without worrying about speed all the time
is very liberating!&lt;/p&gt;

&lt;p&gt;The two statically typed languages didn&amp;rsquo;t require much debugging, except that OCaml&amp;rsquo;s &lt;code&gt;find&lt;/code&gt; function throws an exception if the
key isn&amp;rsquo;t found rather than using an &lt;code&gt;option&lt;/code&gt; type (as in Haskell), which can lead to non-obvious errors. Turning on stack-traces
in OCaml makes it easy to track these down however, and making my own wrappers for &lt;code&gt;find&lt;/code&gt; and similar should mean it won&amp;rsquo;t be a problem
in general.&lt;/p&gt;

&lt;p&gt;The big surprise for me in these tests was how little you lose going from Python to OCaml. You still have classes, objects, functions,
mutable data and low-level access to the OS, all with an easy and concise syntax, but you gain type checking, much better data
structures and a huge amount of speed for no additional effort. Why aren&amp;rsquo;t more people using it?&lt;/p&gt;

&lt;p&gt;Although Haskell and OCaml look more similar to each other than to Python, this is just syntax. In fact, OCaml and Python are conceptually
pretty similar, while Haskell is different in almost every way.&lt;/p&gt;

&lt;p&gt;Overall, binary compatibility (i.e. difficulty of making cross-platform releases of the library, which is currently easy with Python)
is my main remaining concern. But while further testing is required (particularly for networking, threading and GUI support),
so far I&amp;rsquo;d be happy to move to OCaml.&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2013/06/20/replacing-python-round-2/</id><title type="text">Replacing Python: second round</title><updated>2013-06-20T16:38:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://anil.recoil.org/2013/06/17/real-world-ocaml-beta-available.html" rel="alternate"/><contributor><uri>http://anil.recoil.org/feeds/atom-ocaml.xml</uri><name>Anil Madhavapeddy</name></contributor><content type="html">&lt;p&gt;When I finished writing my PhD, I swore (as most recent graduates do) to never
write a thesis again.  Instead, life would be a series of pleasantly short
papers, interspersed with the occasional journal article, and lots of
not-writing-huge-book-activity in general.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://realworldocaml.org&quot;&gt;&lt;img src=&quot;http://anil.recoil.org/images/oreilly-cover.gif&quot; style=&quot;padding-left:15px&quot; align=&quot;right&quot;/&gt;&lt;/a&gt;
Then &lt;a href=&quot;http://cufp.org/conference/2011&quot;&gt;CUFP 2011&lt;/a&gt; happened, and I find myself
in a bar in Tokyo with &lt;a href=&quot;https://twitter.com/yminsky&quot;&gt;Yaron Minsky&lt;/a&gt; and &lt;a href=&quot;http://monkey.org/~marius&quot;&gt;Marius Eriksen&lt;/a&gt;, and a dangerous bet ensued.
A few short weeks after that, and Yaron and I are chatting with &lt;a href=&quot;https://plus.google.com/111219778721183890368&quot;&gt;Jason Hickey&lt;/a&gt; in California about
writing a book about the language we love.  I&amp;rsquo;m still telling myself that this will never actually happen,
but then everyone&amp;rsquo;s favourite Californirishman &lt;a href=&quot;http://www.serpentine.com/blog/&quot;&gt;Bryan O&amp;rsquo;Sullivan&lt;/a&gt; puts us in touch with O&amp;rsquo;Reilly,
who published his excellent &lt;a href=&quot;http://realworldhaskell.org&quot;&gt;Haskell&lt;/a&gt; tome.&lt;/p&gt;

&lt;p&gt;O&amp;rsquo;Reilly arranged everything incredibly fast, with our editor &lt;a href=&quot;http://radar.oreilly.com/andyo&quot;&gt;Andy Oram&lt;/a&gt; driving us through the process.  We
decided early on that we wanted to write a book that had opinions based our
personal experience: about how OCaml code should be written, about the standard
library involved, and generally making functional programming more accessible.
Along the way, we&amp;rsquo;ve been working incredibly hard on the underlying software
platform too, with &lt;a href=&quot;http://ocaml.janestreet.com&quot;&gt;Jane Street&lt;/a&gt;, &lt;a href=&quot;http://ocamlpro.com&quot;&gt;OCamlPro&lt;/a&gt; and my own
group &lt;a href=&quot;http://ocaml.io&quot;&gt;OCaml Labs&lt;/a&gt; working together on all the pieces.  There&amp;rsquo;s
still a lot of work left to do, of course, but we&amp;rsquo;re right on track to get
all this released very soon now.&lt;/p&gt;

&lt;p&gt;So, without further ado, I was very pleased to send this e-mail this morning.
(and once again reaffirm my committment to never writing another book ever
again.  Until next time!)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yaron Minsky, Jason Hickey and I are pleased to announce the beta release of
our forthcoming O&amp;rsquo;Reilly book, called &amp;ldquo;Real World OCaml&amp;rdquo;, available online at
&lt;a href=&quot;http://realworldocaml.org&quot;&gt;http://realworldocaml.org&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;The book is split into three parts: language concepts, tools and techniques,
and understanding the runtime.  As promised last year, we are making a public
beta available for community review and to help us hunt down inaccuracies and
find areas that need more clarification.&lt;/p&gt;

  &lt;p&gt;We&amp;rsquo;ve had the book in closed alpha for six months or so and have developed a
feedback system that uses Github to record your comments. This lets us follow
up to each review with clarifications and keep track of our progress in fixing
issues.  During alpha, we&amp;rsquo;ve received over 1400 comments in this fashion (and
addressed the vast majority of them!).  However, since we anticipate more
comments coming in from a public beta, we would request that you read the FAQ
to avoid drowning us in repeat comments: &lt;a href=&quot;http://www.realworldocaml.org/#faq&quot;&gt;http://www.realworldocaml.org/#faq&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;(TL;DR followup another comment on Github directly if you can instead of
creating a new issue via the web interface)&lt;/p&gt;

  &lt;p&gt;This release is available in HTML format online at:
   &lt;a href=&quot;http://realworldocaml.org&quot;&gt;http://www.realworldocaml.org&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;O&amp;rsquo;Reilly is currently preparing a Rough Cuts release that will make the beta
available as PDF and in popular eBook formats.   We anticipate that this will
be available later this week, and I&amp;rsquo;ll send a followup when that happens.&lt;/p&gt;

  &lt;p&gt;Finally, we would especially like to thank our alpha reviewers.  Their &lt;a href=&quot;https://github.com/ocamllabs/rwo-comments/issues&quot;&gt;feedback&lt;/a&gt; has been invaluable to the
beta release. The book also includes substantial contributions to individual
chapters from Jeremy Yallop (FFI), Stephen Weeks (GC) and Leo White (objects).&lt;/p&gt;

  &lt;p&gt;If you have any comments that you&amp;rsquo;d like to send directly by e-mail, please
contact us at &lt;a href=&quot;mailto:rwo-authors@recoil.org&quot;&gt;rwo-authors@recoil.org&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;Release notes for beta1:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;The first-class modules chapter is incomplete, pending some portability
improvements to the ocaml-plugins Core library.&lt;/li&gt;
    &lt;li&gt;The binary serialization chapter is also incomplete, but has just enough
to teach you about the Async RPC library.&lt;/li&gt;
    &lt;li&gt;The installation chapter will be revised in anticipation of the OCaml 4.1
release, and is currently quite source-based.&lt;/li&gt;
    &lt;li&gt;The packaging and build systems chapter hasn&amp;rsquo;t been started yet.  We&amp;rsquo;re
still deciding whether or not to make this an online pointer rather than
a print chapter, since it&amp;rsquo;s likely to change quite fast.&lt;/li&gt;
    &lt;li&gt;We are preparing exercises per chapter that are not included in this
particular beta release, but will be available online as soon as possible.&lt;/li&gt;
    &lt;li&gt;The code examples will all be clonable as a separate repository in beta2.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;best,
Yaron, Jason and Anil&lt;/p&gt;
&lt;/blockquote&gt;
</content><id>http://anil.recoil.org/2013/06/17/real-world-ocaml-beta-available.html</id><title type="text">Phew, Real World OCaml beta now available.</title><updated>2013-06-17T01:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/" rel="alternate"/><contributor><uri>http://roscidus.com/blog/atom.xml</uri><name>Thomas Leonard</name></contributor><content type="html">&lt;p&gt;This post evaluates the programming languages &lt;strong&gt;ATS&lt;/strong&gt;, &lt;strong&gt;C#&lt;/strong&gt;, &lt;strong&gt;Go&lt;/strong&gt;, &lt;strong&gt;Haskell&lt;/strong&gt;, &lt;strong&gt;OCaml&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt; and &lt;strong&gt;Rust&lt;/strong&gt; to try to decide which would be the best language in which to write 0install (which is currently implemented in Python). Hopefully it will also be interesting to anyone curious about these languages.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not an expert in these languages (except Python). My test-case is to read the tutorial for each language and reimplement one trivial function of 0install in the language. These languages were suggested by various people on the 0install mailing list. If I&amp;rsquo;ve got anything wrong, please add a comment.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#why-replace-python&quot;&gt;Why replace Python?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#brief-summary-of-the-candidates&quot;&gt;Brief summary of the candidates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#test-case&quot;&gt;Test case&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#speed-and-size&quot;&gt;Speed and size&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#binary-compatibility&quot;&gt;Binary compatibility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#safety&quot;&gt;Safety&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#diagnostics&quot;&gt;Diagnostics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#ease-of-writing&quot;&gt;Ease of writing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#shared-libraries&quot;&gt;Shared libraries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#static-types&quot;&gt;Static types&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#prevention-of-null-pointer-errors&quot;&gt;Prevention of null pointer errors&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#dependent-types&quot;&gt;Dependent types&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#managing-resources-linear-types&quot;&gt;Managing resources (linear types)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#bounds-on-privilege&quot;&gt;Bounds on privilege&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#mutability&quot;&gt;Mutability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#c-interoperability&quot;&gt;C interoperability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#asynchronous-code&quot;&gt;Asynchronous code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://roscidus.com/blog/atom.xml#round-2&quot;&gt;Round 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Why replace Python?&lt;/h2&gt;

&lt;p&gt;Several people have asked for a version of 0install in a compiled language:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/6912&quot;&gt;Tim Cuthbertson&lt;/a&gt; wants to build a statically-linked binary for bootstrapping on systems which don&amp;rsquo;t already have 0install, to increase performance and to simplify installation on OS X. He has started prototyping a Haskell version.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thread.gmane.org/gmane.linux.ubuntu.devel/37162/focus=37228&quot;&gt;Canonical&amp;rsquo;s Colin Watson&lt;/a&gt; is worried about Python&amp;rsquo;s performance on mobile phones.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/5106/focus=5115&quot;&gt;Marco Jez and Dave Abrahams&lt;/a&gt; proposed a C++ version.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/5106/focus=5115&quot;&gt;Bastian Eicher&lt;/a&gt; would like a .NET version (though IronPython might work here).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/2776/focus=18814&quot;&gt;The Sugar developers&lt;/a&gt; would like maximum performance on their low-powered XO laptops.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, I&amp;rsquo;d like to use a language with static type checking to make changes to the code less risky, and to detect problems due to API changes in the platform (e.g. Python 3 broke the code in subtle ways which we&amp;rsquo;re still discovering occasionally in less-used code-paths).&lt;/p&gt;

&lt;p&gt;However, Python has worked well for us over the years and has many benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Widely known and easy to learn.&lt;/li&gt;
  &lt;li&gt;Clear, readable syntax.&lt;/li&gt;
  &lt;li&gt;A large standard library.&lt;/li&gt;
  &lt;li&gt;Easy to debug.&lt;/li&gt;
  &lt;li&gt;Generators make asynchronous code easy.&lt;/li&gt;
  &lt;li&gt;You only need to ship source code (interpreted).&lt;/li&gt;
  &lt;li&gt;Can run inside a Java or .NET VM (using Jython/IronPython).&lt;/li&gt;
  &lt;li&gt;Can support multiple versions of library APIs (&lt;code&gt;if hasattr(...)&lt;/code&gt; etc).&lt;/li&gt;
  &lt;li&gt;All current 0install contributors know it.&lt;/li&gt;
  &lt;li&gt;The current code is all Python and is well-tested.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Brief summary of the candidates&lt;/h2&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://www.ats-lang.org/&quot;&gt;ATS&lt;/a&gt; (version 0.2.8)&lt;/dt&gt;
  &lt;dd&gt;A functional language with a very advanced type system, which includes
dependent types (e.g. &amp;ldquo;a String of length n&amp;rdquo;) and linear types (e.g. an
obligation to close a file descriptor after use). An interesting feature
of ATS is that its run-time types are identical to C&amp;rsquo;s (e.g. an ATS string
is a null-terminated array of chars), allowing interoperability with C without
wrapping.&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;implement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/C_Sharp_(programming_language)&quot;&gt;C#&lt;/a&gt; (mcs 3.0.7.0)&lt;/dt&gt;
  &lt;dd&gt;Microsoft&amp;rsquo;s Java alternative. Much of the Windows version of 0install is written
in C# (it currently uses IPC to talk to the Python solver process). It compiles
to .NET bytecode, which can run on any platform. On non-Windows platforms,
Mono can run .NET code.&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://golang.org/&quot;&gt;Go&lt;/a&gt; (1.1)&lt;/dt&gt;
  &lt;dd&gt;Google&amp;rsquo;s C replacement, with a focus on being light-weight and easy to use.&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://www.haskell.org&quot;&gt;Haskell&lt;/a&gt; (7.6.3)&lt;/dt&gt;
  &lt;dd&gt;A lazy, purely functional language (no function can have side-effects; &lt;code&gt;main&lt;/code&gt; essentially returns
a request to print hello world).&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://ocaml.org/&quot;&gt;OCaml&lt;/a&gt; (4.00.1)&lt;/dt&gt;
  &lt;dd&gt;Another functional language. It can be interpreted, compiled to platform-independent bytecode, or
compiled to native code.&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;print_endline&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://www.python.org/&quot;&gt;Python&lt;/a&gt; (2.7.5 and 3.3.2)&lt;/dt&gt;
  &lt;dd&gt;A popular, easy to learn interpreted language.&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;http://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; (0.6)&lt;/dt&gt;
  &lt;dd&gt;Mozilla&amp;rsquo;s experimental new language, which aims to be a safe replacement for C. It
supports manual memory management (as well as optional garbage collection),
using linear types to ensure that everything is used safely and freed
correctly.&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Test case&lt;/h2&gt;
&lt;p&gt;To get a feel for each language, we implemented a trivial piece of 0install in each one. Here&amp;rsquo;s the current (complete) Python version:&lt;/p&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;runenv.py &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;envname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0install-runenv-&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;p&gt;In case you&amp;rsquo;re wondering what this is for: this executable is used when a program &lt;em&gt;A&lt;/em&gt; depends on another, &lt;em&gt;B&lt;/em&gt;. &lt;em&gt;A&lt;/em&gt; has this launcher script in its $PATH under the appropriate name. When &lt;em&gt;A&lt;/em&gt; runs the launcher, the launcher runs the correct version of &lt;em&gt;B&lt;/em&gt; with the appropriate interpreter and arguments. For example, &lt;em&gt;A&lt;/em&gt; might run &lt;code&gt;foo --process&lt;/code&gt; and the launcher might invoke &lt;code&gt;/usr/bin/python2.7 /var/cache/0install.net/.../foo.py --process&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To avoid creating one launcher for every possible set of versions, the exact strings to use are placed in an environment variable in program &lt;em&gt;A&lt;/em&gt;&amp;rsquo;s environment when it is launched, and &lt;code&gt;foo&lt;/code&gt; is just a symlink to the launcher. So, this program (the launcher):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Finds out the name of the symlink used to invoke it.&lt;/li&gt;
  &lt;li&gt;Gets the details of how to invoke program &lt;em&gt;B&lt;/em&gt; from the environment (this is a JSON string list).&lt;/li&gt;
  &lt;li&gt;Invokes the target with those arguments, plus any extra arguments passed to the launcher.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: I didn&amp;rsquo;t make any particular effort to write the test code carefully. If it seemed to work, I went with it. In real code I would obviously try
to be more careful, but since real code would be bigger, I&amp;rsquo;d also make more mistakes. I want to see how well each language prevents me from making
mistakes.&lt;/p&gt;

&lt;h2&gt;Speed and size&lt;/h2&gt;
&lt;p&gt;0install doesn&amp;rsquo;t require much CPU time, but it does need to start quickly (and this particular bit especially so). The table below shows how many
times per second each version of the launcher was able to run a trivial C program. &amp;ldquo;Overhead&amp;rdquo; is the amount
of time each run took over running the binary directly without a launcher. &amp;ldquo;Size&amp;rdquo; is the size of the binary
being executed, excluding any shared libraries or runtime components.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Time (ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Overhead (ms)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Speed (runs/s)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Size (KB)&lt;/th&gt;
      &lt;th&gt;Language&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.74&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+  0.63&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;574&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;72.83&lt;/td&gt;
      &lt;td&gt;ATS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.02&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+  1.90&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;332&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1210.88&lt;/td&gt;
      &lt;td&gt;OCaml (native)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.38&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+  2.26&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;296&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1323.30&lt;/td&gt;
      &lt;td&gt;Haskell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8.99&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+  7.87&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;111&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1907.68&lt;/td&gt;
      &lt;td&gt;Go&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9.33&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+  8.22&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;107&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;326.79&lt;/td&gt;
      &lt;td&gt;OCaml (bytecode)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10.20&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+  9.09&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;98&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;130.58&lt;/td&gt;
      &lt;td&gt;Rust&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;51.88&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+ 50.76&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;19&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.18&lt;/td&gt;
      &lt;td&gt;Python3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;82.98&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+ 81.86&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.18&lt;/td&gt;
      &lt;td&gt;Python2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;83.37&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+ 82.26&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.50&lt;/td&gt;
      &lt;td&gt;C# (Mono)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;http://roscidus.com/blog/images/langspeed.png&quot; class=&quot;border&quot;/&gt;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;ATS (5)&lt;/dt&gt;
  &lt;dd&gt;ATS is the clear winner here. It&amp;rsquo;s significantly faster than its closest
rival, and at a fraction of the size. Note that the only smaller executables
(Python and C#) depend on huge external runtimes. The ATS binary depends only
on libjson.so, a 39 KB C library that, on my system at least, was already
installed.&lt;/dd&gt;
  &lt;dt&gt;Haskell and OCaml (4)&lt;/dt&gt;
  &lt;dd&gt;These two garbage-collected functional languages both put in impressive
performances. &lt;/dd&gt;
  &lt;dt&gt;Rust (3)&lt;/dt&gt;
  &lt;dd&gt;I was surprised and disappointed by how badly Rust did here. With its low-level
focus and manual memory management, I was expecting it to get close to ATS. Maybe
things will improve when it&amp;rsquo;s more mature.&lt;/dd&gt;
  &lt;dt&gt;Go (3)&lt;/dt&gt;
  &lt;dd&gt;A very disappointing performance from Go too.&lt;/dd&gt;
  &lt;dt&gt;Python (2)&lt;/dt&gt;
  &lt;dd&gt;Python executables are small, but very slow. Note that Python 2 is usually faster than Python 3, but after a recent
package update, Python 2 has suddenly become slower on my system. Python 2 was previously getting 27 runs per second.&lt;/dd&gt;
  &lt;dt&gt;C# (1)&lt;/dt&gt;
  &lt;dd&gt;Fiddling around with ahead-of-time compilation and static linking didn&amp;rsquo;t seem to
help here.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Except for C#, I didn&amp;rsquo;t make any particular attempt to make the binaries smaller or faster, but just
went with the compilers&amp;rsquo; defaults.&lt;/p&gt;

&lt;p&gt;Some of these languages depend on shared runtimes or libraries, which may or may not already be installed.
For each one, I looked at how much extra software I had to install to make the binary run on a Debian 7
clean install (just &amp;ldquo;SSH server&amp;rdquo; and &amp;ldquo;Standard system utilities&amp;rdquo; selected during install). This is also a
good test for binary compatibility problems (see next section).&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Dependencies&amp;rdquo; is the &amp;ldquo;additional disk space used&amp;rdquo; reported by &lt;code&gt;apt-get install ... --no-install-recommends&lt;/code&gt;.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Total (KB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Binary size (KB)&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Dependencies (KB)&lt;/th&gt;
      &lt;th&gt;Language&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.18&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0.18&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;156.83&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;72.83&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;84&lt;/td&gt;
      &lt;td&gt;ATS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1210.88&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1210.88&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0&lt;/td&gt;
      &lt;td&gt;OCaml (native)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1323.30&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1323.30&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0&lt;/td&gt;
      &lt;td&gt;Haskell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1907.68&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1907.68&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0&lt;/td&gt;
      &lt;td&gt;Go&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13242.58&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;130.58&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13112&lt;/td&gt;
      &lt;td&gt;Rust&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13335.79&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;326.79&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;13009&lt;/td&gt;
      &lt;td&gt;OCaml (bytecode)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;31133.50&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.50&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;31130&lt;/td&gt;
      &lt;td&gt;C# (Mono)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However, this is slightly unfair because we&amp;rsquo;d need to use many other features for a full version of 0install.
Languages with large standard libraries (e.g. Python and .NET) won&amp;rsquo;t need much extra stuff.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Python (5)&lt;/dt&gt;
  &lt;dd&gt;Like most Linux systems (and OS X), Python is installed by default.&lt;/dd&gt;
  &lt;dt&gt;ATS (5)&lt;/dt&gt;
  &lt;dd&gt;ATS would be the smallest by far, if Python wasn&amp;rsquo;t pre-installed.

    &lt;p&gt;&lt;code&gt;apt-get install libjson0 --no-install-recommends&lt;/code&gt;&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;OCaml (4)&lt;/dt&gt;
  &lt;dd&gt;Having both native and bytecode options is convenient: we can use bytecode for programs that aren&amp;rsquo;t speed
critical, and native code for embedded situations. The native version has no dependencies. The bytecode
version requires:

    &lt;p&gt;&lt;code&gt;apt-get install ocaml-base libyojson-ocaml --no-install-recommends&lt;/code&gt;&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Haskell (3)&lt;/dt&gt;
  &lt;dd&gt;Only slightly larger than OCaml, but no bytecode option.&lt;/dd&gt;
  &lt;dt&gt;Go (3)&lt;/dt&gt;
  &lt;dd&gt;Go doesn&amp;rsquo;t support dynamic linking, so there are no dependencies.&lt;/dd&gt;
  &lt;dt&gt;Rust (2)&lt;/dt&gt;
  &lt;dd&gt;Rust has a surprisingly large runtime, considering that its standard library is quite limited.&lt;/dd&gt;
  &lt;dt&gt;C# (1)&lt;/dt&gt;
  &lt;dd&gt;Debian&amp;rsquo;s &lt;code&gt;libnewtonsoft-json4.5-cil&lt;/code&gt; was incompatible with the one I&amp;rsquo;d used, so I used my copy of &lt;code&gt;Newtonsoft.Json.dll&lt;/code&gt;.

    &lt;p&gt;&lt;code&gt;apt-get install binfmt-support mono-runtime libmono-system-windows-forms4.0-cil --no-install-recommends&lt;/code&gt;&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Binary compatibility&lt;/h2&gt;

&lt;p&gt;Several of these programs, compiled on my Arch Linux system, failed to run on
Debian because they&amp;rsquo;d picked up a dependency on GLIBC 2.14&amp;rsquo;s memcpy (glibc uses &lt;em&gt;symbol versioning&lt;/em&gt;,
so that when it changes in an incompatible way, your current binaries continue working for a bit,
before breaking mysteriously next time you recompile).&lt;/p&gt;

&lt;p&gt;For the affected programs, I recompiled them on Debian. This isn&amp;rsquo;t a huge problem, because we
can just compile binaries on the oldest system we want to support and they will
still work on newer systems.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Python (5)&lt;/dt&gt;
  &lt;dd&gt;Worked fine. &lt;code&gt;/usr/bin/python&lt;/code&gt; was Python 2 rather than Python 3 (as on
Arch), which can be a hassle, but 0install is written to run on either.&lt;/dd&gt;
  &lt;dt&gt;C# (5)&lt;/dt&gt;
  &lt;dd&gt;.NET is a nice portable bytecode.
However, the binary wouldn&amp;rsquo;t run when executed directly until I installed &lt;code&gt;binfmt-support&lt;/code&gt;. Debian&amp;rsquo;s
&lt;code&gt;libnewtonsoft-json4.5-cil&lt;/code&gt; was incompatible with the one I&amp;rsquo;d used, so I bundled my copy of &lt;code&gt;Newtonsoft.Json.dll&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;ATS (4)&lt;/dt&gt;
  &lt;dd&gt;Had the GLIBC 2.14 problem. However, I didn&amp;rsquo;t need to recompile on Debian, as ATS allowed me to
&lt;a href=&quot;http://stackoverflow.com/a/8862631/50926&quot;&gt;specify the desired symbol version&lt;/a&gt; with a few lines of embedded C.
Then the binary compiled on Arch also worked on Debian.&lt;/dd&gt;
  &lt;dt&gt;OCaml (4)&lt;/dt&gt;
  &lt;dd&gt;The OCaml native binary failed to work due to the GLIBC 2.14 dependency and had to be recompiled.
The OCaml bytecode version failed with &lt;code&gt;Fatal error: unknown C primitive 'caml_array_blit'&lt;/code&gt; and
had to be recompiled.
The resulting recompiled binaries worked on my modern Arch Linux system.&lt;/dd&gt;
  &lt;dt&gt;Go (3)&lt;/dt&gt;
  &lt;dd&gt;Worked, but only because it doesn&amp;rsquo;t support dynamic linking. That&amp;rsquo;s not very useful if we need to upgrade
a library. It&amp;rsquo;s hard to give a score here. On the one hand, it did work perfectly (and so should get a 5).
On the other hand, any language can get binary compatibility by statically linking everything; that&amp;rsquo;s not
really what we&amp;rsquo;re interested in.&lt;/dd&gt;
  &lt;dt&gt;Haskell (2)&lt;/dt&gt;
  &lt;dd&gt;Also failed with the GLIBC 2.14 problem. I rebuilt the binary on Debian 7, but the new binary then
didn&amp;rsquo;t work on my newer Arch system: &lt;code&gt;libffi.so.5: cannot open shared object file: No such file or directory&lt;/code&gt;.&lt;/dd&gt;
  &lt;dt&gt;Rust (2)&lt;/dt&gt;
  &lt;dd&gt;Failed with &lt;code&gt;libcore-c3ca5d77d81b46c1-0.6.so: cannot open shared object file&lt;/code&gt;. Rust is not available on
Debian 7. I compiled Rust from source to get the libcore library (got &lt;code&gt;the compiler hit an unexpected failure path. this is a bug&lt;/code&gt;, but I seemed to have a working compiler at the end anyway, in the &lt;code&gt;stage1&lt;/code&gt; directory).
I then hit same the GLIBC problem with my test binary. I used the new rust
compiler to rebuild the binary on Debian.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;To clarify what we want to do here: Currently, to make a new release of
0install I publish a single tarball containing the Python code. Tools which
depend on this library (e.g. 0compile) start using the new version
automatically (they don&amp;rsquo;t need to be rebuilt). Also, if a library 0install
depends on (e.g. GTK or glibc) gets updated, I don&amp;rsquo;t need to make a new release
there either.&lt;/p&gt;

&lt;h2&gt;Safety&lt;/h2&gt;
&lt;p&gt;For me, a &amp;ldquo;safe&amp;rdquo; language is one which stops and reports a problem when something unexpected occurs at runtime. An unsafe one carries on, using
incorrect data. Unsafe behaviour often causes security problems and data loss. For example, many programs, including 0install, update files atomically by
writing out the new data to a new file and then renaming it over the original on success. If the function says it successfully saved the data when
it didn&amp;rsquo;t (e.g. because the disk was full) data loss will occur.&lt;/p&gt;

&lt;p&gt;As a basic test of each language&amp;rsquo;s approach to safety, I took the &amp;ldquo;Hello World&amp;rdquo; example program from the language&amp;rsquo;s own tutorial, compiled
it, and ran it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./hello 1&amp;lt; /dev/null; echo Exit status: $?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This runs it with a read-only stdout, so the program will fail to output its message. A safe language will print an error to stderr and return a non-zero exit status to indicate failure. An unsafe language will print nothing and return 0 (success). If you&amp;rsquo;re not sure why this is important, imagine the command is &lt;code&gt;dump-database &amp;gt; backup&lt;/code&gt; and the filesystem is full.&lt;/p&gt;

&lt;p&gt;My theory is, if the language designers can&amp;rsquo;t write &lt;em&gt;hello world&lt;/em&gt; safely, what hope do the rest of us have?&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Rust (5)&lt;/dt&gt;
  &lt;dd&gt;Amazingly, Rust was the only language to pass this test!&lt;/dd&gt;
  &lt;dt&gt;ATS, C#, Go, Haskell, OCaml, Python (1)&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Rubbish.&lt;/p&gt;

    &lt;p&gt;Update: OCaml would have passed if they&amp;rsquo;d used &lt;code&gt;print_endline&lt;/code&gt;, but the tutorial used &lt;code&gt;print_string&lt;/code&gt;, which doesn&amp;rsquo;t abort.&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Note: Isn&amp;rsquo;t it a bit silly to generalise from this one data-point to the
behaviour of the whole language? Yes. But as a starting off point for
discussion, it&amp;rsquo;s working quite well. e.g. the OCaml response was surprise that
it didn&amp;rsquo;t work, whereas Go users regard this behaviour as normal and expected.&lt;/p&gt;

&lt;p&gt;Next, what does each of the sample programs do if the environment variable isn&amp;rsquo;t set? The program should abort with an error message when it tries to read the environment variable.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Python, OCaml, Haskell (5)&lt;/dt&gt;
  &lt;dd&gt;All abort correctly with an exception. No special code needed.&lt;/dd&gt;
  &lt;dt&gt;Rust, ATS (5)&lt;/dt&gt;
  &lt;dd&gt;The compiler forces me to handle the case of the variable not being set. Good.&lt;/dd&gt;
  &lt;dt&gt;C# (3)&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;getenv&lt;/code&gt; returns null and continues. The program aborts later as the JSON parser can&amp;rsquo;t parse null.&lt;/dd&gt;
  &lt;dt&gt;Go (1)&lt;/dt&gt;
  &lt;dd&gt;&lt;code&gt;Getenv&lt;/code&gt; returns the empty string and continues. Then Go somehow manages to parse the empty string as an empty JSON list and still continues. Then it tries to interpret the first of the user arguments to the program as the path of the program to run and execs that instead! Utter failure.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Finally, does the language allow unsafe memory access (e.g. reading from memory after it has been freed)? A safe language will not allow this unless the programmer explicitly requests an &amp;ldquo;unsafe&amp;rdquo; mode.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;C#, Python, OCaml, Haskell (5)&lt;/dt&gt;
  &lt;dd&gt;These languages generally don&amp;rsquo;t provide any unsafe memory access (or if they do, it&amp;rsquo;s an obscure feature you wouldn&amp;rsquo;t use in normal code).&lt;/dd&gt;
  &lt;dt&gt;Go (5)&lt;/dt&gt;
  &lt;dd&gt;Go has an &amp;ldquo;unsafe&amp;rdquo; package for unsafe operations.&lt;/dd&gt;
  &lt;dt&gt;Rust (4)&lt;/dt&gt;
  &lt;dd&gt;Rust is safe unless you use &lt;code&gt;unsafe {}&lt;/code&gt; blocks. Unfortunately, I did have to use a couple to implement the sample code, because Rust&amp;rsquo;s standard library didn&amp;rsquo;t provide an &lt;code&gt;execv&lt;/code&gt; call and I had to make my own wrapper.&lt;/dd&gt;
  &lt;dt&gt;ATS (3)&lt;/dt&gt;
  &lt;dd&gt;In theory, ATS&amp;rsquo;s type system prevents unsafe access. In reality, the standard
library (which defines the types of functions in various C libraries) contains
many unsafe type declarations. Often, you have something like a &lt;code&gt;foo_get_name: Foo -&amp;gt; String&lt;/code&gt; function
which returns a pointer into a &lt;code&gt;Foo&lt;/code&gt; structure. The simplest way to define this in
ATS doesn&amp;rsquo;t indicate that the result is only valid until &lt;code&gt;Foo&lt;/code&gt; goes away. With a
little extra effort (using &lt;code&gt;minus&lt;/code&gt;), you can prevent that, but it&amp;rsquo;s unreasonably
hard to say that the string will also become invalid if &lt;code&gt;Foo&lt;/code&gt; is mutated. Rust, on the
other hand, makes these things very easy to express.

    &lt;p&gt;Another problem with ATS is that types may not be correct if exceptions are used. For
example, the sequence &lt;code&gt;m = alloc(); use(m); free(m)&lt;/code&gt; compiles (because it thinks that
&lt;code&gt;m&lt;/code&gt; is always freed), but if &lt;code&gt;use&lt;/code&gt; throws an exception then &lt;code&gt;m&lt;/code&gt; will not be freed. This
can be avoided by never catching exceptions.&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Language&lt;/th&gt;
      &lt;th&gt;Hello&lt;/th&gt;
      &lt;th&gt;Missing env&lt;/th&gt;
      &lt;th&gt;Memory safety&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Rust&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Haskell&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OCaml&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ATS&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C#&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Go&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Finally, I should note that, while Python generally has safe defaults, the HTTPS handling is an exception to this (it doesn&amp;rsquo;t validate the certificates), and the documentation for the XML modules in the standard library notes that &amp;ldquo;The XML modules are not secure against erroneous or maliciously constructed data.&amp;rdquo;. However, I only know about these because I&amp;rsquo;m very familiar with Python - the other languages may have similar issues - so I&amp;rsquo;m not going to count it here.&lt;/p&gt;

&lt;h2&gt;Diagnostics&lt;/h2&gt;

&lt;p&gt;When a run-time exception occurs, how easily can the user diagnose the problem or search for a solution on-line? If they write to us, how helpful will the output be to us?&lt;/p&gt;

&lt;p&gt;My test-case here is, again, the missing environment variable (if this happened, it would indicate a bug in some other part of 0install):&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Python (5)&lt;/dt&gt;
  &lt;dd&gt;Python displays a stack-trace showing exactly what it was doing and gives the name of the variable it was looking for. The error includes the path to the Python code, so any programmer can easily open it and do further debugging. If the user posts the error to the mailing list, we would immediately know what was wrong. And I didn&amp;rsquo;t have to write any code to make it do this. Perfect.

    &lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;./runenv2.py&amp;quot;, line 5, in &amp;lt;module&amp;gt;
    args = json.loads(os.environ[&amp;quot;0install-runenv-&amp;quot; + envname])
  File &amp;quot;/usr/lib/python2.7/UserDict.py&amp;quot;, line 23, in __getitem__
    raise KeyError(key)
KeyError: '0install-runenv-runenv2.py'
&lt;/code&gt;&lt;/pre&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Haskell (3)&lt;/dt&gt;
  &lt;dd&gt;A reasonably clear error, but no clue about where in the code it&amp;rsquo;s coming from:

    &lt;pre&gt;&lt;code&gt;Runenv: 0install-runenv-Runenv: getEnv: does not exist (no environment variable)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Rust (3)&lt;/dt&gt;
  &lt;dd&gt;The compiler forced me to add some code to handle the error. It was easy to include the environment variable name in the error, so I did. This results in a reasonably clear message, but the location is in a generic part of the standard library and not helpful:

    &lt;pre&gt;&lt;code&gt;rust: task failed at 'Environment variable '0install-runenv-runenv' not set', /build/src/rust-0.6/src/libcore/option.rs:300
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Update: cmrx64 notes that setting &lt;code&gt;RUST_LOG=::rt::backtrace&lt;/code&gt; gives a
stack-trace. Currently, this isn&amp;rsquo;t very useful because it doesn&amp;rsquo;t include
line numbers, but it looks like this is going to improve.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;ATS (2)&lt;/dt&gt;
  &lt;dd&gt;Like Rust, ATS forced me to handle the error. The simplest solution here was to throw an exception, which led to the somewhat-unhelpful message:

    &lt;pre&gt;&lt;code&gt;exit(ATS): uncaught exception: _2home_2tal_2Projects_2ats_2runenv_2edats__Missing_EnvironmentVar(1025)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/dd&gt;
  &lt;dt&gt;C# (1)&lt;/dt&gt;
  &lt;dd&gt;Fails to detect the problem and gives: &lt;code&gt;System.ArgumentNullException&lt;/code&gt; at a later point in the code. You do get a stack-trace, though:

    &lt;pre&gt;&lt;code&gt;Unhandled Exception:
System.ArgumentNullException: Argument cannot be null.
Parameter name: value
  at Newtonsoft.Json.JsonConvert.DeserializeObject (System.String value, System.Type type, Newtonsoft.Json.JsonSerializerSettings settings) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at Newtonsoft.Json.JsonConvert.DeserializeObject[String[]] (System.String value, Newtonsoft.Json.JsonSerializerSettings settings) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at Newtonsoft.Json.JsonConvert.DeserializeObject[String[]] (System.String value) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at Runenv.Main (System.String[] userArgs) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentNullException: Argument cannot be null.
Parameter name: value
  at Newtonsoft.Json.JsonConvert.DeserializeObject (System.String value, System.Type type, Newtonsoft.Json.JsonSerializerSettings settings) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at Newtonsoft.Json.JsonConvert.DeserializeObject[String[]] (System.String value, Newtonsoft.Json.JsonSerializerSettings settings) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at Newtonsoft.Json.JsonConvert.DeserializeObject[String[]] (System.String value) [0x00000] in &amp;lt;filename unknown&amp;gt;:0 
  at Runenv.Main (System.String[] userArgs) [0x00000] in &amp;lt;filename unknown&amp;gt;:0  of range`).
&lt;/code&gt;&lt;/pre&gt;
  &lt;/dd&gt;
  &lt;dt&gt;OCaml (1)&lt;/dt&gt;
  &lt;dd&gt;Gives a useless generic error. We&amp;rsquo;d have no clue where the problem was from this:

    &lt;pre&gt;&lt;code&gt;Fatal error: exception Not_found
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;Update: ygrek says it is possible to get the location, but you need to compile with &lt;code&gt;-g&lt;/code&gt; and run with &lt;code&gt;OCAMLRUNPARAM=b&lt;/code&gt;.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Go (1)&lt;/dt&gt;
  &lt;dd&gt;Fails to detect the problem at all and gives a useless error from another point in the code

    &lt;pre&gt;&lt;code&gt;panic: runtime error: index out of range
  
goroutine 1 [running]:
main.main()
        /home/tal/Projects/go/runenv.go:16 +0x239
  
goroutine 2 [runnable]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Ease of writing&lt;/h2&gt;

&lt;p&gt;This is even more subjective than the other areas but here goes:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Python (5)&lt;/dt&gt;
  &lt;dd&gt;The code is clear, short and easy to understand even if you don&amp;rsquo;t know Python (but do know POSIX):&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;runenv.py &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;envname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0install-runenv-&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;C# (4)&lt;/dt&gt;
  &lt;dd&gt;A little verbose, but quite readable (update: Bastian Eicher &lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/6951/focus=6952&quot;&gt;suggests some improvements&lt;/a&gt; to this code):&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;runenv.cs &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Mono.Unix.Native&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Newtonsoft.Json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Windows.Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runenv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecutablePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stdlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0install-runenv-&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;progArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;progArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CopyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;userArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CopyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;n&quot;&gt;Syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;OCaml (4)&lt;/dt&gt;
  &lt;dd&gt;This code was contributed by &amp;ldquo;ygrek&amp;rdquo; (I wrote my own version first, which was longer but
also fairly clear):&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;runenv.ml &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0install-runenv-&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Yojson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Basic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert_each&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;nn&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;Haskell (4)&lt;/dt&gt;
  &lt;dd&gt;Tim Cuthbertson contributed this Haskell version:&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;runenv.hs &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Environment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProgName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Posix.Process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.JSON&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;n&quot;&gt;envName&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getProgName&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getArgs&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;n&quot;&gt;jsonContents&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getEnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0install-runenv-&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envName&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsv&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseJSON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonContents&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extraArgs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseArr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsv&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;n&quot;&gt;executeFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extraArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;n&quot;&gt;parseJSON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JSString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;n&quot;&gt;parseArr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JSString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;n&quot;&gt;parseArr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromJSString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jss&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;Go (3)&lt;/dt&gt;
  &lt;dd&gt;The Go version was pretty easy to write, except that the error handling was so bad that when I got things
wrong, it was hard to understand which bit was actually failing (hence why it explicitly handles the error
from &lt;code&gt;Exec&lt;/code&gt;; this was to help me debug it when it failed silently the first time, despite my plan to 
add error handling only if the compiler told me to):&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;runenv.go &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;syscall&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;nx&quot;&gt;json_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0install-runenv-&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Unmarshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  		&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;Rust (3)&lt;/dt&gt;
  &lt;dd&gt;This is only part of the code; I also wrote some support code to turn a list
of JSON strings into a list of Rust strings, and an implementation of &lt;code&gt;execv&lt;/code&gt;.
Apart from that it was pretty easy:&lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;runenv.rs &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PosixPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;our_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Not a file '%?'&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0install-runenv-&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Environment variable '%s' not set&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_list_to_str_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;prog_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;execv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;ATS (1)&lt;/dt&gt;
  &lt;dd&gt;It took me several days to learn enough to be able to write this, and the code ended up several hundred lines long. However, much of this was
support code (e.g. code for interfacing to libjson and safer handing of execv) and it looks like this won&amp;rsquo;t
be needed in ATS 2 (which is not yet ready for use).

    &lt;p&gt;To help understand it a little, you need to know that there are both dynamic (runtime) variables,
(e.g. &lt;code&gt;target_argv&lt;/code&gt;, a C pointer to an array) and static (compile-time) &amp;ldquo;proofs&amp;rdquo; (e.g. &lt;code&gt;must_free_argv&lt;/code&gt;). These are
often written as &lt;code&gt;proof1, proof2, ... | dyn1, dyn2, ...&lt;/code&gt;. &lt;code&gt;prval&lt;/code&gt; lines are only used at compile-time
for checking; they generate no code.&lt;/p&gt;

    &lt;p&gt;The biggest problem programming in ATS however is that the compiler is very unforgiving. Most errors
result in a generic &lt;code&gt;syntax error&lt;/code&gt;. Putting two operators too close together often causes them to be
treated as a single third operator. Errors about constraint violations are printed using the compiler&amp;rsquo;s
hard-to-read internal representation, etc.&lt;/p&gt;

    &lt;p&gt;Here&amp;rsquo;s a small sample (the main function):&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;div class=&quot;bogus-wrapper&quot;&gt;&lt;notextile&gt;&lt;figure class=&quot;code&quot;&gt;&lt;figcaption&gt;&lt;span&gt;runenv.dats &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;35&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;36&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;37&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;38&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;39&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;41&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;43&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;44&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;45&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;46&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;47&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;48&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;49&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;50&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ocaml&quot;&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;n&quot;&gt;implement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main_argc_argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog_args_json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_user_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;prval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr_user_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_v_uncons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSON&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checked_json_tokener_parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string1_of_strptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog_args_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borrowed_json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_object_get_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_prog_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_list_get_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_prog_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Allocate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_argv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execv&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;added&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_array_alloc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_prog_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_user_args&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;must_free_argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_array_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_array_alloc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size1_of_int1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Populate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_argv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_array&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_args&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialise_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_array_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr_user_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;n&quot;&gt;size1_of_int1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_prog_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;n&quot;&gt;size1_of_int1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_user_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Extract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_argv&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;way&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writing&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;target_prog = target_argv[0]&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;prval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv_initialised&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;borrowed_string_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_array_take_contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_array_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;prval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_v_uncons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv_initialised&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr_get_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;prval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv_initialised&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_v_cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;prval&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_array_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_array_return_contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv_initialised&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;borrowed_string_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;possible&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_array_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed to execv&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cleanup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reached&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;prval&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minus_addback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borrowed_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Don't&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longer&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_object_put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                               &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_array_free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;must_free_argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_array_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Free&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_argv&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;prval&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_v_cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr_user_args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rejoin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;

&lt;h2&gt;Shared libraries&lt;/h2&gt;
&lt;p&gt;The 0install package contains both executables and library classes for use by other tools (0compile, 0test, 0repo, etc). It must be
possible to make a bug-fix release of the main library without having to make a new release of every tool that depends on it.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;ATS, C#, Python (5)&lt;/dt&gt;
  &lt;dd&gt;I didn&amp;rsquo;t bother to test these, as it&amp;rsquo;s obvious that they support shared libraries with no problems.&lt;/dd&gt;
  &lt;dt&gt;Rust (5)&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Works, but the reference compiled into the main binary includes a hash (e.g.
`libmylib-68a2c114141ca-1.4.so`). The docs say that &amp;ldquo;The alphanumerics
are a hash representing the crate metadata.&amp;rdquo; I added an `author` field to the
metadata, and sure enough the new library could no longer be used by the existing
binary. It&amp;rsquo;s not very clear whether there are other things that could break the hash.&lt;/p&gt;

    &lt;p&gt;Update: see this &lt;a href=&quot;https://botbot.me/mozilla/rust/msg/3792753/&quot;&gt;explanation from the Rust developers&lt;/a&gt;. The
hash is just to make the library name unique (in case someone else writes a library with the same name) and
should never change. i.e. we should specify the &amp;ldquo;author&amp;rdquo; as &amp;ldquo;0install.net&amp;rdquo;. In addition, symbols get a hash
which includes their type signature (so incompatible changes become link-time errors) and the library hash (so you
don&amp;rsquo;t get symbol name conflicts between libraries).
So, I&amp;rsquo;ve now given Rust a 5 here (was 2).&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Haskell (2)&lt;/dt&gt;
  &lt;dd&gt;Shared libraries do work, but are tied to the version of ghc used to compile them. e.g. Compiling with &lt;code&gt;-dynamic&lt;/code&gt; gets a
dependency on &lt;code&gt;libHSjson-0.7-ghc7.6.3.so&lt;/code&gt;. A Haskell library author would have to provide an enormous number of versions of their library to cover every GHC version on every platform.&lt;/dd&gt;
  &lt;dt&gt;OCaml (1)&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;There&amp;rsquo;s also a Dynlink module for loading shared code manually at runtime.
According to a &lt;a href=&quot;http://stackoverflow.com/a/8630615/50926&quot;&gt;StackOverflow answer&lt;/a&gt;: &amp;ldquo;Very often when upgrading the Ocaml compiler (e.g. from 3.12 to future 3.13), you previous `*.cmo` or `*.cma` files won&amp;rsquo;t be able to work without recompilation.&amp;rdquo; I haven&amp;rsquo;t yet managed to make shared libraries work.&lt;/p&gt;

    &lt;p&gt;Update: The situation is essentially the same as with Haskell; shared libraries work but if a dependency changes then everything that uses it must be recompiled.
Dynlink does work, but it&amp;rsquo;s really intended for plugins (where the main executable provides a fixed API for the dynamically loaded plugin).&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;Go (1)&lt;/dt&gt;
  &lt;dd&gt;Doesn&amp;rsquo;t support shared libraries at all.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Static types&lt;/h2&gt;

&lt;p&gt;All languages here except for Python provide at least basic static type checking. After Python, Go has the
most primitive system, without even user-defined polymorphic types. However, even that would save us from
a number of problems common with Python code (particularly bugs in rarely tested error paths or breakage
caused by library APIs changing without us noticing).&lt;/p&gt;

&lt;h3&gt;Prevention of null pointer errors&lt;/h3&gt;

&lt;dl&gt;
  &lt;dt&gt;ATS, Rust, Haskell, OCaml&lt;/dt&gt;
  &lt;dd&gt;These languages distinguish in their type systems between objects and null. Therefore,
if an object has type Foo, then it really is a Foo, not null, and the program can&amp;rsquo;t crash
with a NullPointerException or equivalent.&lt;/dd&gt;
  &lt;dt&gt;C#, Go, Python&lt;/dt&gt;
  &lt;dd&gt;These languages cannot distinguish between values and null at compile time.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3&gt;Dependent types&lt;/h3&gt;

&lt;p&gt;ATS is the only language here with dependent types. You can do a lot of cool things with these.
For example, the &lt;code&gt;assert(n_prog_args &amp;gt; 0)&lt;/code&gt; check in the ATS code above isn&amp;rsquo;t there by
accident; the ATS compiler required me to prove that the list generated by parsing the JSON wouldn&amp;rsquo;t be empty,
since I needed to take the first argument as the program name.&lt;/p&gt;

&lt;p&gt;Note that the Go version failed with an &lt;code&gt;index
out of range&lt;/code&gt; error (see above); that cannot happen in the ATS version (it will still fail, since I used an
&lt;code&gt;assert&lt;/code&gt;, but it fails with a sensible error message at the correct point in the code). Using an &lt;code&gt;assert&lt;/code&gt; or an &lt;code&gt;if&lt;/code&gt; puts a
runtime check into the program. In other cases, you may be able to insert a proof that the array won&amp;rsquo;t be
empty.&lt;/p&gt;

&lt;h3&gt;Managing resources (linear types)&lt;/h3&gt;

&lt;p&gt;ATS and Rust support linear types. This allows them to ensure that, for example, if a file is opened
then it will also be closed again promptly, and not used after that. ATS&amp;rsquo;s support is more flexible, but
Rust&amp;rsquo;s is much easier to use.&lt;/p&gt;

&lt;p&gt;Haskell, OCaml, C#, Go and Python do not detect (at compile time) attempts to read from a closed file,
or forgetting to close a file.&lt;/p&gt;

&lt;p&gt;Note that all languages allow you to define a function that opens the file,
calls the function with the new handle, and then closes the handle, which works
well in many cases. However, this doesn&amp;rsquo;t prevent the function from saving a
reference to the file handle and trying to reuse it later, and doesn&amp;rsquo;t allow
storing handles in other objects, etc. It also doesn&amp;rsquo;t work when the nesting isn&amp;rsquo;t
fixed (e.g. opening and reading from several TCP streams in parallel, closing each one
when done).&lt;/p&gt;



&lt;h2&gt;Bounds on privilege&lt;/h2&gt;

&lt;p&gt;When parsing XML it is useful to know, without examining the XML parser in detail, that it cannot load files
from the local filesystem (some XML parsers allow XML documents to do this via their DTDs, which we want to
prevent for security reasons). When unpacking an
archive we&amp;rsquo;d like to know, without auditing the unzip code, that it won&amp;rsquo;t write anywhere outside of the target
directory. And so on.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Haskell (5)&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;Haskell seems ideal for this, since its functions are side-effect free, though I&amp;rsquo;m not sure if it
prevents libraries from using unsafe functions if they want to.&lt;/p&gt;

    &lt;p&gt;Update: Tim Cuthbertson writes: &amp;ldquo;There is a &lt;a href=&quot;http://hackage.haskell.org/trac/ghc/wiki/SafeHaskell&quot;&gt;Safe Haskell&lt;/a&gt; feature in GHC, which &lt;em&gt;does&lt;/em&gt; guarantee that unsafe features are not used (which can applied when compiling a given module / package). So that&amp;rsquo;s good - but I haven&amp;rsquo;t used it, so I can&amp;rsquo;t vouch for its practicality.&amp;rdquo;&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;OCaml (5)&lt;/dt&gt;
  &lt;dd&gt;OCaml has a tool called &lt;a href=&quot;http://www.skyhunter.com/marcs/emilyWalnut.html&quot;&gt;Emily&lt;/a&gt; which enforces object-capability
rules on OCaml code. I haven&amp;rsquo;t tested it yet, though.&lt;/dd&gt;
  &lt;dt&gt;C# (5)&lt;/dt&gt;
  &lt;dd&gt;Looks pretty good. Bastian Eicher says: &amp;ldquo;Adding the attribute &lt;code&gt;[SecurityPermission(SecurityAction.Deny, Flags = SecurityPermissionFlag.UnmanagedCode)]&lt;/code&gt; to a method prevents it from calling into unmanaged code directly or indirectly. Only data structures within the application itself can be touched and no IO is allowed. Native methods which have been deemed to be safe (e.g. retrieve the current system time) have the &lt;code&gt;[SuppressUnmanagedCodeSecurityAttribute]&lt;/code&gt; attribute to bypasses this restriction. Disclaimer: I have not used these features in my own code so far.&amp;rdquo;&lt;/dd&gt;
  &lt;dt&gt;ATS (2)&lt;/dt&gt;
  &lt;dd&gt;ATS functions can be annotated as pure, but this is greatly limits what can be done (for example, a pure function
can&amp;rsquo;t even throw an exception).&lt;/dd&gt;
  &lt;dt&gt;Go, Python, Rust (1)&lt;/dt&gt;
  &lt;dd&gt;I&amp;rsquo;m not aware of any particular security features in these languages.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Mutability&lt;/h2&gt;

&lt;p&gt;Immutable objects (objects which you can rely on not to change) make programs safer and easier to reason about,
but can also be less efficient.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Rust (5)&lt;/dt&gt;
  &lt;dd&gt;Rust&amp;rsquo;s linear types mean that the compiler knows whether you hold the only pointer to something. This
means that you can create an object, mutate it (e.g. while building it), then pass it as an immutable
object to another function. Once the function has finished with it, you can mutate it again.
Efficient and safe - perfect.&lt;/dd&gt;
  &lt;dt&gt;C#, OCaml, Go (4)&lt;/dt&gt;
  &lt;dd&gt;Struct/object fields can be declared as mutable or immutable.

    &lt;p&gt;Update: Blax points in the comments that Go actually provides control of
whether a field is exported or not. A field is then made &amp;ldquo;immutable&amp;rdquo; by not
providing a setter for it, only a getter.&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;ATS (4)&lt;/dt&gt;
  &lt;dd&gt;ATS generally doesn&amp;rsquo;t distinguish between mutable and immutable pointers (e.g. in the standard library),
although the type system is flexible enough that you could do this for custom types. Values can be declared
as &lt;code&gt;val&lt;/code&gt; (immutable) or &lt;code&gt;var&lt;/code&gt; (variable).&lt;/dd&gt;
  &lt;dt&gt;Python (3)&lt;/dt&gt;
  &lt;dd&gt;Everything is always mutable, which can lead to bugs (e.g. mutating a list without realising that it&amp;rsquo;s shared).&lt;/dd&gt;
  &lt;dt&gt;Haskell (2)&lt;/dt&gt;
  &lt;dd&gt;Everything is always immutable, which has benefits but can be very annoying and inefficient when you need mutability. Since 0install is written in an imperative style, a translation into Haskell would likely be difficult.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;C interoperability&lt;/h2&gt;

&lt;p&gt;Everything we might want to interact with will provide at least a C API. How easy is it to use these?&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;ATS (5)&lt;/dt&gt;
  &lt;dd&gt;ATS&amp;rsquo;s runtime data structures are identical to C&amp;rsquo;s. All you have to do is declare the C function with an ATS type signature (as the C definitions are too vague to be useful). ATS produces C code as output, and you can even embed C functions in your ATS source code
and it will pass them through to the C compiler directly. As noted above, ATS
does make it difficult (though not impossible) to express some common
constraints (e.g. that a returned pointer will remain valid until the input
structure is mutated).&lt;/dd&gt;
  &lt;dt&gt;C# (4)&lt;/dt&gt;
  &lt;dd&gt;&lt;a href=&quot;http://www.mono-project.com/Interop_with_Native_Libraries&quot;&gt;Interop with Native Libraries&lt;/a&gt; shows how to call C functions from C#.&lt;/dd&gt;
  &lt;dt&gt;Go (4)&lt;/dt&gt;
  &lt;dd&gt;&lt;a href=&quot;http://golang.org/cmd/cgo/&quot;&gt;cgo&lt;/a&gt; makes it easy to call C from Go.&lt;/dd&gt;
  &lt;dt&gt;Haskell (4)&lt;/dt&gt;
  &lt;dd&gt;C libraries can be wrapped using &lt;a href=&quot;http://book.realworldhaskell.org/read/interfacing-with-c-the-ffi.html&quot;&gt;Haskell&amp;rsquo;s FFI&lt;/a&gt;.&lt;/dd&gt;
  &lt;dt&gt;Rust (4)&lt;/dt&gt;
  &lt;dd&gt;C functions can be declared with Rust raw pointers, but can only be called from &lt;code&gt;unsafe&lt;/code&gt; code. You therefore need to write
wrappers for them. An annoyance here is that Rust&amp;rsquo;s types are not the same as C&amp;rsquo;s, so e.g. every string has to be copied
whenever you invoke a C function (Rust strings don&amp;rsquo;t always have null terminators) and get a result back (Rust strings have
a length header). Also, you can&amp;rsquo;t use Rust&amp;rsquo;s linear pointer types with C functions, because Rust assumes that there is a
header block on such types. This makes interfacing with C a little less efficient than it could be (this is no worse than e.g. C# or Haskell; I just feel Rust could do better).&lt;/dd&gt;
  &lt;dt&gt;Python (3)&lt;/dt&gt;
  &lt;dd&gt;Due to its huge popularity, most libraries also provide Python bindings. There&amp;rsquo;s also the &lt;code&gt;ctypes&lt;/code&gt; module in the standard
library, but generally people seem to write Python binding code in C when they need to interact with C libraries.&lt;/dd&gt;
  &lt;dt&gt;OCaml(3)&lt;/dt&gt;
  &lt;dd&gt;&lt;a href=&quot;http://ocaml.org/tutorials/calling_c_libraries.html&quot;&gt;Interfacing OCaml with C&lt;/a&gt; requires writing C code.

    &lt;p&gt;Update: ygrek notes that there is a new &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes&quot;&gt;OCaml-ctypes&lt;/a&gt; project which
allows bindings without writing C.&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Asynchronous code&lt;/h2&gt;

&lt;p&gt;0install needs to be able to download from multiple sites in parallel and without blocking the UI.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;C# (5)&lt;/dt&gt;
  &lt;dd&gt;Provides the &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; type for pending results and the &lt;code&gt;await&lt;/code&gt; keyword to wait for them. Untested.&lt;/dd&gt;
  &lt;dt&gt;Haskell (5)&lt;/dt&gt;
  &lt;dd&gt;The &lt;code&gt;Async&lt;/code&gt; type is used to represent a potential future result. Untested.&lt;/dd&gt;
  &lt;dt&gt;Go (5)&lt;/dt&gt;
  &lt;dd&gt;Go&amp;rsquo;s &amp;ldquo;goroutines&amp;rdquo; make it very easy to spawn an asynchronous task and its excellent channels make
it easy for goroutines to communicate safely. However, Go does not prevent
unsafe communication between threads (e.g. via shared variables).&lt;/dd&gt;
  &lt;dt&gt;Rust (5)&lt;/dt&gt;
  &lt;dd&gt;Like Go, Rust provides easy support for spawning light-weight threads and channels for communication.
Rust&amp;rsquo;s type system prevents unsafe concurrent access (every mutable object is owned by a single thread).&lt;/dd&gt;
  &lt;dt&gt;OCaml (5)&lt;/dt&gt;
  &lt;dd&gt;The &lt;a href=&quot;http://ocsigen.org/lwt/manual/&quot;&gt;LWT&lt;/a&gt; package provides support. Untested, but looks good.&lt;/dd&gt;
  &lt;dt&gt;Python (4)&lt;/dt&gt;
  &lt;dd&gt;Python&amp;rsquo;s generators make it easy to implement co-routines for asynchronous operations. Many such libraries have been implemented, but it looks like Tulip will soon become the official solution in the standard library.&lt;/dd&gt;
  &lt;dt&gt;ATS (1)&lt;/dt&gt;
  &lt;dd&gt;No special features, just raw C threading.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Language&lt;/th&gt;
      &lt;th&gt;Rust&lt;/th&gt;
      &lt;th&gt;OCaml&lt;/th&gt;
      &lt;th&gt;Python&lt;/th&gt;
      &lt;th&gt;Haskell&lt;/th&gt;
      &lt;th&gt;ATS&lt;/th&gt;
      &lt;th&gt;C#&lt;/th&gt;
      &lt;th&gt;Go&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Speed&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dependencies&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bin. compatibility&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bad stdout&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Missing env&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Memory safety&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Diagnostics&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ease of coding&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Shared libraries&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Static types&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Privilege bounds&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mutability&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C interoperability&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Asynchronous calls&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;49&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So what does this tell us? There&amp;rsquo;s no clear winner here (although there is a clear loser).
Although the various languages differ widely in the individual aspects, overall they tend to
balance out.&lt;/p&gt;

&lt;p&gt;Update: OCaml and Python were originally joint first. However, now that Rust&amp;rsquo;s library hashes
have been explained, it has moved into the lead. Of course, just summing up the scores doesn&amp;rsquo;t
make much sense anyway; it&amp;rsquo;s just a convenient way to sort them.&lt;/p&gt;

&lt;p&gt;What would happen if we wrote 0install in &amp;hellip; ?&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Rust&lt;/dt&gt;
  &lt;dd&gt;The language is still changing rapidly at the moment. I suspect we&amp;rsquo;d hit
quite a few problems trying to use it in production. It&amp;rsquo;s looking very
promising though.&lt;/dd&gt;
  &lt;dt&gt;OCaml&lt;/dt&gt;
  &lt;dd&gt;0install would become faster and possibly more reliable, but runtime errors would be harder to debug. We might have
problems publishing updates to shared libraries. A perfectly reasonable option, though.&lt;/dd&gt;
  &lt;dt&gt;Python&lt;/dt&gt;
  &lt;dd&gt;Everything would stay as it is. Which, actually, is not bad at all. Maybe we could investigate
other ways to improve speed and type safety without leaving Python? That&amp;rsquo;s likely to be less work
than a rewrite and much less risky. Cython? ShedSkin? PyPy? RPython?&lt;/dd&gt;
  &lt;dt&gt;Haskell&lt;/dt&gt;
  &lt;dd&gt;We&amp;rsquo;d probably have issues with binary compatibility and shared libraries, but the code might
become more reliable. Converting the existing code to a purely functional style would likely
be very difficult though, and there&amp;rsquo;s a risk that some things would turn out to have no obvious
equivalent.&lt;/dd&gt;
  &lt;dt&gt;ATS&lt;/dt&gt;
  &lt;dd&gt;Everything would be incredibly fast, but getting new contributors would be very difficult due
to the learning curve. There&amp;rsquo;s a risk of crashes as the library is not entirely memory safe,
and there are likely to be changes ahead to the language. Probably writing the whole thing in
ATS would be too much work for anyone.&lt;/dd&gt;
  &lt;dt&gt;C#&lt;/dt&gt;
  &lt;dd&gt;Performance would improve slightly on Windows, but things would get worse for
Linux, Unix and OS X users due to the extra dependencies. Probably we could get some of the
same improvements on Windows using IronPython.&lt;/dd&gt;
  &lt;dt&gt;Go&lt;/dt&gt;
  &lt;dd&gt;Go is worse than OCaml in just about every respect, so I can&amp;rsquo;t see any reason to choose it if we
wanted to do a rewrite.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Please post corrections and suggestions below (or on the &lt;a href=&quot;http://0install.net/support.html#lists&quot;&gt;mailing list&lt;/a&gt;) - thanks!&lt;/p&gt;

&lt;p&gt;Updates for other languages:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Vala&lt;/dt&gt;
  &lt;dd&gt;&lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/6951/focus=6956&quot;&gt;Anders F Bj&amp;ouml;rklund&amp;rsquo;s Vala code&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Haxe (not working)&lt;/dt&gt;
  &lt;dd&gt;&lt;a href=&quot;http://thread.gmane.org/gmane.comp.file-systems.zero-install.devel/6951/focus=6966&quot;&gt;Tim Cuthbertson tries Haxe&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2&gt;Round 2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://roscidus.com/blog/blog/2013/06/20/replacing-python-round-2/&quot;&gt;Continue to round 2&lt;/a&gt;&lt;/p&gt;
</content><id>http://roscidus.com/blog/blog/2013/06/09/choosing-a-python-replacement-for-0install/</id><title type="text">Replacing Python: candidates</title><updated>2013-06-09T13:21:00+00:00</updated><author><email></email><name>Thomas Leonard</name></author></entry><entry><link href="http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Jun%202013" rel="alternate"/><contributor><uri>http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml</uri><name>OCL Monthly News</name></contributor><content type="html">
      &lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/rwo-celebration.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/rwo-celebration-thumb.jpg&quot; class=&quot;left&quot;/&gt;&lt;/a&gt;
The rain continues to plummet down relentlessly as &amp;quot;summer&amp;quot; starts in OCaml
Labs. The most exciting news has been the public release of the &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World
OCaml&lt;/a&gt;, which hit the front page of the usual news
aggregators and generated huge interest!  This (reminiscent of the Xen 1.0
release) promptly took down servers for a couple of hours, but we managed to
minimise downtime in time for the Californians waking up.&lt;/p&gt;
&lt;p&gt;O'Reilly has also started selling PDF copies of the book under their &lt;a href=&quot;http://shop.oreilly.com/product/0636920024743.do&quot;&gt;Rough
Cuts&lt;/a&gt; program.  This gives you
a copy of the final book when it's released too.  Commenting is still open
on the &lt;a href=&quot;http://realworldocaml.org&quot;&gt;online version&lt;/a&gt;, so please do feel free to
participate there if you have time.&lt;/p&gt;
&lt;h3&gt;Systems Projects&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;Mirage&lt;/b&gt;: Anil and Dave did the last of the sweeping build changes to make
Mirage friendlier to use for beginners.  Previously, we required a custom OPAM
switch to build kernels, but now we use &lt;a href=&quot;http://www.openmirage.org/wiki/weekly-2013-06-11&quot;&gt;virtual
packages&lt;/a&gt; to separate the
choice of compiler and packages.  This of course breaks all our documentation,
but we're going to do a big sweep in July before
&lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/speaker/109140&quot;&gt;OSCON&lt;/a&gt; with the
new scheme.  Vincent has also been burning through the core platform libraries,
cleaning them up and adding documentation strings.  He is also building a
shared memory &lt;a href=&quot;http://github.com/vbmithr/ocaml-vchan&quot;&gt;vchan&lt;/a&gt; driver that will
make parallel-Mirage unikernels very easy to coordinate on the same host.&lt;/p&gt;
&lt;p&gt;The huge news from our friends at Citrix is the open-sourcing of
&lt;a href=&quot;http://www.xenserver.org&quot;&gt;XenServer&lt;/a&gt;, which is the popular Citrix product that
embeds the &lt;a href=&quot;https://github.com/xapi-project&quot;&gt;OCaml XAPI&lt;/a&gt; cloud management
stack.  There are almost 100 major components
&lt;a href=&quot;http://github.com/xenserver&quot;&gt;released&lt;/a&gt; as part of this, several of which can
be directly reused with Mirage.  Mirage was always an ambitious project, but
it's all coming together now thanks to bold moves such as this from Citrix!&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Signpost:&lt;/b&gt; We woke up to the excellent but slightly scary news that
our &lt;a href=&quot;https://www.usenix.org/conference/foci13&quot;&gt;USENIX FOCI&lt;/a&gt; paper was accepted.
This now means that we get to present it in August at USENIX Security, but
the team is now racing to pull together the prototypes into a complete system
before the conference.  Nothing like a deadline to focus the mind!  We're
also working on the camera-ready version of the paper, which we will share
here when it's ready.&lt;/p&gt;
&lt;h3&gt;Platform Projects&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;OCamlot:&lt;/b&gt; David Sheets did an astounding job at pulling together a
working continuous build system in a very short amount of time, and promptly
managed to melt some of the older &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#Machine%20Pool&quot;&gt;non-x86
machines&lt;/a&gt; in Anil's office.  Once Anil
sadly replaced them, the builder churned through a matrix of different compiler
versions (4.0,4.1dev,4.2dev), architectures (x86, x86_64, ARM, PowerPC), and
operating systems (Debian, Ubuntu, FreeBSD, OpenBSD to start with).  There's
a &lt;a href=&quot;https://ocaml-www3.ocamllabs.cl.cam.ac.uk/github/OCamlPro/opam-repository&quot;&gt;development URL&lt;/a&gt;, but
the next step is to retire this and move it to a proper home at &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having continuous build for OPAM is really, really useful though, as it lets us
vet pull requests on several architectures before merging them. It also let
Anil repair OCaml on &lt;a href=&quot;https://github.com/avsm/ocaml/commit/c1da5f35cda0ee85e576197b88f503333ed9e9a1&quot;&gt;OpenBSD/macppc&lt;/a&gt;
too, which is possibly the most obscure fix he's done in a while.&lt;/p&gt;
&lt;p&gt;The next steps with OCamlot are to take a shot at porting the core to
&lt;a href=&quot;http://github.com/janestreet/jenga&quot;&gt;Jenga&lt;/a&gt;, which is Jane Street's next-generation
distributed build system.  This should let us improve the fault-tolerance and
logging aspects of it before putting it properly into production later in the summer.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Ctypes:&lt;/b&gt; The May &lt;a href=&quot;http://github.com/ocamllabs/ocaml-ctypes&quot;&gt;release&lt;/a&gt;
brought with it a good chunk of feedback, so Jeremy spent time incorporating
that and contributing to the Real World OCaml ctypes chapter.  He also added
support for garbage-collecting closures passed to C, and also very cool support
for &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/pull/27&quot;&gt;printing C types and values&lt;/a&gt;.
Our friends at Citrix have started looking at ctypes, and Rob Hoes has already
used it to write &lt;a href=&quot;https://github.com/robhoes/ocaml-libnl&quot;&gt;bindings&lt;/a&gt; to the
Netlink Protocol Library Suite.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/daniel-presentation-vg.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/daniel-presentation-vg-thumb.jpg&quot; class=&quot;right&quot;/&gt;&lt;/a&gt;
&lt;b&gt;OPAM-doc&lt;/b&gt;: Vincent Botbol got the documentation generator stable enough
to pass the Core library through.  This is particularly challenging since Core
exercises pretty much every trick in the book when it comes to the use of the
module system.  However, Vincent successfully demonstrated the workflow of
OPAM-doc at the end-of-month meeting, and is aiming to have a public release
via OPAM in July (hopefully in time for the next beta release of Real World OCaml,
which uses Core heavily).&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Visualisation libraries:&lt;/b&gt; &lt;a href=&quot;http://erratique.ch/contact.en&quot;&gt;Daniel B&amp;uuml;nzli&lt;/a&gt; has
been spending a few months based in Citrix, working on a foundational new
declarative drawing library written in pure OCaml.  The &lt;a href=&quot;http://erratique.ch/software/vg&quot;&gt;Vg&lt;/a&gt; is already quite functional despite
still being in beta, and features a &lt;a href=&quot;http://erratique.ch/software/vg/demos/rhtmlc.html#arrowhead&quot;&gt;Javascript backend&lt;/a&gt;
that renders to both SVG and Canvas in HTML5.  That's not all though!  He's
also developing the &lt;a href=&quot;http://erratique.ch/software/vz&quot;&gt;Vz&lt;/a&gt; visualization library
that uses Vg to assemble more complex scenes and graphs.  Daniel's going to
join us in OCaml Labs for the remainder of the summer, so we're looking
forward to developing this more and using it on our various Platform projects
such as OCamlot.&lt;/p&gt;
&lt;h3&gt;Outreach&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;Real World OCaml:&lt;/b&gt; As mentioned earlier, the beta release of RWO went
splendidly, with a pleasing vibe that the book is what people expected.  There
were some interesting criticisms of the choice of Github authentication, but
we've had over 6000 registered commentators despite this (and of course, we
have plans &lt;a href=&quot;http://nymote.org&quot;&gt;brewing&lt;/a&gt; to tackle the identity problem).&lt;/p&gt;
&lt;p&gt;No beta release is perfect, of course, and our now-public commenting system has
resulted in &lt;a href=&quot;https://github.com/ocamllabs/rwo-comments/issues&quot;&gt;over 1500&lt;/a&gt;
issues being raised.  Well, that's all of Yaron, Anil and Jason's free time
gone for some time!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/amir-shisha.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/amir-shisha-thumb.jpg&quot; class=&quot;right&quot;/&gt;&lt;/a&gt;
&lt;b&gt;OCaml.org&lt;/b&gt;: We're in the process of looking at the site as a whole and
designing the workflow we'd like to have for growing and maintaining it.  Some
discussions have taken place about using Markdown in place of the current HTML
snippets, which would make it easier for external contributors to get involved.
In the meantime, Amir has converted the current site to Markdown format to see
how this process would work in practice.  You can see his experimenting and
scripts in the &lt;a href=&quot;https://github.com/ocamllabs/ocaml.org-temp&quot;&gt;temporary repo&lt;/a&gt; in
the &lt;code&gt;markdown-site/&lt;/code&gt; folder.
Philippe also showed off &lt;a href=&quot;https://github.com/pw374/MPP-language-blender&quot;&gt;MPP&lt;/a&gt;
at the internal meetings, and is stabilising it for a public release this
summer (once it has been integrated into the ocaml.org workflow).&lt;/p&gt;
&lt;p&gt;This month also had a number of programming language gurus show up at the Lab
for the &lt;em&gt;Algebraic Effects and Handlers&lt;/em&gt; workshop organised by &lt;a href=&quot;http://www.cl.cam.ac.uk/~ss368/&quot;&gt;Sam
Staton&lt;/a&gt;.  Most of the group attended this, as
we're all interested in how to encode effects for several of our projects (most
notably &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/t2.html#Irminsule&quot;&gt;Irminsule&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We also enjoyed a visit by &lt;a href=&quot;https://github.com/bvaugon&quot;&gt;Beno&amp;icirc;t Vaugon&lt;/a&gt;, who gave a talk on his
&lt;a href=&quot;http://oud.ocaml.org/2012/slides/oud2012-paper10-slides.pdf&quot;&gt;OCamlCC&lt;/a&gt;
OCaml-to-C compiler, and also participated in a talk on
&lt;a href=&quot;http://www.algo-prog.info/ocaml_for_pic/web/index.php?id=ocapic&quot;&gt;OCAPIC&lt;/a&gt;. He
also chatted with us about his alternative &lt;a href=&quot;http://caml.inria.fr/mantis/view.php?id=6017&quot;&gt;GADT-based implementation of
Printf&lt;/a&gt;, which promises to both
speed up and simplify the printer support in OCaml (and also relieve Mirage of
another dependency on &lt;code&gt;libc&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Link roundup:&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://blog.xen.org/index.php/2013/06/25/xenserver-org-and-the-xen-project/&quot; class=&quot;icon-community&quot;&gt;XenServer open-sourced!&lt;/a&gt; &lt;em&gt;(Jun 25th)&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://realworldocaml.org&quot; class=&quot;icon-quick-links&quot;&gt;Real World OCaml public beta now available.&lt;/a&gt; &lt;em&gt;(Jun 17th)&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;

   </content><id>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#Jun%202013</id><title type="text">Jun 2013 news update</title><updated>2013-06-01T12:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="https://mirage.io/blog/the-road-to-a-dev-release" rel="alternate"/><contributor><uri>http://openmirage.org/blog/atom.xml</uri><name>Mirage OS</name></contributor><content type="html">
      &lt;p&gt;There's been a crazy stream of activity since the start of the year, but the most important news is that we have a release target for an integrated developer preview of the Mirage stack: a talk at &lt;a href=&quot;http://www.oscon.com/oscon2013/public/schedule/detail/28956&quot;&gt;O'Reilly OSCon&lt;/a&gt; in July!  Do turn up there and find &lt;a href=&quot;http://dave.recoil.org&quot;&gt;Dave Scott&lt;/a&gt; and &lt;a href=&quot;http://anil.recoil.org&quot;&gt;Anil Madhavapeddy&lt;/a&gt; showing off interactive demonstrations.&lt;/p&gt;
&lt;p&gt;Meanwhile, another significant announcement has been that Xen is &lt;a href=&quot;http://www.linuxfoundation.org/news-media/announcements/2013/04/xen-become-linux-foundation-collaborative-project&quot;&gt;joining the Linux Foundation&lt;/a&gt; as a collaborative project.  This is great news for Mirage: as a library operating system, we can operate just as easily under other hypervisors, and even on bare-metal devices such as the &lt;a href=&quot;http://raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt;.  We're very much looking forward to getting the Xen-based developer release done, and interacting with the wider Linux community (and FreeBSD, for that matter, thanks to Gabor Pali's &lt;a href=&quot;https://github.com/pgj/mirage-kfreebsd&quot;&gt;kFreeBSD&lt;/a&gt; backend).&lt;/p&gt;
&lt;p&gt;Here's some other significant news from the past few months:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ocamlpro.com/blog/2013/03/14/opam-1.0.0.html&quot;&gt;OPAM 1.0 was released&lt;/a&gt;, giving Mirage a solid package manager for handling the many libraries required to glue an application together.  &lt;a href=&quot;https://github.com/vbmithr&quot;&gt;Vincent Bernardoff&lt;/a&gt; joined the team at Citrix and has been building a Mirage build-frontend called &lt;a href=&quot;https://github.com/mirage/mirari&quot;&gt;Mirari&lt;/a&gt; to hide much of the system complexity from a user who isn't too familiar with either Xen or OCaml.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;A new group called the &lt;a href=&quot;http://ocaml.io&quot;&gt;OCaml Labs&lt;/a&gt; has started up in the &lt;a href=&quot;http://www.cl.cam.ac.uk&quot;&gt;Cambridge Computer Laboratory&lt;/a&gt;, and is working on improving the OCaml toolchain and platform.  This gives Mirage a big boost, as we can re-use several of the documentation, build and test improvements in our own releases.  You can read up on the group's activities via the &lt;a href=&quot;http://ocaml.io/news&quot;&gt;monthly updates&lt;/a&gt;, or browse through the various &lt;a href=&quot;http://ocaml.io/tasks&quot;&gt;projects&lt;/a&gt;.  One of the more important projects is the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#OCamlot&quot;&gt;OCamlot&lt;/a&gt; continuous build infrastructure, which will also be testing Mirage kernels as one of the supported backends.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;As we head into release mode, we've started &lt;a href=&quot;http://openmirage.org/wiki/tag/overview/meetings&quot;&gt;weekly meetings&lt;/a&gt; to coordinate all the activities.  We're keeping notes as we go along, so you should be able to skim the notes and &lt;a href=&quot;https://lists.cam.ac.uk/pipermail/cl-mirage/&quot;&gt;mailing list archives&lt;/a&gt; to get a feel for the overall activities.  Anil is maintaining a &lt;a href=&quot;http://openmirage.org/wiki/dev-preview-checklist&quot;&gt;release checklist&lt;/a&gt; for the summer developer preview.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;Anil (along with Yaron Minsky and Jason Hickey) is finishing up an O'Reilly book on &lt;a href=&quot;http://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt;, which will be a useful guide to using OCaml for systems and network programming. If you'd like to review an early copy, please get in touch.  The final book is anticipated to be released towards the end of the year, with a &lt;a href=&quot;http://shop.oreilly.com/category/roughcuts.do&quot;&gt;Rough Cut&lt;/a&gt; at the end of the summer.&lt;/p&gt;
&lt;/li&gt;&lt;li&gt;&lt;p&gt;The core system was described in an &lt;a href=&quot;http://anil.recoil.org/papers/2013-asplos-mirage.pdf&quot;&gt;ASPLOS 2013&lt;/a&gt; paper, which should help you understand the background behind library operating systems. Some of the Mirage libraries are also currently being integrated into the next-generation &lt;a href=&quot;http://blogs.citrix.com/2012/05/17/introducing-windsor-a-new-xen-based-virtualization-architecture/&quot;&gt;Windsor&lt;/a&gt; release of the Xen Cloud Platform, which means that several of the libraries will be used in production and hence move beyond research-quality code.&lt;/p&gt;
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;In the next few months, the installation notes and getting started guides will
all be revamped to match the reality of the new tooling, so expect some flux
there.   If you want to take an early try of Mirage beforehand, don't forget to
hop on the &lt;code&gt;#mirage&lt;/code&gt; IRC channel on Freenode and ping us with questions
directly.  We will also be migrating some of the project infrastructure to be fully
self-hosted on Mirage and Xen, and placing some of the services onto the new &lt;a href=&quot;http://xenproject.org&quot;&gt;xenproject.org&lt;/a&gt; infrastructure.&lt;/p&gt;

   </content><id>https://mirage.io/blog/the-road-to-a-dev-release</id><title type="text">The road to a developer preview at OSCON 2013</title><updated>2013-05-20T16:20:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry><entry><link href="http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#May%202013" rel="alternate"/><contributor><uri>http://www.cl.cam.ac.uk/projects/ocamllabs/news/atom.xml</uri><name>OCL Monthly News</name></contributor><content type="html">
      &lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/thomas-nycoug-2013.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/thomas-nycoug-2013-thumb.jpg&quot; class=&quot;left&quot;/&gt;&lt;/a&gt;
May is exam time in Cambridge, and the corridors of the OCaml Labs resounded
with the wailing of frantic students finishing their dissertations and
preparing for exams.  We welcomed &lt;a href=&quot;https://github.com/vincent-botbol&quot;&gt;Vincent Botbol&lt;/a&gt; to join us for a summer internship,
and he started hacking on the new &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#OPAM%20Doc&quot;&gt;opam-doc&lt;/a&gt;
right away.&lt;/p&gt;
&lt;p&gt;Anil, Thomas, Leo and Amir also visited &lt;a href=&quot;http://janestreet.com&quot;&gt;Jane
Street&lt;/a&gt; HQ in New York City, where we had a productive
couple of days reviewing our projects and getting feedback from them about
approaches to multicore and type system enhancements. &lt;a href=&quot;http://ashishagarwal.org&quot;&gt;Ashish
Agarwal&lt;/a&gt; also organised a fun evening with the &lt;a href=&quot;http://www.meetup.com/NYC-OCaml/events/117222022/&quot;&gt;New
York OCaml Users Group&lt;/a&gt;,
where Anil and Thomas presented our plans for the nascent OCaml Platform.&lt;/p&gt;
&lt;h3&gt;Systems Projects&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;Mirage:&lt;/b&gt; This was a month of consolidation and bugfixing in Mirage.  We've
been settling into weekly meetings to coordinate the hacking between us and
Citrix, and the minutes (&lt;a href=&quot;http://www.openmirage.org/wiki/weekly-2013-05-14&quot;&gt;1&lt;/a&gt;
&lt;a href=&quot;http://www.openmirage.org/wiki/weekly-2013-05-21&quot;&gt;2&lt;/a&gt;
&lt;a href=&quot;http://www.openmirage.org/wiki/weekly-2013-05-28&quot;&gt;3&lt;/a&gt;) may be useful if you
want to catch up.  The biggest bugbear is always the build system, and we've
been exploring the use of &lt;a href=&quot;http://github.com/janestreet/jenga&quot;&gt;Jenga&lt;/a&gt; as the
eventual async-aware coordination and build system for running Mirage kernels.
Dave made great progress with a
&lt;a href=&quot;http://github.com/djs55/message-switch&quot;&gt;message-switch&lt;/a&gt; that coordinates
multiple kernels, and Balraj fixed several performance regressions in the
TCP/IP stack by building unit tests that spawn millions of parallel TCP
connections.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Signpost:&lt;/b&gt; We took a break from building prototypes to submit a paper on the
basic design to the USENIX Free and Open Communications (&lt;a href=&quot;https://www.usenix.org/conference/foci13&quot;&gt;FOCI
2013&lt;/a&gt;) workshop.  Haris and Heidi
blazed a path on writing this paper, and we've got even more ideas rolling
around about how to use DNSSEC to break the cloud deadlock.  The
&lt;a href=&quot;http://github.com/mirage/ocaml-dns&quot;&gt;ocaml-dns&lt;/a&gt; continues to grow features too.&lt;/p&gt;
&lt;h3&gt;Platform Projects&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/nycoug-drinkup-2013.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/nycoug-drinkup-2013-thumb.jpg&quot; class=&quot;right&quot;/&gt;&lt;/a&gt;
&lt;b&gt;Ctypes:&lt;/b&gt; Jeremy
&lt;a href=&quot;https://sympa.inria.fr/sympa/arc/caml-list/2013-06/msg00046.html&quot;&gt;announced&lt;/a&gt;
the first release of a new foreign-function mechanism for OCaml that doesn't
require you to write any C stubs at all!  You can browse the &lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes&quot;&gt;source
code&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ocamllabs/ocaml-ctypes/wiki/ctypes-tutorial&quot;&gt;tutorial&lt;/a&gt;, and
install it via OPAM.  This is very much the first 0.1 release, and we have
exciting future developments to turn this into a full-fledged replacement for
the fast-but-rather-difficult-to-use-right OCaml FFI.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;OPAM-doc:&lt;/b&gt; Vincent Botbol started building on Leo's work on the new
&lt;a href=&quot;http://github.com/vincent-botbol/opam-doc&quot;&gt;opam-doc&lt;/a&gt; tool. This is intended to
replace the venerable &lt;code&gt;ocamldoc&lt;/code&gt; with one that uses all the latest features of
the compiler.  In particular, it can use the new typed AST &lt;code&gt;cmt&lt;/code&gt; output to
avoid duplicating the compiler functionality, and can also build up a global
package table to generate complete cross-references across an entire OPAM 
collection.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;OCamlot:&lt;/b&gt; David has been building up the libraries and tools needed for
the &lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/tasks/platform.html#OCamlot%200.2.0&quot;&gt;continuous build&lt;/a&gt; infrastructure.
This includes much-improved
&lt;a href=&quot;http://github.com/avsm/ocaml-github&quot;&gt;ocaml-github&lt;/a&gt;, bindings, which are now
being used to power the &lt;a href=&quot;https://realworldocaml.org&quot;&gt;Real World OCaml&lt;/a&gt; site as
well as well as OCamlot.  In addition, he's got an interesting collection of
regular expressions to automatically triage common failures from OPAM
(such as missing external dependencies), that should help reduce the manual
burden of getting thousands of tests results dumped on the small OPAM team.&lt;/p&gt;
&lt;h3&gt;Compiler Projects&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/janestreet-hq-2013.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/janestreet-hq-2013-thumb.jpg&quot; class=&quot;left&quot;/&gt;&lt;/a&gt;
&lt;b&gt;OCaml-Java&lt;/b&gt;: Xavier Clerc has been hacking away at his next-generation
OCaml-Java backend (using many new features in JDK7). He's released a
&lt;a href=&quot;http://ocamljava.x9c.fr/preview/concurrency.html&quot;&gt;preview&lt;/a&gt; of the bindings to
Java concurrency, and is looking for feedback on it.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Performance profiling&lt;/b&gt;: Mark Shinwell has been hacking on improving the
integration of the runtime with &lt;code&gt;perf&lt;/code&gt;.  This should give us the hooks to
reliably track where memory was allocated.  His branch isn't going to land in
OCaml 4.1, but should be available as an OPAM switch for people to easily
try out when it's more stable.&lt;/p&gt;
&lt;h3&gt;Outreach&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;OCaml.org:&lt;/b&gt; Philippe and Amir have been putting their heads together with
Christophe and Ashish to turn the &lt;a href=&quot;http://ocaml.org&quot;&gt;ocaml.org&lt;/a&gt; build pipeline
into something a little more structured.  Philippe is building a &lt;a href=&quot;https://github.com/pw374/MPP-language-blender&quot;&gt;template
processor&lt;/a&gt; for this purpose.
The OCaml site is a more complicated than the average site due to our desire to
embed &lt;a href=&quot;http://ocsigen.org/js_of_ocaml&quot;&gt;js_of_ocaml&lt;/a&gt; interactive toplevels
throughout the tutorials, and also to have active OPAM integration throughout
the site to make it easier for newcomers to sample the language.&lt;/p&gt;
&lt;p&gt;The design of a handful of pages are also now available to preview, if you
don't mind some manual git cloning. The best way to do this is to clone the
&lt;a href=&quot;https://github.com/ocamllabs/ocaml.org-temp&quot;&gt;temporary repo&lt;/a&gt; onto your local
machine and look in the &lt;code&gt;new-design/_site&lt;/code&gt; directory.  There are examples of
the home page, 100 lines of OCaml page and several others.  Since we're just
getting started with applying these changes the site isn't clicky (yet).  For
some extra fun, try resizing your browser window and see how the pages reflow
to suit smaller (mobile) screens!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/nyc-trip-balcony-view-2013.jpg&quot;&gt;&lt;img src=&quot;http://www.cl.cam.ac.uk/projects/ocamllabs/images/nyc-trip-balcony-view-2013-thumb.jpg&quot; class=&quot;right&quot;/&gt;&lt;/a&gt;
&lt;b&gt;Real World OCaml:&lt;/b&gt; Anil, Yaron and Jason continue to work hard on getting
a release out of the door.  We shipped a final alpha6 this month that is 
chapter-complete, and have been preparing for a big public June release of
the book.  Thousands of comments have been received and closed already,
making this an unusually active (but incredibly useful) ongoing review
process.  Leo and Jeremy also contributed portions of text for the Objects
and FFI chapters in alpha6, and join Stephen Weeks as external contributors
to the book.&lt;/p&gt;
&lt;p&gt;Meanwhile, Leo himself has recovered from the elation of being granted his PhD,
to the harsh reality of having to finish corrections.  He has been forced by
his colleagues to stop hacking on OCaml and submit his final thesis.  Rumours
are that he will reemerge in June after delivering his &lt;a href=&quot;http://staticanalysis.org/SAS13/papers.html&quot;&gt;SAS
2013&lt;/a&gt; talk on using an
implication-algebra generalisation of logic programming to concisely analyse
OpenMP programs for parallisation opportunities.&lt;/p&gt;
&lt;p&gt;This month's talk was courtesy of &lt;a href=&quot;http://www.lip6.fr/actualite/personnes-fiche.php?ident=D1161&amp;amp;LANG=en&quot;&gt;Mathias Bourgoin&lt;/a&gt;,
who visited from France and gave a talk on his PhD work on GPU processing.  His
tool, &lt;a href=&quot;http://www.algo-prog.info/spoc/web/index.php?id=spoc&quot;&gt;SPOC&lt;/a&gt; has been
released onto OPAM and is a set of easy-to-use tools for generating CUDA and
OpenCL code, and also a camlp4 extension to write external kernels directly in
OCaml.  Thanks for visiting, Mathias!&lt;/p&gt;

   </content><id>http://www.cl.cam.ac.uk/projects/ocamllabs/news/index.html#May%202013</id><title type="text">May 2013 news update</title><updated>2013-05-01T12:00:00+00:00</updated><author><email></email><name>Anil Madhavapeddy</name></author></entry></feed>